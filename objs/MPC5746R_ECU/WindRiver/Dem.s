#$$eb
#$$sz 0		- Size opt info
#$$ss 0		- XO option
#$$sg 1		- Xoptimized-debug-off option and	- g option
#$$fp 0		- Floating point mode
#$$m2		- PowerPC mnemonics
#$$pVLE		- PowerPC VLE encoding
#$$oPPCE200Z4
#$$ko 1		- Reorder info
	.file		"Dem.c"
#$$dg 1
	.section	.PPC.EMB.apuinfo,,@note
	.4byte		8
	.4byte		8+4
	.4byte		2
	.byte		"APUinfo"
	.byte		0
	.align		2
	.4byte		0x01040001
	.4byte		0x00400001
	.4byte		0x01010001

	.section	.text_vle
	.section	.debug_line,,n
.L8:
	.section	.text_vle
#$$ld
.L4:
	.0byte		.L2
	.d2_line_start	.debug_line
	.section	.text_vle
# FUNC(void, DEM_CODE) Dem_EnterInChronologicalList(uint8 InternalOrigin, uint8 EntryIndex)
	.align		2
	.section	.text_vle
	.d2file		"d:\\VSB_Demo\\VSTAR_MPC5746R_Diab_PR_4.2.2_g_3.0_10\\VSTAR\\BSWs\\DIAG\\Dem\\ssc\\make\\..\\src\\Dem.c"
        .d2line         7693,22
#$$ld
.L2367:

#$$bf	Dem_EnterInChronologicalList,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,r31,cr0,lr
	.globl		Dem_EnterInChronologicalList
	.d2_cfa_start __cie
Dem_EnterInChronologicalList:
.Llo1:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)		# InternalOrigin=r0
	.d2_cfa_offset    108,-1
	mr		r0,r3		# InternalOrigin=r0 InternalOrigin=r3
	mr		r31,r4		# EntryIndex=r31 EntryIndex=r4
	.d2prologue_end
# {
#    Uint8NvPtrType pFirst = GetFirstEvMemEntryPtr(InternalOrigin);
	.d2line		7695
.Llo11:
	lis		r4,(Dem_LCfg+20)@ha		# pLast=r4
.Llo12:
	e_add16i		r4,r4,(Dem_LCfg+20)@l		# pLast=r4 pLast=r4
	rlwinm		r0,r0,2,22,29		# InternalOrigin=r0 InternalOrigin=r0
	lwzux		r3,r4,r0		# pLast=r4
.Llo2:
	lwz		r3,4(r3)
.Llo14:
	mr		r3,r3		# pFirst=r3 pFirst=r3
#    Uint8NvPtrType pLast = GetLastEvMemEntryPtr(InternalOrigin);
	.d2line		7696
	lis		r4,(Dem_LCfg+20)@ha		# pLast=r4
	e_add16i		r4,r4,(Dem_LCfg+20)@l		# pLast=r4 pLast=r4
	lwzux		r5,r4,r0		# pLast=r4
	lwz		r4,8(r5)		# pLast=r4
	mr		r4,r4		# pLast=r4 pLast=r4
#    Uint8NvPtrType pNext = GetNextEvMemEntryPtr(InternalOrigin);
	.d2line		7697
	lis		r5,(Dem_LCfg+20)@ha
	e_add16i		r5,r5,(Dem_LCfg+20)@l
	lwzux		r6,r5,r0
	lwz		r5,12(r6)
.Llo18:
	mr		r5,r5		# pNext=r5 pNext=r5
#    Uint8NvPtrType pPrev = GetPreviousEvMemEntryPtr(InternalOrigin);
	.d2line		7698
	lis		r6,(Dem_LCfg+20)@ha
	e_add16i		r6,r6,(Dem_LCfg+20)@l
	lwzx		r6,r6,r0
	lwz		r6,16(r6)
.Llo19:
	mr		r6,r6		# pPrev=r6 pPrev=r6
# 
#    /* Add entry to chronologic list */
#    if (EntryIndex != *pLast)
	.d2line		7701
	rlwinm		r0,r31,0,24,31		# InternalOrigin=r0 EntryIndex=r31
.Llo3:
	lbz		r7,0(r4)		# pLast=r4
	se_cmp		r0,r7		# InternalOrigin=r0
	bc		1,2,.L1244	# eq
#    {  /* The latest element is not the same as the current.
#          No need to add entry if already latest in list. */
#      
#       if (DEM_EV_MEM_ENTRY_INVALID == *pFirst)
	.d2line		7705
.Llo4:
	lbz		r0,0(r3)		# InternalOrigin=r0 pFirst=r3
.Llo5:
	cmpi		0,0,r0,255		# InternalOrigin=r0
	bc		0,2,.L1246	# ne
#       {
#          /* Make current entry first */
#          *pFirst = EntryIndex;
	.d2line		7708
.Llo6:
	stb		r31,0(r3)		# pFirst=r3 EntryIndex=r31
#          pPrev[EntryIndex] = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		7709
	diab.li		r0,255		# InternalOrigin=r0
.Llo7:
	rlwinm		r3,r31,0,24,31		# pFirst=r3 EntryIndex=r31
.Llo15:
	stbx		r0,r6,r3		# pPrev=r6 InternalOrigin=r0
#          pNext[EntryIndex] = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		7710
	stbx		r0,r5,r3		# pNext=r5 InternalOrigin=r0
	b		.L1247
.L1246:
#       }
#       else
#       {
#          /* Link latest to current */
#          pNext[*pLast] = EntryIndex;
	.d2line		7715
.Llo8:
	lbz		r3,0(r4)		# pFirst=r3 pLast=r4
.Llo16:
	stbux		r31,r3,r5		# pFirst=r3 EntryIndex=r31
# 
#          /* Link current to latest */
#          pPrev[EntryIndex] = *pLast;
	.d2line		7718
	lbz		r0,0(r4)		# InternalOrigin=r0 pLast=r4
.Llo9:
	rlwinm		r3,r31,0,24,31		# pFirst=r3 EntryIndex=r31
.Llo17:
	stbx		r0,r6,r3		# pPrev=r6 InternalOrigin=r0
#          pNext[EntryIndex] = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		7719
	diab.li		r0,255		# InternalOrigin=r0
	stbx		r0,r5,r3		# pNext=r5 InternalOrigin=r0
.L1247:
#       }
# 
#       /* Make current entry latest */
#       *pLast = EntryIndex;
	.d2line		7723
.Llo10:
	stb		r31,0(r4)		# pLast=r4 EntryIndex=r31
.L1244:
#    }
# }
	.d2line		7725
	.d2epilogue_begin
.Llo13:
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# InternalOrigin=r0
	mtspr		lr,r0		# InternalOrigin=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2368:
	.type		Dem_EnterInChronologicalList,@function
	.size		Dem_EnterInChronologicalList,.-Dem_EnterInChronologicalList
# Number of nodes = 117

# Allocations for Dem_EnterInChronologicalList
#	?a4		InternalOrigin
#	?a5		EntryIndex
#	?a6		pFirst
#	?a7		pLast
#	?a8		pNext
#	?a9		pPrev
# static FUNC(uint8, DEM_CODE) AllocateEventMemoryEntry(Dem_EventIdType EventId,
	.align		1
	.section	.text_vle
        .d2line         2692,30
#$$ld
.L2387:

#$$bf	AllocateEventMemoryEntry,interprocedural,rasave,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,r8,r26,r27,r28,r29,r30,r31,cr0,lr
	.d2_cfa_start __cie
AllocateEventMemoryEntry:
.Llo20:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	26,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
	mr		r30,r4		# origin=r30 origin=r4
.Llo24:
	mr		r29,r5		# ppEvMemEntry=r29 ppEvMemEntry=r5
	.d2prologue_end
#       uint8 origin,
#       P2VAR(Dem_NvEvMemEntryPtrType, AUTOMATIC, DEM_APPL_DATA) ppEvMemEntry)
# {
#    uint8 evMemEntryIndex = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		2696
.Llo25:
	diab.li		r3,255		# evMemEntryIndex=r3
#    uint8 i;
#    P2CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC, DEM_APPL_CONST) pEvMemEntries = Dem_GetEvMemEntriesPtr(origin);
#    Dem_NvEvMemEntryPtrType pEvMemEntry = NULL_PTR;
	.d2line		2699
.Llo21:
	diab.li		r27,0		# pEvMemEntry=r27
	.d2line		2698
.Llo33:
	lis		r4,(Dem_LCfg+20)@ha
	e_add16i		r4,r4,(Dem_LCfg+20)@l
	rlwinm		r0,r30,2,22,29		# origin=r30
	lwzx		r4,r4,r0
	lwz		r8,0(r4)
.Llo31:
	mr		r8,r8		# pEvMemEntries=r8 pEvMemEntries=r8
#    uint8 numEvMemEntries = Dem_MaxNumEvMemEntries[origin];
	.d2line		2700
.Llo32:
	lis		r4,Dem_MaxNumEvMemEntries@ha
	e_add16i		r4,r4,Dem_MaxNumEvMemEntries@l
	rlwinm		r0,r30,0,24,31		# origin=r30
	lbzx		r26,r4,r0
.Llo34:
	mr		r26,r26		# numEvMemEntries=r26 numEvMemEntries=r26
# 
#    for (i = (uint8)0; (i < numEvMemEntries) && (DEM_EV_MEM_ENTRY_INVALID == evMemEntryIndex); i++)
	.d2line		2702
	diab.li		r28,0
.L317:
.Llo22:
	rlwinm		r4,r28,0,24,31		# i=r4 i=r28
.Llo26:
	rlwinm		r0,r26,0,24,31		# numEvMemEntries=r26
	se_cmp		r4,r0		# i=r4
	bc		0,0,.L319	# ge
	rlwinm		r0,r3,0,24,31		# evMemEntryIndex=r3
	cmpi		0,0,r0,255
	bc		0,2,.L319	# ne
#    {
#       pEvMemEntry = pEvMemEntries[i];
	.d2line		2704
	rlwinm		r4,r28,2,22,29		# i=r4 i=r28
	lwzux		r27,r4,r8		# pEvMemEntry=r27 i=r4
	mr		r27,r27		# pEvMemEntry=r27 pEvMemEntry=r27
#       if (DEM_EVENTID_INVALID == pEvMemEntry->event_id)
	.d2line		2705
	lhz		r0,0(r27)		# pEvMemEntry=r27
	se_cmpi		r0,0
	bc		0,2,.L320	# ne
#       {
#          /* Found an empty entry, enter the event */
#          pEvMemEntry->event_id = EventId;
	.d2line		2708
	sth		r31,0(r27)		# pEvMemEntry=r27 EventId=r31
# 
#          /* Insert entry in chronological list */
#          Dem_EnterInChronologicalList(origin, i);
	.d2line		2711
	mr		r3,r30		# origin=r3 origin=r30
	mr		r4,r28		# i=r4 i=r28
	bl		Dem_EnterInChronologicalList
# 
#          evMemEntryIndex = i;
	.d2line		2713
	mr		r3,r28		# evMemEntryIndex=r3 evMemEntryIndex=r28
.L320:
#       }
#    }
	.d2line		2715
	diab.addi		r4,r28,1		# i=r4 i=r28
	se_addi		r28,1		# i=r28 i=r28
	b		.L317
.L319:
# 
#    if (DEM_EV_MEM_ENTRY_INVALID == evMemEntryIndex)
	.d2line		2717
	rlwinm		r0,r3,0,24,31		# evMemEntryIndex=r3
	cmpi		0,0,r0,255
	bc		0,2,.L321	# ne
#    {
#       *ppEvMemEntry = NULL_PTR;
	.d2line		2719
.Llo23:
	diab.li		r0,0
.Llo30:
	stw		r0,0(r29)		# ppEvMemEntry=r29
	b		.L322
.L321:
#    }
#    else
#    {
#       *ppEvMemEntry = pEvMemEntry;
	.d2line		2723
	stw		r27,0(r29)		# ppEvMemEntry=r29 pEvMemEntry=r27
.L322:
#    }
#    return evMemEntryIndex;
	.d2line		2725
.Llo27:
	rlwinm		r3,r3,0,24,31		# evMemEntryIndex=r3 evMemEntryIndex=r3
# }
	.d2line		2726
	.d2epilogue_begin
.Llo28:
	lmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	2,10
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo29:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2388:
	.type		AllocateEventMemoryEntry,@function
	.size		AllocateEventMemoryEntry,.-AllocateEventMemoryEntry
# Number of nodes = 86

# Allocations for AllocateEventMemoryEntry
#	?a4		EventId
#	?a5		origin
#	?a6		ppEvMemEntry
#	?a7		evMemEntryIndex
#	?a8		i
#	?a9		pEvMemEntries
#	?a10		pEvMemEntry
#	?a11		numEvMemEntries
# static FUNC(boolean, DEM_CODE) ConvertToIntDtcGroupId(uint32 DTCGroup,
	.align		1
	.section	.text_vle
        .d2line         4657,32
#$$ld
.L2415:

#$$bf	ConvertToIntDtcGroupId,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,r31,cr0,lr
	.d2_cfa_start __cie
ConvertToIntDtcGroupId:
.Llo35:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# DTCGroup=r3 DTCGroup=r3
	mr		r4,r4		# pIntDtcGroup=r4 pIntDtcGroup=r4
	.d2prologue_end
#       P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) pIntDtcGroup)
# {
#    uint8 i;
#    boolean retVal = FALSE;
	.d2line		4661
	diab.li		r6,0		# retVal=r6
# 
#    for (i = 0; (i < Dem_LCfg.num_dtc_groups) && (FALSE == retVal); i++)
	.d2line		4663
.Llo38:
	diab.li		r5,0
.L621:
.Llo37:
	rlwinm		r0,r5,0,24,31		# i=r5
	lis		r7,(Dem_LCfg+140)@ha
	lbz		r7,(Dem_LCfg+140)@l(r7)
	se_cmp		r0,r7
	bc		0,0,.L623	# ge
	rlwinm		r0,r6,0,24,31		# retVal=r6
	se_cmpi		r0,0
	bc		0,2,.L623	# ne
#    {
#       if (Dem_LCfg.p_internal_dtc_groups[i].dtc_group == DTCGroup)
	.d2line		4665
	rlwinm		r0,r5,0,24,31		# i=r5
	lis		r7,(Dem_LCfg+168)@ha
	lwz		r7,(Dem_LCfg+168)@l(r7)
	rlwinm		r31,r0,4,0,27
	se_slwi		r0,2
	subf		r0,r0,r31
	lwzx		r0,r7,r0
	se_cmpl		r0,r3		# DTCGroup=r3
	bc		0,2,.L624	# ne
#       {
#          *pIntDtcGroup = i;
	.d2line		4667
	stb		r5,0(r4)		# pIntDtcGroup=r4 i=r5
#          retVal = TRUE;
	.d2line		4668
	diab.li		r6,1		# retVal=r6
.L624:
#       }
#    }
	.d2line		4670
	diab.addi		r0,r5,1		# i=r5
	se_addi		r5,1		# i=r5 i=r5
	b		.L621
.L623:
# 
#    return retVal;
	.d2line		4672
.Llo36:
	rlwinm		r3,r6,0,24,31		# retVal=r6
# }
	.d2line		4673
	.d2epilogue_begin
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo39:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2416:
	.type		ConvertToIntDtcGroupId,@function
	.size		ConvertToIntDtcGroupId,.-ConvertToIntDtcGroupId
# Number of nodes = 44

# Allocations for ConvertToIntDtcGroupId
#	?a4		DTCGroup
#	?a5		pIntDtcGroup
#	?a6		$$18
#	?a7		i
#	?a8		retVal
# static FUNC(boolean, DEM_CODE) GetIntDtcGroupId(uint32 dtc, P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) pIntDtcGroup)
	.align		1
	.section	.text_vle
        .d2line         4675,32
#$$ld
.L2429:

#$$bf	GetIntDtcGroupId,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,r31,cr0,lr
	.d2_cfa_start __cie
GetIntDtcGroupId:
.Llo40:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# dtc=r3 dtc=r3
	mr		r4,r4		# pIntDtcGroup=r4 pIntDtcGroup=r4
	.d2prologue_end
# {
#    uint8 i;
#    boolean retVal = FALSE;
	.d2line		4678
	diab.li		r6,0		# retVal=r6
# 
#    for (i = 0; (i < Dem_LCfg.num_dtc_groups) && (FALSE == retVal); i++)
	.d2line		4680
.Llo43:
	diab.li		r5,0
.L629:
.Llo42:
	rlwinm		r0,r5,0,24,31		# i=r5
	lis		r7,(Dem_LCfg+140)@ha
	lbz		r7,(Dem_LCfg+140)@l(r7)
	se_cmp		r0,r7
	bc		0,0,.L631	# ge
	rlwinm		r0,r6,0,24,31		# retVal=r6
	se_cmpi		r0,0
	bc		0,2,.L631	# ne
#    {
#       if ((dtc >= Dem_LCfg.p_internal_dtc_groups[i].start_dtc_value) &&
	.d2line		4682
	rlwinm		r0,r5,0,24,31		# i=r5
	lis		r7,(Dem_LCfg+168)@ha
	lwz		r7,(Dem_LCfg+168)@l(r7)
	rlwinm		r31,r0,4,0,27
	se_slwi		r0,2
	subf		r0,r0,r31
	se_add		r7,r0
	lwz		r0,4(r7)
	se_cmpl		r0,r3		# dtc=r3
	bc		1,1,.L632	# gt
	rlwinm		r0,r5,0,24,31		# i=r5
	lis		r7,(Dem_LCfg+168)@ha
	lwz		r31,(Dem_LCfg+168)@l(r7)
	rlwinm		r7,r0,4,0,27
	se_slwi		r0,2
	subf		r0,r0,r7
	se_add		r31,r0
	lwz		r0,8(r31)
	se_cmpl		r0,r3		# dtc=r3
	bc		0,1,.L632	# le
#             (dtc < Dem_LCfg.p_internal_dtc_groups[i].end_dtc_value))
#       {
#          *pIntDtcGroup = i;
	.d2line		4685
	stb		r5,0(r4)		# pIntDtcGroup=r4 i=r5
#          retVal = TRUE;
	.d2line		4686
	diab.li		r6,1		# retVal=r6
.L632:
#       }
#    }
	.d2line		4688
	diab.addi		r0,r5,1		# i=r5
	se_addi		r5,1		# i=r5 i=r5
	b		.L629
.L631:
# 
#    return retVal;
	.d2line		4690
.Llo41:
	rlwinm		r3,r6,0,24,31		# retVal=r6
# }
	.d2line		4691
	.d2epilogue_begin
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo44:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2430:
	.type		GetIntDtcGroupId,@function
	.size		GetIntDtcGroupId,.-GetIntDtcGroupId
# Number of nodes = 61

# Allocations for GetIntDtcGroupId
#	?a4		dtc
#	?a5		pIntDtcGroup
#	?a6		$$20
#	?a7		$$19
#	?a8		i
#	?a9		retVal
# static FUNC(boolean, DEM_CODE) IsEvMemStorageEnabled(Dem_EventIdType EventId)
	.align		1
	.section	.text_vle
        .d2line         2913,32
#$$ld
.L2440:

#$$bf	IsEvMemStorageEnabled,interprocedural,rasave,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,r30,r31,cr0,lr
	.d2_cfa_start __cie
IsEvMemStorageEnabled:
.Llo45:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	30,31,1,1
	stw		r0,36(r1)		# EventId=r0
	.d2_cfa_offset    108,-1
	mr		r0,r3		# EventId=r0 EventId=r3
	.d2prologue_end
# {
#    uint8 intDtcGroup;
#    uint16 intDtc;
#    boolean retVal = TRUE;
	.d2line		2917
	diab.li		r30,1		# retVal=r30
# 
#    intDtc = Dem_GetEventIntDtc(EventId);
	.d2line		2919
	lis		r3,Dem_pPbCfg@ha
.Llo46:
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,128(r3)
.Llo47:
	rlwinm		r0,r0,1,15,30		# EventId=r0 EventId=r0
	se_add		r3,r0		# EventId=r0
	lhz		r31,-2(r3)		# intDtc=r31
.Llo59:
	mr		r31,r31		# intDtc=r31 intDtc=r31
#    if (DEM_INT_DTC_INVALID == intDtc)
	.d2line		2920
	rlwinm		r0,r31,0,16,31		# EventId=r0 intDtc=r31
	cmpli		0,0,r0,65535		# EventId=r0
	bc		0,2,.L329	# ne
#    {
#       /* ECU-internal event, i.e. without connected DTC */
#       retVal = TRUE;
	.d2line		2923
.Llo48:
	diab.li		r30,1		# retVal=r30
	b		.L330
.L329:
#    }
#    else if (FALSE == Dem_LCfg.p_dtc_storage[Dem_LCfg.num_dtc_groups - 1])
	.d2line		2925
	lis		r3,(Dem_LCfg+112)@ha
	lwz		r0,(Dem_LCfg+112)@l(r3)		# EventId=r0
.Llo49:
	lis		r3,(Dem_LCfg+140)@ha
	lbz		r3,(Dem_LCfg+140)@l(r3)
	se_add		r3,r0		# EventId=r0
	lbz		r0,-1(r3)		# EventId=r0
	se_cmpi		r0,0		# EventId=r0
	bc		0,2,.L331	# ne
#    {
#       /* DTC-storage is disabled for group DEM_DTC_GROUP_ALL_DTCS */
#       retVal = FALSE;
	.d2line		2928
.Llo50:
	diab.li		r30,0		# retVal=r30
	b		.L330
.L331:
#    }
#    else if ((TRUE == ConvertToIntDtcGroupId(DEM_DTC_GROUP_EMISSION_REL_DTCS, &intDtcGroup)) &&
	.d2line		2930
	diab.addi		r4,r1,8
	diab.li		r3,0
	bl		ConvertToIntDtcGroupId
	rlwinm		r3,r3,0,24,31
	se_cmpi		r3,1
	bc		0,2,.L333	# ne
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,72(r3)
	rlwinm		r0,r31,1,15,30		# EventId=r0 intDtc=r31
.Llo51:
	lhzx		r0,r3,r0		# EventId=r0
	se_cmpi		r0,0		# EventId=r0
	bc		1,2,.L333	# eq
.Llo52:
	lis		r3,(Dem_LCfg+112)@ha
	lwz		r3,(Dem_LCfg+112)@l(r3)
	lbz		r0,0(r3)		# EventId=r0
.Llo53:
	se_cmpi		r0,0		# EventId=r0
	bc		0,2,.L333	# ne
#             Dem_IsObdDtc(intDtc) &&
#             (FALSE == Dem_LCfg.p_dtc_storage[0]))
#    {
#       /* DTC-storage is disabled for group DEM_DTC_GROUP_EMISSION_REL_DTCS which this DTC belongs to. */
#       retVal = FALSE;
	.d2line		2935
.Llo54:
	diab.li		r30,0		# retVal=r30
	b		.L330
.L333:
#    }
#    else if (TRUE == GetIntDtcGroupId(GetUdsDtc(intDtc), &intDtcGroup))
	.d2line		2937
.Llo60:
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,76(r3)
.Llo61:
	rlwinm		r31,r31,2,14,29		# intDtc=r31 intDtc=r31
.Llo62:
	lwzx		r3,r3,r31
	diab.addi		r4,r1,8
	bl		GetIntDtcGroupId
	rlwinm		r3,r3,0,24,31
	se_cmpi		r3,1
	bc		0,2,.L330	# ne
#    {
#       if (FALSE == Dem_LCfg.p_dtc_storage[intDtcGroup])
	.d2line		2939
	lis		r3,(Dem_LCfg+112)@ha		# retVal=r3
	lwz		r3,(Dem_LCfg+112)@l(r3)		# retVal=r3 retVal=r3
	lbz		r0,8(r1)		# EventId=r0
.Llo55:
	lbzx		r0,r3,r0		# EventId=r0 retVal=r3
	se_cmpi		r0,0		# EventId=r0
#       {
#          /* DTC-storage is disabled for DTC associated with this event. */
#          retVal = FALSE;
	.d2line		2942
	isel		r3,0,r30,2		# retVal=r3 retVal=r30
.L336:
#       }
#       else
#       {
#          /* DTC-storage is enabled for DTC associated with this event. */
#          retVal = TRUE;
	.d2line		2947
.Llo56:
	diab.li		r0,1		# EventId=r0
.Llo57:
	isel		r30,r3,r0,2		# retVal=r30 retVal=r3 EventId=r0
.L330:
#       }
#    }
#    else
#    {
#       /* Will never be entered. */
#    }
# 
#    return retVal;
	.d2line		2955
.Llo58:
	rlwinm		r3,r30,0,24,31		# retVal=r3 retVal=r30
# }
	.d2line		2956
	.d2epilogue_begin
.Llo63:
	lmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	3,10
.Llo64:
	lwz		r0,36(r1)		# EventId=r0
	mtspr		lr,r0		# EventId=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2441:
	.type		IsEvMemStorageEnabled,@function
	.size		IsEvMemStorageEnabled,.-IsEvMemStorageEnabled
# Number of nodes = 123

# Allocations for IsEvMemStorageEnabled
#	?a4		EventId
#	SP,8		intDtcGroup
#	?a5		intDtc
#	?a6		retVal
# static FUNC(boolean, DEM_CODE) DtcRecordUpdateEnabled(Dem_EventIdType eventId)
	.align		1
	.section	.text_vle
        .d2line         2958,32
#$$ld
.L2451:

#$$bf	DtcRecordUpdateEnabled,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,cr0,lr
	.d2_cfa_start __cie
DtcRecordUpdateEnabled:
.Llo65:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
.Llo73:
	stw		r0,20(r1)		# intDtc=r0
	.d2_cfa_offset    108,-1
	mr		r0,r3		# eventId=r0 eventId=r3
	.d2prologue_end
# {
#    boolean retVal = TRUE;
	.d2line		2960
.Llo74:
	diab.li		r4,1		# retVal=r4
#    uint32 udsDtc;
#    uint16 intDtc = Dem_GetEventIntDtc(eventId);
	.d2line		2962
.Llo69:
	lis		r3,Dem_pPbCfg@ha
.Llo66:
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,128(r3)
.Llo67:
	rlwinm		r0,r0,1,15,30		# eventId=r0 eventId=r0
	se_add		r3,r0		# eventId=r0
	lhz		r0,-2(r3)		# eventId=r0
.Llo68:
	mr		r0,r0		# intDtc=r0 intDtc=r0
# 
#    if (DEM_INT_DTC_INVALID != intDtc)
	.d2line		2964
.Llo71:
	rlwinm		r3,r0,0,16,31		# intDtc=r0
	cmpli		0,0,r3,65535
	bc		1,2,.L345	# eq
#    {
#       udsDtc = GetUdsDtc(intDtc);
	.d2line		2966
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,76(r3)
	rlwinm		r0,r0,2,14,29		# intDtc=r0 intDtc=r0
	lwzx		r0,r3,r0		# intDtc=r0
	mr		r0,r0		# udsDtc=r0 udsDtc=r0
#       if ((DTCRecordUpdateDisabled == udsDtc) &&
	.d2line		2967
	lis		r3,DTCRecordUpdateDisabled@ha
	lwz		r3,DTCRecordUpdateDisabled@l(r3)
	se_cmpl		r3,r0		# udsDtc=r0
	bc		0,2,.L345	# ne
	se_cmpi		r0,0		# udsDtc=r0
#           (0 != udsDtc))
#       {
#          retVal = FALSE;
	.d2line		2970
	diab.li		r0,0		# udsDtc=r0
.Llo75:
	isel		r4,r4,r0,2		# retVal=r4 retVal=r4 udsDtc=r0
.L345:
#       }
#    }
#    return retVal;
	.d2line		2973
.Llo72:
	rlwinm		r3,r4,0,24,31		# retVal=r4
# }
	.d2line		2974
	.d2epilogue_begin
	lwz		r0,20(r1)		# intDtc=r0
	mtspr		lr,r0		# intDtc=lr
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo70:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2452:
	.type		DtcRecordUpdateEnabled,@function
	.size		DtcRecordUpdateEnabled,.-DtcRecordUpdateEnabled
# Number of nodes = 44

# Allocations for DtcRecordUpdateEnabled
#	?a4		eventId
#	?a5		retVal
#	?a6		udsDtc
#	?a7		intDtc
# static FUNC(void, DEM_CODE) ClearFreezeFrameData(Dem_NvEvMemEntryPtrType pEvMemEntry,
	.align		1
	.section	.text_vle
        .d2line         4857,29
#$$ld
.L2463:

#$$bf	ClearFreezeFrameData,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
ClearFreezeFrameData:
.Llo76:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# pEvMemEntry=r31 pEvMemEntry=r3
	mr		r30,r4		# pFFStorage=r30 pFFStorage=r4
	.d2prologue_end
#       P2CONST(Dem_DataStorageType, AUTOMATIC, DEM_APPL_CONST) pFFStorage)
# {
#    uint8 i;
#    uint16 ffIndex;
# 
#    /* Clear all freeze frame entries connected to the current event. */
#    for (i = 0; i < pEvMemEntry->num_stored_ff; i++)
	.d2line		4864
	diab.li		r29,0		# i=r29
.L674:
.Llo77:
	rlwinm		r3,r29,0,24,31		# ffIndex=r3 i=r29
.Llo78:
	lbz		r0,11(r31)		# pEvMemEntry=r31
	se_cmp		r3,r0		# ffIndex=r3
	bc		0,0,.L676	# ge
#    {
#       /* Mark the entry as free */
#       ffIndex = pEvMemEntry->ff_index[i];
	.d2line		4867
.Llo83:
	rlwinm		r3,r29,1,23,30		# ffIndex=r3 i=r29
.Llo84:
	se_add		r3,r31		# ffIndex=r3 ffIndex=r3 pEvMemEntry=r31
	lhz		r3,8(r3)		# ffIndex=r3 ffIndex=r3
	mr		r3,r3		# ffIndex=r3 ffIndex=r3
#       *pFFStorage->p_get_entry_occupied(ffIndex) = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		4868
	diab.li		r28,255
	lwz		r0,4(r30)		# pFFStorage=r30
	mtspr		ctr,r0
	rlwinm		r3,r3,0,16,31		# ffIndex=r3 ffIndex=r3
.Llo85:
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
.Llo86:
	stb		r28,0(r3)		# ffIndex=r3
#       /* Clear record number */
#       pEvMemEntry->record_numbers[i] = 0;
	.d2line		4870
	diab.li		r0,0
	rlwinm		r3,r29,0,24,31		# ffIndex=r3 i=r29
	se_add		r3,r31		# ffIndex=r3 ffIndex=r3 pEvMemEntry=r31
	stb		r0,10(r3)		# ffIndex=r3
#    }
	.d2line		4871
	diab.addi		r3,r29,1		# ffIndex=r3 i=r29
.Llo87:
	se_addi		r29,1		# i=r29 i=r29
	b		.L674
.L676:
#    pEvMemEntry->num_stored_ff = 0;
	.d2line		4872
.Llo80:
	diab.li		r3,0		# ffIndex=r3
.Llo81:
	stb		r3,11(r31)		# pEvMemEntry=r31 ffIndex=r3
# }
	.d2line		4873
	.d2epilogue_begin
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
.Llo79:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo82:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2464:
	.type		ClearFreezeFrameData,@function
	.size		ClearFreezeFrameData,.-ClearFreezeFrameData
# Number of nodes = 52

# Allocations for ClearFreezeFrameData
#	?a4		pEvMemEntry
#	?a5		pFFStorage
#	?a6		i
#	?a7		ffIndex
# static FUNC(void, DEM_CODE) ClearDevFreezeFrameData(Dem_NvEvMemEntryPtrType pEvMemEntry)
	.align		1
	.section	.text_vle
        .d2line         4927,29
#$$ld
.L2478:

#$$bf	ClearDevFreezeFrameData,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
ClearDevFreezeFrameData:
.Llo88:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	30,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r30,r3		# pEvMemEntry=r30 pEvMemEntry=r3
	.d2prologue_end
# {
#    uint16 ffIndex;
# 
#    /* Development freeze frame A */
#    if (Dem_LCfg.p_dev_a_ff_storage != NULL_PTR)
	.d2line		4932
	lis		r3,(Dem_LCfg+60)@ha
.Llo89:
	lwz		r0,(Dem_LCfg+60)@l(r3)
	se_cmpi		r0,0
	bc		1,2,.L680	# eq
#    {
#       ffIndex = pEvMemEntry->dev_a_ff_index;
	.d2line		4934
.Llo90:
	lhz		r0,4(r30)		# ffIndex=r0 pEvMemEntry=r30
.Llo92:
	mr		r0,r0		# ffIndex=r0 ffIndex=r0
#       if (ffIndex != DEM_FF_BUFFER_INVALID)
	.d2line		4935
	rlwinm		r3,r0,0,16,31		# ffIndex=r0
	cmpli		0,0,r3,65535
	bc		1,2,.L680	# eq
#       {
#          /* Mark the entry as free */
#          *Dem_LCfg.p_dev_a_ff_storage->p_get_entry_occupied(ffIndex) = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		4938
	diab.li		r31,255
	lis		r3,(Dem_LCfg+60)@ha
	lwz		r3,(Dem_LCfg+60)@l(r3)
	lwz		r3,4(r3)
	mtspr		ctr,r3
	rlwinm		r3,r0,0,16,31		# ffIndex=r0
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
.Llo93:
	stb		r31,0(r3)
.L680:
#       }
#    }
#    pEvMemEntry->dev_a_ff_index = DEM_FF_BUFFER_INVALID;
	.d2line		4941
	diab.li		r0,65535		# ffIndex=r0
.Llo94:
	sth		r0,4(r30)		# pEvMemEntry=r30 ffIndex=r0
# 
#    /* Development freeze frame B */
#    if (Dem_LCfg.p_dev_b_ff_storage != NULL_PTR)
	.d2line		4944
	lis		r3,(Dem_LCfg+68)@ha
	lwz		r0,(Dem_LCfg+68)@l(r3)		# ffIndex=r0
	se_cmpi		r0,0		# ffIndex=r0
	bc		1,2,.L682	# eq
#    {
#       ffIndex = pEvMemEntry->dev_b_ff_index;
	.d2line		4946
.Llo95:
	lhz		r0,6(r30)		# ffIndex=r0 pEvMemEntry=r30
.Llo96:
	mr		r0,r0		# ffIndex=r0 ffIndex=r0
#       if (ffIndex != DEM_FF_BUFFER_INVALID)
	.d2line		4947
	rlwinm		r3,r0,0,16,31		# ffIndex=r0
	cmpli		0,0,r3,65535
	bc		1,2,.L682	# eq
#       {
#          /* Mark the entry as free */
#          *Dem_LCfg.p_dev_b_ff_storage->p_get_entry_occupied(ffIndex) = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		4950
	diab.li		r31,255
	lis		r3,(Dem_LCfg+68)@ha
	lwz		r3,(Dem_LCfg+68)@l(r3)
	lwz		r3,4(r3)
	mtspr		ctr,r3
	rlwinm		r3,r0,0,16,31		# ffIndex=r0
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
.Llo97:
	stb		r31,0(r3)
.L682:
#       }
#    }
#    pEvMemEntry->dev_b_ff_index = DEM_FF_BUFFER_INVALID;
	.d2line		4953
	diab.li		r3,65535
	sth		r3,6(r30)		# pEvMemEntry=r30
# }
	.d2line		4954
	.d2epilogue_begin
	lmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	3,10
.Llo91:
	lwz		r0,36(r1)		# ffIndex=r0
	mtspr		lr,r0		# ffIndex=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2479:
	.type		ClearDevFreezeFrameData,@function
	.size		ClearDevFreezeFrameData,.-ClearDevFreezeFrameData
# Number of nodes = 78

# Allocations for ClearDevFreezeFrameData
#	?a4		pEvMemEntry
#	?a5		ffIndex
# static FUNC(void, DEM_CODE) ClearExtendedData(Dem_NvEvMemEntryPtrType pEvMemEntry,
	.align		1
	.section	.text_vle
        .d2line         4972,29
#$$ld
.L2486:

#$$bf	ClearExtendedData,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
ClearExtendedData:
.Llo98:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	30,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# pEvMemEntry=r31 pEvMemEntry=r3
	mr		r4,r4		# pEDStorage=r4 pEDStorage=r4
	.d2prologue_end
#       P2CONST(Dem_DataStorageType, AUTOMATIC, DEM_APPL_CONST) pEDStorage)
# {
#    uint16 index;
# 
#    if (TRUE == pEvMemEntry->ed_stored)
	.d2line		4977
	lbz		r0,12(r31)		# pEvMemEntry=r31
	se_cmpi		r0,1
	bc		0,2,.L686	# ne
#    {
#       /* Clear the extended data entry connected to the current event. */
#       index = pEvMemEntry->ed_storage_index;
	.d2line		4980
.Llo99:
	lhz		r3,2(r31)		# index=r3 pEvMemEntry=r31
.Llo100:
	mr		r3,r3		# index=r3 index=r3
#       *pEDStorage->p_get_entry_occupied(index) = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		4981
	diab.li		r30,255
	lwz		r0,4(r4)		# pEDStorage=r4
	mtspr		ctr,r0
	rlwinm		r3,r3,0,16,31		# index=r3 index=r3
.Llo105:
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
.Llo104:
	stb		r30,0(r3)		# index=r3
#       pEvMemEntry->ed_stored = FALSE;
	.d2line		4982
	diab.li		r0,0
	stb		r0,12(r31)		# pEvMemEntry=r31
.L686:
#    }
# }
	.d2line		4984
	.d2epilogue_begin
.Llo101:
	lmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	3,10
.Llo102:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo103:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2487:
	.type		ClearExtendedData,@function
	.size		ClearExtendedData,.-ClearExtendedData
# Number of nodes = 31

# Allocations for ClearExtendedData
#	?a4		pEvMemEntry
#	?a5		pEDStorage
#	?a6		index
# FUNC(void, DEM_CODE) Dem_RemoveFromChronologicalList(uint8 InternalOrigin, uint8 EntryIndex)
	.align		2
	.section	.text_vle
        .d2line         7751,22
#$$ld
.L2495:

#$$bf	Dem_RemoveFromChronologicalList,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,r31,cr0,lr
	.globl		Dem_RemoveFromChronologicalList
	.d2_cfa_start __cie
Dem_RemoveFromChronologicalList:
.Llo106:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)		# InternalOrigin=r0
	.d2_cfa_offset    108,-1
	mr		r0,r3		# InternalOrigin=r0 InternalOrigin=r3
.Llo107:
	mr		r31,r4		# EntryIndex=r31 EntryIndex=r4
	.d2prologue_end
# {
#    if (Dem_EvMemExist(InternalOrigin))
	.d2line		7753
.Llo108:
	lis		r3,(Dem_LCfg+20)@ha
	e_add16i		r3,r3,(Dem_LCfg+20)@l
	rlwinm		r4,r0,2,22,29		# InternalOrigin=r0
.Llo130:
	lwzx		r3,r3,r4
	se_cmpi		r3,0
	bc		1,2,.L1263	# eq
	.section	.text_vle
.L2500:
#    {
#       Uint8NvPtrType pFirst = GetFirstEvMemEntryPtr(InternalOrigin);
	.d2line		7755
.Llo109:
	lis		r4,(Dem_LCfg+20)@ha		# pLast=r4
.Llo136:
	e_add16i		r4,r4,(Dem_LCfg+20)@l		# pLast=r4 pLast=r4
.Llo110:
	rlwinm		r0,r0,2,22,29		# InternalOrigin=r0 InternalOrigin=r0
.Llo111:
	lwzux		r3,r4,r0		# pFirst=r3 pLast=r4
.Llo133:
	lwz		r3,4(r3)		# pFirst=r3 pFirst=r3
	mr		r3,r3		# pFirst=r3 pFirst=r3
#       Uint8NvPtrType pLast = GetLastEvMemEntryPtr(InternalOrigin);
	.d2line		7756
	lis		r4,(Dem_LCfg+20)@ha		# pLast=r4
	e_add16i		r4,r4,(Dem_LCfg+20)@l		# pLast=r4 pLast=r4
	lwzux		r5,r4,r0		# pLast=r4
	lwz		r4,8(r5)		# pLast=r4
	mr		r4,r4		# pLast=r4 pLast=r4
#       Uint8NvPtrType pNext = GetNextEvMemEntryPtr(InternalOrigin);
	.d2line		7757
	lis		r5,(Dem_LCfg+20)@ha
	e_add16i		r5,r5,(Dem_LCfg+20)@l
	lwzux		r6,r5,r0
	lwz		r5,12(r6)
.Llo140:
	mr		r5,r5		# pNext=r5 pNext=r5
#       Uint8NvPtrType pPrev = GetPreviousEvMemEntryPtr(InternalOrigin);
	.d2line		7758
	lis		r6,(Dem_LCfg+20)@ha
	e_add16i		r6,r6,(Dem_LCfg+20)@l
	lwzx		r6,r6,r0
	lwz		r6,16(r6)
.Llo141:
	mr		r6,r6		# pPrev=r6 pPrev=r6
# 
#       if ((*pLast == *pFirst) && (*pFirst == EntryIndex))
	.d2line		7760
	lbz		r0,0(r4)		# InternalOrigin=r0 pLast=r4
.Llo112:
	lbz		r7,0(r3)		# pFirst=r3
	se_cmp		r0,r7		# InternalOrigin=r0
	bc		0,2,.L1265	# ne
.Llo113:
	lbz		r0,0(r3)		# InternalOrigin=r0 pFirst=r3
.Llo114:
	rlwinm		r7,r31,0,24,31		# EntryIndex=r31
	se_cmp		r0,r7		# InternalOrigin=r0
	bc		0,2,.L1265	# ne
#       {  /* Single entry stored */
#          *pFirst = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		7762
.Llo115:
	diab.li		r0,255		# InternalOrigin=r0
.Llo116:
	stb		r0,0(r3)		# pFirst=r3 InternalOrigin=r0
#          *pLast = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		7763
	stb		r0,0(r4)		# pLast=r4 InternalOrigin=r0
	b		.L1266
.L1265:
#       }
#       else
#       {
#          /* Remove entry from chronologic list */
#          if (EntryIndex == *pLast)
	.d2line		7768
.Llo117:
	rlwinm		r0,r31,0,24,31		# InternalOrigin=r0 EntryIndex=r31
.Llo118:
	lbz		r7,0(r4)		# pLast=r4
	se_cmp		r0,r7		# InternalOrigin=r0
	bc		0,2,.L1267	# ne
#          {  /* Latest */
#             /* Make previous entry latest */
#             *pLast = pPrev[EntryIndex];
	.d2line		7771
.Llo119:
	rlwinm		r7,r31,0,24,31		# EntryIndex=r31
	lbzux		r0,r7,r6		# InternalOrigin=r0
.Llo120:
	stb		r0,0(r4)		# pLast=r4 InternalOrigin=r0
#             /* Release current from list */
#             pNext[pPrev[EntryIndex]] = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		7773
	diab.li		r0,255		# InternalOrigin=r0
	rlwinm		r4,r31,0,24,31		# pLast=r4 EntryIndex=r31
	lbzux		r3,r4,r6		# pFirst=r3 pLast=r4
	stbx		r0,r5,r3		# pNext=r5 InternalOrigin=r0
	b		.L1266
.L1267:
#          }
#          else if (EntryIndex == *pFirst)
	.d2line		7775
.Llo121:
	rlwinm		r0,r31,0,24,31		# InternalOrigin=r0 EntryIndex=r31
.Llo122:
	lbz		r4,0(r3)		# pLast=r4 pFirst=r3
.Llo137:
	se_cmp		r0,r4		# InternalOrigin=r0 pLast=r4
	bc		0,2,.L1269	# ne
#          {  /* First */
#             /* Make next entry first */
#             *pFirst = pNext[EntryIndex];
	.d2line		7778
.Llo123:
	rlwinm		r4,r31,0,24,31		# pLast=r4 EntryIndex=r31
.Llo138:
	lbzux		r0,r4,r5		# InternalOrigin=r0 pLast=r4
.Llo124:
	stb		r0,0(r3)		# pFirst=r3 InternalOrigin=r0
#             /* Release current from list */
#             pPrev[pNext[EntryIndex]] = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		7780
	diab.li		r0,255		# InternalOrigin=r0
	rlwinm		r4,r31,0,24,31		# pLast=r4 EntryIndex=r31
	lbzux		r3,r4,r5		# pFirst=r3 pLast=r4
.Llo134:
	stbx		r0,r6,r3		# pPrev=r6 InternalOrigin=r0
	b		.L1266
.L1269:
#          }
#          else
#          {  /* Not first, before latest */
#             /* Release current from list */
#             pNext[pPrev[EntryIndex]] = pNext[EntryIndex];
	.d2line		7785
.Llo125:
	rlwinm		r4,r31,0,24,31		# pLast=r4 EntryIndex=r31
.Llo139:
	lbzux		r0,r4,r5		# InternalOrigin=r0 pLast=r4
.Llo126:
	rlwinm		r4,r31,0,24,31		# pLast=r4 EntryIndex=r31
	lbzux		r3,r4,r6		# pFirst=r3 pLast=r4
	stbx		r0,r5,r3		# pNext=r5 InternalOrigin=r0
#             pPrev[pNext[EntryIndex]] = pPrev[EntryIndex];
	.d2line		7786
	rlwinm		r4,r31,0,24,31		# pLast=r4 EntryIndex=r31
	lbzux		r3,r4,r6		# pFirst=r3 pLast=r4
.Llo135:
	rlwinm		r4,r31,0,24,31		# pLast=r4 EntryIndex=r31
	lbzux		r0,r4,r5		# InternalOrigin=r0 pLast=r4
.Llo127:
	stbx		r3,r6,r0		# pPrev=r6 pFirst=r3
.L1266:
#          }
#       }
#       pNext[EntryIndex] = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		7789
.Llo131:
	diab.li		r0,255		# InternalOrigin=r0
.Llo128:
	rlwinm		r31,r31,0,24,31		# EntryIndex=r31 EntryIndex=r31
.Llo132:
	stbx		r0,r5,r31		# pNext=r5 InternalOrigin=r0
#       pPrev[EntryIndex] = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		7790
	stbx		r0,r6,r31		# pPrev=r6 InternalOrigin=r0
	.section	.text_vle
.L2501:
.L1263:
#    }
# }
	.d2line		7792
	.d2epilogue_begin
.Llo129:
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# InternalOrigin=r0
	mtspr		lr,r0		# InternalOrigin=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2496:
	.type		Dem_RemoveFromChronologicalList,@function
	.size		Dem_RemoveFromChronologicalList,.-Dem_RemoveFromChronologicalList
# Number of nodes = 190

# Allocations for Dem_RemoveFromChronologicalList
#	?a4		InternalOrigin
#	?a5		EntryIndex
#	?a6		pFirst
#	?a7		pLast
#	?a8		pNext
#	?a9		pPrev
# static FUNC(void, DEM_CODE) ClearEntry(CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC) pEvMemEntry, uint8 eventEntryIndex, uint8 internalOrigin)
	.align		1
	.section	.text_vle
        .d2line         4423,29
#$$ld
.L2514:

#$$bf	ClearEntry,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
ClearEntry:
.Llo142:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# pEvMemEntry=r31 pEvMemEntry=r3
	mr		r30,r4		# eventEntryIndex=r30 eventEntryIndex=r4
	mr		r29,r5		# internalOrigin=r29 internalOrigin=r5
	.d2prologue_end
# {
#    if (eventEntryIndex != DEM_EV_MEM_ENTRY_INVALID)
	.d2line		4425
	rlwinm		r4,r4,0,24,31		# eventEntryIndex=r4 eventEntryIndex=r4
	cmpi		0,0,r4,255		# eventEntryIndex=r4
	bc		1,2,.L552	# eq
#    {
#       ClearFreezeFrameData(pEvMemEntry, Dem_LCfg.pp_ff_storage[internalOrigin]);
	.d2line		4427
.Llo143:
	lis		r3,(Dem_LCfg+48)@ha		# internalOrigin=r3
.Llo144:
	e_add16i		r3,r3,(Dem_LCfg+48)@l		# internalOrigin=r3 internalOrigin=r3
	rlwinm		r5,r29,2,22,29		# internalOrigin=r29
	lwzx		r4,r3,r5		# eventEntryIndex=r4 internalOrigin=r3
	mr		r3,r31		# pEvMemEntry=r3 pEvMemEntry=r31
	bl		ClearFreezeFrameData
#       ClearDevFreezeFrameData(pEvMemEntry);
	.d2line		4428
	mr		r3,r31		# pEvMemEntry=r3 pEvMemEntry=r31
	bl		ClearDevFreezeFrameData
#       ClearExtendedData(pEvMemEntry, Dem_LCfg.pp_ed_storage[internalOrigin]);
	.d2line		4429
	lis		r3,(Dem_LCfg+76)@ha		# pEvMemEntry=r3
	e_add16i		r3,r3,(Dem_LCfg+76)@l		# pEvMemEntry=r3 pEvMemEntry=r3
	rlwinm		r5,r29,2,22,29		# internalOrigin=r29
	lwzx		r4,r3,r5		# eventEntryIndex=r4 pEvMemEntry=r3
	mr		r3,r31		# pEvMemEntry=r3 pEvMemEntry=r31
	bl		ClearExtendedData
# #if (STD_ON == DEM_OBD_SUPPORT)
#       if (DEM_DTC_ORIGIN_PRIMARY_MEMORY_INTERNAL_INDEX == internalOrigin)
#       {
#          /*
#             * [VSTAR_Dem_00233]
#             * The entry specific OBD freeze frame shall be deleted when the corresponding event memory entry is aged.
#             */
#          ClearOBDFreezeFrameData(pEvMemEntry);
#       }
#       UpdateFirstMilEvent(pEvMemEntry->event_id);
# #endif /* STD_ON == DEM_OBD_SUPPORT */
#       Dem_RemoveFromChronologicalList(internalOrigin, eventEntryIndex);
	.d2line		4441
	mr		r3,r29		# internalOrigin=r3 internalOrigin=r29
	mr		r4,r30		# eventEntryIndex=r4 eventEntryIndex=r30
	bl		Dem_RemoveFromChronologicalList
#       pEvMemEntry->uds_status = (uint8)0U;
	.d2line		4442
	diab.li		r0,0
	stb		r0,13(r31)		# pEvMemEntry=r31
#       pEvMemEntry->event_id = DEM_EVENTID_INVALID;
	.d2line		4443
	sth		r0,0(r31)		# pEvMemEntry=r31
.L552:
#    }
# }
	.d2line		4445
	.d2epilogue_begin
.Llo145:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
.Llo146:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo147:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2515:
	.type		ClearEntry,@function
	.size		ClearEntry,.-ClearEntry
# Number of nodes = 56

# Allocations for ClearEntry
#	?a4		pEvMemEntry
#	?a5		eventEntryIndex
#	?a6		internalOrigin
# FUNC(void, DEM_CODE) Dem_UpdateIndicators(void)
	.align		2
	.section	.text_vle
        .d2line         7953,22
#$$ld
.L2522:

#$$bf	Dem_UpdateIndicators,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,lr
	.globl		Dem_UpdateIndicators
	.d2_cfa_start __cie
Dem_UpdateIndicators:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    UpdateIndicators = TRUE;
	.d2line		7955
	diab.li		r3,1
	lis		r4,UpdateIndicators@ha
	e_add16i		r4,r4,UpdateIndicators@l
	stb		r3,0(r4)
# }
	.d2line		7956
	.d2epilogue_begin
	lwz		r0,20(r1)
	mtspr		lr,r0
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2523:
	.type		Dem_UpdateIndicators,@function
	.size		Dem_UpdateIndicators,.-Dem_UpdateIndicators
# Number of nodes = 3

# Allocations for Dem_UpdateIndicators
# static FUNC(void, DEM_CODE) PerformAgingDisplacement(uint8 evMemEntryIndex, uint8 internalOrigin)
	.align		1
	.section	.text_vle
        .d2line         3069,29
#$$ld
.L2527:

#$$bf	PerformAgingDisplacement,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
PerformAgingDisplacement:
.Llo148:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr		# evMemEntryIndex=r0
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)		# evMemEntryIndex=r0
	.d2_cfa_offset    108,-1
	mr		r0,r3		# evMemEntryIndex=r0 evMemEntryIndex=r3
.Llo149:
	mr		r4,r4		# internalOrigin=r4 internalOrigin=r4
	.d2prologue_end
# {
#    CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC) pEvMemEntry = Dem_GetEvMemEntryPtr(internalOrigin, evMemEntryIndex);
	.d2line		3071
.Llo150:
	lis		r3,(Dem_LCfg+20)@ha		# pEvMemEntry=r3
.Llo153:
	e_add16i		r3,r3,(Dem_LCfg+20)@l		# pEvMemEntry=r3 pEvMemEntry=r3
	rlwinm		r5,r4,2,22,29		# internalOrigin=r5 internalOrigin=r4
	lwzx		r3,r3,r5		# pEvMemEntry=r3 pEvMemEntry=r3
	lwz		r3,0(r3)		# pEvMemEntry=r3 pEvMemEntry=r3
	rlwinm		r5,r0,2,22,29		# internalOrigin=r5 evMemEntryIndex=r0
	lwzx		r3,r3,r5		# pEvMemEntry=r3 pEvMemEntry=r3
	mr		r3,r3		# pEvMemEntry=r3 pEvMemEntry=r3
#    CONST(Dem_EventIdType, AUTOMATIC) eventId = pEvMemEntry->event_id;
	.d2line		3072
	lhz		r31,0(r3)		# eventId=r31 pEvMemEntry=r3
	mr		r31,r31		# eventId=r31 eventId=r31
# 
#    /* [SWS_Dem_01075], [SWS_Dem_00442], [SWS_Dem_00443] */
#    ClearEntry(pEvMemEntry, evMemEntryIndex, internalOrigin);
	.d2line		3075
	mr		r5,r4		# internalOrigin=r5 internalOrigin=r4
	mr		r4,r0		# evMemEntryIndex=r4 evMemEntryIndex=r0
.Llo152:
	mr		r3,r3		# pEvMemEntry=r3 pEvMemEntry=r3
.Llo154:
	bl		ClearEntry
# 
#    Dem_AgingDisplacementUdsStatus(eventId);
	.d2line		3077
.Llo151:
	rlwinm		r3,r31,0,16,31		# pEvMemEntry=r3 eventId=r31
	bl		Dem_AgingDisplacementUdsStatus
# 
#    /* Re-calculate indicator statuses to potentially turn indicators off. */
#    Dem_UpdateIndicators();
	.d2line		3080
	bl		Dem_UpdateIndicators
# }
	.d2line		3081
	.d2epilogue_begin
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
.Llo155:
	lwz		r0,36(r1)		# evMemEntryIndex=r0
	mtspr		lr,r0		# evMemEntryIndex=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2528:
	.type		PerformAgingDisplacement,@function
	.size		PerformAgingDisplacement,.-PerformAgingDisplacement
# Number of nodes = 40

# Allocations for PerformAgingDisplacement
#	?a4		evMemEntryIndex
#	?a5		internalOrigin
#	?a6		pEvMemEntry
#	?a7		eventId
# static FUNC(uint8, DEM_CODE) GetExistingEventMemoryEntry(uint16 intDtc,
	.align		1
	.section	.text_vle
        .d2line         5082,30
#$$ld
.L2539:

#$$bf	GetExistingEventMemoryEntry,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,r8,r28,r29,r30,r31,cr0,lr
	.d2_cfa_start __cie
GetExistingEventMemoryEntry:
.Llo156:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# intDtc=r3 intDtc=r3
	mr		r4,r4		# internalOrigin=r4 internalOrigin=r4
	mr		r5,r5		# ppEvMemEntry=r5 ppEvMemEntry=r5
	.d2prologue_end
#       uint8 internalOrigin,
#       P2VAR(Dem_NvEvMemEntryPtrType, AUTOMATIC, DEM_APPL_DATA) ppEvMemEntry)
# {
#    P2CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC, DEM_APPL_CONST) pEvMemEntries;
#    Dem_NvEvMemEntryPtrType pEvMemEntry;
#    uint8 eventEntryIndex = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		5088
	diab.li		r7,255		# eventEntryIndex=r7
#    uint8 i;
# 
#    *ppEvMemEntry = NULL_PTR;
	.d2line		5091
.Llo166:
	diab.li		r0,0
	stw		r0,0(r5)		# ppEvMemEntry=r5
#    if (!Dem_EvMemExist(internalOrigin))
	.d2line		5092
	lis		r6,(Dem_LCfg+20)@ha
	e_add16i		r6,r6,(Dem_LCfg+20)@l
	rlwinm		r30,r4,2,22,29		# internalOrigin=r4
	lwzx		r0,r6,r30
	se_cmpi		r0,0
	bc		0,2,.L699	# ne
#    {
#        pEvMemEntries = NULL_PTR;
	.d2line		5094
	diab.li		r0,0		# pEvMemEntries=r0
.Llo158:
	b		.L700
.L699:
#    }
#    else 
#    {
#        pEvMemEntries = Dem_GetEvMemEntriesPtr(internalOrigin);
	.d2line		5098
.Llo159:
	lis		r6,(Dem_LCfg+20)@ha
	e_add16i		r6,r6,(Dem_LCfg+20)@l
	rlwinm		r30,r4,2,22,29		# internalOrigin=r4
	lwzx		r6,r6,r30
	lwz		r0,0(r6)
.Llo160:
	mr		r0,r0		# pEvMemEntries=r0 pEvMemEntries=r0
.L700:
#    }
# 
#    if ((NULL_PTR != pEvMemEntries) && (intDtc != DEM_INT_DTC_INVALID))
	.d2line		5101
	se_cmpi		r0,0		# pEvMemEntries=r0
	bc		1,2,.L701	# eq
	rlwinm		r29,r3,0,16,31		# intDtc=r3
	cmpli		0,0,r29,65535
	bc		1,2,.L701	# eq
#    {
#       /* Find the event memory entry connected to intDtc */
#       for (i = 0; (i < Dem_MaxNumEvMemEntries[internalOrigin]) && (DEM_EV_MEM_ENTRY_INVALID == eventEntryIndex); i++)
	.d2line		5104
	diab.li		r31,0		# i=r31
.L702:
.Llo167:
	rlwinm		r29,r31,0,24,31		# i=r31
.Llo168:
	lis		r6,Dem_MaxNumEvMemEntries@ha		# pEvMemEntry=r6
.Llo161:
	e_add16i		r6,r6,Dem_MaxNumEvMemEntries@l		# pEvMemEntry=r6 pEvMemEntry=r6
	rlwinm		r30,r4,0,24,31		# internalOrigin=r4
	lbzx		r6,r6,r30		# pEvMemEntry=r6 pEvMemEntry=r6
	se_cmp		r29,r6		# pEvMemEntry=r6
	bc		0,0,.L701	# ge
.Llo162:
	rlwinm		r6,r7,0,24,31		# pEvMemEntry=r6 eventEntryIndex=r7
.Llo163:
	cmpi		0,0,r6,255		# pEvMemEntry=r6
	bc		0,2,.L701	# ne
#       {
#          pEvMemEntry = pEvMemEntries[i];
	.d2line		5106
.Llo164:
	rlwinm		r29,r31,2,22,29		# i=r31
	lwzux		r6,r29,r0		# pEvMemEntry=r6
.Llo165:
	mr		r6,r6		# pEvMemEntry=r6 pEvMemEntry=r6
#          if ((pEvMemEntry->event_id != DEM_EVENTID_INVALID) && (intDtc == Dem_GetEventIntDtc(pEvMemEntry->event_id)))
	.d2line		5107
	lhz		r30,0(r6)		# pEvMemEntry=r6
	se_cmpi		r30,0
	bc		1,2,.L705	# eq
	rlwinm		r29,r3,0,16,31		# intDtc=r3
	lis		r8,Dem_pPbCfg@ha
	lwz		r8,Dem_pPbCfg@l(r8)
	lwz		r28,128(r8)
	lhz		r30,0(r6)		# pEvMemEntry=r6
	rlwinm		r30,r30,1,15,30
	se_add		r30,r28
	lhz		r30,-2(r30)
	se_cmp		r29,r30
	bc		0,2,.L705	# ne
#          {
#             eventEntryIndex = i;
	.d2line		5109
	mr		r7,r31		# eventEntryIndex=r7 eventEntryIndex=r31
#             *ppEvMemEntry = pEvMemEntry;
	.d2line		5110
	stw		r6,0(r5)		# ppEvMemEntry=r5 pEvMemEntry=r6
.L705:
#          }
#       }
	.d2line		5112
	diab.addi		r29,r31,1		# i=r31
	se_addi		r31,1		# i=r31 i=r31
	b		.L702
.L701:
#    }
# 
#    return eventEntryIndex;
	.d2line		5115
.Llo157:
	rlwinm		r3,r7,0,24,31		# intDtc=r3 eventEntryIndex=r7
# }
	.d2line		5116
	.d2epilogue_begin
.Llo169:
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# pEvMemEntries=r0
	mtspr		lr,r0		# pEvMemEntries=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo170:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2540:
	.type		GetExistingEventMemoryEntry,@function
	.size		GetExistingEventMemoryEntry,.-GetExistingEventMemoryEntry
# Number of nodes = 103

# Allocations for GetExistingEventMemoryEntry
#	?a4		intDtc
#	?a5		internalOrigin
#	?a6		ppEvMemEntry
#	?a7		pEvMemEntries
#	?a8		pEvMemEntry
#	?a9		eventEntryIndex
#	?a10		i
# FUNC(void, DEM_CODE) Dem_ClearPrestoredFF(Dem_EventIdType eventId)
	.align		2
	.section	.text_vle
        .d2line         7616,22
#$$ld
.L2555:

#$$bf	Dem_ClearPrestoredFF,interprocedural,nostackparams

# Regs written: r0,r1
	.globl		Dem_ClearPrestoredFF
	.d2_cfa_start __cie
Dem_ClearPrestoredFF:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
# #if (DEM_PRESTORE_FF_SUPPORT == STD_ON)
#    ClearPrestoredFF(eventId, Dem_LCfg.p_ff_prestorage);
# #endif /* DEM_PRESTORE_FF_SUPPORT == STD_ON */
# #if (DEM_PRESTORE_OBD_FF_SUPPORT == STD_ON)
#    ClearPrestoredFF(eventId, Dem_LCfg.p_obd_ff_prestorage);
# #endif /* DEM_PRESTORE_OBD_FF_SUPPORT == STD_ON */
# }
	.d2line		7624
	.d2epilogue_begin
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2556:
	.type		Dem_ClearPrestoredFF,@function
	.size		Dem_ClearPrestoredFF,.-Dem_ClearPrestoredFF
# Number of nodes = 0

# Allocations for Dem_ClearPrestoredFF
#	not allocated	eventId
# FUNC(void, DEM_CODE) Dem_ClrUdsBits(Dem_EventIdType EventId, uint8 BitMask)
	.align		2
	.section	.text_vle
        .d2line         7626,22
#$$ld
.L2560:

#$$bf	Dem_ClrUdsBits,interprocedural,rasave,nostackparams
	.globl		Dem_ClrUdsBits
	.d2_cfa_start __cie
Dem_ClrUdsBits:
.Llo171:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	30,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# EventId=r3 EventId=r3
	mr		r30,r4		# BitMask=r30 BitMask=r4
	.d2prologue_end
# {
#    P2VAR(Dem_UdsStatusByteType, AUTOMATIC, DEM_NV_DATA) pEventStatusExtended = Dem_GetUdsStatusPtr(EventId);
	.d2line		7628
.Llo175:
	lis		r31,(Dem_NvUdsStatus-1)@ha		# pEventStatusExtended=r31
.Llo176:
	e_add16i		r31,r31,(Dem_NvUdsStatus-1)@l		# pEventStatusExtended=r31 pEventStatusExtended=r31
	rlwinm		r3,r3,0,16,31		# EventId=r3 EventId=r3
	se_add		r3,r31		# EventId=r3 EventId=r3 pEventStatusExtended=r31
.Llo172:
	mr		r31,r3		# pEventStatusExtended=r31 pEventStatusExtended=r3
# 
#    /* ---------- Enter critical section ---------- */
#    SchM_Enter_Dem_EaEventStatus();
	.d2line		7631
	bl		SchM_Enter_Dem_EaEventStatus
#    Dem_ClrBits(*pEventStatusExtended, BitMask);
	.d2line		7632
	lbz		r0,0(r31)		# pEventStatusExtended=r31
	and		r0,r0,r30		# BitMask=r30
	stb		r0,0(r31)		# pEventStatusExtended=r31
#    SchM_Exit_Dem_EaEventStatus();
	.d2line		7633
	bl		SchM_Exit_Dem_EaEventStatus
#    /* ---------- Exit critical section ----------- */
# 
#    /* Set global flag to indicate that the Uds status has changed */
#    UdsStatusModified = TRUE;
	.d2line		7637
	diab.li		r3,1		# EventId=r3
.Llo173:
	lis		r4,UdsStatusModified@ha
	e_add16i		r4,r4,UdsStatusModified@l
	stb		r3,0(r4)		# EventId=r3
# }
	.d2line		7638
	.d2epilogue_begin
	lmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	3,10
.Llo177:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo174:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2561:
	.type		Dem_ClrUdsBits,@function
	.size		Dem_ClrUdsBits,.-Dem_ClrUdsBits
# Number of nodes = 20

# Allocations for Dem_ClrUdsBits
#	?a4		EventId
#	?a5		BitMask
#	?a6		pEventStatusExtended
# static FUNC(void, DEM_CODE) HandleEventStatePassed(Dem_EventIdType EventId)
	.align		1
	.section	.text_vle
        .d2line         2976,29
#$$ld
.L2571:

#$$bf	HandleEventStatePassed,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
HandleEventStatePassed:
.Llo178:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
	.d2prologue_end
# {
#    Dem_NvEvMemEntryPtrType pEvMemEntry;
#    uint16 intDtc = Dem_GetEventIntDtc(EventId);
	.d2line		2979
.Llo179:
	lis		r3,Dem_pPbCfg@ha
.Llo180:
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,128(r3)
	rlwinm		r0,r31,1,15,30		# EventId=r31
	se_add		r3,r0
	lhz		r30,-2(r3)		# intDtc=r30
.Llo182:
	mr		r30,r30		# intDtc=r30 intDtc=r30
#    Dem_DTCOriginType eventDest;
#    uint8 origin;
#    uint8 evMemEntryIndex;
# 
#    /* Update data for all configured memory origins */
#    if (DEM_INT_DTC_INVALID != intDtc)
	.d2line		2985
	rlwinm		r3,r30,0,16,31		# intDtc=r30
	cmpli		0,0,r3,65535
	bc		1,2,.L349	# eq
#    {
#       eventDest = GetDtcMemDest(intDtc);
	.d2line		2987
	lis		r4,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r4)
	lwz		r3,20(r3)
	lwz		r4,Dem_pPbCfg@l(r4)
	lwz		r4,92(r4)
	rlwinm		r5,r30,0,16,31		# intDtc=r30
	lbzx		r0,r4,r5
	lbzx		r29,r3,r0
.Llo184:
	mr		r29,r29		# eventDest=r29 eventDest=r29
#       for (origin = 0; origin < DEM_NUMBER_OF_ORIGINS; origin++)
	.d2line		2988
	diab.li		r28,0		# origin=r28
.L350:
.Llo185:
	rlwinm		r4,r28,0,24,31		# origin=r4 origin=r28
	se_cmpi		r4,2		# origin=r4
	bc		0,0,.L349	# ge
#       {
#          if (Dem_IsSet(eventDest, Dem_OriginMasks[origin]))
	.d2line		2990
	rlwinm		r0,r29,0,24,31		# intDtc=r0 eventDest=r29
	lis		r3,Dem_OriginMasks@ha		# intDtc=r3
	e_add16i		r3,r3,Dem_OriginMasks@l		# intDtc=r3 intDtc=r3
	rlwinm		r4,r28,0,24,31		# origin=r4 origin=r28
	lbzx		r3,r3,r4		# intDtc=r3 intDtc=r3
	and.		r0,r0,r3		# intDtc=r0 intDtc=r0 intDtc=r3
	bc		1,2,.L353	# eq
#          {
#             /* Configured origin found */
#             evMemEntryIndex = GetExistingEventMemoryEntry(intDtc, origin, &pEvMemEntry);
	.d2line		2993
	diab.addi		r5,r1,8
	mr		r3,r30		# intDtc=r3 intDtc=r30
	mr		r4,r28		# origin=r4 origin=r28
	bl		GetExistingEventMemoryEntry
.Llo186:
	mr		r0,r3		# evMemEntryIndex=r0 evMemEntryIndex=r3
# 
#             if (NULL_PTR != pEvMemEntry)
	.d2line		2995
	lwz		r3,8(r1)		# intDtc=r3
.Llo187:
	se_cmpi		r3,0		# intDtc=r3
.Llo188:
	bc		1,2,.L353	# eq
#             {
#                /* [VSTAR_Dem_00067]
#                 * Age event immediately if it is configured for instant aging
#                 */
#                if (Dem_IsDtcAgingAllowed(intDtc) && IsDtcInstantAgingEnabled(intDtc))
	.d2line		3000
	lis		r4,Dem_pPbCfg@ha		# origin=r4
	lwz		r3,Dem_pPbCfg@l(r4)		# intDtc=r3 origin=r4
	lwz		r3,0(r3)		# intDtc=r3 intDtc=r3
	lwz		r4,Dem_pPbCfg@l(r4)		# origin=r4 origin=r4
	lwz		r4,92(r4)		# origin=r4 origin=r4
	rlwinm		r5,r30,0,16,31		# intDtc=r30
	lbzx		r4,r4,r5		# origin=r4 origin=r4
	lbzx		r3,r3,r4		# intDtc=r3 intDtc=r3
	se_cmpi		r3,0		# intDtc=r3
	bc		1,2,.L353	# eq
	lis		r4,Dem_pPbCfg@ha		# origin=r4
	lwz		r3,Dem_pPbCfg@l(r4)		# intDtc=r3 origin=r4
	lwz		r3,8(r3)		# intDtc=r3 intDtc=r3
	lwz		r4,Dem_pPbCfg@l(r4)		# origin=r4 origin=r4
	lwz		r4,92(r4)		# origin=r4 origin=r4
	rlwinm		r5,r30,0,16,31		# intDtc=r30
	lbzx		r4,r4,r5		# origin=r4 origin=r4
	lbzx		r3,r3,r4		# intDtc=r3 intDtc=r3
	se_cmpi		r3,0		# intDtc=r3
	bc		1,2,.L353	# eq
#                {
#                   PerformAgingDisplacement(evMemEntryIndex, origin);
	.d2line		3002
	mr		r3,r0		# evMemEntryIndex=r3 evMemEntryIndex=r0
	mr		r4,r28		# origin=r4 origin=r28
	bl		PerformAgingDisplacement
#                   /* [VSTAR_Dem_00068]
#                    * UDS status byte shall be set to 0x00 if the event is instantly aged.
#                    */
#                   Dem_ClrUdsBits(EventId, DEM_UDS_SB_ALL_CLR);
	.d2line		3006
.Llo189:
	mr		r3,r31		# EventId=r3 EventId=r31
	diab.li		r4,0		# origin=r4
	bl		Dem_ClrUdsBits
.L353:
#                }
#             }
#          }
#       }
	.d2line		3010
.Llo190:
	diab.addi		r4,r28,1		# origin=r4 origin=r28
	se_addi		r28,1		# origin=r28 origin=r28
	b		.L350
.L349:
#    }
# 
#    /* [SWS_Dem_00465] */
#    Dem_ClearPrestoredFF(EventId);
	.d2line		3014
.Llo183:
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		Dem_ClearPrestoredFF
# }
	.d2line		3015
	.d2epilogue_begin
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
.Llo181:
	lwz		r0,36(r1)		# intDtc=r0
	mtspr		lr,r0		# intDtc=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2572:
	.type		HandleEventStatePassed,@function
	.size		HandleEventStatePassed,.-HandleEventStatePassed
# Number of nodes = 127

# Allocations for HandleEventStatePassed
#	?a4		EventId
#	SP,8		pEvMemEntry
#	?a5		intDtc
#	?a6		eventDest
#	?a7		origin
#	?a8		evMemEntryIndex
# static FUNC(void, DEM_CODE) StoreOccurrenceInformation(Dem_EventIdType eventId)
	.align		1
	.section	.text_vle
        .d2line         3391,29
#$$ld
.L2587:

#$$bf	StoreOccurrenceInformation,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,cr0,lr
	.d2_cfa_start __cie
StoreOccurrenceInformation:
.Llo191:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)		# eventId=r0
	.d2_cfa_offset    108,-1
	mr		r0,r3		# eventId=r0 eventId=r3
	.d2prologue_end
# {
#    uint16 intDtc = Dem_GetEventIntDtc(eventId);
	.d2line		3393
.Llo192:
	lis		r3,Dem_pPbCfg@ha
.Llo193:
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,128(r3)
	rlwinm		r4,r0,1,15,30		# intDtc=r4 eventId=r0
.Llo195:
	se_add		r3,r4		# intDtc=r4
	lhz		r4,-2(r3)		# intDtc=r4
	mr		r4,r4		# intDtc=r4 intDtc=r4
# 
#    if (DEM_INT_DTC_INVALID != intDtc)
	.d2line		3395
	rlwinm		r3,r4,0,16,31		# intDtc=r4
	cmpli		0,0,r3,65535
	bc		1,2,.L374	# eq
#    {
#       if (IsUdsDtc(intDtc))
	.d2line		3397
.Llo196:
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,76(r3)
.Llo197:
	rlwinm		r4,r4,2,14,29		# intDtc=r4 intDtc=r4
.Llo198:
	lwzx		r3,r3,r4
	se_cmpi		r3,0
	bc		1,2,.L374	# eq
#       {
#          /* Non-OBD DTC configured */
#          if (DEM_EVENTID_INVALID == Dem_NvAdmin.event_occurrence_info.first_failed_event)
	.d2line		3400
	lis		r3,(Dem_NvAdmin+4)@ha
	lhz		r3,(Dem_NvAdmin+4)@l(r3)
	se_cmpi		r3,0
	bc		0,2,.L377	# ne
#          {
#             Dem_NvAdmin.event_occurrence_info.first_failed_event = eventId;
	.d2line		3402
	lis		r3,(Dem_NvAdmin+4)@ha
	sth		r0,(Dem_NvAdmin+4)@l(r3)		# eventId=r0
.L377:
#          }
#          Dem_NvAdmin.event_occurrence_info.most_recent_failed_event = eventId;
	.d2line		3404
	lis		r3,Dem_NvAdmin@ha
	e_add16i		r3,r3,Dem_NvAdmin@l
	sth		r0,0(r3)		# eventId=r0
.L374:
#       }
#    }
# }
	.d2line		3407
	.d2epilogue_begin
.Llo194:
	lwz		r0,20(r1)		# eventId=r0
	mtspr		lr,r0		# eventId=lr
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2588:
	.type		StoreOccurrenceInformation,@function
	.size		StoreOccurrenceInformation,.-StoreOccurrenceInformation
# Number of nodes = 50

# Allocations for StoreOccurrenceInformation
#	?a4		eventId
#	?a5		intDtc
# static FUNC(boolean, DEM_CODE) CheckExtendedDataCaptureTrigger(boolean isFailed,
	.align		1
	.section	.text_vle
        .d2line         3773,32
#$$ld
.L2595:

#$$bf	CheckExtendedDataCaptureTrigger,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,r5,cr0,lr
	.d2_cfa_start __cie
CheckExtendedDataCaptureTrigger:
.Llo199:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# isFailed=r3 isFailed=r3
	mr		r4,r4		# pEvMemEntry=r4 pEvMemEntry=r4
	.d2prologue_end
#                                                                P2CONST(Dem_NvEvMemEntryType, AUTOMATIC, DEM_NV_DATA) pEvMemEntry)
# {
#    boolean retVal = FALSE;
	.d2line		3776
	diab.li		r5,0		# retVal=r5
# 
# #if (DEM_ED_CAPTURE == DEM_TRIGGER_ON_TEST_FAILED_PC)
#    if ((TRUE == isFailed) && (Dem_IsClr(pEvMemEntry->uds_status, DEM_UDS_SB_TF)))
	.d2line		3779
.Llo203:
	rlwinm		r3,r3,0,24,31		# isFailed=r3 isFailed=r3
	se_cmpi		r3,1		# isFailed=r3
	bc		0,2,.L432	# ne
.Llo200:
	lbz		r0,13(r4)		# pEvMemEntry=r4
	se_btsti		r0,31
#    {
#       /*
#        * [SWS_Dem_00812]
#        * The ExtendedDataRecord shall be captured each time the TestFailed is set (changing from 0 to 1).
#        */
#       retVal = TRUE;
	.d2line		3785
	diab.li		r3,1		# isFailed=r3
.Llo201:
	isel		r5,r3,r5,2		# retVal=r5 isFailed=r3 retVal=r5
.L432:
#    }
# #elif (DEM_ED_CAPTURE == DEM_TRIGGER_ON_FDC_THRESHOLD_PC)
#    if (Dem_IsClr(pEvMemEntry->si, DEM_SI_FDCTRTOC))
#    {
#       /*
#        * [SWS_Dem_00811]
#        * The ExtendedDataRecord shall be captured each time the configured FDC threshold
#        * is reached(by a positive increment), but at most once per operation cycle.
#        */
#       retVal = TRUE;
#    }
# #endif /* DEM_ED_CAPTURE == DEM_TRIGGER_ON_FDC_THRESHOLD_PC */
# 
#    return retVal;
	.d2line		3799
.Llo202:
	rlwinm		r3,r5,0,24,31		# isFailed=r3 retVal=r5
# }
	.d2line		3800
	.d2epilogue_begin
	lwz		r0,20(r1)
	mtspr		lr,r0
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo204:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2596:
	.type		CheckExtendedDataCaptureTrigger,@function
	.size		CheckExtendedDataCaptureTrigger,.-CheckExtendedDataCaptureTrigger
# Number of nodes = 21

# Allocations for CheckExtendedDataCaptureTrigger
#	?a4		isFailed
#	?a5		pEvMemEntry
#	?a6		retVal
# static FUNC(boolean, DEM_CODE) FindFreeExtendedDataEntry(P2CONST(Dem_DataStorageType, AUTOMATIC, DEM_APPL_CONST) pEDStorage,
	.align		1
	.section	.text_vle
        .d2line         5370,32
#$$ld
.L2606:

#$$bf	FindFreeExtendedDataEntry,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
FindFreeExtendedDataEntry:
.Llo205:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# pEDStorage=r31 pEDStorage=r3
	mr		r30,r4		# pEDEntry=r30 pEDEntry=r4
	.d2prologue_end
#                                                          P2VAR(uint16, AUTOMATIC, DEM_APPL_DATA) pEDEntry)
# {
#    boolean entryFound = FALSE;
	.d2line		5373
	diab.li		r29,0		# entryFound=r29
#    uint16 edEntry;
# 
#    /* Search for a free extended data storage entry */
#    for (edEntry=0; (edEntry<Dem_LCfg.num_ed_entries) && (FALSE == entryFound); edEntry++)
	.d2line		5377
.Llo211:
	diab.li		r28,0
.L776:
.Llo206:
	rlwinm		r0,r28,0,16,31		# edEntry=r28
.Llo207:
	lis		r3,(Dem_LCfg+84)@ha
	lhz		r3,(Dem_LCfg+84)@l(r3)
	se_cmp		r0,r3
	bc		0,0,.L778	# ge
	rlwinm		r3,r29,0,24,31		# entryFound=r29
	se_cmpi		r3,0
	bc		0,2,.L778	# ne
#    {
#       if (DEM_EV_MEM_ENTRY_INVALID == *pEDStorage->p_get_entry_occupied(edEntry))
	.d2line		5379
	lwz		r0,4(r31)		# pEDStorage=r31
	mtspr		ctr,r0
	rlwinm		r3,r28,0,16,31		# edEntry=r28
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
	lbz		r0,0(r3)
	cmpi		0,0,r0,255
	bc		0,2,.L779	# ne
#       {
#          *pEDEntry = edEntry;
	.d2line		5381
	sth		r28,0(r30)		# pEDEntry=r30 edEntry=r28
#          entryFound = TRUE;
	.d2line		5382
	diab.li		r29,1		# entryFound=r29
.L779:
#       }
#    }
	.d2line		5384
	diab.addi		r0,r28,1		# edEntry=r28
	se_addi		r28,1		# edEntry=r28 edEntry=r28
	b		.L776
.L778:
# 
#    return entryFound;
	.d2line		5386
.Llo208:
	rlwinm		r3,r29,0,24,31		# entryFound=r29
# }
	.d2line		5387
	.d2epilogue_begin
.Llo209:
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
.Llo212:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo210:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2607:
	.type		FindFreeExtendedDataEntry,@function
	.size		FindFreeExtendedDataEntry,.-FindFreeExtendedDataEntry
# Number of nodes = 44

# Allocations for FindFreeExtendedDataEntry
#	?a4		pEDStorage
#	?a5		pEDEntry
#	?a6		entryFound
#	?a7		edEntry
# FUNC(void, DEM_CODE) Dem_MemSet(P2VAR(void, AUTOMATIC, DEM_APPL_DATA) pDest, uint8 pattern, uint16 count)
	.align		2
	.section	.text_vle
        .d2line         7740,22
#$$ld
.L2618:

#$$bf	Dem_MemSet,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,cr0,lr
	.globl		Dem_MemSet
	.d2_cfa_start __cie
Dem_MemSet:
.Llo213:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# pDest=r3 pDest=r3
.Llo214:
	mr		r4,r4		# pattern=r4 pattern=r4
	mr		r0,r5		# count=r0 count=r5
	.d2prologue_end
# {
#    P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) pD = (void*)pDest;
	.d2line		7742
	mr		r6,r3		# pD=r6 pD=r3
#    uint16 i;
# 
#    for(i = 0; i < count; i++)
	.d2line		7745
	diab.li		r3,0		# i=r3
.L1258:
.Llo216:
	rlwinm		r7,r3,0,16,31		# i=r3
.Llo217:
	rlwinm		r5,r0,0,16,31		# count=r0
	se_cmp		r7,r5
	bc		0,0,.L1257	# ge
#    {
#       pD[i] = pattern;
	.d2line		7747
	rlwinm		r5,r3,0,16,31		# i=r3
	stbux		r4,r5,r6		# pattern=r4
#    }
	.d2line		7748
	diab.addi		r5,r3,1		# i=r3
	se_addi		r3,1		# i=r3 i=r3
	b		.L1258
.L1257:
# }
	.d2line		7749
	.d2epilogue_begin
.Llo215:
	lwz		r0,20(r1)		# count=r0
	mtspr		lr,r0		# count=lr
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2619:
	.type		Dem_MemSet,@function
	.size		Dem_MemSet,.-Dem_MemSet
# Number of nodes = 21

# Allocations for Dem_MemSet
#	?a4		pDest
#	?a5		pattern
#	?a6		count
#	?a7		pD
#	?a8		i
# static FUNC(void, DEM_CODE) StoreExternalExtendedData(Dem_NvEvMemEntryPtrType pEvEntry,
	.align		1
	.section	.text_vle
        .d2line         5389,29
#$$ld
.L2632:

#$$bf	StoreExternalExtendedData,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
StoreExternalExtendedData:
.Llo218:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r25,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	25,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# pEvEntry=r31 pEvEntry=r3
.Llo219:
	mr		r3,r4		# edEntry=r3 edEntry=r4
.Llo220:
	mr		r5,r5		# edClassIndex=r5 edClassIndex=r5
	mr		r6,r6		# pEDStorage=r6 pEDStorage=r6
	mr		r25,r7		# firstTime=r25 firstTime=r7
	.d2prologue_end
#                                                       uint16 edEntry,
#                                                       uint8 edClassIndex,
#                                                       P2CONST(Dem_DataStorageType, AUTOMATIC, DEM_APPL_CONST) pEDStorage,
#                                                       boolean firstTime)
# {
#    uint8 i;
#    uint8 numRecords;
#    uint16 recOffset;
#    Uint8NvPtrType pEDData;
#    P2CONST(Dem_ExtExtendedDataType, AUTOMATIC, DEM_APPL_CONST) pRecConfig;
#    P2CONST(uint8, AUTOMATIC, DEM_APPL_CONST) pRecConfigIndex;
# 
#    pEvEntry->ed_stored = TRUE;
	.d2line		5402
	diab.li		r0,1
	stb		r0,12(r31)		# pEvEntry=r31
#    pEvEntry->ed_storage_index = edEntry;
	.d2line		5403
	sth		r4,2(r31)		# pEvEntry=r31 edEntry=r4
#    pRecConfigIndex = Dem_LCfg.p_ed_classes[edClassIndex].p_ext_ed_record_index;
	.d2line		5404
	lis		r4,(Dem_LCfg+104)@ha		# edEntry=r4
	lwz		r7,(Dem_LCfg+104)@l(r4)		# edEntry=r4
.Llo232:
	rlwinm		r5,r5,4,20,27		# edClassIndex=r5 edClassIndex=r5
	lwzux		r26,r7,r5
.Llo241:
	mr		r26,r26		# pRecConfigIndex=r26 pRecConfigIndex=r26
#    numRecords = Dem_LCfg.p_ed_classes[edClassIndex].num_ext_ed_records;
	.d2line		5405
.Llo242:
	lwz		r0,(Dem_LCfg+104)@l(r4)		# edEntry=r4
	se_add		r5,r0		# edClassIndex=r5 edClassIndex=r5
	lbz		r30,4(r5)		# edClassIndex=r5
.Llo235:
	mr		r30,r30		# numRecords=r30 numRecords=r30
#    pEDData = pEDStorage->p_get_buffer_entry(pEvEntry->ed_storage_index);
	.d2line		5406
	lwz		r0,0(r6)		# pEDStorage=r6
	mtspr		ctr,r0
	rlwinm		r3,r3,0,16,31		# edEntry=r3 edEntry=r3
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
.Llo221:
	mr		r28,r3		# pEDData=r28 pEDData=r3
# 
#    /* Update data for all records in the extended data class */
#    recOffset = 0;
	.d2line		5409
	diab.li		r29,0		# recOffset=r29
#    for (i = 0; i < numRecords; i++)
	.d2line		5410
.Llo236:
	diab.li		r31,0		# pEvEntry=r31
.L784:
.Llo234:
	rlwinm		r3,r31,0,24,31		# edEntry=r3 i=r31
.Llo222:
	rlwinm		r0,r30,0,24,31		# numRecords=r30
	se_cmp		r3,r0		# edEntry=r3
	bc		0,0,.L783	# ge
#    {
#       pRecConfig = &Dem_LCfg.p_ext_ed_record_define[pRecConfigIndex[i]];
	.d2line		5412
.Llo223:
	lis		r3,(Dem_LCfg+88)@ha		# edEntry=r3
.Llo224:
	lwz		r27,(Dem_LCfg+88)@l(r3)		# pRecConfig=r27 edEntry=r3
.Llo237:
	rlwinm		r3,r31,0,24,31		# edEntry=r3 i=r31
	lbzux		r0,r3,r26		# edEntry=r3
	rlwinm		r0,r0,3,21,28
	se_add		r0,r27		# pRecConfig=r27
	mr		r27,r0		# pRecConfig=r27 pRecConfig=r0
#       /*
#        * [SWS_Dem_00815] [SWS_Dem_00816]
#        * If the extended data record shall be updated or not depends on DemExtendedDataRecordUpdate
#        *   DEM_UPDATE_RECORD_YES : Update the record
#        *   DEM_UPDATE_RECORD_NO  : Only store the record once.
#        */
#       if ((TRUE == firstTime) || (TRUE == pRecConfig->update))
	.d2line		5419
.Llo238:
	rlwinm		r7,r25,0,24,31		# firstTime=r25
.Llo239:
	se_cmpi		r7,1
	bc		1,2,.L790	# eq
.Llo225:
	lbz		r0,1(r27)		# pRecConfig=r27
.Llo240:
	se_cmpi		r0,1
	bc		0,2,.L787	# ne
.L790:
#       {
#          /*
#           * [SWS_Dem_00282] 
#           * Get data from application
#           */
#          if (E_NOT_OK == pRecConfig->p_read_data(&pEDData[recOffset]))
	.d2line		5425
	lwz		r0,4(r27)		# pRecConfig=r27
	mtspr		ctr,r0
	rlwinm		r3,r29,0,16,31		# edEntry=r3 recOffset=r29
.Llo226:
	se_add		r3,r28		# edEntry=r3 edEntry=r3 pEDData=r28
.Llo227:
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 1 u
	bcctrl		20,0
.Llo228:
	rlwinm		r3,r3,0,24,31		# edEntry=r3 edEntry=r3
	se_cmpi		r3,1		# edEntry=r3
	bc		0,2,.L787	# ne
#          {
#             Dem_MemSet(&pEDData[recOffset], 0xffU, pRecConfig->size);
	.d2line		5427
.Llo229:
	rlwinm		r3,r29,0,16,31		# edEntry=r3 recOffset=r29
.Llo230:
	se_add		r3,r28		# edEntry=r3 edEntry=r3 pEDData=r28
.Llo231:
	lhz		r5,2(r27)		# edClassIndex=r5 pRecConfig=r27
	diab.li		r4,255		# edEntry=r4
	bl		Dem_MemSet
#             DEM_ASSERT_NODATAAVAILABLE_NO_RET(DEM_SID_MAINFUNCTION, FALSE)
	.d2line		5428
	diab.li		r3,54		# edEntry=r3
	diab.li		r4,0		# edEntry=r4
	diab.li		r5,85		# edClassIndex=r5
	diab.li		r6,48		# pEDStorage=r6
	bl		Det_ReportError
.L787:
#          }
#       }
#       recOffset += pRecConfig->size;
	.d2line		5431
	lhz		r0,2(r27)		# pRecConfig=r27
	se_add		r0,r29		# recOffset=r29
	mr		r29,r0		# recOffset=r29 recOffset=r0
#    }
	.d2line		5432
	diab.addi		r3,r31,1		# edEntry=r3 i=r31
	se_addi		r31,1		# i=r31 i=r31
	b		.L784
.L783:
# }
	.d2line		5433
	.d2epilogue_begin
.Llo233:
	lmw		r25,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	2,10
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2633:
	.type		StoreExternalExtendedData,@function
	.size		StoreExternalExtendedData,.-StoreExternalExtendedData
# Number of nodes = 138

# Allocations for StoreExternalExtendedData
#	?a4		pEvEntry
#	?a5		edEntry
#	?a6		edClassIndex
#	?a7		pEDStorage
#	?a8		firstTime
#	?a9		i
#	?a10		numRecords
#	?a11		recOffset
#	?a12		pEDData
#	?a13		pRecConfig
#	?a14		pRecConfigIndex
# static FUNC(boolean, DEM_CODE) HandleExtExtendedDataStorage(boolean isFailed, uint8 internalOrigin,
	.align		1
	.section	.text_vle
        .d2line         3522,32
#$$ld
.L2660:

#$$bf	HandleExtExtendedDataStorage,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
HandleExtExtendedDataStorage:
.Llo243:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r7,r4		# internalOrigin=r7 internalOrigin=r4
	mr		r31,r5		# eventMemoryEntryIndex=r31 eventMemoryEntryIndex=r5
	mr		r30,r6		# pEvMemEntry=r30 pEvMemEntry=r6
	.d2prologue_end
#    uint8 eventMemoryEntryIndex, Dem_NvEvMemEntryPtrType pEvMemEntry)
# {
#    boolean dataStored = FALSE;
	.d2line		3525
.Llo250:
	diab.li		r6,0		# dataStored=r6
# 
#    if (TRUE == CheckExtendedDataCaptureTrigger(isFailed, pEvMemEntry))
	.d2line		3527
.Llo251:
	mr		r0,r3		# isFailed=r0 isFailed=r3
	mr		r4,r30		# pEvMemEntry=r4 pEvMemEntry=r30
.Llo245:
	bl		CheckExtendedDataCaptureTrigger
.Llo244:
	rlwinm		r3,r3,0,24,31
	se_cmpi		r3,1
	bc		0,2,.L387	# ne
	.section	.text_vle
.L2669:
#    {
#       CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(pEvMemEntry->event_id);
	.d2line		3529
.Llo248:
	lis		r4,Dem_pPbCfg@ha		# dataStored=r4
.Llo252:
	lwz		r3,Dem_pPbCfg@l(r4)		# dataStored=r4
	lwz		r0,128(r3)		# intDtc=r0
.Llo255:
	lhz		r3,0(r30)		# pEvMemEntry=r30
	rlwinm		r3,r3,1,15,30
	se_add		r3,r0		# intDtc=r0
	lhz		r0,-2(r3)		# intDtc=r0
	mr		r0,r0		# intDtc=r0 intDtc=r0
#       CONST(uint8, AUTOMATIC) edClass = GetDtcEDClass(intDtc);
	.d2line		3530
	lwz		r3,Dem_pPbCfg@l(r4)		# dataStored=r4
	lwz		r3,32(r3)
	lwz		r4,Dem_pPbCfg@l(r4)		# dataStored=r4 dataStored=r4
	lwz		r4,92(r4)		# dataStored=r4 dataStored=r4
	rlwinm		r0,r0,0,16,31		# intDtc=r0 intDtc=r0
	lbzx		r0,r4,r0		# intDtc=r0 dataStored=r4
.Llo256:
	lbzx		r28,r3,r0
.Llo258:
	mr		r28,r28		# edClass=r28 edClass=r28
#       CONSTP2CONST(Dem_DataStorageType, AUTOMATIC, DEM_APPL_CONST) pEDStorage = Dem_LCfg.pp_ed_storage[internalOrigin];
	.d2line		3531
	lis		r3,(Dem_LCfg+76)@ha
	e_add16i		r3,r3,(Dem_LCfg+76)@l
.Llo246:
	rlwinm		r7,r7,2,22,29		# internalOrigin=r7 internalOrigin=r7
.Llo247:
	lwzx		r29,r3,r7
.Llo259:
	mr		r29,r29		# pEDStorage=r29 pEDStorage=r29
# 
#       if (TRUE == pEvMemEntry->ed_stored)
	.d2line		3533
	lbz		r0,12(r30)		# intDtc=r0 pEvMemEntry=r30
.Llo257:
	se_cmpi		r0,1		# intDtc=r0
	bc		0,2,.L388	# ne
#       {
#          /* External extended data has already been stored, update existing values */
#          StoreExternalExtendedData(pEvMemEntry, pEvMemEntry->ed_storage_index, edClass, 
	.d2line		3536
.Llo253:
	lhz		r4,2(r30)		# dataStored=r4 pEvMemEntry=r30
	mr		r3,r30		# pEvMemEntry=r3 pEvMemEntry=r30
	mr		r5,r28		# edClass=r5 edClass=r28
	mr		r6,r29		# pEDStorage=r6 pEDStorage=r29
	diab.li		r7,0		# internalOrigin=r7
	bl		StoreExternalExtendedData
	b		.L389
.L388:
#                                     pEDStorage, FALSE);
#       }
#       else if ((NULL_PTR != pEDStorage) && 
	.d2line		3539
	se_cmpi		r29,0		# pEDStorage=r29
	bc		1,2,.L389	# eq
	rlwinm		r5,r28,0,24,31		# edClass=r28
	cmpi		0,0,r5,255
	bc		1,2,.L389	# eq
	.section	.text_vle
.L2681:
#                (DEM_ED_CLASS_INVALID != edClass))
#       {
#          uint16 edEntry;
#          if (TRUE == FindFreeExtendedDataEntry(pEDStorage, &edEntry))
	.d2line		3543
	diab.addi		r4,r1,8		# dataStored=r4
	mr		r3,r29		# pEDStorage=r3 pEDStorage=r29
	bl		FindFreeExtendedDataEntry
	rlwinm		r3,r3,0,24,31		# pEDStorage=r3 pEDStorage=r3
	se_cmpi		r3,1		# pEDStorage=r3
	bc		0,2,.L389	# ne
#          {
#             /* Mark the extended data entry as occupied */
#             *pEDStorage->p_get_entry_occupied(edEntry) = eventMemoryEntryIndex;
	.d2line		3546
	lwz		r0,4(r29)		# intDtc=r0 pEDStorage=r29
	mtspr		ctr,r0		# intDtc=ctr
	lhz		r3,8(r1)		# pEDStorage=r3
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
	stb		r31,0(r3)		# pEDStorage=r3 eventMemoryEntryIndex=r31
#             StoreExternalExtendedData(pEvMemEntry, edEntry, edClass, pEDStorage, TRUE);
	.d2line		3547
	lhz		r4,8(r1)		# dataStored=r4
	mr		r3,r30		# pEvMemEntry=r3 pEvMemEntry=r30
	mr		r5,r28		# edClass=r5 edClass=r28
	mr		r6,r29		# pEDStorage=r6 pEDStorage=r29
	diab.li		r7,1		# internalOrigin=r7
	bl		StoreExternalExtendedData
	.section	.text_vle
.L2682:
.L389:
#          }
#       }
#       else
#       {
#          /* Empty else */
#       }
# 
#       dataStored = TRUE;
	.d2line		3555
	diab.li		r6,1		# dataStored=r6
	.section	.text_vle
.L2670:
.L387:
#    }
# 
#    return dataStored;
	.d2line		3558
.Llo249:
	rlwinm		r3,r6,0,24,31		# pEvMemEntry=r3 dataStored=r6
# }
	.d2line		3559
	.d2epilogue_begin
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# intDtc=r0
	mtspr		lr,r0		# intDtc=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo254:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2661:
	.type		HandleExtExtendedDataStorage,@function
	.size		HandleExtExtendedDataStorage,.-HandleExtExtendedDataStorage
# Number of nodes = 130

# Allocations for HandleExtExtendedDataStorage
#	?a4		isFailed
#	?a5		internalOrigin
#	?a6		eventMemoryEntryIndex
#	?a7		pEvMemEntry
#	?a8		dataStored
#	?a9		intDtc
#	?a10		edClass
#	?a11		pEDStorage
#	SP,8		edEntry
# static FUNC(void, DEM_CODE) StoreConfirmedOccurrenceInformation(Dem_EventIdType eventId)
	.align		1
	.section	.text_vle
        .d2line         3409,29
#$$ld
.L2688:

#$$bf	StoreConfirmedOccurrenceInformation,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,cr0,lr
	.d2_cfa_start __cie
StoreConfirmedOccurrenceInformation:
.Llo260:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)		# eventId=r0
	.d2_cfa_offset    108,-1
	mr		r0,r3		# eventId=r0 eventId=r3
	.d2prologue_end
# {
#    uint16 intDtc = Dem_GetEventIntDtc(eventId);
	.d2line		3411
.Llo261:
	lis		r3,Dem_pPbCfg@ha
.Llo262:
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,128(r3)
	rlwinm		r4,r0,1,15,30		# intDtc=r4 eventId=r0
.Llo264:
	se_add		r3,r4		# intDtc=r4
	lhz		r4,-2(r3)		# intDtc=r4
	mr		r4,r4		# intDtc=r4 intDtc=r4
# 
#    if (DEM_INT_DTC_INVALID != intDtc)
	.d2line		3413
	rlwinm		r3,r4,0,16,31		# intDtc=r4
	cmpli		0,0,r3,65535
	bc		1,2,.L380	# eq
#    {
#       if (IsUdsDtc(intDtc))
	.d2line		3415
.Llo265:
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,76(r3)
.Llo266:
	rlwinm		r4,r4,2,14,29		# intDtc=r4 intDtc=r4
.Llo267:
	lwzx		r3,r3,r4
	se_cmpi		r3,0
	bc		1,2,.L380	# eq
#       {
#          if (DEM_EVENTID_INVALID == Dem_NvAdmin.event_occurrence_info.first_confirmed_event)
	.d2line		3417
	lis		r3,(Dem_NvAdmin+6)@ha
	lhz		r3,(Dem_NvAdmin+6)@l(r3)
	se_cmpi		r3,0
	bc		0,2,.L383	# ne
#          {
#             Dem_NvAdmin.event_occurrence_info.first_confirmed_event = eventId;
	.d2line		3419
	lis		r3,(Dem_NvAdmin+6)@ha
	sth		r0,(Dem_NvAdmin+6)@l(r3)		# eventId=r0
.L383:
#          }
#          Dem_NvAdmin.event_occurrence_info.most_recent_confirmed_event = eventId;
	.d2line		3421
	lis		r3,(Dem_NvAdmin+2)@ha
	sth		r0,(Dem_NvAdmin+2)@l(r3)		# eventId=r0
.L380:
#       }
#    }
# }
	.d2line		3424
	.d2epilogue_begin
.Llo263:
	lwz		r0,20(r1)		# eventId=r0
	mtspr		lr,r0		# eventId=lr
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2689:
	.type		StoreConfirmedOccurrenceInformation,@function
	.size		StoreConfirmedOccurrenceInformation,.-StoreConfirmedOccurrenceInformation
# Number of nodes = 52

# Allocations for StoreConfirmedOccurrenceInformation
#	?a4		eventId
#	?a5		intDtc
# static FUNC(boolean, DEM_CODE) ActivateIndicators(Dem_NvEvMemEntryPtrType pEvMemEntry, Dem_EventIdType eventId)
	.align		1
	.section	.text_vle
        .d2line         6047,32
#$$ld
.L2696:

#$$bf	ActivateIndicators,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
ActivateIndicators:
.Llo268:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	27,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# pEvMemEntry=r31 pEvMemEntry=r3
	mr		r30,r4		# eventId=r30 eventId=r4
	.d2prologue_end
# {
#    boolean retVal = FALSE;
	.d2line		6049
	diab.li		r29,0		# retVal=r29
# #if (STD_ON == DEM_OBD_SUPPORT)
#    uint16 intDtc;
# #endif /* STD_ON == DEM_OBD_SUPPORT */
#    CONST(uint8, AUTOMATIC) indAttr = Dem_GetEventIndAttr(eventId);
	.d2line		6053
.Llo273:
	lis		r3,Dem_pPbCfg@ha
.Llo269:
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,108(r3)
	rlwinm		r4,r4,0,16,31		# eventId=r4 eventId=r4
	se_add		r3,r4		# eventId=r4
	lbz		r28,-1(r3)		# indAttr=r28
.Llo275:
	mr		r28,r28		# indAttr=r28 indAttr=r28
# 
#    if (DEM_INDICATOR_ATTR_INVALID != indAttr)
	.d2line		6055
	rlwinm		r0,r28,0,24,31		# indAttr=r28
	cmpi		0,0,r0,255
	bc		1,2,.L921	# eq
	.section	.text_vle
.L2705:
#    {
#       /* Loop over all indicators */
#       uint8 i;
#       for (i = 0; i < Dem_LCfg.num_indicators; i++)
	.d2line		6059
.Llo270:
	diab.li		r27,0		# i=r27
.L922:
.Llo272:
	rlwinm		r4,r27,0,24,31		# eventId=r4 i=r27
	lis		r3,(Dem_LCfg+138)@ha		# indicatorBehaviour=r3
.Llo276:
	lbz		r0,(Dem_LCfg+138)@l(r3)		# indicatorBehaviour=r3
	se_cmp		r4,r0		# eventId=r4
	bc		0,0,.L921	# ge
#       {
#          /*
#           * [SWS_Dem_00501], [SWS_Dem_01052]
#           *
#           * GetIndAttrFailureThreshold will return at maximum 255 (uint8).
#           * It's therefore safe to typecast (Dem_GetFailureCounter() + 1U) since
#           * the expression will never be bigger than 255.
#           */
#          if ((uint8)(Dem_GetFailureCounter(pEvMemEntry, eventId) + 1U) >= GetIndAttrFailureThreshold(indAttr, i))
	.d2line		6068
.Llo277:
	rlwinm		r4,r30,0,16,31		# eventId=r4 eventId=r30
	mr		r3,r31		# pEvMemEntry=r3 pEvMemEntry=r31
	bl		Dem_GetFailureCounter
.Llo278:
	se_addi		r3,1		# indicatorBehaviour=r3 indicatorBehaviour=r3
	rlwinm		r3,r3,0,24,31		# indicatorBehaviour=r3 indicatorBehaviour=r3
	lis		r4,Dem_pPbCfg@ha		# eventId=r4
	lwz		r4,Dem_pPbCfg@l(r4)		# eventId=r4 eventId=r4
	lwz		r4,136(r4)		# eventId=r4 eventId=r4
	rlwinm		r0,r28,2,22,29		# indAttr=r28
	lwzx		r0,r4,r0		# eventId=r4
	rlwinm		r4,r27,0,24,31		# eventId=r4 i=r27
	e_mulli		r4,r4,3		# eventId=r4 eventId=r4
	se_add		r4,r0		# eventId=r4 eventId=r4
	lbz		r0,2(r4)		# eventId=r4
	se_cmp		r3,r0		# indicatorBehaviour=r3
	bc		1,0,.L925	# lt
	.section	.text_vle
.L2711:
#          {
#             CONST(uint8, AUTOMATIC) indicatorBehaviour = Dem_GetIndAttrBehaviour(indAttr, i);
	.d2line		6070
.Llo279:
	lis		r3,Dem_pPbCfg@ha		# indicatorBehaviour=r3
.Llo280:
	lwz		r3,Dem_pPbCfg@l(r3)		# indicatorBehaviour=r3 indicatorBehaviour=r3
	lwz		r3,136(r3)		# indicatorBehaviour=r3 indicatorBehaviour=r3
	rlwinm		r0,r28,2,22,29		# indAttr=r28
	lwzx		r3,r3,r0		# indicatorBehaviour=r3 indicatorBehaviour=r3
	rlwinm		r4,r27,0,24,31		# eventId=r4 i=r27
	e_mulli		r4,r4,3		# eventId=r4 eventId=r4
	lbzx		r3,r3,r4		# indicatorBehaviour=r3 indicatorBehaviour=r3
	mr		r3,r3		# indicatorBehaviour=r3 indicatorBehaviour=r3
# #if (STD_ON == DEM_OBD_SUPPORT)
#             intDtc = Dem_GetEventIntDtc(eventId);
# #if (STD_ON == DEM_OBD_PERMANENT_SUPPORT)
#             /* [VSTAR_Dem_00122], [SWS_Dem_00590] */
#             if ((Dem_LCfg.mil_indicator_id == i) &&
#                Dem_IsObdDtc(intDtc) &&
#                (DEM_INDICATOR_CONTINUOUS == indicatorBehaviour))
#             {
#                Dem_EnterDtcInPermanentMemory(intDtc);
#             }
# #endif /* STD_ON == DEM_OBD_PERMANENT_SUPPORT */
# 
#             if ((Dem_LCfg.mil_indicator_id != i) || Dem_IsObdDtc(intDtc))
# #endif /* STD_ON == DEM_OBD_SUPPORT */
#             {
#                /* [VSTAR_Dem_00136] MIL shall only be enabled by OBD-events. Check runtime to handle accidental wrong calibration. */
#                if (DEM_INDICATOR_CONTINUOUS == indicatorBehaviour)
	.d2line		6087
	rlwinm		r0,r3,0,24,31		# indicatorBehaviour=r3
	se_cmpi		r0,1
	bc		0,2,.L926	# ne
#                {
#                   Dem_SetBits(Dem_LCfg.p_indicator_status[i], (Dem_IndicatorStatusType)DEM_INDICATOR_CONTINUOUS);
	.d2line		6089
.Llo281:
	lis		r3,(Dem_LCfg+108)@ha		# indicatorBehaviour=r3
.Llo282:
	lwz		r3,(Dem_LCfg+108)@l(r3)		# indicatorBehaviour=r3 indicatorBehaviour=r3
	rlwinm		r5,r27,0,24,31		# i=r27
	lbzx		r0,r3,r5		# indicatorBehaviour=r3
	.diab.bseti		r0,31
	stbx		r0,r3,r5		# indicatorBehaviour=r3
# 
#                   /* Set indicator specific WIR-bit in the event memory entry */
#                   Dem_SetIndicatorOn(pEvMemEntry, eventId, i);
	.d2line		6092
	rlwinm		r4,r30,0,16,31		# eventId=r4 eventId=r30
	mr		r3,r31		# pEvMemEntry=r3 pEvMemEntry=r31
.Llo283:
	bl		Dem_SetIndicatorOn
# 
#                   retVal = TRUE;
	.d2line		6094
	diab.li		r29,1		# retVal=r29
	b		.L925
.L926:
#                }
#                else if (DEM_INDICATOR_BLINKING == indicatorBehaviour)
	.d2line		6096
.Llo284:
	rlwinm		r0,r3,0,24,31		# indicatorBehaviour=r3
	se_cmpi		r0,2
	bc		0,2,.L928	# ne
#                {
#                   Dem_SetBits(Dem_LCfg.p_indicator_status[i], (Dem_IndicatorStatusType)DEM_INDICATOR_BLINKING);
	.d2line		6098
.Llo285:
	lis		r3,(Dem_LCfg+108)@ha		# indicatorBehaviour=r3
.Llo286:
	lwz		r3,(Dem_LCfg+108)@l(r3)		# indicatorBehaviour=r3 indicatorBehaviour=r3
	rlwinm		r5,r27,0,24,31		# i=r27
	lbzx		r0,r3,r5		# indicatorBehaviour=r3
	.diab.bseti		r0,30
	stbx		r0,r3,r5		# indicatorBehaviour=r3
# 
#                   /* Set indicator specific WIR-bit in the event memory entry */
#                   Dem_SetIndicatorOn(pEvMemEntry, eventId, i);
	.d2line		6101
	rlwinm		r4,r30,0,16,31		# eventId=r4 eventId=r30
	mr		r3,r31		# pEvMemEntry=r3 pEvMemEntry=r31
.Llo287:
	bl		Dem_SetIndicatorOn
# 
#                   retVal = TRUE;
	.d2line		6103
	diab.li		r29,1		# retVal=r29
	b		.L925
.L928:
#                }
#                else if (DEM_INDICATOR_BLINK_CONT == indicatorBehaviour)
	.d2line		6105
.Llo288:
	rlwinm		r3,r3,0,24,31		# indicatorBehaviour=r3 indicatorBehaviour=r3
	se_cmpi		r3,3		# indicatorBehaviour=r3
	bc		0,2,.L925	# ne
#                {
#                   Dem_LCfg.p_indicator_status[i] = DEM_INDICATOR_BLINK_CONT;
	.d2line		6107
.Llo289:
	diab.li		r0,3
	lis		r3,(Dem_LCfg+108)@ha		# indicatorBehaviour=r3
.Llo290:
	lwz		r3,(Dem_LCfg+108)@l(r3)		# indicatorBehaviour=r3 indicatorBehaviour=r3
	rlwinm		r5,r27,0,24,31		# i=r27
	stbux		r0,r3,r5		# indicatorBehaviour=r3
# 
#                   /* Set indicator specific WIR-bit in the event memory entry */
#                   Dem_SetIndicatorOn(pEvMemEntry, eventId, i);
	.d2line		6110
	rlwinm		r4,r30,0,16,31		# eventId=r4 eventId=r30
	mr		r3,r31		# pEvMemEntry=r3 pEvMemEntry=r31
.Llo291:
	bl		Dem_SetIndicatorOn
# 
#                   retVal = TRUE;
	.d2line		6112
	diab.li		r29,1		# retVal=r29
	.section	.text_vle
.L2712:
.L925:
#                }
#                else
#                {
#                   /* DEM_INDICATOR_OFF: Indicator not enabled for this class */
#                }
#             }
#          }
#       }
	.d2line		6120
	diab.addi		r4,r27,1		# eventId=r4 i=r27
	se_addi		r27,1		# i=r27 i=r27
	b		.L922
	.section	.text_vle
.L2706:
.L921:
#    }
# 
# #if (STD_ON == DEM_OBD_SUPPORT)
#    if (TRUE == retVal)
#    {
#       if ((FALSE != Dem_LCfg.select_first_mil_event_obd_ff) &&
#           (DEM_INDICATOR_OFF != Dem_LCfg.p_indicator_status[Dem_LCfg.mil_indicator_id]) && 
#           (DEM_INDICATOR_OFF == Dem_NvOBDAdmin.mil_status) &&
#           (DEM_INT_DTC_INVALID == Dem_NvOBDAdmin.first_mil_dtc))
#       {
#          /* [VSTAR_Dem_00070] */
#          Dem_NvOBDAdmin.first_mil_dtc = Dem_GetEventIntDtc(eventId);
#       }
#       UpdateMILStatus();
#    }
# #endif /* STD_ON == DEM_OBD_SUPPORT */
# 
#    return retVal;
	.d2line		6138
.Llo271:
	rlwinm		r3,r29,0,24,31		# indicatorBehaviour=r3 retVal=r29
# }
	.d2line		6139
	.d2epilogue_begin
	lmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
.Llo274:
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2697:
	.type		ActivateIndicators,@function
	.size		ActivateIndicators,.-ActivateIndicators
# Number of nodes = 170

# Allocations for ActivateIndicators
#	?a4		pEvMemEntry
#	?a5		eventId
#	?a6		$$14
#	?a7		$$13
#	?a8		retVal
#	?a9		indAttr
#	?a10		i
#	?a11		indicatorBehaviour
# FUNC(void, DEM_CODE) Dem_SetUdsBits(Dem_EventIdType eventId, uint8 bitMask)
	.align		2
	.section	.text_vle
        .d2line         7958,22
#$$ld
.L2719:

#$$bf	Dem_SetUdsBits,interprocedural,rasave,nostackparams
	.globl		Dem_SetUdsBits
	.d2_cfa_start __cie
Dem_SetUdsBits:
.Llo292:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	30,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# eventId=r3 eventId=r3
	mr		r30,r4		# bitMask=r30 bitMask=r4
	.d2prologue_end
# {
#    P2VAR(Dem_UdsStatusByteType, AUTOMATIC, DEM_NV_DATA) pUdsStatus = Dem_GetUdsStatusPtr(eventId);
	.d2line		7960
.Llo296:
	lis		r31,(Dem_NvUdsStatus-1)@ha		# pUdsStatus=r31
.Llo297:
	e_add16i		r31,r31,(Dem_NvUdsStatus-1)@l		# pUdsStatus=r31 pUdsStatus=r31
	rlwinm		r3,r3,0,16,31		# eventId=r3 eventId=r3
	se_add		r3,r31		# eventId=r3 eventId=r3 pUdsStatus=r31
.Llo293:
	mr		r31,r3		# pUdsStatus=r31 pUdsStatus=r3
# 
#    /* ---------- Enter critical section ---------- */
#    SchM_Enter_Dem_EaEventStatus();
	.d2line		7963
	bl		SchM_Enter_Dem_EaEventStatus
#    Dem_SetBits(*pUdsStatus, bitMask);
	.d2line		7964
	lbz		r0,0(r31)		# pUdsStatus=r31
	or		r0,r0,r30		# bitMask=r30
	stb		r0,0(r31)		# pUdsStatus=r31
#    SchM_Exit_Dem_EaEventStatus();
	.d2line		7965
	bl		SchM_Exit_Dem_EaEventStatus
#    /* ---------- Exit critical section ----------- */
# 
#    /* Set global flag to indicate that the Uds status has changed */
#    UdsStatusModified = TRUE;
	.d2line		7969
	diab.li		r3,1		# eventId=r3
.Llo294:
	lis		r4,UdsStatusModified@ha
	e_add16i		r4,r4,UdsStatusModified@l
	stb		r3,0(r4)		# eventId=r3
# }
	.d2line		7970
	.d2epilogue_begin
	lmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	3,10
.Llo298:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo295:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2720:
	.type		Dem_SetUdsBits,@function
	.size		Dem_SetUdsBits,.-Dem_SetUdsBits
# Number of nodes = 20

# Allocations for Dem_SetUdsBits
#	?a4		eventId
#	?a5		bitMask
#	?a6		pUdsStatus
# static FUNC(void, DEM_CODE) HandleFaultConfirmation(Dem_EventIdType eventId, CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC) pEvMemEntry)
	.align		1
	.section	.text_vle
        .d2line         3335,29
#$$ld
.L2728:

#$$bf	HandleFaultConfirmation,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
HandleFaultConfirmation:
.Llo299:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	30,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# eventId=r31 eventId=r3
	mr		r30,r4		# pEvMemEntry=r30 pEvMemEntry=r4
	.d2prologue_end
# {
# #if (DEM_IMMEDIATE_IND_ON_HEALED_DTC == STD_ON)
#    CONST(uint8, AUTOMATIC) udsStatus = Dem_GetUdsStatus(eventId);
#    if (Dem_IsSet(udsStatus, DEM_UDS_SB_CDTC) &&
#        Dem_IsClr(udsStatus, DEM_UDS_SB_WIR))
#    {
#       /*
#       * [VSTAR_Dem_00026]
#       * The parameter DemImmediateIndicatorOnHealedDTC specifies if the indicators of a
#       * healed event shall be activated immediately on test reported failed.
#       */
#       Dem_SetFailureCounter(pEvMemEntry, eventId, Dem_GetEventConfirmedThreshold(eventId));
#    }
# #endif
# 
#    /* WIR-bit set if at least one indicator is activated */
#    if (ActivateIndicators(pEvMemEntry, eventId))
	.d2line		3352
.Llo303:
	mr		r4,r31		# eventId=r4 eventId=r31
.Llo304:
	mr		r3,r30		# pEvMemEntry=r3 pEvMemEntry=r30
.Llo300:
	bl		ActivateIndicators
	e_andi.		r3,r3,255
	bc		1,2,.L368	# eq
#    {
#       /* [SWS_Dem_00395] [SWS_Dem_00566] */
#       Dem_SetUdsBits(eventId, DEM_UDS_SB_WIR_SET);
	.d2line		3355
.Llo301:
	mr		r3,r31		# eventId=r3 eventId=r31
	diab.li		r4,128
	bl		Dem_SetUdsBits
.L368:
#    }
# 
#    /*
#     * Handle CDTC-bit
#     *
#     * Dem_GetEventConfirmedThreshold will return at maximum 255 (uint8).
#     * It's therefore safe to typecast (Dem_GetFailureCounter() + 1U) since
#     * the expression will never be bigger than 255.
#     */
#    if ((uint8)(Dem_GetFailureCounter(pEvMemEntry, eventId) + 1U) >= Dem_GetEventConfirmedThreshold(eventId))
	.d2line		3365
	rlwinm		r4,r31,0,16,31		# eventId=r31
	mr		r3,r30		# pEvMemEntry=r3 pEvMemEntry=r30
	bl		Dem_GetFailureCounter
	se_addi		r3,1
	rlwinm		r3,r3,0,24,31
	lis		r5,Dem_pPbCfg@ha
	lwz		r4,Dem_pPbCfg@l(r5)
	lwz		r4,48(r4)
	lwz		r5,Dem_pPbCfg@l(r5)
	lwz		r0,104(r5)
	rlwinm		r5,r31,0,16,31		# eventId=r31
	se_add		r5,r0
	lbz		r0,-1(r5)
	lbzx		r0,r4,r0
	se_cmp		r3,r0
	bc		1,0,.L367	# lt
#    {
#       /* [VSTAR_Dem_00361]: The UDS status bit 3 (ConfirmedDTC) shall be set when the failure counter reach
#        * the value DemEventFailureCycleCounterThreshold-1.
#        */
#       if (Dem_IsClr(pEvMemEntry->uds_status, DEM_UDS_SB_CDTC))
	.d2line		3370
	lbz		r0,13(r30)		# pEvMemEntry=r30
	se_btsti		r0,28
	bc		0,2,.L370	# ne
#       {
#          /* [SWS_Dem_01051]: Only set confirmed bit for the first event that reached the confirmed threshold. */
#          Dem_SetUdsBits(eventId, DEM_UDS_SB_CDTC_SET);
	.d2line		3373
	mr		r3,r31		# eventId=r3 eventId=r31
	diab.li		r4,8
	bl		Dem_SetUdsBits
#          /* [VSTAR_Dem_00370], [VSTAR_Dem_00371]: Set the owner of this event memory entry to the event that first reached the confirmed threshold.
#           * Only needed in case of event combination on storage but does not hurt for the other event combination alternatives either.
#           */
#          pEvMemEntry->event_id = eventId;
	.d2line		3377
	sth		r31,0(r30)		# pEvMemEntry=r30 eventId=r31
# 
#          /* Store confirmed occurrence information */
#          StoreConfirmedOccurrenceInformation(eventId);
	.d2line		3380
	mr		r3,r31		# eventId=r3 eventId=r31
	bl		StoreConfirmedOccurrenceInformation
.L370:
#       }
# 
#       /* 
#        * [VSTAR_Dem_00161]
#        * The failure counter shall be cleared when reaching the value DemEventFailureCycleCounterThreshold-1.
#        */
#       Dem_SetFailureCounter(pEvMemEntry, eventId, 0);
	.d2line		3387
	rlwinm		r4,r31,0,16,31		# eventId=r31
	mr		r3,r30		# pEvMemEntry=r3 pEvMemEntry=r30
	diab.li		r5,0
	bl		Dem_SetFailureCounter
.L367:
#    }
# }
	.d2line		3389
	.d2epilogue_begin
.Llo302:
	lmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2729:
	.type		HandleFaultConfirmation,@function
	.size		HandleFaultConfirmation,.-HandleFaultConfirmation
# Number of nodes = 80

# Allocations for HandleFaultConfirmation
#	?a4		eventId
#	?a5		pEvMemEntry
# static FUNC(void, DEM_CODE) HandleOccurrenceCounter(CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC) pEvMemEntry)
	.align		1
	.section	.text_vle
        .d2line         3561,29
#$$ld
.L2735:

#$$bf	HandleOccurrenceCounter,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,cr0,lr
	.d2_cfa_start __cie
HandleOccurrenceCounter:
.Llo305:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	mr		r4,r3		# pEvMemEntry=r4 pEvMemEntry=r3
	.d2prologue_end
# {
# #if (STD_ON == DEM_OCCCTR_TF)
#    /* Increment Occurrence counter, [SWS_Dem_00523] [SWS_Dem_00524] [SWS_Dem_00625] */
#    if (Dem_IsClr(pEvMemEntry->uds_status, DEM_UDS_SB_TF) &&
	.d2line		3565
	lbz		r0,13(r4)		# pEvMemEntry=r4
	se_btsti		r0,31
	bc		0,2,.L396	# ne
.Llo306:
	lbz		r0,15(r4)		# pEvMemEntry=r4
.Llo307:
	cmpi		0,0,r0,255
	bc		0,0,.L396	# ge
#       (pEvMemEntry->occurrence_counter < DEM_UINT8_MAX))
#    {
#       pEvMemEntry->occurrence_counter++;
	.d2line		3568
	lbz		r3,15(r4)		# pEvMemEntry=r4
	se_addi		r3,1
	stb		r3,15(r4)		# pEvMemEntry=r4
.L396:
#    }
# #else /* (STD_ON == DEM_OCCCTR_CDTC) */
#    {
#       /* Increment Occurrence counter, [SWS_Dem_00580] [SWS_Dem_00625] */
#       CONST(uint8, AUTOMATIC) udsStatus = Dem_GetUdsStatus(pEvMemEntry->event_id);
#       if(Dem_IsClr(pEvMemEntry->uds_status, DEM_UDS_SB_TF) &&
#          Dem_IsSet(udsStatus, DEM_UDS_SB_CDTC) &&
#          (pEvMemEntry->occurrence_counter < DEM_UINT8_MAX))
#       {
#          pEvMemEntry->occurrence_counter++;
#       }
#    }
# #endif /* STD_ON == DEM_OCCCTR_CDTC */
# }
	.d2line		3582
	.d2epilogue_begin
.Llo308:
	lwz		r0,20(r1)
.Llo309:
	mtspr		lr,r0
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo310:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2736:
	.type		HandleOccurrenceCounter,@function
	.size		HandleOccurrenceCounter,.-HandleOccurrenceCounter
# Number of nodes = 21

# Allocations for HandleOccurrenceCounter
#	?a4		pEvMemEntry
# static FUNC(void, DEM_CODE) HandleOffBoardCycleCounters(boolean isFailed, Dem_NvEvMemEntryPtrType pEvMemEntry)
	.align		1
	.section	.text_vle
        .d2line         3584,29
#$$ld
.L2741:

#$$bf	HandleOffBoardCycleCounters,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,cr0,lr
	.d2_cfa_start __cie
HandleOffBoardCycleCounters:
.Llo311:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# isFailed=r3 isFailed=r3
	mr		r4,r4		# pEvMemEntry=r4 pEvMemEntry=r4
	.d2prologue_end
# {
#    /* Clear operation cycle counter "Cycle since last failed", [SWS_Dem_00772] */
#    if ((TRUE == isFailed) && Dem_IsClr(pEvMemEntry->uds_status, DEM_UDS_SB_TF))
	.d2line		3587
	rlwinm		r3,r3,0,24,31		# isFailed=r3 isFailed=r3
	se_cmpi		r3,1		# isFailed=r3
	bc		0,2,.L399	# ne
.Llo312:
	lbz		r0,13(r4)		# pEvMemEntry=r4
	se_btsti		r0,31
	bc		0,2,.L399	# ne
#    {
#       pEvMemEntry->cycles_since_last_failed = (uint8)0U;
	.d2line		3589
	diab.li		r0,0
	stb		r0,16(r4)		# pEvMemEntry=r4
.L399:
#    }
# }
	.d2line		3591
	.d2epilogue_begin
.Llo313:
	lwz		r0,20(r1)
	mtspr		lr,r0
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2742:
	.type		HandleOffBoardCycleCounters,@function
	.size		HandleOffBoardCycleCounters,.-HandleOffBoardCycleCounters
# Number of nodes = 19

# Allocations for HandleOffBoardCycleCounters
#	?a4		isFailed
#	?a5		pEvMemEntry
# static FUNC(void, DEM_CODE) HandleIntExtendedDataStorage(Dem_EventIdType eventId, boolean isFailed, Dem_NvEvMemEntryPtrType pEvMemEntry)
	.align		1
	.section	.text_vle
        .d2line         3593,29
#$$ld
.L2748:

#$$bf	HandleIntExtendedDataStorage,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
HandleIntExtendedDataStorage:
.Llo314:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# eventId=r31 eventId=r3
	mr		r30,r4		# isFailed=r30 isFailed=r4
	mr		r29,r5		# pEvMemEntry=r29 pEvMemEntry=r5
	.d2prologue_end
# {
#    if (TRUE == isFailed)
	.d2line		3595
	rlwinm		r3,r30,0,24,31		# isFailed=r30
.Llo315:
	se_cmpi		r3,1
	bc		0,2,.L403	# ne
#    {
#       HandleFaultConfirmation(eventId, pEvMemEntry);
	.d2line		3597
.Llo316:
	mr		r3,r31		# eventId=r3 eventId=r31
.Llo318:
	mr		r4,r29		# pEvMemEntry=r4 pEvMemEntry=r29
	bl		HandleFaultConfirmation
# 
# #if (DEM_OBD_SUPPORT == STD_ON)
#       /* Clear warm-up cycle counter when DTC status bit testFailed is set, [VSTAR_Dem_00084] */
#       pEvMemEntry->wuc_counter = (uint8)0U;
# #endif /* DEM_OBD_SUPPORT == STD_ON */
# 
#       HandleOccurrenceCounter(pEvMemEntry);
	.d2line		3604
	mr		r3,r29		# pEvMemEntry=r3 pEvMemEntry=r29
	bl		HandleOccurrenceCounter
.L403:
#    }
# 
#    HandleOffBoardCycleCounters(isFailed, pEvMemEntry);
	.d2line		3607
.Llo319:
	mr		r3,r30		# isFailed=r3 isFailed=r30
.Llo320:
	mr		r4,r29		# pEvMemEntry=r4 pEvMemEntry=r29
.Llo321:
	bl		HandleOffBoardCycleCounters
# 
#    /* Clear aging counter and all healing counters */
#    Dem_SetHealingCounter(pEvMemEntry, eventId, 0);
	.d2line		3610
	rlwinm		r4,r31,0,16,31		# pEvMemEntry=r4 eventId=r31
	mr		r3,r29		# pEvMemEntry=r3 pEvMemEntry=r29
	diab.li		r5,0
	bl		Dem_SetHealingCounter
#    pEvMemEntry->aging_counter = 0;
	.d2line		3611
	diab.li		r3,0		# isFailed=r3
.Llo322:
	stb		r3,19(r29)		# pEvMemEntry=r29 isFailed=r3
# }
	.d2line		3612
	.d2epilogue_begin
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
.Llo317:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo323:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2749:
	.type		HandleIntExtendedDataStorage,@function
	.size		HandleIntExtendedDataStorage,.-HandleIntExtendedDataStorage
# Number of nodes = 37

# Allocations for HandleIntExtendedDataStorage
#	?a4		eventId
#	?a5		isFailed
#	?a6		pEvMemEntry
# static FUNC(boolean, DEM_CODE) IsAllFreezeFrameInstancesSaved(uint16 intDtc, uint8 numStoredFF)
	.align		1
	.section	.text_vle
        .d2line         6622,32
#$$ld
.L2756:

#$$bf	IsAllFreezeFrameInstancesSaved,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,cr0,lr
	.d2_cfa_start __cie
IsAllFreezeFrameInstancesSaved:
.Llo324:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# intDtc=r3 intDtc=r3
	mr		r0,r4		# numStoredFF=r0 numStoredFF=r4
	.d2prologue_end
# {
#    boolean retVal = FALSE;
	.d2line		6624
	diab.li		r4,0		# retVal=r4
#    uint8 ffRecNumClassIdx = GetDtcFFRecNumClass(intDtc);
	.d2line		6625
.Llo326:
	lis		r6,Dem_pPbCfg@ha
	lwz		r5,Dem_pPbCfg@l(r6)
	lwz		r5,36(r5)
	lwz		r6,Dem_pPbCfg@l(r6)
	lwz		r6,92(r6)
	rlwinm		r3,r3,0,16,31		# intDtc=r3 intDtc=r3
	lbzx		r3,r6,r3		# intDtc=r3
	lbzx		r3,r5,r3		# intDtc=r3
.Llo325:
	mr		r3,r3		# ffRecNumClassIdx=r3 ffRecNumClassIdx=r3
# 
#    if ((DEM_FF_REC_NUM_CLASS_INVALID != ffRecNumClassIdx) &&
	.d2line		6627
	rlwinm		r5,r3,0,24,31		# ffRecNumClassIdx=r3
	cmpi		0,0,r5,255
	bc		1,2,.L1039	# eq
.Llo327:
	rlwinm		r0,r0,0,24,31		# numStoredFF=r0 numStoredFF=r0
	lis		r5,(Dem_LCfg+32)@ha
	lwz		r5,(Dem_LCfg+32)@l(r5)
.Llo330:
	rlwinm		r3,r3,3,21,28		# ffRecNumClassIdx=r3 ffRecNumClassIdx=r3
	se_add		r3,r5		# ffRecNumClassIdx=r3 ffRecNumClassIdx=r3
	lbz		r3,4(r3)		# ffRecNumClassIdx=r3 ffRecNumClassIdx=r3
	se_cmp		r0,r3		# numStoredFF=r0 ffRecNumClassIdx=r3
#        (numStoredFF == GetFFRecNumClassNumFF(ffRecNumClassIdx)))
#    {
#       retVal = TRUE;
	.d2line		6630
	diab.li		r3,1		# ffRecNumClassIdx=r3
	isel		r4,r3,r4,2		# retVal=r4 ffRecNumClassIdx=r3 retVal=r4
.L1039:
#    }
# 
#    return retVal;
	.d2line		6633
.Llo328:
	rlwinm		r3,r4,0,24,31		# ffRecNumClassIdx=r3 retVal=r4
# }
	.d2line		6634
	.d2epilogue_begin
	lwz		r0,20(r1)		# numStoredFF=r0
	mtspr		lr,r0		# numStoredFF=lr
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo329:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2757:
	.type		IsAllFreezeFrameInstancesSaved,@function
	.size		IsAllFreezeFrameInstancesSaved,.-IsAllFreezeFrameInstancesSaved
# Number of nodes = 46

# Allocations for IsAllFreezeFrameInstancesSaved
#	?a4		intDtc
#	?a5		numStoredFF
#	?a6		retVal
#	?a7		ffRecNumClassIdx
# static FUNC(boolean, DEM_CODE) CheckFreezeFrameCaptureTrigger(boolean isFailed,
	.align		1
	.section	.text_vle
        .d2line         3725,32
#$$ld
.L2767:

#$$bf	CheckFreezeFrameCaptureTrigger,interprocedural,rasave,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,r29,r30,r31,cr0,lr
	.d2_cfa_start __cie
CheckFreezeFrameCaptureTrigger:
.Llo331:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r7,r3		# isFailed=r7 isFailed=r3
	mr		r31,r4		# pEvMemEntry=r31 pEvMemEntry=r4
	.d2prologue_end
#    P2CONST(Dem_NvEvMemEntryType, AUTOMATIC, DEM_NV_DATA) pEvMemEntry)
# {
#    boolean retVal = FALSE;
	.d2line		3728
	diab.li		r30,0		# retVal=r30
# 
#    CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(pEvMemEntry->event_id);
	.d2line		3730
.Llo339:
	lis		r5,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r5)		# intDtc=r3
.Llo332:
	lwz		r0,128(r3)		# intDtc=r3
	lhz		r3,0(r31)		# intDtc=r3 pEvMemEntry=r31
	rlwinm		r3,r3,1,15,30		# intDtc=r3 intDtc=r3
	se_add		r3,r0		# intDtc=r3 intDtc=r3
	lhz		r3,-2(r3)		# intDtc=r3 intDtc=r3
	mr		r3,r3		# intDtc=r3 intDtc=r3
#    CONST(uint8, AUTOMATIC) ffRecNumClassIdx = GetDtcFFRecNumClass(intDtc);
	.d2line		3731
	lwz		r4,Dem_pPbCfg@l(r5)
.Llo337:
	lwz		r4,36(r4)
	lwz		r5,Dem_pPbCfg@l(r5)
	lwz		r5,92(r5)
	rlwinm		r0,r3,0,16,31		# intDtc=r3
	lbzx		r0,r5,r0
	lbzx		r29,r4,r0		# ffRecNumClassIdx=r29
	mr		r29,r29		# ffRecNumClassIdx=r29 ffRecNumClassIdx=r29
# 
#    if (DEM_FF_REC_NUM_CLASS_INVALID != ffRecNumClassIdx)
	.d2line		3733
	rlwinm		r0,r29,0,24,31		# ffRecNumClassIdx=r29
	cmpi		0,0,r0,255
	bc		1,2,.L420	# eq
	.section	.text_vle
.L2778:
#    {
#       CONST(boolean, AUTOMATIC) allFreezeFrameInstancesSaved = IsAllFreezeFrameInstancesSaved(intDtc, pEvMemEntry->num_stored_ff);
	.d2line		3735
.Llo333:
	lbz		r4,11(r31)		# pEvMemEntry=r31
.Llo341:
	mr		r3,r3		# intDtc=r3 intDtc=r3
.Llo342:
	bl		IsAllFreezeFrameInstancesSaved
.Llo346:
	mr		r3,r3		# allFreezeFrameInstancesSaved=r3 allFreezeFrameInstancesSaved=r3
#       CONST(uint8, AUTOMATIC) ffRec = pEvMemEntry->num_stored_ff - (uint8)(allFreezeFrameInstancesSaved ? 1U : 0U); /* Take the last FF rec if all already has been stored. */
	.d2line		3736
	rlwinm		r3,r3,0,24,31		# allFreezeFrameInstancesSaved=r3 allFreezeFrameInstancesSaved=r3
	se_cmpi		r3,0		# allFreezeFrameInstancesSaved=r3
	diab.li		r0,1
	isel		r0,r3,r0,2		# allFreezeFrameInstancesSaved=r3
.L425:
.Llo347:
	isel		r0,0,r0,2
.L426:
.Llo343:
	lbz		r3,11(r31)		# allFreezeFrameInstancesSaved=r3 pEvMemEntry=r31
.Llo348:
	subf		r0,r0,r3		# trigger=r0 trigger=r0 allFreezeFrameInstancesSaved=r3
.Llo350:
	mr		r0,r0		# ffRec=r0 ffRec=r0
#       CONST(Dem_RecordTriggerType, AUTOMATIC) trigger = GetFFRecordClassRecordTrigger(ffRecNumClassIdx, ffRec);
	.d2line		3737
	lis		r3,(Dem_LCfg+32)@ha		# allFreezeFrameInstancesSaved=r3
	lwz		r3,(Dem_LCfg+32)@l(r3)		# allFreezeFrameInstancesSaved=r3 allFreezeFrameInstancesSaved=r3
.Llo344:
	rlwinm		r29,r29,3,21,28		# ffRecNumClassIdx=r29 ffRecNumClassIdx=r29
.Llo345:
	lwzx		r3,r3,r29		# allFreezeFrameInstancesSaved=r3 allFreezeFrameInstancesSaved=r3
	rlwinm		r0,r0,3,21,28		# ffRec=r0 ffRec=r0
	se_add		r3,r0		# allFreezeFrameInstancesSaved=r3 allFreezeFrameInstancesSaved=r3 ffRec=r0
	lwz		r0,4(r3)		# ffRec=r0 allFreezeFrameInstancesSaved=r3
.Llo351:
	mr		r0,r0		# trigger=r0 trigger=r0
# 
#       if (DEM_TRIGGER_ON_TEST_FAILED == trigger)
	.d2line		3739
	se_cmpi		r0,3		# trigger=r0
	bc		0,2,.L421	# ne
#       {
#          if ((TRUE == isFailed) && (Dem_IsClr(pEvMemEntry->uds_status, DEM_UDS_SB_TF)))
	.d2line		3741
.Llo349:
	rlwinm		r7,r7,0,24,31		# isFailed=r7 isFailed=r7
	se_cmpi		r7,1		# isFailed=r7
	bc		0,2,.L420	# ne
.Llo334:
	lbz		r0,13(r31)		# trigger=r0 pEvMemEntry=r31
.Llo352:
	se_btsti		r0,31		# trigger=r0
	bc		0,2,.L420	# ne
#          {
#             /*
#              * [SWS_Dem_00800]
#              * The FreezeFrame shall be captured each time the TestFailed is set (changing from 0 to 1).
#              */
#             retVal = TRUE;
	.d2line		3747
.Llo338:
	diab.li		r30,1		# retVal=r30
	b		.L420
.L421:
#          }
#       }
#       else /* (DEM_TRIGGER_ON_FDC_THRESHOLD == trigger) */
#       {
#          if (Dem_IsClr(pEvMemEntry->si, DEM_SI_FDCTRTOC))
	.d2line		3752
.Llo335:
	lbz		r0,14(r31)		# trigger=r0 pEvMemEntry=r31
.Llo353:
	se_btsti		r0,30		# trigger=r0
	bc		0,2,.L420	# ne
#          {
#             /*
#              * [SWS_Dem_00799]
#              * The FreezeFrame shall be captured each time the configured FDC threshold
#              * is reached (by a positive increment), but at most once per operation cycle.
#              *
#              * [SWS_Dem_01068]
#              * The FreezeFrame shall be captured if the event reports
#              * DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED but at most
#              * once per operation cycle.
#              */
#             retVal = TRUE;
	.d2line		3764
.Llo336:
	diab.li		r30,1		# retVal=r30
	.section	.text_vle
.L2779:
.L420:
#          }
#       }
#    }
# 
#    return retVal;
	.d2line		3769
	rlwinm		r3,r30,0,24,31		# intDtc=r3 retVal=r30
# }
	.d2line		3770
	.d2epilogue_begin
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
.Llo340:
	lwz		r0,36(r1)		# trigger=r0
	mtspr		lr,r0		# trigger=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2768:
	.type		CheckFreezeFrameCaptureTrigger,@function
	.size		CheckFreezeFrameCaptureTrigger,.-CheckFreezeFrameCaptureTrigger
# Number of nodes = 126

# Allocations for CheckFreezeFrameCaptureTrigger
#	?a4		isFailed
#	?a5		pEvMemEntry
#	?a6		$$7
#	?a7		retVal
#	?a8		intDtc
#	?a9		ffRecNumClassIdx
#	?a10		allFreezeFrameInstancesSaved
#	?a11		ffRec
#	?a12		trigger
# static FUNC(boolean, DEM_CODE) FindFreeFreezeFrameEntry(P2CONST(Dem_DataStorageType, AUTOMATIC, DEM_APPL_CONST) pFFStorage,
	.align		1
	.section	.text_vle
        .d2line         5237,32
#$$ld
.L2794:

#$$bf	FindFreeFreezeFrameEntry,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
FindFreeFreezeFrameEntry:
.Llo354:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	27,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# pFFStorage=r31 pFFStorage=r3
	mr		r30,r4		# numFFEntries=r30 numFFEntries=r4
	mr		r29,r5		# pFFEntry=r29 pFFEntry=r5
	.d2prologue_end
#                                                         uint16 numFFEntries,
#                                                         P2VAR(uint16, AUTOMATIC, DEM_APPL_DATA) pFFEntry)
# {
#    boolean entryFound = FALSE;
	.d2line		5241
	diab.li		r28,0		# entryFound=r28
#    uint16 ffEntry;
# 
#    /* Search for a free freeze frame storage entry */
#    for (ffEntry = 0; (ffEntry < numFFEntries) && (FALSE == entryFound); ffEntry++)
	.d2line		5245
.Llo360:
	diab.li		r27,0
.L745:
.Llo355:
	rlwinm		r3,r27,0,16,31		# ffEntry=r27
.Llo356:
	rlwinm		r4,r30,0,16,31		# numFFEntries=r30
	se_cmp		r3,r4
	bc		0,0,.L747	# ge
	rlwinm		r3,r28,0,24,31		# entryFound=r28
	se_cmpi		r3,0
	bc		0,2,.L747	# ne
#    {
#       if (DEM_EV_MEM_ENTRY_INVALID == *pFFStorage->p_get_entry_occupied(ffEntry))
	.d2line		5247
	lwz		r0,4(r31)		# pFFStorage=r31
	mtspr		ctr,r0
	rlwinm		r3,r27,0,16,31		# ffEntry=r27
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
	lbz		r0,0(r3)
	cmpi		0,0,r0,255
	bc		0,2,.L748	# ne
#       {
#          *pFFEntry = ffEntry;
	.d2line		5249
	sth		r27,0(r29)		# pFFEntry=r29 ffEntry=r27
#          entryFound = TRUE;
	.d2line		5250
	diab.li		r28,1		# entryFound=r28
.L748:
#       }
#    }
	.d2line		5252
	diab.addi		r3,r27,1		# ffEntry=r27
	se_addi		r27,1		# ffEntry=r27 ffEntry=r27
	b		.L745
.L747:
# 
#    return entryFound;
	.d2line		5254
.Llo357:
	rlwinm		r3,r28,0,24,31		# entryFound=r28
# }
	.d2line		5255
	.d2epilogue_begin
.Llo358:
	lmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
.Llo361:
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo359:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2795:
	.type		FindFreeFreezeFrameEntry,@function
	.size		FindFreeFreezeFrameEntry,.-FindFreeFreezeFrameEntry
# Number of nodes = 40

# Allocations for FindFreeFreezeFrameEntry
#	?a4		pFFStorage
#	?a5		numFFEntries
#	?a6		pFFEntry
#	?a7		entryFound
#	?a8		ffEntry
# static FUNC(boolean, DEM_CODE) StoreFreezeFrameData(P2VAR(uint8, AUTOMATIC, DEM_NV_DATA) pFFData,
	.align		1
	.section	.text_vle
        .d2line         5331,32
#$$ld
.L2806:

#$$bf	StoreFreezeFrameData,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
StoreFreezeFrameData:
.Llo362:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r25,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	25,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# pFFData=r31 pFFData=r3
	mr		r4,r4		# ffClass=r4 ffClass=r4
	.d2prologue_end
#                                                  uint16 ffClass)
# {
#    P2CONST(Dem_FFDidDefineType, AUTOMATIC, DEM_APPL_CONST) pDidConfig;
#    P2CONST(uint16, AUTOMATIC, DEM_PBCFG_CALIB) pFFDidIdx = GetFFDids(ffClass);
#    uint8 numFFDids = GetFFNumDids(ffClass);
#    uint16 didIdx;
#    uint16 didOffset = 0;
	.d2line		5338
	diab.li		r28,0		# didOffset=r28
#    uint16 didSize;
#    uint8 i;
#    boolean retVal = TRUE;
	.d2line		5341
.Llo379:
	diab.li		r25,1		# retVal=r25
	.d2line		5335
	lis		r3,Dem_pPbCfg@ha
.Llo363:
	lwz		r5,Dem_pPbCfg@l(r3)
	lwz		r5,140(r5)
	rlwinm		r4,r4,3,13,28		# ffClass=r4 ffClass=r4
	lwzux		r30,r5,r4
.Llo370:
	mr		r30,r30		# pFFDidIdx=r30 pFFDidIdx=r30
	.d2line		5336
.Llo371:
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r0,140(r3)
	se_add		r4,r0		# ffClass=r4 ffClass=r4
	lbz		r29,4(r4)		# ffClass=r4
.Llo372:
	mr		r29,r29		# numFFDids=r29 numFFDids=r29
#    ReadDataPtrType pFuncReadData;
# 
#    /* Update data for all DIDs connected to the event */
#    for (i = 0; i < numFFDids; i++)
	.d2line		5345
	diab.li		r26,0
.L766:
.Llo364:
	rlwinm		r3,r26,0,24,31		# didOffset=r3 i=r26
	rlwinm		r0,r29,0,24,31		# didIdx=r0 numFFDids=r29
.Llo373:
	se_cmp		r3,r0		# didOffset=r3 didIdx=r0
	bc		0,0,.L768	# ge
#    {
#       didIdx = pFFDidIdx[i];
	.d2line		5347
.Llo374:
	rlwinm		r3,r26,1,23,30		# didOffset=r3 i=r26
	lhzux		r0,r3,r30		# didIdx=r0 didOffset=r3
.Llo375:
	mr		r0,r0		# didIdx=r0 didIdx=r0
# 
#       if (DEM_DID_INVALID != didIdx)
	.d2line		5349
	rlwinm		r3,r0,0,16,31		# didOffset=r3 didIdx=r0
	cmpli		0,0,r3,65535		# didOffset=r3
	bc		1,2,.L769	# eq
#       {
#          pDidConfig = &Dem_LCfg.p_ff_did_define[didIdx];
	.d2line		5351
.Llo376:
	lis		r3,(Dem_LCfg+36)@ha		# didOffset=r3
	lwz		r4,(Dem_LCfg+36)@l(r3)		# ffClass=r4 didOffset=r3
.Llo366:
	rlwinm		r0,r0,2,14,29		# didIdx=r0 didIdx=r0
	se_add		r0,r4		# didIdx=r0 didIdx=r0 ffClass=r4
.Llo368:
	mr		r4,r0		# pDidConfig=r4 pDidConfig=r0
#          didSize = (uint16)Dem_LCfg.p_data_element[pDidConfig->data_element_idx].size;
	.d2line		5352
.Llo367:
	lis		r3,(Dem_LCfg+28)@ha		# didOffset=r3
	lwz		r5,(Dem_LCfg+28)@l(r3)		# didSize=r5 didOffset=r3
.Llo380:
	lhz		r0,2(r4)		# didIdx=r0 pDidConfig=r4
.Llo369:
	rlwinm		r0,r0,3,13,28		# didIdx=r0 didIdx=r0
	lbzux		r27,r5,r0		# didSize=r27 didSize=r5
	mr		r27,r27		# didSize=r27 didSize=r27
#          /* MISRA-C:2004 RULE 16.4 VIOLATION:   Parameter names are declared by RTE and is dependent on port name */
#          pFuncReadData = Dem_LCfg.p_data_element[pDidConfig->data_element_idx].pReadData;
	.d2line		5354
	lwz		r3,(Dem_LCfg+28)@l(r3)		# didOffset=r3 didOffset=r3
	se_add		r3,r0		# didOffset=r3 didOffset=r3 didIdx=r0
	lwz		r0,4(r3)		# didIdx=r0 didOffset=r3
.Llo377:
	mr		r0,r0		# pFuncReadData=r0 pFuncReadData=r0
# 
#          /* Get data from application or BSW. */
#          if (E_NOT_OK == pFuncReadData(&pFFData[didOffset]))
	.d2line		5357
	mtspr		ctr,r0		# pFuncReadData=ctr pFuncReadData=r0
	rlwinm		r3,r28,0,16,31		# didOffset=r3 didOffset=r28
	se_add		r3,r31		# didOffset=r3 didOffset=r3 pFFData=r31
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 1 u
	bcctrl		20,0
.Llo381:
	rlwinm		r3,r3,0,24,31		# didOffset=r3 didOffset=r3
.Llo382:
	se_cmpi		r3,1		# didOffset=r3
	bc		0,2,.L770	# ne
#          {
#             Dem_MemSet(&pFFData[didOffset], 0xffU, didSize);
	.d2line		5359
	rlwinm		r3,r28,0,16,31		# didOffset=r3 didOffset=r28
	se_add		r3,r31		# didOffset=r3 didOffset=r3 pFFData=r31
	diab.li		r4,255		# pDidConfig=r4
	mr		r5,r27		# didSize=r5 didSize=r27
	bl		Dem_MemSet
#             retVal = FALSE;
	.d2line		5360
	diab.li		r25,0		# retVal=r25
.L770:
#          }
# 
#          didOffset += didSize;
	.d2line		5363
	se_add		r28,r27		# didOffset=r28 didOffset=r28 didSize=r27
	mr		r3,r28		# didOffset=r3 didOffset=r28
.L769:
#       }
#    }
	.d2line		5365
.Llo378:
	diab.addi		r3,r26,1		# didOffset=r3 i=r26
	se_addi		r26,1		# i=r26 i=r26
	b		.L766
.L768:
# 
#    return retVal;
	.d2line		5367
.Llo365:
	rlwinm		r3,r25,0,24,31		# didOffset=r3 retVal=r25
# }
	.d2line		5368
	.d2epilogue_begin
	lmw		r25,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	2,10
.Llo383:
	lwz		r0,52(r1)		# didIdx=r0
	mtspr		lr,r0		# didIdx=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2807:
	.type		StoreFreezeFrameData,@function
	.size		StoreFreezeFrameData,.-StoreFreezeFrameData
# Number of nodes = 134

# Allocations for StoreFreezeFrameData
#	?a4		pFFData
#	?a5		ffClass
#	?a6		pDidConfig
#	?a7		pFFDidIdx
#	?a8		numFFDids
#	?a9		didIdx
#	?a10		didOffset
#	?a11		didSize
#	?a12		i
#	?a13		retVal
#	?a14		pFuncReadData
# static FUNC(void, DEM_CODE) StoreStandardFreezeFrame(Dem_EventIdType eventId, Dem_NvEvMemEntryPtrType pEvMemEntry,
	.align		1
	.section	.text_vle
        .d2line         3922,29
#$$ld
.L2841:

#$$bf	StoreStandardFreezeFrame,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
StoreStandardFreezeFrame:
.Llo384:
	stwu		r1,-64(r1)		
	.d2_cfa_def_cfa_offset	64
	mfspr		r0,lr
.Llo397:
	stmw		r21,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	21,31,1,1
	stw		r0,68(r1)		# intDtc=r0
	.d2_cfa_offset    108,-1
	mr		r3,r3		# eventId=r3 eventId=r3
	mr		r31,r4		# pEvMemEntry=r31 pEvMemEntry=r4
.Llo392:
	mr		r30,r5		# pInData=r30 pInData=r5
	.d2prologue_end
#                                                      P2CONST(Dem_StoreFFInputType, AUTOMATIC, DEM_APPL_DATA) pInData)
# {
#    CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(eventId);
	.d2line		3925
.Llo393:
	lis		r4,Dem_pPbCfg@ha		# pFFEntry=r4
.Llo411:
	lwz		r5,Dem_pPbCfg@l(r4)		# pFFEntry=r4
.Llo395:
	lwz		r0,128(r5)		# intDtc=r0
	rlwinm		r3,r3,1,15,30		# eventId=r3 eventId=r3
	se_add		r3,r0		# eventId=r3 eventId=r3 intDtc=r0
	lhz		r0,-2(r3)		# intDtc=r0 eventId=r3
	mr		r0,r0		# intDtc=r0 intDtc=r0
#    CONST(uint8, AUTOMATIC) ffRecNumClassIdx = GetDtcFFRecNumClass(intDtc);
	.d2line		3926
	lwz		r3,36(r5)		# eventId=r3
	lwz		r4,Dem_pPbCfg@l(r4)		# pFFEntry=r4 pFFEntry=r4
	lwz		r4,92(r4)		# pFFEntry=r4 pFFEntry=r4
	rlwinm		r5,r0,0,16,31		# intDtc=r0
	lbzx		r4,r4,r5		# pFFEntry=r4 pFFEntry=r4
.Llo412:
	lbzx		r29,r3,r4		# ffRecNumClassIdx=r29 eventId=r3
.Llo407:
	mr		r29,r29		# ffRecNumClassIdx=r29 ffRecNumClassIdx=r29
# 
#    CONST(uint8, AUTOMATIC) numStoredFF = pEvMemEntry->num_stored_ff;
	.d2line		3928
	lbz		r28,11(r31)		# numStoredFF=r28 pEvMemEntry=r31
.Llo410:
	mr		r28,r28		# numStoredFF=r28 numStoredFF=r28
#    CONSTP2VAR(uint16, AUTOMATIC, DEM_NV_DATA) pFFEntry = &(pEvMemEntry->ff_index[numStoredFF]);
	.d2line		3929
	rlwinm		r4,r28,1,23,30		# pFFEntry=r4 numStoredFF=r28
.Llo413:
	se_add		r4,r31		# pFFEntry=r4 pFFEntry=r4 pEvMemEntry=r31
	addi		r27,r4,8		# pFFEntry=r4
# 
#    *pFFEntry = DEM_FF_BUFFER_INVALID;
	.d2line		3931
	diab.li		r3,65535		# eventId=r3
	sth		r3,8(r4)		# pFFEntry=r4 eventId=r3
# 
#    if (DEM_FF_REC_NUM_CLASS_INVALID != ffRecNumClassIdx)
	.d2line		3933
	rlwinm		r3,r29,0,24,31		# eventId=r3 ffRecNumClassIdx=r29
	cmpi		0,0,r3,255		# eventId=r3
	bc		1,2,.L448	# eq
	.section	.text_vle
.L2860:
#    {
#       /* Record number is configured. The record could consist of a common part or a specific part or both */
#       CONST(uint16, AUTOMATIC) ffClass = GetDtcFFClass(intDtc);
#       uint16 specificFFSize = 0;
	.d2line		3937
.Llo385:
	diab.li		r25,0		# specificFFSize=r25
#       CONST(uint16, AUTOMATIC) commonFFClass = GetCommonFFClass();
#       uint16 commonFFSize = 0;
	.d2line		3939
.Llo414:
	mr		r23,r25		# commonFFSize=r23 commonFFSize=r25
	.d2line		3936
	lis		r3,Dem_pPbCfg@ha		# eventId=r3
.Llo386:
	lwz		r4,Dem_pPbCfg@l(r3)		# pFFEntry=r4 eventId=r3
	lwz		r4,80(r4)		# pFFEntry=r4 pFFEntry=r4
.Llo398:
	rlwinm		r0,r0,1,15,30		# intDtc=r0 intDtc=r0
.Llo399:
	lhzx		r26,r4,r0		# ffClass=r26 pFFEntry=r4
.Llo416:
	mr		r26,r26		# ffClass=r26 ffClass=r26
	.d2line		3938
	lwz		r3,Dem_pPbCfg@l(r3)		# eventId=r3 eventId=r3
	lwz		r3,112(r3)		# eventId=r3 eventId=r3
	lhz		r24,0(r3)		# eventId=r3
.Llo419:
	mr		r24,r24		# commonFFClass=r24 commonFFClass=r24
#       uint16 totFFSize;
# 
#       if (ffClass != DEM_FF_CLASS_INVALID)
	.d2line		3942
	rlwinm		r4,r26,0,16,31		# pFFEntry=r4 ffClass=r26
	cmpli		0,0,r4,65535		# pFFEntry=r4
	bc		1,2,.L450	# eq
#       {
#          specificFFSize = Dem_LCfg.p_ff_length[ffClass];
	.d2line		3944
.Llo387:
	lis		r3,(Dem_LCfg+120)@ha		# eventId=r3
.Llo388:
	lwz		r3,(Dem_LCfg+120)@l(r3)		# eventId=r3 eventId=r3
	rlwinm		r4,r26,1,15,30		# pFFEntry=r4 ffClass=r26
	lhzx		r25,r3,r4		# specificFFSize=r25 eventId=r3
	mr		r25,r25		# specificFFSize=r25 specificFFSize=r25
.L450:
#       }
#       if (commonFFClass != DEM_FF_CLASS_INVALID)
	.d2line		3946
.Llo389:
	rlwinm		r4,r24,0,16,31		# pFFEntry=r4 commonFFClass=r24
	cmpli		0,0,r4,65535		# pFFEntry=r4
	bc		1,2,.L451	# eq
#       {
#          commonFFSize = Dem_LCfg.p_ff_length[commonFFClass];
	.d2line		3948
	lis		r3,(Dem_LCfg+120)@ha		# eventId=r3
.Llo390:
	lwz		r3,(Dem_LCfg+120)@l(r3)		# eventId=r3 eventId=r3
	rlwinm		r4,r24,1,15,30		# pFFEntry=r4 commonFFClass=r24
	lhzx		r23,r3,r4		# specificFFSize=r23 eventId=r3
	mr		r23,r23		# commonFFSize=r23 commonFFSize=r23
.L451:
#       }
#       totFFSize = commonFFSize + specificFFSize;
	.d2line		3950
.Llo391:
	add		r3,r23,r25		# eventId=r3 commonFFSize=r23 specificFFSize=r25
.Llo423:
	mr		r3,r3		# totFFSize=r3 totFFSize=r3
# 
#       if ((pInData->p_storage != NULL_PTR) && (totFFSize > 0) && (totFFSize <= pInData->p_storage->buffer_length))
	.d2line		3952
	lwz		r0,0(r30)		# intDtc=r0 pInData=r30
.Llo400:
	se_cmpi		r0,0		# intDtc=r0
	bc		1,2,.L448	# eq
.Llo401:
	rlwinm		r0,r3,0,16,31		# intDtc=r0 totFFSize=r3
.Llo402:
	se_cmpi		r0,0		# intDtc=r0
	bc		0,1,.L448	# le
.Llo403:
	rlwinm		r0,r3,0,16,31		# intDtc=r0 totFFSize=r3
.Llo404:
	lwz		r3,0(r30)		# totFFSize=r3 pInData=r30
	lhz		r3,8(r3)		# totFFSize=r3 totFFSize=r3
	se_cmp		r0,r3		# intDtc=r0 totFFSize=r3
	bc		1,1,.L448	# gt
	.section	.text_vle
.L2874:
#       {
#          boolean ffAllocated = FindFreeFreezeFrameEntry(pInData->p_storage, pInData->num_entries, pFFEntry);
	.d2line		3954
.Llo405:
	lhz		r4,4(r30)		# pFFEntry=r4 pInData=r30
	lwz		r3,0(r30)		# totFFSize=r3 pInData=r30
	mr		r5,r27		# pFFEntry=r5 pFFEntry=r27
	bl		FindFreeFreezeFrameEntry
.Llo424:
	mr		r3,r3		# ffAllocated=r3 ffAllocated=r3
# 
# #if (DEM_EVENT_DISPLACEMENT_STRATEGY != DEM_DISPLACEMENT_NONE)
#          if (FALSE == ffAllocated)
#          {
#             /* No free freeze frame entry found, find entry to displace */
#             CONST(uint8, AUTOMATIC) displEvMemEntryIndex = FindEventMemoryEntryToDisplace(eventId,
#                                                                   pInData->event_prio,
#                                                                   pInData->int_origin,
#                                                                   DEM_DISPL_STANDARD_FREEZE_FRAME);
#             if (DEM_EV_MEM_ENTRY_INVALID != displEvMemEntryIndex)
#             {
#                CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC) pDisplacedFFEvMemEntry = Dem_GetEvMemEntryPtr(pInData->int_origin, displEvMemEntryIndex);
#                *pFFEntry = pDisplacedFFEvMemEntry->ff_index[pDisplacedFFEvMemEntry->num_stored_ff - 1];
#                (pDisplacedFFEvMemEntry->num_stored_ff)--;
#                ffAllocated = TRUE;
#             }
#          }
# #endif /* (DEM_EVENT_DISPLACEMENT_STRATEGY != DEM_DISPLACEMENT_NONE) */
# 
#          if (TRUE == ffAllocated)
	.d2line		3974
	rlwinm		r3,r3,0,24,31		# ffAllocated=r3 ffAllocated=r3
	se_cmpi		r3,1		# ffAllocated=r3
	bc		0,2,.L448	# ne
	.section	.text_vle
.L2880:
#          {
#             Uint8NvPtrType pFFData = pInData->p_storage->p_get_buffer_entry(*pFFEntry);
	.d2line		3976
.Llo425:
	lwz		r3,0(r30)		# ffAllocated=r3 pInData=r30
.Llo426:
	lwz		r0,0(r3)		# intDtc=r0 ffAllocated=r3
	mtspr		ctr,r0		# intDtc=ctr
	lhz		r3,0(r27)		# ffAllocated=r3 pFFEntry=r27
.Llo427:
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
.Llo436:
	mr		r22,r3		# pFFData=r22 pFFData=r3
#             /* Mark the freeze frame entry as occupied */
#             *pInData->p_storage->p_get_entry_occupied(*pFFEntry) = pInData->event_mem_entry_index;
	.d2line		3978
	lbz		r21,8(r30)		# pInData=r30
	lwz		r3,0(r30)		# ffAllocated=r3 pInData=r30
.Llo428:
	lwz		r0,4(r3)		# intDtc=r0 ffAllocated=r3
	mtspr		ctr,r0		# intDtc=ctr
	lhz		r3,0(r27)		# ffAllocated=r3 pFFEntry=r27
.Llo429:
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
.Llo396:
	stb		r21,0(r3)		# ffAllocated=r3
#             pEvMemEntry->record_numbers[numStoredFF] = GetFFRecordClassRecordNumber(ffRecNumClassIdx, numStoredFF);
	.d2line		3979
	lis		r3,(Dem_LCfg+32)@ha		# ffAllocated=r3
	lwz		r3,(Dem_LCfg+32)@l(r3)		# ffAllocated=r3 ffAllocated=r3
.Llo408:
	rlwinm		r29,r29,3,21,28		# ffRecNumClassIdx=r29 ffRecNumClassIdx=r29
.Llo409:
	lwzx		r3,r3,r29		# ffAllocated=r3 ffAllocated=r3
	rlwinm		r0,r28,3,21,28		# intDtc=r0 numStoredFF=r28
.Llo406:
	lbzx		r0,r3,r0		# intDtc=r0 ffAllocated=r3
	rlwinm		r4,r28,0,24,31		# pFFEntry=r4 numStoredFF=r28
.Llo415:
	se_add		r4,r31		# pFFEntry=r4 pFFEntry=r4 pEvMemEntry=r31
	stb		r0,10(r4)		# pFFEntry=r4 intDtc=r0
#             pEvMemEntry->num_stored_ff++;
	.d2line		3980
	lbz		r3,11(r31)		# ffAllocated=r3 pEvMemEntry=r31
	se_addi		r3,1		# ffAllocated=r3 ffAllocated=r3
	stb		r3,11(r31)		# pEvMemEntry=r31 ffAllocated=r3
# #if (DEM_PRESTORE_FF_SUPPORT == STD_ON)
#             if (FALSE == StorePrestoredFreezeFrameData(pFFData, Dem_LCfg.p_ff_prestorage, eventId, pInData->p_storage->buffer_length))
# #endif /* DEM_PRESTORE_FF_SUPPORT == STD_ON */
#             {
#                /* No prestored freeze frame available, [SWS_Dem_00191] */
#                if (commonFFSize > 0)
	.d2line		3986
	rlwinm		r3,r23,0,16,31		# ffAllocated=r3 commonFFSize=r23
	se_cmpi		r3,0		# ffAllocated=r3
	bc		0,1,.L454	# le
#                {
#                   /* [VSTAR_Dem_00134] */
#                   if (FALSE == StoreFreezeFrameData(pFFData, commonFFClass))
	.d2line		3989
.Llo394:
	mr		r3,r22		# pFFData=r3 pFFData=r22
	mr		r4,r24		# commonFFClass=r4 commonFFClass=r24
	bl		StoreFreezeFrameData
.Llo430:
	e_andi.		r3,r3,255		# ffAllocated=r3 ffAllocated=r3
.Llo431:
	bc		0,2,.L454	# ne
#                   {
#                      DEM_ASSERT_NODATAAVAILABLE_NO_RET(DEM_SID_MAINFUNCTION, FALSE)
	.d2line		3991
.Llo420:
	diab.li		r3,54		# ffAllocated=r3
	diab.li		r4,0		# commonFFClass=r4
	diab.li		r5,85		# pFFEntry=r5
	diab.li		r6,48
	bl		Det_ReportError
.L454:
#                   }
#                }
#                if (specificFFSize > 0)
	.d2line		3994
.Llo421:
	rlwinm		r25,r25,0,16,31		# specificFFSize=r25 specificFFSize=r25
.Llo422:
	se_cmpi		r25,0		# specificFFSize=r25
	bc		0,1,.L448	# le
#                {
#                   if (FALSE == StoreFreezeFrameData(&pFFData[commonFFSize], ffClass))
	.d2line		3996
.Llo418:
	rlwinm		r3,r23,0,16,31		# ffAllocated=r3 commonFFSize=r23
.Llo432:
	add		r3,r3,r22		# ffAllocated=r3 ffAllocated=r3 pFFData=r22
.Llo433:
	mr		r4,r26		# ffClass=r4 ffClass=r26
	bl		StoreFreezeFrameData
.Llo434:
	e_andi.		r3,r3,255		# ffAllocated=r3 ffAllocated=r3
.Llo435:
	bc		0,2,.L448	# ne
#                   {
#                      DEM_ASSERT_NODATAAVAILABLE_NO_RET(DEM_SID_MAINFUNCTION, FALSE)
	.d2line		3998
.Llo417:
	diab.li		r3,54		# ffAllocated=r3
	diab.li		r4,0		# ffClass=r4
	diab.li		r5,85		# pFFEntry=r5
	diab.li		r6,48
	bl		Det_ReportError
	.section	.text_vle
.L2881:
	.section	.text_vle
.L2875:
	.section	.text_vle
.L2861:
.L448:
#                   }
#                }
#             }
#          }
# #if (DEM_PRESTORE_FF_SUPPORT == STD_ON)
#          else
#          {
#             /* A freeze frame buffer was not allocated. Free pre-storage buffer for use by other events. [SWS_Dem_00969] */
#             ClearPrestoredFF(eventId, Dem_LCfg.p_ff_prestorage);
#          }
# #endif /* DEM_PRESTORE_FF_SUPPORT == STD_ON */
#       }
#    }
# }
	.d2line		4012
	.d2epilogue_begin
	lmw		r21,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	2,10
	lwz		r0,68(r1)		# intDtc=r0
	mtspr		lr,r0		# intDtc=lr
	diab.addi		r1,r1,64		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2842:
	.type		StoreStandardFreezeFrame,@function
	.size		StoreStandardFreezeFrame,.-StoreStandardFreezeFrame
# Number of nodes = 264

# Allocations for StoreStandardFreezeFrame
#	?a4		eventId
#	?a5		pEvMemEntry
#	?a6		pInData
#	?a7		intDtc
#	?a8		ffRecNumClassIdx
#	?a9		numStoredFF
#	?a10		pFFEntry
#	?a11		ffClass
#	?a12		specificFFSize
#	?a13		commonFFClass
#	?a14		commonFFSize
#	?a15		totFFSize
#	?a16		ffAllocated
#	?a17		pFFData
# static FUNC(void, DEM_CODE) UpdateFreezeFrame(P2CONST(Dem_NvEvMemEntryType, AUTOMATIC, DEM_NV_DATA) pEvEntry,
	.align		1
	.section	.text_vle
        .d2line         5257,29
#$$ld
.L2888:

#$$bf	UpdateFreezeFrame,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
UpdateFreezeFrame:
.Llo437:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	27,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# pEvEntry=r3 pEvEntry=r3
	mr		r31,r4		# ffClass=r31 ffClass=r4
.Llo441:
	mr		r5,r5		# pFFStorage=r5 pFFStorage=r5
	.d2prologue_end
#                                               uint16 ffClass,
#                                               P2CONST(Dem_DataStorageType, AUTOMATIC, DEM_APPL_CONST) pFFStorage)
# {
#    Uint8NvPtrType pFFData;
#    uint16 ffIndex;
#    uint16 specificFFSize = 0;
	.d2line		5263
.Llo442:
	diab.li		r29,0		# specificFFSize=r29
#    uint16 commonFFSize = 0;
	.d2line		5264
.Llo454:
	diab.li		r28,0
#    uint16 commonFFClass = GetCommonFFClass();
	.d2line		5265
.Llo456:
	lis		r4,Dem_pPbCfg@ha
	lwz		r4,Dem_pPbCfg@l(r4)
	lwz		r4,112(r4)
	lhz		r27,0(r4)
.Llo457:
	mr		r27,r27		# commonFFClass=r27 commonFFClass=r27
# 
#    /* Update last stored FF */
#    if (ffClass != DEM_FF_CLASS_INVALID)
	.d2line		5268
	rlwinm		r4,r31,0,16,31		# ffClass=r31
	cmpli		0,0,r4,65535
	bc		1,2,.L753	# eq
#    {
#       specificFFSize = Dem_LCfg.p_ff_length[ffClass];
	.d2line		5270
	lis		r4,(Dem_LCfg+120)@ha
	lwz		r4,(Dem_LCfg+120)@l(r4)
	rlwinm		r0,r31,1,15,30		# ffClass=r31
	lhzx		r29,r4,r0		# specificFFSize=r29
	mr		r29,r29		# specificFFSize=r29 specificFFSize=r29
.L753:
#    }
#    if (commonFFClass != DEM_FF_CLASS_INVALID)
	.d2line		5272
	rlwinm		r4,r27,0,16,31		# commonFFClass=r27
	cmpli		0,0,r4,65535
	bc		1,2,.L754	# eq
#    {
#       commonFFSize = Dem_LCfg.p_ff_length[commonFFClass];
	.d2line		5274
	lis		r4,(Dem_LCfg+120)@ha
	lwz		r4,(Dem_LCfg+120)@l(r4)
	rlwinm		r0,r27,1,15,30		# commonFFClass=r27
	lhzx		r28,r4,r0
	mr		r28,r28		# commonFFSize=r28 commonFFSize=r28
.L754:
#    }
# 
#    ffIndex = pEvEntry->ff_index[pEvEntry->num_stored_ff - 1];
	.d2line		5277
	lbz		r0,11(r3)		# pEvEntry=r0 pEvEntry=r3
	rlwinm		r0,r0,1,23,30		# pEvEntry=r0 pEvEntry=r0
	se_add		r3,r0		# pEvEntry=r3 pEvEntry=r3 pEvEntry=r0
.Llo438:
	lhz		r3,6(r3)		# pEvEntry=r3 pEvEntry=r3
.Llo439:
	mr		r3,r3		# ffIndex=r3 ffIndex=r3
#    pFFData = pFFStorage->p_get_buffer_entry(ffIndex);
	.d2line		5278
	lwz		r0,0(r5)		# pEvEntry=r0 pFFStorage=r5
.Llo440:
	mtspr		ctr,r0		# pEvEntry=ctr
	rlwinm		r3,r3,0,16,31		# ffIndex=r3 ffIndex=r3
.Llo447:
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
.Llo444:
	mr		r30,r3		# pFFData=r30 pFFData=r3
# 
# #if (DEM_PRESTORE_FF_SUPPORT == STD_ON)
#    if (FALSE == StorePrestoredFreezeFrameData(pFFData, Dem_LCfg.p_ff_prestorage, pEvEntry->event_id, pFFStorage->buffer_length))
# #endif /* DEM_PRESTORE_FF_SUPPORT == STD_ON */
#    {
#       if (commonFFSize > 0)
	.d2line		5284
	rlwinm		r3,r28,0,16,31		# ffIndex=r3 commonFFSize=r28
.Llo445:
	se_cmpi		r3,0		# ffIndex=r3
	bc		0,1,.L755	# le
#       {
#          if (FALSE == StoreFreezeFrameData(pFFData, commonFFClass))
	.d2line		5286
.Llo446:
	mr		r3,r30		# pFFData=r3 pFFData=r30
	mr		r4,r27		# commonFFClass=r4 commonFFClass=r27
	bl		StoreFreezeFrameData
.Llo448:
	e_andi.		r3,r3,255		# ffIndex=r3 ffIndex=r3
.Llo449:
	bc		0,2,.L755	# ne
#          {
#             DEM_ASSERT_NODATAAVAILABLE_NO_RET(DEM_SID_MAINFUNCTION, FALSE)
	.d2line		5288
.Llo458:
	diab.li		r3,54		# ffIndex=r3
	diab.li		r4,0		# commonFFClass=r4
	diab.li		r5,85		# pFFStorage=r5
	diab.li		r6,48
	bl		Det_ReportError
.L755:
#          }
#       }
#       if (specificFFSize > 0)
	.d2line		5291
.Llo459:
	rlwinm		r29,r29,0,16,31		# specificFFSize=r29 specificFFSize=r29
	se_cmpi		r29,0		# specificFFSize=r29
	bc		0,1,.L752	# le
#       {
#          if (FALSE == StoreFreezeFrameData(&pFFData[commonFFSize], ffClass))
	.d2line		5293
.Llo455:
	rlwinm		r3,r28,0,16,31		# ffIndex=r3 commonFFSize=r28
.Llo450:
	se_add		r3,r30		# ffIndex=r3 ffIndex=r3 pFFData=r30
.Llo451:
	mr		r4,r31		# ffClass=r4 ffClass=r31
	bl		StoreFreezeFrameData
.Llo452:
	e_andi.		r3,r3,255		# ffIndex=r3 ffIndex=r3
.Llo453:
	bc		0,2,.L752	# ne
#          {
#             DEM_ASSERT_NODATAAVAILABLE_NO_RET(DEM_SID_MAINFUNCTION, FALSE)
	.d2line		5295
.Llo443:
	diab.li		r3,54		# ffIndex=r3
	diab.li		r4,0		# ffClass=r4
	diab.li		r5,85		# pFFStorage=r5
	diab.li		r6,48
	bl		Det_ReportError
.L752:
#          }
#       }
#    }
# }
	.d2line		5299
	.d2epilogue_begin
	lmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,52(r1)		# pEvEntry=r0
	mtspr		lr,r0		# pEvEntry=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2889:
	.type		UpdateFreezeFrame,@function
	.size		UpdateFreezeFrame,.-UpdateFreezeFrame
# Number of nodes = 121

# Allocations for UpdateFreezeFrame
#	?a4		pEvEntry
#	?a5		ffClass
#	?a6		pFFStorage
#	?a7		pFFData
#	?a8		ffIndex
#	?a9		specificFFSize
#	?a10		commonFFSize
#	?a11		commonFFClass
# static FUNC(boolean, DEM_CODE) HandleFreezeFrameStorage(Dem_EventIdType eventId, boolean isFailed, uint8 internalOrigin,
	.align		1
	.section	.text_vle
        .d2line         3614,32
#$$ld
.L2906:

#$$bf	HandleFreezeFrameStorage,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
HandleFreezeFrameStorage:
.Llo460:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r28,32(r1)		# offset r1+32  0x20
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# eventId=r31 eventId=r3
	mr		r3,r4		# isFailed=r3 isFailed=r4
.Llo461:
	mr		r30,r5		# internalOrigin=r30 internalOrigin=r5
	mr		r8,r6		# eventMemoryEntryIndex=r8 eventMemoryEntryIndex=r6
	mr		r29,r7		# pEvMemEntry=r29 pEvMemEntry=r7
	.d2prologue_end
#    uint8 eventMemoryEntryIndex, Dem_NvEvMemEntryPtrType pEvMemEntry)
# {
#    boolean dataStored = FALSE;
	.d2line		3617
	diab.li		r28,0		# dataStored=r28
# 
#    if (TRUE == CheckFreezeFrameCaptureTrigger(isFailed, pEvMemEntry))
	.d2line		3619
	mr		r3,r3		# isFailed=r3 isFailed=r3
	mr		r4,r29		# pEvMemEntry=r4 pEvMemEntry=r29
.Llo466:
	bl		CheckFreezeFrameCaptureTrigger
.Llo467:
	rlwinm		r3,r3,0,24,31
	se_cmpi		r3,1
	bc		0,2,.L406	# ne
	.section	.text_vle
.L2916:
#    {
#       /*
#        * There is the possibility to configure saving of several instances of a freeze frame.
#        * Check if all instances have been saved already.
#        */
#       CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(eventId);
	.d2line		3625
.Llo462:
	lis		r3,Dem_pPbCfg@ha		# dataStored=r3
.Llo470:
	lwz		r3,Dem_pPbCfg@l(r3)		# dataStored=r3 dataStored=r3
	lwz		r3,128(r3)		# dataStored=r3 dataStored=r3
	rlwinm		r0,r31,1,15,30		# eventId=r31
	se_add		r3,r0		# dataStored=r3 dataStored=r3
	lhz		r28,-2(r3)		# dataStored=r28 dataStored=r3
.Llo480:
	mr		r28,r28		# intDtc=r28 intDtc=r28
#       CONSTP2CONST(Dem_DataStorageType, AUTOMATIC, DEM_APPL_CONST) pFFStorage = Dem_LCfg.pp_ff_storage[internalOrigin];
	.d2line		3626
	lis		r3,(Dem_LCfg+48)@ha		# dataStored=r3
	e_add16i		r3,r3,(Dem_LCfg+48)@l		# dataStored=r3 dataStored=r3
	rlwinm		r5,r30,2,22,29		# internalOrigin=r30
	lwzx		r7,r3,r5		# dataStored=r3
.Llo485:
	mr		r7,r7		# pFFStorage=r7 pFFStorage=r7
#       if (TRUE == IsAllFreezeFrameInstancesSaved(intDtc, pEvMemEntry->num_stored_ff))
	.d2line		3627
	lbz		r4,11(r29)		# pEvMemEntry=r29
	mr		r3,r28		# intDtc=r3 intDtc=r28
.Llo471:
	bl		IsAllFreezeFrameInstancesSaved
.Llo472:
	rlwinm		r3,r3,0,24,31		# dataStored=r3 dataStored=r3
	se_cmpi		r3,1		# dataStored=r3
	bc		0,2,.L407	# ne
	.section	.text_vle
.L2924:
#       {
#          /*
#             * All freeze-frame instances have been saved.
#             * Update the last saved freeze-frame.
#             */
#          CONST(uint8, AUTOMATIC) ffRecNum = GetDtcFFRecNumClass(intDtc);
	.d2line		3633
.Llo463:
	lis		r4,Dem_pPbCfg@ha		# numFF=r4
.Llo487:
	lwz		r3,Dem_pPbCfg@l(r4)		# dataStored=r3 numFF=r4
.Llo473:
	lwz		r3,36(r3)		# dataStored=r3 dataStored=r3
	lwz		r4,Dem_pPbCfg@l(r4)		# numFF=r4 numFF=r4
	lwz		r4,92(r4)		# numFF=r4 numFF=r4
	rlwinm		r0,r28,0,16,31		# ffRecNum=r0 intDtc=r28
.Llo486:
	lbzx		r0,r4,r0		# ffRecNum=r0 numFF=r4
	lbzx		r0,r3,r0		# ffRecNum=r0 dataStored=r3
	mr		r0,r0		# ffRecNum=r0 ffRecNum=r0
#          CONST(uint8, AUTOMATIC) numFF = GetFFRecNumClassNumFF(ffRecNum);
	.d2line		3634
	lis		r3,(Dem_LCfg+32)@ha		# dataStored=r3
	lwz		r3,(Dem_LCfg+32)@l(r3)		# dataStored=r3 dataStored=r3
	rlwinm		r0,r0,3,21,28		# ffRecNum=r0 ffRecNum=r0
	add		r4,r3,r0		# numFF=r4 dataStored=r3 ffRecNum=r0
	lbz		r4,4(r4)		# numFF=r4 numFF=r4
	mr		r4,r4		# numFF=r4 numFF=r4
#          /*
#           * [SWS_Dem_00803] [SWS_Dem_00804]
#           * If the freeze frame shall be updated or not depends on DemFreezeFrameRecordUpdate
#           *   DEM_UPDATE_RECORD_YES : Update the record
#           *   DEM_UPDATE_RECORD_NO  : Only store the record once.
#           */
#          if (IsFFUpdateEnabled(ffRecNum, numFF - 1U))
	.d2line		3641
	lwzx		r0,r3,r0		# ffRecNum=r0 dataStored=r3
	rlwinm		r4,r4,3,21,28		# numFF=r4 numFF=r4
	se_add		r4,r0		# numFF=r4 numFF=r4 ffRecNum=r0
	lbz		r0,-7(r4)		# ffRecNum=r0 numFF=r4
	se_cmpi		r0,0		# ffRecNum=r0
	bc		1,2,.L409	# eq
#          {
#             /* Currently only support for update of last stored freeze frame (according to ASR4.0.3) */
#             UpdateFreezeFrame(pEvMemEntry, GetDtcFFClass(intDtc), pFFStorage);
	.d2line		3644
.Llo474:
	lis		r3,Dem_pPbCfg@ha		# dataStored=r3
.Llo475:
	lwz		r3,Dem_pPbCfg@l(r3)		# dataStored=r3 dataStored=r3
	lwz		r3,80(r3)		# dataStored=r3 dataStored=r3
.Llo481:
	rlwinm		r28,r28,1,15,30		# intDtc=r28 intDtc=r28
.Llo482:
	lhzx		r4,r3,r28		# numFF=r4 dataStored=r3
	mr		r3,r29		# pEvMemEntry=r3 pEvMemEntry=r29
.Llo476:
	mr		r5,r7		# pFFStorage=r5 pFFStorage=r7
	bl		UpdateFreezeFrame
	.section	.text_vle
.L2925:
.Llo468:
	b		.L409
.L407:
	.section	.text_vle
.L2932:
#          }
# #if (DEM_PRESTORE_FF_SUPPORT == STD_ON)
#          else
#          {
#             /* Possibly pre-stored data will not be used. Free pre-storage buffer for use by other events. */
#             ClearPrestoredFF(eventId, Dem_LCfg.p_ff_prestorage);
#          }
# #endif /* DEM_PRESTORE_FF_SUPPORT == STD_ON */
#       }
#       else
#       {
#          /*
#           * [SWS_Dem_00797]
#           * All freeze-frame instances have not been saved.
#           * Store a new instance with the next configured record number.
#           */
#          Dem_StoreFFInputType storeFFInData;
#          storeFFInData.p_storage = pFFStorage;
	.d2line		3662
.Llo464:
	stw		r7,8(r1)		# pFFStorage=r7
#          storeFFInData.num_entries = Dem_LCfg.p_num_ff_entries[internalOrigin];
	.d2line		3663
	lis		r3,(Dem_LCfg+56)@ha		# dataStored=r3
.Llo477:
	e_add16i		r3,r3,(Dem_LCfg+56)@l		# dataStored=r3 dataStored=r3
	rlwinm		r5,r30,1,23,30		# internalOrigin=r30
	lhzx		r0,r3,r5		# dataStored=r3
	sth		r0,12(r1)
#          storeFFInData.int_origin = internalOrigin;
	.d2line		3664
	stb		r30,14(r1)		# internalOrigin=r30
#          storeFFInData.event_prio = GetDtcPriority(intDtc);
	.d2line		3665
	lis		r4,Dem_pPbCfg@ha		# pEvMemEntry=r4
	lwz		r3,Dem_pPbCfg@l(r4)		# dataStored=r3 pEvMemEntry=r4
	lwz		r3,24(r3)		# dataStored=r3 dataStored=r3
	lwz		r4,Dem_pPbCfg@l(r4)		# pEvMemEntry=r4 pEvMemEntry=r4
	lwz		r4,92(r4)		# pEvMemEntry=r4 pEvMemEntry=r4
.Llo483:
	rlwinm		r28,r28,0,16,31		# intDtc=r28 intDtc=r28
.Llo484:
	lbzx		r0,r4,r28		# pEvMemEntry=r4
	lbzx		r0,r3,r0		# dataStored=r3
	stb		r0,15(r1)
#          storeFFInData.event_mem_entry_index = eventMemoryEntryIndex;
	.d2line		3666
	stb		r8,16(r1)		# eventMemoryEntryIndex=r8
#          StoreStandardFreezeFrame(eventId, pEvMemEntry, &storeFFInData);
	.d2line		3667
	diab.addi		r5,r1,8
	mr		r3,r31		# eventId=r3 eventId=r31
.Llo478:
	mr		r4,r29		# pEvMemEntry=r4 pEvMemEntry=r29
	bl		StoreStandardFreezeFrame
	.section	.text_vle
.L2933:
.L409:
#       }
#       dataStored = TRUE;
	.d2line		3669
.Llo465:
	diab.li		r28,1		# dataStored=r28
	.section	.text_vle
.L2917:
.L406:
#    }
# 
#    return dataStored;
	.d2line		3672
.Llo469:
	rlwinm		r3,r28,0,24,31		# dataStored=r3 dataStored=r28
# }
	.d2line		3673
	.d2epilogue_begin
	lmw		r28,32(r1)		# offset r1+32  0x20
	.d2_cfa_restore_list	3,10
.Llo479:
	lwz		r0,52(r1)		# ffRecNum=r0
	mtspr		lr,r0		# ffRecNum=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2907:
	.type		HandleFreezeFrameStorage,@function
	.size		HandleFreezeFrameStorage,.-HandleFreezeFrameStorage
# Number of nodes = 197

# Allocations for HandleFreezeFrameStorage
#	?a4		eventId
#	?a5		isFailed
#	?a6		internalOrigin
#	?a7		eventMemoryEntryIndex
#	?a8		pEvMemEntry
#	?a9		dataStored
#	?a10		intDtc
#	?a11		pFFStorage
#	?a12		ffRecNum
#	?a13		numFF
#	SP,8		storeFFInData
# static FUNC(void, DEM_CODE) StoreDevAFreezeFrame(Dem_NvEvMemEntryPtrType pEvMemEntry,
	.align		1
	.section	.text_vle
        .d2line         4014,29
#$$ld
.L2939:

#$$bf	StoreDevAFreezeFrame,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
StoreDevAFreezeFrame:
.Llo488:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
.Llo523:
	stmw		r24,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	24,31,1,1
	stw		r0,52(r1)		# intDtc=r0
	.d2_cfa_offset    108,-1
	mr		r3,r3		# pEvMemEntry=r3 pEvMemEntry=r3
	mr		r31,r4		# pInData=r31 pInData=r4
	.d2prologue_end
#                                                  P2CONST(Dem_StoreFFInputType, AUTOMATIC, DEM_APPL_DATA) pInData)
# {
#    Uint8NvPtrType pFFData;
#    boolean ffAllocated = FALSE;
	.d2line		4018
	diab.li		r26,0		# ffAllocated=r26
#    uint16 ffClass;
#    uint16 commonFFClass;
#    P2VAR(uint16, AUTOMATIC, DEM_NV_DATA) pFFEntry;
#    Dem_EventIdType eventId = pEvMemEntry->event_id;
#    uint16 specificFFSize = 0;
#    uint16 commonFFSize = 0;
	.d2line		4024
.Llo519:
	diab.li		r24,0
	.d2line		4022
.Llo520:
	lhz		r0,0(r3)		# intDtc=r0 pEvMemEntry=r3
.Llo517:
	mr		r0,r0		# eventId=r0 eventId=r0
#    uint16 totFFSize;
#    uint16 intDtc;
# 
#    intDtc = Dem_GetEventIntDtc(eventId);
	.d2line		4028
	lis		r4,Dem_pPbCfg@ha
.Llo494:
	lwz		r5,Dem_pPbCfg@l(r4)
	lwz		r5,128(r5)
	rlwinm		r0,r0,1,15,30		# eventId=r0 eventId=r0
	se_add		r5,r0		# eventId=r0
	lhz		r0,-2(r5)		# eventId=r0
.Llo518:
	mr		r0,r0		# intDtc=r0 intDtc=r0
#    ffClass = GetDtcDevAFFClass(intDtc);
	.d2line		4029
	lwz		r5,Dem_pPbCfg@l(r4)
	lwz		r5,84(r5)
	rlwinm		r6,r0,1,15,30		# intDtc=r0
	lhzx		r29,r5,r6
.Llo511:
	mr		r29,r29		# ffClass=r29 ffClass=r29
#    commonFFClass = GetCommonDevAFFClass();
	.d2line		4030
	lwz		r5,Dem_pPbCfg@l(r4)
	lwz		r5,116(r5)
	lhz		r28,0(r5)
.Llo512:
	mr		r28,r28		# commonFFClass=r28 commonFFClass=r28
#    pFFEntry = &(pEvMemEntry->dev_a_ff_index);
	.d2line		4031
	diab.addi		r27,r3,4		# pEvMemEntry=r3
	addi		r27,r3,4		# pEvMemEntry=r3
#    *pFFEntry = DEM_FF_BUFFER_INVALID;
	.d2line		4032
.Llo516:
	diab.li		r5,65535
	sth		r5,4(r3)		# pEvMemEntry=r3
# 
#    if (GetDtcDevAFFRecNum(intDtc) != 0xffU)
	.d2line		4034
	lwz		r3,Dem_pPbCfg@l(r4)		# pEvMemEntry=r3
	lwz		r3,40(r3)		# pEvMemEntry=r3 pEvMemEntry=r3
	lwz		r4,Dem_pPbCfg@l(r4)
	lwz		r4,92(r4)
	rlwinm		r0,r0,0,16,31		# intDtc=r0 intDtc=r0
	lbzx		r0,r4,r0		# intDtc=r0
	lbzx		r0,r3,r0		# intDtc=r0 pEvMemEntry=r3
	cmpi		0,0,r0,255		# intDtc=r0
	bc		1,2,.L464	# eq
#    {
#       /* Record number is configured. The record could consist of a common part or a specific part or both */
#       if (ffClass != DEM_FF_CLASS_INVALID)
	.d2line		4037
.Llo489:
	rlwinm		r4,r29,0,16,31		# ffClass=r29
	cmpli		0,0,r4,65535
	bc		1,2,.L466	# eq
#       {
#          specificFFSize = Dem_LCfg.p_ff_length[ffClass];
	.d2line		4039
	lis		r3,(Dem_LCfg+120)@ha		# pEvMemEntry=r3
.Llo490:
	lwz		r3,(Dem_LCfg+120)@l(r3)		# pEvMemEntry=r3 pEvMemEntry=r3
	rlwinm		r4,r29,1,15,30		# ffClass=r29
	lhzx		r26,r3,r4		# ffAllocated=r26 pEvMemEntry=r3
	mr		r26,r26		# specificFFSize=r26 specificFFSize=r26
.L466:
#       }
#       if (commonFFClass != DEM_FF_CLASS_INVALID)
	.d2line		4041
.Llo491:
	rlwinm		r4,r28,0,16,31		# commonFFClass=r28
	cmpli		0,0,r4,65535
	bc		1,2,.L467	# eq
#       {
#          commonFFSize = Dem_LCfg.p_ff_length[commonFFClass];
	.d2line		4043
	lis		r3,(Dem_LCfg+120)@ha		# pEvMemEntry=r3
.Llo492:
	lwz		r3,(Dem_LCfg+120)@l(r3)		# pEvMemEntry=r3 pEvMemEntry=r3
	rlwinm		r4,r28,1,15,30		# commonFFClass=r28
	lhzx		r24,r3,r4		# pEvMemEntry=r3
	mr		r24,r24		# commonFFSize=r24 commonFFSize=r24
.L467:
#       }
#       totFFSize = commonFFSize + specificFFSize;
	.d2line		4045
.Llo493:
	add		r3,r24,r26		# pEvMemEntry=r3 commonFFSize=r24 specificFFSize=r26
.Llo521:
	mr		r3,r3		# totFFSize=r3 totFFSize=r3
# 
#       if ((pInData->p_storage != NULL_PTR) && (totFFSize > 0) && (totFFSize <= pInData->p_storage->buffer_length))
	.d2line		4047
	lwz		r0,0(r31)		# intDtc=r0 pInData=r31
.Llo524:
	se_cmpi		r0,0		# intDtc=r0
	bc		1,2,.L464	# eq
.Llo525:
	rlwinm		r0,r3,0,16,31		# intDtc=r0 totFFSize=r3
.Llo526:
	se_cmpi		r0,0		# intDtc=r0
	bc		0,1,.L464	# le
.Llo527:
	rlwinm		r0,r3,0,16,31		# intDtc=r0 totFFSize=r3
.Llo528:
	lwz		r3,0(r31)		# totFFSize=r3 pInData=r31
	lhz		r3,8(r3)		# totFFSize=r3 totFFSize=r3
	se_cmp		r0,r3		# intDtc=r0 totFFSize=r3
	bc		1,1,.L464	# gt
#       {
#          ffAllocated = FindFreeFreezeFrameEntry(pInData->p_storage, pInData->num_entries, pFFEntry);
	.d2line		4049
.Llo522:
	lhz		r4,4(r31)		# pInData=r31
	lwz		r3,0(r31)		# totFFSize=r3 pInData=r31
	mr		r5,r27		# pFFEntry=r5 pFFEntry=r27
	bl		FindFreeFreezeFrameEntry
.Llo499:
	mr		r3,r3		# ffAllocated=r3 ffAllocated=r3
# 
# #if (DEM_EVENT_DISPLACEMENT_STRATEGY != DEM_DISPLACEMENT_NONE)
#          if (FALSE == ffAllocated)
#          {
#             /*
#              * [VSTAR_Dem_00148]
#              * No free freeze frame entry found, find entry to displace
#              */
#             uint8 displEvMemEntryIndex = FindEventMemoryEntryToDisplace(eventId,
#                                                                   pInData->event_prio,
#                                                                   pInData->int_origin,
#                                                                   DEM_DISPL_DEV_A_FREEZE_FRAME);
#             if (DEM_EV_MEM_ENTRY_INVALID != displEvMemEntryIndex)
#             {
#                CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC) pDisplacedFFEvMemEntry = Dem_GetEvMemEntryPtr(pInData->int_origin, displEvMemEntryIndex);
#                *pFFEntry = pDisplacedFFEvMemEntry->dev_a_ff_index;
#                pDisplacedFFEvMemEntry->dev_a_ff_index = DEM_FF_BUFFER_INVALID;
#                ffAllocated = TRUE;
#             }
#          }
# #endif /* (DEM_EVENT_DISPLACEMENT_STRATEGY != DEM_DISPLACEMENT_NONE) */
# 
#          if (TRUE == ffAllocated)
	.d2line		4072
	rlwinm		r3,r3,0,24,31		# ffAllocated=r3 ffAllocated=r3
	se_cmpi		r3,1		# ffAllocated=r3
	bc		0,2,.L464	# ne
#          {
#             pFFData = pInData->p_storage->p_get_buffer_entry(*pFFEntry);
	.d2line		4074
.Llo500:
	lwz		r3,0(r31)		# ffAllocated=r3 pInData=r31
.Llo501:
	lwz		r0,0(r3)		# intDtc=r0 ffAllocated=r3
	mtspr		ctr,r0		# intDtc=ctr
	lhz		r3,0(r27)		# ffAllocated=r3 pFFEntry=r27
.Llo502:
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
.Llo496:
	mr		r30,r3		# pFFData=r30 pFFData=r3
#             /* Mark the freeze frame entry as occupied */
#             *pInData->p_storage->p_get_entry_occupied(*pFFEntry) = pInData->event_mem_entry_index;
	.d2line		4076
	lbz		r25,8(r31)		# pInData=r31
	lwz		r3,0(r31)		# ffAllocated=r3 pInData=r31
.Llo497:
	lwz		r0,4(r3)		# intDtc=r0 ffAllocated=r3
	mtspr		ctr,r0		# intDtc=ctr
	lhz		r3,0(r27)		# ffAllocated=r3 pFFEntry=r27
.Llo503:
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
.Llo495:
	stb		r25,0(r3)		# ffAllocated=r3
#             if (commonFFSize > 0)
	.d2line		4077
	rlwinm		r3,r24,0,16,31		# ffAllocated=r3 commonFFSize=r24
	se_cmpi		r3,0		# ffAllocated=r3
	bc		0,1,.L470	# le
#             {
#                /* [VSTAR_Dem_00145] */
#                if (FALSE == StoreFreezeFrameData(pFFData, commonFFClass))
	.d2line		4080
.Llo504:
	mr		r3,r30		# pFFData=r3 pFFData=r30
	mr		r4,r28		# commonFFClass=r4 commonFFClass=r28
	bl		StoreFreezeFrameData
.Llo505:
	e_andi.		r3,r3,255		# ffAllocated=r3 ffAllocated=r3
.Llo506:
	bc		0,2,.L470	# ne
#                {
#                   DEM_ASSERT_NODATAAVAILABLE_NO_RET(DEM_SID_MAINFUNCTION, FALSE)
	.d2line		4082
.Llo513:
	diab.li		r3,54		# ffAllocated=r3
	diab.li		r4,0		# commonFFClass=r4
	diab.li		r5,85		# pFFEntry=r5
	diab.li		r6,48
	bl		Det_ReportError
.L470:
#                }
#             }
#             if (specificFFSize > 0)
	.d2line		4085
.Llo514:
	rlwinm		r26,r26,0,16,31		# specificFFSize=r26 specificFFSize=r26
	se_cmpi		r26,0		# specificFFSize=r26
	bc		0,1,.L464	# le
#             {
# 
#                if (FALSE == StoreFreezeFrameData(&pFFData[commonFFSize], ffClass))
	.d2line		4088
.Llo515:
	rlwinm		r3,r24,0,16,31		# ffAllocated=r3 commonFFSize=r24
.Llo507:
	se_add		r3,r30		# ffAllocated=r3 ffAllocated=r3 pFFData=r30
.Llo508:
	mr		r4,r29		# ffClass=r4 ffClass=r29
	bl		StoreFreezeFrameData
.Llo509:
	e_andi.		r3,r3,255		# ffAllocated=r3 ffAllocated=r3
.Llo510:
	bc		0,2,.L464	# ne
#                {
#                   DEM_ASSERT_NODATAAVAILABLE_NO_RET(DEM_SID_MAINFUNCTION, FALSE)
	.d2line		4090
.Llo498:
	diab.li		r3,54		# ffAllocated=r3
	diab.li		r4,0		# ffClass=r4
	diab.li		r5,85		# pFFEntry=r5
	diab.li		r6,48
	bl		Det_ReportError
.L464:
#                }
#             }
#          }
#       }
#    }
# }
	.d2line		4096
	.d2epilogue_begin
	lmw		r24,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	2,10
	lwz		r0,52(r1)		# intDtc=r0
	mtspr		lr,r0		# intDtc=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2940:
	.type		StoreDevAFreezeFrame,@function
	.size		StoreDevAFreezeFrame,.-StoreDevAFreezeFrame
# Number of nodes = 227

# Allocations for StoreDevAFreezeFrame
#	?a4		pEvMemEntry
#	?a5		pInData
#	?a6		pFFData
#	?a7		ffAllocated
#	?a8		ffClass
#	?a9		commonFFClass
#	?a10		pFFEntry
#	?a11		eventId
#	?a12		specificFFSize
#	?a13		commonFFSize
#	?a14		totFFSize
#	?a15		intDtc
# static FUNC(void, DEM_CODE) StoreDevBFreezeFrame(Dem_NvEvMemEntryPtrType pEvMemEntry,
	.align		1
	.section	.text_vle
        .d2line         4098,29
#$$ld
.L2966:

#$$bf	StoreDevBFreezeFrame,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
StoreDevBFreezeFrame:
.Llo529:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
.Llo552:
	stmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	27,31,1,1
	stw		r0,52(r1)		# intDtc=r0
	.d2_cfa_offset    108,-1
	mr		r3,r3		# pEvMemEntry=r3 pEvMemEntry=r3
	mr		r31,r4		# pInData=r31 pInData=r4
	.d2prologue_end
#                                                  P2CONST(Dem_StoreFFInputType, AUTOMATIC, DEM_APPL_DATA) pInData)
# {
#    Uint8NvPtrType pFFData;
#    boolean ffAllocated = FALSE;
	.d2line		4102
	diab.li		r4,0		# ffAllocated=r4
#    uint16 ffClass;
#    P2VAR(uint16, AUTOMATIC, DEM_NV_DATA) pFFEntry;
#    Dem_EventIdType eventId = pEvMemEntry->event_id;
#    uint16 specificFFSize = 0;
	.d2line		4105
.Llo535:
	lhz		r0,0(r3)		# intDtc=r0 pEvMemEntry=r3
.Llo550:
	mr		r0,r0		# eventId=r0 eventId=r0
#    uint16 intDtc;
# 
#    intDtc = Dem_GetEventIntDtc(eventId);
	.d2line		4109
	lis		r6,Dem_pPbCfg@ha
	lwz		r5,Dem_pPbCfg@l(r6)
	lwz		r5,128(r5)
	rlwinm		r0,r0,1,15,30		# eventId=r0 eventId=r0
	se_add		r5,r0		# eventId=r0
	lhz		r0,-2(r5)		# eventId=r0
.Llo551:
	mr		r0,r0		# intDtc=r0 intDtc=r0
#    ffClass = GetDtcDevBFFClass(intDtc);
	.d2line		4110
	lwz		r5,Dem_pPbCfg@l(r6)
	lwz		r5,88(r5)
	rlwinm		r0,r0,1,15,30		# intDtc=r0 intDtc=r0
.Llo553:
	lhzx		r29,r5,r0		# ffClass=r29
.Llo548:
	mr		r29,r29		# ffClass=r29 ffClass=r29
#    pFFEntry = &(pEvMemEntry->dev_b_ff_index);
	.d2line		4111
	diab.addi		r28,r3,6		# pEvMemEntry=r3
	addi		r28,r3,6		# pEvMemEntry=r3
#    *pFFEntry = DEM_FF_BUFFER_INVALID;
	.d2line		4112
.Llo549:
	diab.li		r0,65535		# intDtc=r0
.Llo554:
	sth		r0,6(r3)		# pEvMemEntry=r3 intDtc=r0
# 
#    if (ffClass != DEM_FF_CLASS_INVALID)
	.d2line		4114
	rlwinm		r0,r29,0,16,31		# intDtc=r0 ffClass=r29
	cmpli		0,0,r0,65535		# intDtc=r0
	bc		1,2,.L481	# eq
#    {
#       specificFFSize = Dem_LCfg.p_ff_length[ffClass];
	.d2line		4116
.Llo530:
	lis		r3,(Dem_LCfg+120)@ha		# pEvMemEntry=r3
.Llo531:
	lwz		r3,(Dem_LCfg+120)@l(r3)		# pEvMemEntry=r3 pEvMemEntry=r3
	rlwinm		r0,r29,1,15,30		# intDtc=r0 ffClass=r29
	lhzx		r4,r3,r0		# ffAllocated=r4 pEvMemEntry=r3
	mr		r4,r4		# specificFFSize=r4 specificFFSize=r4
.L481:
#    }
# 
#    if ((pInData->p_storage != NULL_PTR) && (specificFFSize > 0) && (specificFFSize <= pInData->p_storage->buffer_length))
	.d2line		4119
.Llo532:
	lwz		r0,0(r31)		# intDtc=r0 pInData=r31
.Llo555:
	se_cmpi		r0,0		# intDtc=r0
	bc		1,2,.L480	# eq
.Llo556:
	rlwinm		r0,r4,0,16,31		# intDtc=r0 specificFFSize=r4
.Llo557:
	se_cmpi		r0,0		# intDtc=r0
	bc		0,1,.L480	# le
.Llo558:
	rlwinm		r4,r4,0,16,31		# specificFFSize=r4 specificFFSize=r4
	lwz		r3,0(r31)		# pEvMemEntry=r3 pInData=r31
.Llo533:
	lhz		r0,8(r3)		# intDtc=r0 pEvMemEntry=r3
.Llo559:
	se_cmp		r4,r0		# specificFFSize=r4 intDtc=r0
	bc		1,1,.L480	# gt
#    {
#       ffAllocated = FindFreeFreezeFrameEntry(pInData->p_storage, pInData->num_entries, pFFEntry);
	.d2line		4121
.Llo534:
	lhz		r4,4(r31)		# specificFFSize=r4 pInData=r31
	lwz		r3,0(r31)		# pEvMemEntry=r3 pInData=r31
	mr		r5,r28		# pFFEntry=r5 pFFEntry=r28
	bl		FindFreeFreezeFrameEntry
.Llo540:
	mr		r3,r3		# ffAllocated=r3 ffAllocated=r3
# 
# #if (DEM_EVENT_DISPLACEMENT_STRATEGY != DEM_DISPLACEMENT_NONE)
#       if (FALSE == ffAllocated)
#       {
#          /*
#           * [VSTAR_Dem_00148]
#           * No free freeze frame entry found, find entry to displace
#           */
#          uint8 displEvMemEntryIndex = FindEventMemoryEntryToDisplace(eventId,
#                                                                pInData->event_prio,
#                                                                pInData->int_origin,
#                                                                DEM_DISPL_DEV_B_FREEZE_FRAME);
#          if (DEM_EV_MEM_ENTRY_INVALID != displEvMemEntryIndex)
#          {
#             CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC) pDisplacedFFEvMemEntry = Dem_GetEvMemEntryPtr(pInData->int_origin, displEvMemEntryIndex);
#             *pFFEntry = pDisplacedFFEvMemEntry->dev_b_ff_index;
#             pDisplacedFFEvMemEntry->dev_b_ff_index = DEM_FF_BUFFER_INVALID;
#             ffAllocated = TRUE;
#          }
#       }
# #endif /* (DEM_EVENT_DISPLACEMENT_STRATEGY != DEM_DISPLACEMENT_NONE) */
# 
#       if (TRUE == ffAllocated)
	.d2line		4144
	rlwinm		r3,r3,0,24,31		# ffAllocated=r3 ffAllocated=r3
	se_cmpi		r3,1		# ffAllocated=r3
	bc		0,2,.L480	# ne
#       {
#          pFFData = pInData->p_storage->p_get_buffer_entry(*pFFEntry);
	.d2line		4146
.Llo541:
	lwz		r3,0(r31)		# ffAllocated=r3 pInData=r31
.Llo542:
	lwz		r0,0(r3)		# intDtc=r0 ffAllocated=r3
	mtspr		ctr,r0		# intDtc=ctr
	lhz		r3,0(r28)		# ffAllocated=r3 pFFEntry=r28
.Llo543:
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
.Llo537:
	mr		r30,r3		# pFFData=r30 pFFData=r3
#          /* Mark the freeze frame entry as occupied */
#          *pInData->p_storage->p_get_entry_occupied(*pFFEntry) = pInData->event_mem_entry_index;
	.d2line		4148
	lbz		r27,8(r31)		# pInData=r31
	lwz		r3,0(r31)		# ffAllocated=r3 pInData=r31
.Llo538:
	lwz		r0,4(r3)		# intDtc=r0 ffAllocated=r3
	mtspr		ctr,r0		# intDtc=ctr
	lhz		r3,0(r28)		# ffAllocated=r3 pFFEntry=r28
.Llo544:
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
.Llo536:
	stb		r27,0(r3)		# ffAllocated=r3
#          if (FALSE == StoreFreezeFrameData(pFFData, ffClass))
	.d2line		4149
	mr		r3,r30		# pFFData=r3 pFFData=r30
.Llo545:
	mr		r4,r29		# ffClass=r4 ffClass=r29
	bl		StoreFreezeFrameData
.Llo546:
	e_andi.		r3,r3,255		# ffAllocated=r3 ffAllocated=r3
.Llo547:
	bc		0,2,.L480	# ne
#          {
#             DEM_ASSERT_NODATAAVAILABLE_NO_RET(DEM_SID_MAINFUNCTION, FALSE)
	.d2line		4151
.Llo539:
	diab.li		r3,54		# ffAllocated=r3
	diab.li		r4,0		# ffClass=r4
	diab.li		r5,85		# pFFEntry=r5
	diab.li		r6,48
	bl		Det_ReportError
.L480:
#          }
#       }
#    }
# }
	.d2line		4155
	.d2epilogue_begin
	lmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,52(r1)		# intDtc=r0
	mtspr		lr,r0		# intDtc=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2967:
	.type		StoreDevBFreezeFrame,@function
	.size		StoreDevBFreezeFrame,.-StoreDevBFreezeFrame
# Number of nodes = 146

# Allocations for StoreDevBFreezeFrame
#	?a4		pEvMemEntry
#	?a5		pInData
#	?a6		pFFData
#	?a7		ffAllocated
#	?a8		ffClass
#	?a9		pFFEntry
#	?a10		eventId
#	?a11		specificFFSize
#	?a12		intDtc
# static FUNC(void, DEM_CODE) HandleDevFreezeFrameStorage(uint8 internalOrigin, uint8 eventMemoryEntryIndex,
	.align		1
	.section	.text_vle
        .d2line         3675,29
#$$ld
.L2987:

#$$bf	HandleDevFreezeFrameStorage,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
HandleDevFreezeFrameStorage:
.Llo560:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r28,32(r1)		# offset r1+32  0x20
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# internalOrigin=r31 internalOrigin=r3
	mr		r30,r4		# eventMemoryEntryIndex=r30 eventMemoryEntryIndex=r4
	mr		r29,r5		# pEvMemEntry=r29 pEvMemEntry=r5
	mr		r6,r6		# numStoredStandardFFOld=r6 numStoredStandardFFOld=r6
	.d2prologue_end
#    Dem_NvEvMemEntryPtrType pEvMemEntry, uint8 numStoredStandardFFOld)
# {
#    if ((DEM_DTC_ORIGIN_PRIMARY_MEMORY_INTERNAL_INDEX == internalOrigin) &&
	.d2line		3678
	rlwinm		r3,r3,0,24,31		# internalOrigin=r3 internalOrigin=r3
	se_cmpi		r3,0		# internalOrigin=r3
	bc		0,2,.L413	# ne
.Llo561:
	rlwinm		r6,r6,0,24,31		# numStoredStandardFFOld=r6 numStoredStandardFFOld=r6
.Llo562:
	se_cmpi		r6,0		# numStoredStandardFFOld=r6
	bc		0,2,.L413	# ne
.Llo566:
	lbz		r0,11(r29)		# pEvMemEntry=r29
	se_cmpi		r0,1
	bc		0,2,.L413	# ne
	.section	.text_vle
.L2994:
#          ((uint8)0U == numStoredStandardFFOld) &&
#          ((uint8)1U == pEvMemEntry->num_stored_ff))
#    {
#       /* Save development freeze frames along with first standard freeze frame. Only save for primary memory. */
#       CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(pEvMemEntry->event_id);
	.d2line		3683
	lis		r3,Dem_pPbCfg@ha		# internalOrigin=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# internalOrigin=r3 internalOrigin=r3
	lwz		r0,128(r3)		# internalOrigin=r3
	lhz		r3,0(r29)		# internalOrigin=r3 pEvMemEntry=r29
	rlwinm		r3,r3,1,15,30		# internalOrigin=r3 internalOrigin=r3
	se_add		r3,r0		# internalOrigin=r3 internalOrigin=r3
	lhz		r28,-2(r3)		# internalOrigin=r3
.Llo567:
	mr		r28,r28		# intDtc=r28 intDtc=r28
# 
#       /* [VSTAR_Dem_00144], [VSTAR_Dem_00146] */
#       if (Dem_LCfg.p_dev_a_ff_storage != NULL_PTR)
	.d2line		3686
	lis		r3,(Dem_LCfg+60)@ha		# internalOrigin=r3
	lwz		r0,(Dem_LCfg+60)@l(r3)		# internalOrigin=r3
	se_cmpi		r0,0
	bc		1,2,.L415	# eq
	.section	.text_vle
.L3000:
#       {
#          Dem_StoreFFInputType storeFFInData;
#          storeFFInData.p_storage = Dem_LCfg.p_dev_a_ff_storage;
	.d2line		3689
	lis		r3,(Dem_LCfg+60)@ha		# internalOrigin=r3
	lwz		r0,(Dem_LCfg+60)@l(r3)		# internalOrigin=r3
	stw		r0,8(r1)
#          storeFFInData.num_entries = Dem_LCfg.num_dev_a_entries;
	.d2line		3690
	lis		r3,(Dem_LCfg+64)@ha		# internalOrigin=r3
	lhz		r0,(Dem_LCfg+64)@l(r3)		# internalOrigin=r3
	sth		r0,12(r1)
#          storeFFInData.int_origin = internalOrigin;
	.d2line		3691
	stb		r31,14(r1)		# internalOrigin=r31
#          storeFFInData.event_prio = GetDtcPriority(intDtc);
	.d2line		3692
	lis		r4,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r4)		# internalOrigin=r3
	lwz		r3,24(r3)		# internalOrigin=r3 internalOrigin=r3
	lwz		r4,Dem_pPbCfg@l(r4)
	lwz		r4,92(r4)
	rlwinm		r0,r28,0,16,31		# intDtc=r28
	lbzx		r0,r4,r0
	lbzx		r0,r3,r0		# internalOrigin=r3
	stb		r0,15(r1)
#          storeFFInData.event_mem_entry_index = eventMemoryEntryIndex;
	.d2line		3693
	stb		r30,16(r1)		# eventMemoryEntryIndex=r30
#          StoreDevAFreezeFrame(pEvMemEntry, &storeFFInData);
	.d2line		3694
	diab.addi		r4,r1,8
	mr		r3,r29		# pEvMemEntry=r3 pEvMemEntry=r29
	bl		StoreDevAFreezeFrame
	.section	.text_vle
.L3001:
.L415:
#       }
#       /* [VSTAR_Dem_00144], [VSTAR_Dem_00146] */
#       if (Dem_LCfg.p_dev_b_ff_storage != NULL_PTR)
	.d2line		3697
	lis		r3,(Dem_LCfg+68)@ha		# internalOrigin=r3
	lwz		r0,(Dem_LCfg+68)@l(r3)		# internalOrigin=r3
	se_cmpi		r0,0
	bc		1,2,.L413	# eq
	.section	.text_vle
.L3005:
#       {
#          Dem_StoreFFInputType storeFFInData;
#          storeFFInData.p_storage = Dem_LCfg.p_dev_b_ff_storage;
	.d2line		3700
.Llo568:
	lis		r3,(Dem_LCfg+68)@ha		# internalOrigin=r3
	lwz		r0,(Dem_LCfg+68)@l(r3)		# internalOrigin=r3
	stw		r0,20(r1)
#          storeFFInData.num_entries = Dem_LCfg.num_dev_b_entries;
	.d2line		3701
	lis		r3,(Dem_LCfg+72)@ha		# internalOrigin=r3
	lhz		r0,(Dem_LCfg+72)@l(r3)		# internalOrigin=r3
	sth		r0,24(r1)
#          storeFFInData.int_origin = internalOrigin;
	.d2line		3702
	stb		r31,26(r1)		# internalOrigin=r31
#          storeFFInData.event_prio = GetDtcPriority(intDtc);
	.d2line		3703
	lis		r4,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r4)		# internalOrigin=r3
	lwz		r3,24(r3)		# internalOrigin=r3 internalOrigin=r3
	lwz		r4,Dem_pPbCfg@l(r4)
	lwz		r4,92(r4)
.Llo569:
	rlwinm		r28,r28,0,16,31		# intDtc=r28 intDtc=r28
.Llo570:
	lbzx		r0,r4,r28
	lbzx		r0,r3,r0		# internalOrigin=r3
	stb		r0,27(r1)
#          storeFFInData.event_mem_entry_index = eventMemoryEntryIndex;
	.d2line		3704
	stb		r30,28(r1)		# eventMemoryEntryIndex=r30
#          StoreDevBFreezeFrame(pEvMemEntry, &storeFFInData);
	.d2line		3705
	diab.addi		r4,r1,20
	mr		r3,r29		# pEvMemEntry=r3 pEvMemEntry=r29
	bl		StoreDevBFreezeFrame
	.section	.text_vle
.L3006:
	.section	.text_vle
.L2995:
.L413:
#       }
#    }
# }
	.d2line		3708
	.d2epilogue_begin
.Llo563:
	lmw		r28,32(r1)		# offset r1+32  0x20
	.d2_cfa_restore_list	3,10
.Llo564:
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo565:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L2988:
	.type		HandleDevFreezeFrameStorage,@function
	.size		HandleDevFreezeFrameStorage,.-HandleDevFreezeFrameStorage
# Number of nodes = 168

# Allocations for HandleDevFreezeFrameStorage
#	?a4		internalOrigin
#	?a5		eventMemoryEntryIndex
#	?a6		pEvMemEntry
#	?a7		numStoredStandardFFOld
#	?a8		intDtc
#	SP,8		storeFFInData
#	SP,20		storeFFInData
# static FUNC(void, DEM_CODE) ClearInternalExtendedData(Dem_NvEvMemEntryPtrType pEvMemEntry)
	.align		1
	.section	.text_vle
        .d2line         4986,29
#$$ld
.L3012:

#$$bf	ClearInternalExtendedData,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
ClearInternalExtendedData:
.Llo571:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# pEvMemEntry=r31 pEvMemEntry=r3
	.d2prologue_end
# {
#    Dem_ClearAllHealingCounters(pEvMemEntry);
	.d2line		4988
.Llo572:
	mr		r3,r31		# pEvMemEntry=r3 pEvMemEntry=r31
.Llo573:
	bl		Dem_ClearAllHealingCounters
#    pEvMemEntry->aging_counter = (uint8)0U;
	.d2line		4989
	diab.li		r0,0
	stb		r0,19(r31)		# pEvMemEntry=r31
#    pEvMemEntry->si = (uint8)0U;
	.d2line		4990
	stb		r0,14(r31)		# pEvMemEntry=r31
#    pEvMemEntry->occurrence_counter = (uint8)0U;
	.d2line		4991
	stb		r0,15(r31)		# pEvMemEntry=r31
#    pEvMemEntry->cycles_since_last_failed = (uint8)0U; /* [SWS_Dem_00771], [VSTAR_Dem_00154] */
	.d2line		4992
	stb		r0,16(r31)		# pEvMemEntry=r31
#    pEvMemEntry->cycles_since_first_failed = (uint8)0U; /* [SWS_Dem_00776] */
	.d2line		4993
	stb		r0,17(r31)		# pEvMemEntry=r31
#    pEvMemEntry->failed_cycles = (uint8)0U; /* [SWS_Dem_00780], [VSTAR_Dem_00157] */
	.d2line		4994
	stb		r0,18(r31)		# pEvMemEntry=r31
# #if (DEM_OBD_SUPPORT == STD_ON)
#    pEvMemEntry->wuc_counter = (uint8)0U;
# #endif
#    Dem_ClearAllFailureCounters(pEvMemEntry);
	.d2line		4998
	mr		r3,r31		# pEvMemEntry=r3 pEvMemEntry=r31
	bl		Dem_ClearAllFailureCounters
# }
	.d2line		4999
	.d2epilogue_begin
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
.Llo574:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3013:
	.type		ClearInternalExtendedData,@function
	.size		ClearInternalExtendedData,.-ClearInternalExtendedData
# Number of nodes = 44

# Allocations for ClearInternalExtendedData
#	?a4		pEvMemEntry
# static FUNC(uint8, DEM_CODE) GetEventMemoryEntry(Dem_EventIdType eventId,
	.align		1
	.section	.text_vle
        .d2line         5001,30
#$$ld
.L3018:

#$$bf	GetEventMemoryEntry,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
GetEventMemoryEntry:
.Llo575:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r29,r3		# eventId=r29 eventId=r3
.Llo576:
	mr		r28,r4		# internalOrigin=r28 internalOrigin=r4
.Llo577:
	mr		r31,r5		# ppEvMemEntry=r31 ppEvMemEntry=r5
	.d2prologue_end
#    uint8 internalOrigin,
#    P2VAR(Dem_NvEvMemEntryPtrType, AUTOMATIC, DEM_APPL_DATA) ppEvMemEntry)
# {
#    uint8 eventMemoryEntryIndex;
#    eventMemoryEntryIndex = GetExistingEventMemoryEntry(Dem_GetEventIntDtc(eventId), internalOrigin, ppEvMemEntry);
	.d2line		5006
.Llo586:
	lis		r3,Dem_pPbCfg@ha
.Llo587:
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,128(r3)
	rlwinm		r0,r29,1,15,30		# eventId=r29
	se_add		r3,r0
	lhz		r3,-2(r3)
	mr		r4,r28		# internalOrigin=r4 internalOrigin=r28
.Llo579:
	mr		r5,r31		# ppEvMemEntry=r5 ppEvMemEntry=r31
	bl		GetExistingEventMemoryEntry
.Llo588:
	mr		r30,r3		# eventMemoryEntryIndex=r30 eventMemoryEntryIndex=r3
#    if (NULL_PTR == *ppEvMemEntry)
	.d2line		5007
	lwz		r0,0(r31)		# ppEvMemEntry=r31
	se_cmpi		r0,0
	bc		0,2,.L691	# ne
#    {
#       /*
#        * [SWS_Dem_00798], [SWS_Dem_00163]
#        * Event is not yet stored to event-memory.
#        * Find a free event-memory entry and store FF and ED.
#        */
# 
#       /* Enter eventid in Event memory */
#       eventMemoryEntryIndex = AllocateEventMemoryEntry(eventId, internalOrigin, ppEvMemEntry);
	.d2line		5016
.Llo580:
	mr		r3,r29		# eventId=r3 eventId=r29
.Llo589:
	mr		r4,r28		# internalOrigin=r4 internalOrigin=r28
	mr		r5,r31		# ppEvMemEntry=r5 ppEvMemEntry=r31
	bl		AllocateEventMemoryEntry
	mr		r30,r3		# eventMemoryEntryIndex=r30 eventMemoryEntryIndex=r3
#       if (NULL_PTR == *ppEvMemEntry)
	.d2line		5017
	lwz		r0,0(r31)		# ppEvMemEntry=r31
	se_cmpi		r0,0
	bc		0,2,.L692	# ne
#       {
# /* [SWS_Dem_00401], [SWS_Dem_00402] */
# #if (DEM_EVENT_DISPLACEMENT_STRATEGY != DEM_DISPLACEMENT_NONE)
#          /* No free entry found */
#          CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(eventId);
#          /* [SWS_Dem_00400] */
#          eventMemoryEntryIndex = FindEventMemoryEntryToDisplace(eventId,
#                                                                   GetDtcPriority(intDtc),
#                                                                   internalOrigin,
#                                                                   DEM_DISPL_EV_MEM_ENTRY);
#          if (DEM_EV_MEM_ENTRY_INVALID != eventMemoryEntryIndex)
#          {
#             *ppEvMemEntry = Dem_GetEvMemEntryPtr(internalOrigin, eventMemoryEntryIndex);
#          }
#          /* [SWS_Dem_00407], [SWS_Dem_00408] */
#          if (NULL_PTR != *ppEvMemEntry)
#          {
#             /* Found Event entry to displace */
#             CONST(uint16, AUTOMATIC) displacedEvent = (*ppEvMemEntry)->event_id;
#             Dem_UdsStatusByteType udsStatus;
# 
#             PerformAgingDisplacement(eventMemoryEntryIndex, internalOrigin);
# 
#             /* [VSTAR_Dem_00077]
#              * If the displaced event(s) has the WIR-bit set, clear it and re-calculate the indicator status.
#              */
#             udsStatus = Dem_GetUdsStatusByIntDtc(Dem_GetEventIntDtc(displacedEvent));
#             if (Dem_IsSet(udsStatus, DEM_UDS_SB_WIR))
#             {
#                /* In case of event combination on storage there can be several events using the same ev-mem entry.
#                 * Clear the WIR-bit for all these events.
#                 */
#                Dem_ClearUdsBitsForCombinedEvent(displacedEvent, DEM_UDS_SB_WIR_CLR);
#                Dem_UpdateIndicators();
#             }
# 
#             /* Update entry with new event*/
#             (*ppEvMemEntry)->event_id = eventId;
#             /* Insert new entry in chronological list */
#             Dem_EnterInChronologicalList(internalOrigin, eventMemoryEntryIndex);
#          }
# #endif /* (DEM_EVENT_DISPLACEMENT_STRATEGY != DEM_DISPLACEMENT_NONE) */
# 
#          /* Overflow indication */
#          Dem_SetBits(Dem_NvAdmin.event_memory_overflow_ind, Dem_OriginMasks[internalOrigin]);
	.d2line		5062
.Llo581:
	lis		r4,(Dem_NvAdmin+8)@ha
	lbz		r0,(Dem_NvAdmin+8)@l(r4)
	lis		r3,Dem_OriginMasks@ha		# eventId=r3
	e_add16i		r3,r3,Dem_OriginMasks@l		# eventId=r3 eventId=r3
.Llo582:
	rlwinm		r28,r28,0,24,31		# internalOrigin=r28 internalOrigin=r28
.Llo583:
	lbzx		r3,r3,r28		# eventId=r3 eventId=r3
	or		r0,r0,r3		# eventId=r3
	stb		r0,(Dem_NvAdmin+8)@l(r4)
.L692:
#       }
# 
#       if (NULL_PTR != *ppEvMemEntry)
	.d2line		5065
.Llo584:
	lwz		r0,0(r31)		# ppEvMemEntry=r31
	se_cmpi		r0,0
	bc		1,2,.L693	# eq
#       {
#          ClearInternalExtendedData(*ppEvMemEntry);
	.d2line		5067
.Llo585:
	lwz		r3,0(r31)		# eventId=r3 ppEvMemEntry=r31
	bl		ClearInternalExtendedData
# 
#          /* Clear event status for this event memory entry */
#          (*ppEvMemEntry)->uds_status = DEM_UDS_SB_TNCSLC | DEM_UDS_SB_TNCTOC;
	.d2line		5070
	diab.li		r0,80
	lwz		r3,0(r31)		# eventId=r3 ppEvMemEntry=r31
	stb		r0,13(r3)		# eventId=r3
	b		.L691
.L693:
#       }
#       else
#       {
#          /* Failed to allocate entry in event memory */
#          Dem_ClearPrestoredFF(eventId); /* [SWS_Dem_00969] */
	.d2line		5075
	mr		r3,r29		# eventId=r3 eventId=r29
	bl		Dem_ClearPrestoredFF
.L691:
#       }
#    }
# 
#    return eventMemoryEntryIndex;
	.d2line		5079
.Llo578:
	rlwinm		r3,r30,0,24,31		# eventId=r3 eventMemoryEntryIndex=r30
# }
	.d2line		5080
	.d2epilogue_begin
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
.Llo590:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3019:
	.type		GetEventMemoryEntry,@function
	.size		GetEventMemoryEntry,.-GetEventMemoryEntry
# Number of nodes = 79

# Allocations for GetEventMemoryEntry
#	?a4		eventId
#	?a5		internalOrigin
#	?a6		ppEvMemEntry
#	?a7		eventMemoryEntryIndex
# static FUNC(void, DEM_CODE) EventDataChangedCallouts(Dem_EventIdType eventId)
	.align		1
	.section	.text_vle
        .d2line         5746,29
#$$ld
.L3028:

#$$bf	EventDataChangedCallouts,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
EventDataChangedCallouts:
.Llo591:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo595:
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)		# pEventDataChanged=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# eventId=r31 eventId=r3
	.d2prologue_end
# {
#    EvDataChPtrType pEventDataChanged = Dem_LCfg.p_events[eventId - 1U].p_event_data_changed;
	.d2line		5748
.Llo592:
	lis		r3,(Dem_LCfg+16)@ha
.Llo593:
	lwz		r0,(Dem_LCfg+16)@l(r3)		# pEventDataChanged=r0
	rlwinm		r3,r31,0,16,31		# eventId=r31
	e_mulli		r3,r3,20
	se_add		r3,r0		# pEventDataChanged=r0
	lwz		r0,-8(r3)		# pEventDataChanged=r0
	.d2line		5750
	mr.		r0,r0		# pEventDataChanged=?a5 pEventDataChanged=?a10
# 
#    if (NULL_PTR != pEventDataChanged)
	bc		1,2,.L867	# eq
#    {
#       /*
#        * MISRA-C:2004 RULE 16.10 VIOLATION:
#        * If a function returns error information, then that error information shall be tested.
#        * SWS_Dem_00618: Return value unused - only for compatibility with Rte operation.
#        */
#       (void)pEventDataChanged();
	.d2line		5757
	mtspr		ctr,r0		# pEventDataChanged=ctr pEventDataChanged=r0
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x0 0x0 0x0 0x1
#$$rs 1 u
	bcctrl		20,0
.L867:
#    }
# 
#    if (NULL_PTR != Dem_LCfg.p_gen_cbk_event_data_changed)
	.d2line		5760
.Llo596:
	lis		r3,(Dem_LCfg+156)@ha
	lwz		r0,(Dem_LCfg+156)@l(r3)		# pEventDataChanged=r0
.Llo597:
	se_cmpi		r0,0		# pEventDataChanged=r0
	bc		1,2,.L866	# eq
#    {
#       /*
#        * MISRA-C:2004 RULE 16.10 VIOLATION:
#        * If a function returns error information, then that error information shall be tested.
#        * SWS_Dem_00619: Return value unused - only for compatibility with Rte operation.
#        */
#       (void)Dem_LCfg.p_gen_cbk_event_data_changed(eventId);
	.d2line		5767
.Llo598:
	lis		r3,(Dem_LCfg+156)@ha
	lwz		r0,(Dem_LCfg+156)@l(r3)		# pEventDataChanged=r0
	mtspr		ctr,r0		# pEventDataChanged=ctr
	rlwinm		r3,r31,0,16,31		# eventId=r31
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 1 u
	bcctrl		20,0
.L866:
#    }
# }
	.d2line		5769
	.d2epilogue_begin
.Llo594:
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# pEventDataChanged=r0
	mtspr		lr,r0		# pEventDataChanged=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3029:
	.type		EventDataChangedCallouts,@function
	.size		EventDataChangedCallouts,.-EventDataChangedCallouts
# Number of nodes = 38

# Allocations for EventDataChangedCallouts
#	?a4		eventId
#	?a5		pEventDataChanged
# static FUNC(uint8, DEM_CODE) GetInternalDTCOriginIndex(Dem_DTCOriginType DTCOrigin)
	.align		1
	.section	.text_vle
        .d2line         6470,30
#$$ld
.L3042:

#$$bf	GetInternalDTCOriginIndex,interprocedural,nostackparams

# Regs written: r0,r1,r3,cr0,lr
	.d2_cfa_start __cie
GetInternalDTCOriginIndex:
.Llo599:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	mr		r0,r3		# DTCOrigin=r0 DTCOrigin=r3
	.d2prologue_end
# {
#    uint8 retVal;
#    switch (DTCOrigin)
	.d2line		6473
	rlwinm		r3,r3,0,24,31		# DTCOrigin=r3 DTCOrigin=r3
	se_cmpli	r3,4		# DTCOrigin=r3
	bc		1,1,.L995	# gt
#    {
#    case DEM_DTC_ORIGIN_PRIMARY_MEMORY:
#       retVal = DEM_DTC_ORIGIN_PRIMARY_MEMORY_INTERNAL_INDEX;
#       break;
#    case DEM_DTC_ORIGIN_SECONDARY_MEMORY:
#       retVal = DEM_DTC_ORIGIN_SECONDARY_MEMORY_INTERNAL_INDEX;
#       break;
#    case DEM_DTC_ORIGIN_MIRROR_MEMORY:
#       retVal = DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX; /* Not supported */
#       break;
#    case DEM_DTC_ORIGIN_PERMANENT_MEMORY:
#       retVal = DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX; /* Not supported, permanent memory has separate data structures */
#       break;
#    default:
#       retVal = DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX;
	.d2line		6488
.Llo600:
	lis		r3,.L3039@ha		# DTCOrigin=r3
.Llo601:
	e_add16i		r3,r3,.L3039@l		# DTCOrigin=r3 DTCOrigin=r3
.Llo602:
	rlwinm		r0,r0,0,24,31		# DTCOrigin=r0 DTCOrigin=r0
.Llo603:
	lbzx		r3,r3,r0		# DTCOrigin=r3 DTCOrigin=r3
.Llo604:
	mr		r3,r3		# retVal=r3 retVal=r3
	b		.L991
.L995:
.Llo605:
	diab.li		r3,255		# retVal=r3
.L991:
#       break;
#    }
#    return retVal;
	.d2line		6491
.Llo606:
	rlwinm		r3,r3,0,24,31		# retVal=r3 retVal=r3
# }
	.d2line		6492
	.d2epilogue_begin
.Llo607:
	lwz		r0,20(r1)		# DTCOrigin=r0
	mtspr		lr,r0		# DTCOrigin=lr
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3043:
	.type		GetInternalDTCOriginIndex,@function
	.size		GetInternalDTCOriginIndex,.-GetInternalDTCOriginIndex
# Number of nodes = 24

# Allocations for GetInternalDTCOriginIndex
#	?a4		DTCOrigin
#	?a5		retVal
# static FUNC(void, DEM_CODE) StoreEventInMemory(Dem_EventIdType EventId, boolean isFailed)
	.align		1
	.section	.text_vle
        .d2line         3802,29
#$$ld
.L3050:

#$$bf	StoreEventInMemory,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
StoreEventInMemory:
.Llo608:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	26,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
.Llo609:
	mr		r30,r4		# isFailed=r30 isFailed=r4
	.d2prologue_end
# {
#    CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(EventId);
	.d2line		3804
.Llo610:
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,128(r3)
	rlwinm		r0,r31,1,15,30		# EventId=r31
	se_add		r3,r0
	lhz		r4,-2(r3)		# intDtc=r4
.Llo612:
	mr		r4,r4		# intDtc=r4 intDtc=r4
#    CONST(uint8, AUTOMATIC) memoryDest = ((intDtc) == DEM_INT_DTC_INVALID ? 0 : GetDtcMemDest(intDtc));
	.d2line		3805
	rlwinm		r0,r4,0,16,31		# intDtc=r4
	cmpli		0,0,r0,65535
	bc		0,2,.L438	# ne
.Llo613:
	diab.li		r3,0		# memoryDest=r3
.Llo618:
	b		.L439
.L438:
.Llo619:
	lis		r5,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r5)
	lwz		r3,20(r3)
	lwz		r5,Dem_pPbCfg@l(r5)
	lwz		r5,92(r5)
	rlwinm		r0,r4,0,16,31		# intDtc=r4
	lbzx		r0,r5,r0
	lbzx		r3,r3,r0
.Llo620:
	mr		r3,r3		# memoryDest=r3 memoryDest=r3
.L439:
#    CONST(uint8, AUTOMATIC) internalOrigin = GetInternalDTCOriginIndex(memoryDest);
	.d2line		3806
	mr		r3,r3		# memoryDest=r3 memoryDest=r3
.Llo621:
	bl		GetInternalDTCOriginIndex
.Llo627:
	mr		r29,r3		# internalOrigin=r29 internalOrigin=r3
# 
#    if ((DEM_INT_DTC_INVALID != intDtc) &&
	.d2line		3808
	rlwinm		r0,r4,0,16,31		# intDtc=r4
	cmpli		0,0,r0,65535
	bc		1,2,.L434	# eq
.Llo628:
	rlwinm		r3,r29,0,24,31		# memoryDest=r3 internalOrigin=r29
.Llo622:
	cmpi		0,0,r3,255		# memoryDest=r3
	bc		1,2,.L434	# eq
.Llo623:
	lis		r3,Dem_pPbCfg@ha		# memoryDest=r3
.Llo624:
	lwz		r3,Dem_pPbCfg@l(r3)		# memoryDest=r3 memoryDest=r3
	lwz		r3,72(r3)		# memoryDest=r3 memoryDest=r3
	rlwinm		r0,r4,1,15,30		# intDtc=r4
	lhzx		r0,r3,r0		# memoryDest=r3
	se_cmpi		r0,0
	bc		0,2,.L440	# ne
.Llo615:
	lis		r3,Dem_pPbCfg@ha		# memoryDest=r3
.Llo625:
	lwz		r3,Dem_pPbCfg@l(r3)		# memoryDest=r3 memoryDest=r3
	lwz		r3,76(r3)		# memoryDest=r3 memoryDest=r3
.Llo616:
	rlwinm		r4,r4,2,14,29		# intDtc=r4 intDtc=r4
.Llo617:
	lwzx		r0,r3,r4		# memoryDest=r3
	se_cmpi		r0,0
	bc		1,2,.L434	# eq
.L440:
	.section	.text_vle
.L3061:
#        (DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX != internalOrigin) &&
#        (Dem_IsObdDtc(intDtc) || IsUdsDtc(intDtc)))
#    {
#       boolean ffDataModified = FALSE;
	.d2line		3812
.Llo626:
	diab.li		r28,0		# ffDataModified=r28
#       boolean extDataModified = FALSE;
	.d2line		3813
.Llo629:
	diab.li		r27,0
#       Dem_NvEvMemEntryPtrType pEvMemEntry;
#       uint8 eventMemoryEntryIndex = GetEventMemoryEntry(EventId, internalOrigin, &pEvMemEntry);
	.d2line		3815
.Llo634:
	diab.addi		r5,r1,8
	mr		r3,r31		# EventId=r3 EventId=r31
	mr		r4,r29		# internalOrigin=r4 internalOrigin=r29
	bl		GetEventMemoryEntry
.Llo637:
	mr		r26,r3		# eventMemoryEntryIndex=r26 eventMemoryEntryIndex=r3
# 
#       if (NULL_PTR != pEvMemEntry)
	.d2line		3817
	lwz		r0,8(r1)
	se_cmpi		r0,0
	bc		1,2,.L436	# eq
	.section	.text_vle
.L3072:
#       {
#          CONST(uint8, AUTOMATIC) numStoredStandardFFOld = pEvMemEntry->num_stored_ff;
	.d2line		3819
.Llo630:
	lwz		r7,8(r1)
.Llo638:
	lbz		r27,11(r7)		# internalOrigin=r27
.Llo639:
	mr		r27,r27		# numStoredStandardFFOld=r27 numStoredStandardFFOld=r27
# 
#          ffDataModified = HandleFreezeFrameStorage(EventId, isFailed, internalOrigin, eventMemoryEntryIndex, pEvMemEntry);
	.d2line		3821
	mr		r3,r31		# EventId=r3 EventId=r31
	mr		r4,r30		# isFailed=r4 isFailed=r30
	mr		r5,r29		# internalOrigin=r5 internalOrigin=r29
	mr		r6,r26		# eventMemoryEntryIndex=r6 eventMemoryEntryIndex=r26
	bl		HandleFreezeFrameStorage
.Llo631:
	mr		r28,r3		# ffDataModified=r28 ffDataModified=r3
#          HandleDevFreezeFrameStorage(internalOrigin, eventMemoryEntryIndex, pEvMemEntry, numStoredStandardFFOld);
	.d2line		3822
	lwz		r5,8(r1)		# internalOrigin=r5
	mr		r3,r29		# internalOrigin=r3 internalOrigin=r29
.Llo632:
	mr		r4,r26		# eventMemoryEntryIndex=r4 eventMemoryEntryIndex=r26
	mr		r6,r27		# numStoredStandardFFOld=r6 numStoredStandardFFOld=r27
	bl		HandleDevFreezeFrameStorage
#          extDataModified = HandleExtExtendedDataStorage(isFailed, internalOrigin, eventMemoryEntryIndex, pEvMemEntry);
	.d2line		3823
	lwz		r6,8(r1)		# EventId=r6
	mr		r3,r30		# isFailed=r3 isFailed=r30
	mr		r4,r29		# internalOrigin=r4 internalOrigin=r29
	mr		r5,r26		# eventMemoryEntryIndex=r5 eventMemoryEntryIndex=r26
	bl		HandleExtExtendedDataStorage
.Llo635:
	mr		r27,r3		# extDataModified=r27 extDataModified=r3
# #if (DEM_NVM_SUPPORT == STD_ON)
#          /* Check immediate storage trigger before handling occurrence
#           * counter in HandleIntExtendedDataStorage().
#           */
#          CheckImmediateStorageTrigger(isFailed, internalOrigin, eventMemoryEntryIndex, pEvMemEntry);
# #endif /* DEM_NVM_SUPPORT == STD_ON */
#          HandleIntExtendedDataStorage(EventId, isFailed, pEvMemEntry);
	.d2line		3830
.Llo640:
	lwz		r5,8(r1)		# EventId=r5
	mr		r3,r31		# EventId=r3 EventId=r31
.Llo636:
	mr		r4,r30		# isFailed=r4 isFailed=r30
	bl		HandleIntExtendedDataStorage
	.section	.text_vle
.L3073:
.L436:
# #if (STD_ON == DEM_OBD_SUPPORT)
#          /* Handle OBD-FF after update of event specific UDS DTC status byte in HandleIntExtendedDataStorage()
#           * to decide if the capture trigger is fulfilled (in case of trigger on confirmed flank - future change).
#           */
#          HandleOBDFreezeFrameStorage(EventId, isFailed, pEvMemEntry->uds_status, eventMemoryEntryIndex);
# #endif /* STD_ON == DEM_OBD_SUPPORT */
# #if (DEM_EVENT_COMBINATION_ALT == DEM_EVCOMB_ONSTORAGE)
#          /* Merge in the UDS-status byte for the handled event into the UDS-status stored in the entry.
#           * This is done to avoid flanks being found by other events in case of event combination. 
#           * A complete update of the entry UDS-status will be done in UpdateEventStatusPerEntry() when the event states
#           * for all events connected to this entry are handled.
#           */
#          Dem_AddEventUdsStatusToEntry(pEvMemEntry, EventId);
# #endif /* DEM_EVENT_COMBINATION_ALT == DEM_EVCOMB_ONSTORAGE */
#       }
# 
#       if (ffDataModified || extDataModified)
	.d2line		3847
.Llo633:
	rlwinm		r28,r28,0,24,31		# ffDataModified=r28 ffDataModified=r28
	se_cmpi		r28,0		# ffDataModified=r28
	bc		0,2,.L441	# ne
.Llo614:
	rlwinm		r27,r27,0,24,31		# extDataModified=r27 extDataModified=r27
	se_cmpi		r27,0		# extDataModified=r27
	bc		1,2,.L434	# eq
.L441:
#       {
#          EventDataChangedCallouts(EventId);
	.d2line		3849
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		EventDataChangedCallouts
	.section	.text_vle
.L3062:
.L434:
#       }
#    }
# }
	.d2line		3852
	.d2epilogue_begin
.Llo611:
	lmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	2,10
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3051:
	.type		StoreEventInMemory,@function
	.size		StoreEventInMemory,.-StoreEventInMemory
# Number of nodes = 176

# Allocations for StoreEventInMemory
#	?a4		EventId
#	?a5		isFailed
#	?a6		intDtc
#	?a7		memoryDest
#	?a8		internalOrigin
#	?a9		ffDataModified
#	?a10		extDataModified
#	SP,8		pEvMemEntry
#	?a11		eventMemoryEntryIndex
#	?a12		numStoredStandardFFOld
# static FUNC(void, DEM_CODE) HandleEventStateFailed(Dem_EventIdType EventId)
	.align		1
	.section	.text_vle
        .d2line         3017,29
#$$ld
.L3080:

#$$bf	HandleEventStateFailed,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
HandleEventStateFailed:
.Llo641:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
	.d2prologue_end
# {
#    StoreEventInMemory(EventId, TRUE);
	.d2line		3019
.Llo642:
	mr		r3,r31		# EventId=r3 EventId=r31
.Llo643:
	diab.li		r4,1
	bl		StoreEventInMemory
# 
#    /* Store occurrence information */
#    StoreOccurrenceInformation(EventId);
	.d2line		3022
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		StoreOccurrenceInformation
# }
	.d2line		3023
	.d2epilogue_begin
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
.Llo644:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3081:
	.type		HandleEventStateFailed,@function
	.size		HandleEventStateFailed,.-HandleEventStateFailed
# Number of nodes = 12

# Allocations for HandleEventStateFailed
#	?a4		EventId
# static FUNC(void, DEM_CODE) HandleEventStateFDCTR(Dem_EventIdType EventId)
	.align		1
	.section	.text_vle
        .d2line         3026,29
#$$ld
.L3086:

#$$bf	HandleEventStateFDCTR,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
HandleEventStateFDCTR:
.Llo645:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    StoreEventInMemory(EventId, FALSE);
	.d2line		3028
	mr		r0,r3		# EventId=r0 EventId=r3
	diab.li		r4,0
	bl		StoreEventInMemory
# }
	.d2line		3029
	.d2epilogue_begin
.Llo646:
	lwz		r0,20(r1)
	mtspr		lr,r0
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3087:
	.type		HandleEventStateFDCTR,@function
	.size		HandleEventStateFDCTR,.-HandleEventStateFDCTR
# Number of nodes = 7

# Allocations for HandleEventStateFDCTR
#	?a4		EventId
# static FUNC(void, DEM_CODE) HandleAging(uint8 evMemEntryIndex, uint8 internalOrigin, uint8 opCycleId)
	.align		1
	.section	.text_vle
        .d2line         3032,29
#$$ld
.L3092:

#$$bf	HandleAging,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
HandleAging:
.Llo647:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	27,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# evMemEntryIndex=r31 evMemEntryIndex=r3
.Llo648:
	mr		r30,r4		# internalOrigin=r30 internalOrigin=r4
.Llo649:
	mr		r29,r5		# opCycleId=r29 opCycleId=r5
	.d2prologue_end
# {
#    Dem_NvEvMemEntryPtrType pEvMemEntry = Dem_GetEvMemEntryPtr(internalOrigin, evMemEntryIndex);
	.d2line		3034
	lis		r3,(Dem_LCfg+20)@ha
	e_add16i		r3,r3,(Dem_LCfg+20)@l
	rlwinm		r4,r4,2,22,29		# internalOrigin=r4 internalOrigin=r4
.Llo651:
	lwzx		r3,r3,r4
	lwz		r3,0(r3)
	rlwinm		r0,r31,2,22,29		# evMemEntryIndex=r31
	lwzx		r28,r3,r0		# pEvMemEntry=r28
.Llo657:
	mr		r28,r28		# pEvMemEntry=r28 pEvMemEntry=r28
#    CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(pEvMemEntry->event_id);
	.d2line		3035
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r0,128(r3)
	lhz		r3,0(r28)		# pEvMemEntry=r28
	rlwinm		r3,r3,1,15,30
	se_add		r3,r0
	lhz		r27,-2(r3)		# intDtc=r27
	mr		r27,r27		# intDtc=r27 intDtc=r27
#    /* [SWS_Dem_01053]
#     * Don't use the uds_status in the event memory entry here, since it is not yet 
#     * updated with recent changes in OpCycleEndAllEvents()
#     */
#    Dem_UdsStatusByteType udsStatus = Dem_GetUdsStatusByIntDtc(intDtc);
	.d2line		3040
	rlwinm		r3,r27,0,16,31		# intDtc=r27
	bl		Dem_GetUdsStatusByIntDtc
.Llo653:
	mr		r3,r3		# udsStatus=r3 udsStatus=r3
# 
#    if (Dem_IsClr(pEvMemEntry->si, DEM_SI_FDCTR | DEM_SI_FDCTRTOC) &&
	.d2line		3042
	lbz		r0,14(r28)		# pEvMemEntry=r28
	e_andi.		r0,r0,3
	bc		0,2,.L362	# ne
.Llo652:
	rlwinm		r29,r29,0,24,31		# opCycleId=r29 opCycleId=r29
	lis		r5,Dem_pPbCfg@ha
	lwz		r4,Dem_pPbCfg@l(r5)		# internalOrigin=r4
	lwz		r4,12(r4)		# internalOrigin=r4 internalOrigin=r4
	lwz		r5,Dem_pPbCfg@l(r5)
	lwz		r5,92(r5)
	rlwinm		r0,r27,0,16,31		# intDtc=r27
	lbzx		r0,r5,r0
	lbzx		r0,r4,r0		# internalOrigin=r4
	se_cmp		r29,r0		# opCycleId=r29
	bc		0,2,.L362	# ne
.Llo654:
	rlwinm		r3,r3,0,24,31		# udsStatus=r3 udsStatus=r3
	e_andi.		r0,r3,196		# udsStatus=r3
	se_cmpi		r0,0
	bc		0,2,.L362	# ne
.Llo661:
	lbz		r0,19(r28)		# pEvMemEntry=r28
	cmpi		0,0,r0,255
	bc		0,0,.L362	# ge
#       (opCycleId == GetDtcAgingCycle(intDtc)) &&
#       Dem_IsClr(udsStatus, DEM_UDS_SB_PDTC | DEM_UDS_SB_WIR) &&
# #if (DEM_AGING_REQUIRES_TESTED_CYCLE == STD_ON)
#       Dem_IsClr(udsStatus, DEM_UDS_SB_TNCTOC) &&
# #endif /* DEM_AGING_REQUIRES_TESTED_CYCLE */
#       (pEvMemEntry->aging_counter < DEM_UINT8_MAX))
#    {
#       /* [SWS_Dem_00489], [SWS_Dem_00490], [SWS_Dem_00826], [SWS_Dem_00698], [VSTAR_Dem_00364] */
#       pEvMemEntry->aging_counter++;
	.d2line		3051
	lbz		r3,19(r28)		# udsStatus=r3 pEvMemEntry=r28
.Llo662:
	se_addi		r3,1		# udsStatus=r3 udsStatus=r3
	stb		r3,19(r28)		# pEvMemEntry=r28 udsStatus=r3
.L362:
#    }
# 
#    if (Dem_IsDtcAgingAllowed(intDtc) &&
	.d2line		3054
.Llo655:
	lis		r4,Dem_pPbCfg@ha		# internalOrigin=r4
	lwz		r3,Dem_pPbCfg@l(r4)		# udsStatus=r3 internalOrigin=r4
.Llo663:
	lwz		r3,0(r3)		# udsStatus=r3 udsStatus=r3
	lwz		r4,Dem_pPbCfg@l(r4)		# internalOrigin=r4 internalOrigin=r4
	lwz		r4,92(r4)		# internalOrigin=r4 internalOrigin=r4
	rlwinm		r0,r27,0,16,31		# intDtc=r27
	lbzx		r0,r4,r0		# internalOrigin=r4
	lbzx		r0,r3,r0		# udsStatus=r3
	se_cmpi		r0,0
	bc		1,2,.L361	# eq
.Llo656:
	lbz		r0,19(r28)		# pEvMemEntry=r28
	lis		r4,Dem_pPbCfg@ha		# internalOrigin=r4
	lwz		r3,Dem_pPbCfg@l(r4)		# udsStatus=r3 internalOrigin=r4
.Llo664:
	lwz		r3,16(r3)		# udsStatus=r3 udsStatus=r3
	lwz		r4,Dem_pPbCfg@l(r4)		# internalOrigin=r4 internalOrigin=r4
	lwz		r4,92(r4)		# internalOrigin=r4 internalOrigin=r4
.Llo659:
	rlwinm		r27,r27,0,16,31		# intDtc=r27 intDtc=r27
.Llo660:
	lbzx		r4,r4,r27		# internalOrigin=r4 internalOrigin=r4
	lbzx		r3,r3,r4		# udsStatus=r3 udsStatus=r3
	se_cmp		r0,r3		# udsStatus=r3
	bc		1,0,.L361	# lt
#       (pEvMemEntry->aging_counter >= Dem_GetDtcAgingThreshold(intDtc))) /* [SWS_Dem_00493] */
#    {
# #if (DEM_OBD_SUPPORT == STD_ON)
#       if ((!Dem_IsObdDtc(intDtc)) ||
#          (pEvMemEntry->wuc_counter >= GetDtcObdAgingThreshold(intDtc)))
# #endif /* DEM_OBD_SUPPORT == STD_ON */
#       {
#          /* Aging criteria fulfilled */
#          /* [VSTAR_Dem_00066] */
#          PerformAgingDisplacement(evMemEntryIndex, internalOrigin);
	.d2line		3064
.Llo658:
	mr		r3,r31		# evMemEntryIndex=r3 evMemEntryIndex=r31
	mr		r4,r30		# internalOrigin=r4 internalOrigin=r30
	bl		PerformAgingDisplacement
.L361:
#       }
#    }
# }
	.d2line		3067
	.d2epilogue_begin
.Llo650:
	lmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3093:
	.type		HandleAging,@function
	.size		HandleAging,.-HandleAging
# Number of nodes = 139

# Allocations for HandleAging
#	?a4		evMemEntryIndex
#	?a5		internalOrigin
#	?a6		opCycleId
#	?a7		pEvMemEntry
#	?a8		intDtc
#	?a9		udsStatus
# FUNC(void, DEM_CODE) Dem_TriggerOnEventStatus(Dem_EventIdType eventId, Dem_UdsStatusByteType udsStatusOld)
	.align		2
	.section	.text_vle
        .d2line         7866,22
#$$ld
.L3106:

#$$bf	Dem_TriggerOnEventStatus,interprocedural,rasave,nostackparams
	.globl		Dem_TriggerOnEventStatus
	.d2_cfa_start __cie
Dem_TriggerOnEventStatus:
.Llo665:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# eventId=r31 eventId=r3
.Llo666:
	mr		r30,r4		# udsStatusOld=r30 udsStatusOld=r4
	.d2prologue_end
# {
#    CONST(Dem_UdsStatusByteType, AUTOMATIC) udsStatusNew = Dem_GetUdsStatus(eventId);
	.d2line		7868
.Llo667:
	lis		r3,(Dem_NvUdsStatus-1)@ha
	e_add16i		r3,r3,(Dem_NvUdsStatus-1)@l
	rlwinm		r0,r31,0,16,31		# eventId=r31
	lbzx		r29,r3,r0		# udsStatusNew=r29
.Llo671:
	mr		r29,r29		# udsStatusNew=r29 udsStatusNew=r29
# 
#    if (udsStatusOld != udsStatusNew)
	.d2line		7870
	rlwinm		r3,r30,0,24,31		# udsStatusOld=r30
	rlwinm		r4,r29,0,24,31		# udsStatusNew=r29
.Llo669:
	se_cmp		r3,r4
	bc		1,2,.L1291	# eq
	.section	.text_vle
.L3114:
#    {
#       uint8 i;
#       for (i=0; i < Dem_LCfg.p_events[eventId - 1U].num_evStatusCh; i++)
	.d2line		7873
.Llo670:
	diab.li		r28,0		# i=r28
.L1293:
.Llo672:
	rlwinm		r0,r28,0,24,31		# i=r28
	lis		r3,(Dem_LCfg+16)@ha
	lwz		r4,(Dem_LCfg+16)@l(r3)
	rlwinm		r3,r31,0,16,31		# eventId=r31
	e_mulli		r3,r3,20
	se_add		r3,r4
	lbz		r3,-2(r3)
	se_cmp		r0,r3
	bc		0,0,.L1295	# ge
	.section	.text_vle
.L3120:
#       {
#          CONST(EvStChPtrType, AUTOMATIC) pEventStatusChanged = Dem_LCfg.p_events[eventId - 1U].ppEventStatusChanged[i];
	.d2line		7875
	lis		r3,(Dem_LCfg+16)@ha
	lwz		r0,(Dem_LCfg+16)@l(r3)
	rlwinm		r3,r31,0,16,31		# eventId=r31
	e_mulli		r3,r3,20
	se_add		r3,r0
	lwz		r3,-16(r3)
	rlwinm		r0,r28,2,22,29		# i=r28
	lwzx		r0,r3,r0
.Llo674:
	mr		r0,r0		# pEventStatusChanged=r0 pEventStatusChanged=r0
# 
#          /*
#           * MISRA-C:2004 RULE 16.10 VIOLATION:
#           * If a function returns error information, then that error information shall be tested.
#           * SWS_Dem_00615: Return value unused - only for compatibility with Rte operation.
#           */
#          (void)pEventStatusChanged(udsStatusOld, udsStatusNew);
	.d2line		7882
	mtspr		ctr,r0		# pEventStatusChanged=ctr pEventStatusChanged=r0
	rlwinm		r3,r30,0,24,31		# udsStatusOld=r30
	rlwinm		r4,r29,0,24,31		# udsStatusNew=r29
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x18 0x0 0x0 0x1
#$$rs 1 u
	bcctrl		20,0
	.section	.text_vle
.L3121:
#       }
	.d2line		7883
.Llo675:
	diab.addi		r0,r28,1		# i=r28
	se_addi		r28,1		# i=r28 i=r28
	b		.L1293
.L1295:
# 
#       if (NULL_PTR != Dem_LCfg.p_gen_cbk_event_status_changed)
	.d2line		7885
	lis		r3,(Dem_LCfg+152)@ha
	lwz		r0,(Dem_LCfg+152)@l(r3)
	se_cmpi		r0,0
	bc		1,2,.L1291	# eq
#       {
#          /*
#           * MISRA-C:2004 RULE 16.10 VIOLATION:
#           * If a function returns error information, then that error information shall be tested.
#           * SWS_Dem_00616: Return value unused - only for compatibility with Rte operation.
#           */
#          (void)Dem_LCfg.p_gen_cbk_event_status_changed(eventId, udsStatusOld, udsStatusNew);
	.d2line		7892
.Llo673:
	lis		r3,(Dem_LCfg+152)@ha
	lwz		r0,(Dem_LCfg+152)@l(r3)
	mtspr		ctr,r0
	rlwinm		r3,r31,0,16,31		# eventId=r31
	rlwinm		r4,r30,0,24,31		# udsStatusOld=r30
	rlwinm		r5,r29,0,24,31		# udsStatusNew=r29
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x38 0x0 0x0 0x1
#$$rs 1 u
	bcctrl		20,0
	.section	.text_vle
.L3115:
.L1291:
#       }
# 
# #if (STD_ON == DEM_TRIGGER_FIM)
#       /* FiM only consider status bits TF, TFTOC and TNCTOC. Only trigger FiM on status change of any of those bits. */
#       if ((udsStatusOld & (DEM_UDS_SB_TF | DEM_UDS_SB_TFTOC | DEM_UDS_SB_TNCTOC)) !=
#          (udsStatusNew & (DEM_UDS_SB_TF | DEM_UDS_SB_TFTOC | DEM_UDS_SB_TNCTOC)))
#       {
#          FiM_DemTriggerOnEventStatus(eventId, udsStatusOld, udsStatusNew);
#       }
# #endif /* STD_ON == DEM_TRIGGER_FIM */
# 
# #if (STD_ON == DEM_TRIGGER_DLT)
#       /* [SWS_Dem_00517] */
#       Dlt_DemTriggerOnEventStatus(eventId, udsStatusOld, udsStatusNew);
# #endif /* STD_ON == DEM_TRIGGER_DLT */
#    }
# }
	.d2line		7909
	.d2epilogue_begin
.Llo668:
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3107:
	.type		Dem_TriggerOnEventStatus,@function
	.size		Dem_TriggerOnEventStatus,.-Dem_TriggerOnEventStatus
# Number of nodes = 91

# Allocations for Dem_TriggerOnEventStatus
#	?a4		eventId
#	?a5		udsStatusOld
#	?a6		udsStatusNew
#	?a7		i
#	?a8		pEventStatusChanged
# FUNC(void, DEM_CODE) Dem_TriggerOnDTCStatus(uint16 intDtc, Dem_UdsStatusByteType udsStatusOld, boolean clearEvent)
	.align		2
	.section	.text_vle
        .d2line         7911,22
#$$ld
.L3133:

#$$bf	Dem_TriggerOnDTCStatus,interprocedural,rasave,nostackparams
	.globl		Dem_TriggerOnDTCStatus
	.d2_cfa_start __cie
Dem_TriggerOnDTCStatus:
.Llo676:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# intDtc=r31 intDtc=r3
	mr		r30,r4		# udsStatusOld=r30 udsStatusOld=r4
	.d2prologue_end
# {
#    if (intDtc != DEM_INT_DTC_INVALID)
	.d2line		7913
	rlwinm		r0,r31,0,16,31		# intDtc=r31
	cmpli		0,0,r0,65535
	bc		1,2,.L1300	# eq
	.section	.text_vle
.L3138:
#    {
#       CONST(Dem_UdsStatusByteType, AUTOMATIC) udsStatusNew = Dem_GetUdsStatusByIntDtc(intDtc);
	.d2line		7915
.Llo677:
	rlwinm		r3,r31,0,16,31		# udsStatusNew=r3 intDtc=r31
.Llo678:
	bl		Dem_GetUdsStatusByIntDtc
.Llo682:
	mr		r29,r3		# udsStatusNew=r29 udsStatusNew=r3
#       if ((udsStatusOld != udsStatusNew) && IsUdsDtc(intDtc))
	.d2line		7916
	rlwinm		r4,r30,0,24,31		# udsStatusOld=r30
	rlwinm		r3,r3,0,24,31		# udsStatusNew=r3 udsStatusNew=r3
	se_cmp		r4,r3		# udsStatusNew=r3
	bc		1,2,.L1300	# eq
.Llo683:
	lis		r3,Dem_pPbCfg@ha		# udsStatusNew=r3
.Llo684:
	lwz		r3,Dem_pPbCfg@l(r3)		# udsStatusNew=r3 udsStatusNew=r3
	lwz		r3,76(r3)		# udsStatusNew=r3 udsStatusNew=r3
	rlwinm		r0,r31,2,14,29		# intDtc=r31
	lwzx		r0,r3,r0		# udsStatusNew=r3
	se_cmpi		r0,0
	bc		1,2,.L1300	# eq
#       {
#          /* [SWS_Dem_00284], [SWS_Dem_01050] */
#          if (NULL_PTR != Dem_LCfg.pp_dtc_status_changed)
	.d2line		7919
	lis		r3,(Dem_LCfg+164)@ha		# udsStatusNew=r3
	lwz		r0,(Dem_LCfg+164)@l(r3)		# udsStatusNew=r3
	se_cmpi		r0,0
	bc		1,2,.L1300	# eq
	.section	.text_vle
.L3144:
#          {
#             uint8 i;
#             for (i = 0; i < Dem_LCfg.num_dtc_status_changed; i++)
	.d2line		7922
	diab.li		r28,0		# i=r28
.L1304:
.Llo685:
	rlwinm		r0,r28,0,24,31		# i=r28
	lis		r3,(Dem_LCfg+172)@ha		# udsStatusNew=r3
	lbz		r3,(Dem_LCfg+172)@l(r3)		# udsStatusNew=r3 udsStatusNew=r3
	se_cmp		r0,r3		# udsStatusNew=r3
	bc		0,0,.L1300	# ge
	.section	.text_vle
.L3150:
#             {
#                CONST(DtcStChPtrType, AUTOMATIC) pDtcStatusChanged = Dem_LCfg.pp_dtc_status_changed[i];
	.d2line		7924
	lis		r3,(Dem_LCfg+164)@ha		# udsStatusNew=r3
	lwz		r3,(Dem_LCfg+164)@l(r3)		# udsStatusNew=r3 udsStatusNew=r3
	rlwinm		r0,r28,2,22,29		# i=r28
	lwzx		r0,r3,r0		# udsStatusNew=r3
.Llo686:
	mr		r0,r0		# pDtcStatusChanged=r0 pDtcStatusChanged=r0
#                /*
#                   * MISRA-C:2004 RULE 16.10 VIOLATION:
#                   * If a function returns error information, then that error information shall be tested.
#                   * SWS_Dem_00617: Return value unused - only for compatibility with Rte operation.
#                   */
#                (void)pDtcStatusChanged(GetUdsDtc(intDtc), udsStatusOld, udsStatusNew);
	.d2line		7930
	mtspr		ctr,r0		# pDtcStatusChanged=ctr pDtcStatusChanged=r0
	lis		r3,Dem_pPbCfg@ha		# udsStatusNew=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# udsStatusNew=r3 udsStatusNew=r3
	lwz		r3,76(r3)		# udsStatusNew=r3 udsStatusNew=r3
	rlwinm		r0,r31,2,14,29		# intDtc=r31
.Llo687:
	lwzx		r3,r3,r0		# udsStatusNew=r3 udsStatusNew=r3
	rlwinm		r4,r30,0,24,31		# udsStatusOld=r30
	rlwinm		r5,r29,0,24,31		# udsStatusNew=r29
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x38 0x0 0x0 0x1
#$$rs 1 u
	bcctrl		20,0
	.section	.text_vle
.L3151:
#             }
	.d2line		7931
	diab.addi		r0,r28,1		# i=r28
	se_addi		r28,1		# i=r28 i=r28
	b		.L1304
	.section	.text_vle
.L3145:
	.section	.text_vle
.L3139:
.L1300:
#          }
# 
# #if (DEM_TRIGGER_DCM == STD_ON)
#          /* [SWS_Dem_00829], [SWS_Dem_00830] */
#          if ((TRUE == Dem_DcmDTCStatusChangedNotification) && (FALSE == clearEvent))
#          {
#             /* [SWS_Dem_00828]
#              * Triggering of Dcm_DemTriggerOnDTCStatusDTC is enabled.
#              */
#             /*
#              * MISRA-C:2004 RULE 16.10 VIOLATION:
#              * If a function returns error information, then that error information shall be tested.
#              * SWS_Dem_00260: Return value unused - only for compatibility with Rte operation.
#              */
#             (void)Dcm_DemTriggerOnDTCStatus(GetUdsDtc(intDtc), udsStatusOld, udsStatusNew);
#          }
# #endif /* DEM_TRIGGER_DCM == STD_ON */
#       }
#    }
# }
	.d2line		7951
	.d2epilogue_begin
.Llo679:
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
.Llo680:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo681:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3134:
	.type		Dem_TriggerOnDTCStatus,@function
	.size		Dem_TriggerOnDTCStatus,.-Dem_TriggerOnDTCStatus
# Number of nodes = 83

# Allocations for Dem_TriggerOnDTCStatus
#	?a4		intDtc
#	?a5		udsStatusOld
#	not allocated	clearEvent
#	?a6		udsStatusNew
#	?a7		i
#	?a8		pDtcStatusChanged
# static FUNC(void, DEM_CODE) UpdateEventStatus(Dem_EventIdType eventId, Dem_EventStateType eventState)
	.align		1
	.section	.text_vle
        .d2line         4239,29
#$$ld
.L3163:

#$$bf	UpdateEventStatus,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
UpdateEventStatus:
.Llo688:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	26,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# eventId=r31 eventId=r3
.Llo689:
	mr		r30,r4		# eventState=r30 eventState=r4
	.d2prologue_end
# {
#    CONST(Dem_UdsStatusByteType, AUTOMATIC) eventUdsStatusOld = Dem_GetUdsStatus(eventId);
#    CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(eventId);
#    CONST(Dem_UdsStatusByteType, AUTOMATIC) dtcUdsStatusOld = Dem_GetUdsStatusForValidDtc(intDtc);
#    boolean setToCompleted = TRUE;
	.d2line		4244
.Llo690:
	diab.li		r26,1		# setToCompleted=r26
	.d2line		4241
	lis		r3,(Dem_NvUdsStatus-1)@ha
	e_add16i		r3,r3,(Dem_NvUdsStatus-1)@l
	rlwinm		r0,r31,0,16,31		# eventId=r31
	lbzx		r29,r3,r0
.Llo695:
	mr		r29,r29		# eventUdsStatusOld=r29 eventUdsStatusOld=r29
	.d2line		4242
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r0,128(r3)
	rlwinm		r3,r31,1,15,30		# eventId=r31
	se_add		r3,r0
	lhz		r28,-2(r3)		# intDtc=r28
.Llo696:
	mr		r28,r28		# intDtc=r28 intDtc=r28
	.d2line		4243
	rlwinm		r3,r28,0,16,31		# intDtc=r28
	cmpli		0,0,r3,65535
	bc		0,2,.L519	# ne
.Llo692:
	diab.li		r27,0		# dtcUdsStatusOld=r27
.Llo693:
	b		.L520
.L519:
.Llo697:
	rlwinm		r3,r28,0,16,31		# intDtc=r28
	bl		Dem_GetUdsStatusByIntDtc
.Llo698:
	mr		r27,r3		# dtcUdsStatusOld=r27 dtcUdsStatusOld=r3
.L520:
# #if (STD_ON == DEM_EXTENDED_FIM)
#    uint8 siByteOld = Dem_BuildSiByte(eventId);
#    uint8 siByteNew;
# #endif /* STD_ON == DEM_EXTENDED_FIM */
# 
# #if (DEM_PTO_SUPPORT == STD_ON)
#    setToCompleted = IsSetToCompletedAllowed(eventId);
# #endif /* DEM_PTO_SUPPORT == STD_ON */
# 
#    /* [SWS_Dem_00036] [SWS_Dem_00379]
#     * Synchronous update of status bits 0, 1, 2, 4, 5 and 6.
#     */
#    /* ---------- Enter critical section ---------- */
#    SchM_Enter_Dem_EaNvStorageOngoing();
	.d2line		4258
.Llo699:
	bl		SchM_Enter_Dem_EaNvStorageOngoing
#    /* [VSTAR_Dem_00289] */
#    if (FALSE == Dem_NvAllStorageOngoing)
	.d2line		4260
.Llo700:
	lis		r3,Dem_NvAllStorageOngoing@ha
	lbz		r0,Dem_NvAllStorageOngoing@l(r3)
	se_cmpi		r0,0
	bc		0,2,.L513	# ne
#    {
#       switch (eventState)
	.d2line		4262
	rlwinm		r6,r30,0,24,31		# eventState=r30
	se_cmpi		r6,1
	bc		1,2,.L514	# eq
.Llo694:
	se_cmpi		r6,3
	bc		1,2,.L516	# eq
	b		.L517
.L514:
#       {
#          case DEM_EVENT_STATE_PASSED:
#          {
#             /* [SWS_Dem_00386] */
#             Dem_ClrUdsBits(eventId, DEM_UDS_SB_TF_CLR);
	.d2line		4267
	mr		r3,r31		# eventId=r3 eventId=r31
	diab.li		r4,254
	bl		Dem_ClrUdsBits
#             Dem_ClrSiFdcThresholdReached(eventId);
	.d2line		4268
	rlwinm		r3,r31,0,16,31		# eventId=r3 eventId=r31
	bl		Dem_ClrSiFdcThresholdReached
	b		.L515
.L516:
#             break;
#          }
#          case DEM_EVENT_STATE_FAILED:
#          {
#             /* [SWS_Dem_00386], [SWS_Dem_00389], [SWS_Dem_00390], [SWS_Dem_00393] */
#             Dem_SetUdsBits(eventId, DEM_UDS_SB_TF_SET | DEM_UDS_SB_TFTOC_SET | DEM_UDS_SB_PDTC_SET | DEM_UDS_SB_TFSLC_SET);
	.d2line		4274
	mr		r3,r31		# eventId=r3 eventId=r31
	diab.li		r4,39
	bl		Dem_SetUdsBits
#             Dem_SetSiFdcThresholdReached(eventId);
	.d2line		4275
	rlwinm		r3,r31,0,16,31		# eventId=r3 eventId=r31
	bl		Dem_SetSiFdcThresholdReached
#             Dem_SetSiFdcThresholdReachedTOC(eventId);
	.d2line		4276
	rlwinm		r3,r31,0,16,31		# eventId=r3 eventId=r31
	bl		Dem_SetSiFdcThresholdReachedTOC
	b		.L515
.L517:
#             break;
#          }
#          default:
#          {
#             /* If DEM_EVENT_STATE_FDCTR, don't set status to "completed" */
#             Dem_SetSiFdcThresholdReached(eventId);
	.d2line		4282
.Llo701:
	rlwinm		r3,r31,0,16,31		# eventId=r31
	bl		Dem_SetSiFdcThresholdReached
#             Dem_SetSiFdcThresholdReachedTOC(eventId);
	.d2line		4283
	rlwinm		r3,r31,0,16,31		# eventId=r31
	bl		Dem_SetSiFdcThresholdReachedTOC
#             setToCompleted = FALSE;
	.d2line		4284
	diab.li		r26,0		# setToCompleted=r26
.L515:
#             break;
#          }
#       }
# 
#       if (setToCompleted)
	.d2line		4289
.Llo702:
	rlwinm		r26,r26,0,24,31		# setToCompleted=r26 setToCompleted=r26
	se_cmpi		r26,0		# setToCompleted=r26
	bc		1,2,.L513	# eq
#       {
#          /* [SWS_Dem_00392], [SWS_Dem_00394] */
#          Dem_ClrUdsBits(eventId, DEM_UDS_SB_TNCSLC_CLR & DEM_UDS_SB_TNCTOC_CLR);
	.d2line		4292
.Llo703:
	mr		r3,r31		# eventId=r3 eventId=r31
	diab.li		r4,175
	bl		Dem_ClrUdsBits
.L513:
#       }
#    }
#    SchM_Exit_Dem_EaNvStorageOngoing();
	.d2line		4295
	bl		SchM_Exit_Dem_EaNvStorageOngoing
#    /* ---------- Exit critical section ----------- */
# 
#    Dem_TriggerOnEventStatus(eventId, eventUdsStatusOld);
	.d2line		4298
	mr		r3,r31		# eventId=r3 eventId=r31
	mr		r4,r29		# eventUdsStatusOld=r4 eventUdsStatusOld=r29
	bl		Dem_TriggerOnEventStatus
#    Dem_TriggerOnDTCStatus(intDtc, dtcUdsStatusOld, FALSE);
	.d2line		4299
	mr		r3,r28		# intDtc=r3 intDtc=r28
	mr		r4,r27		# dtcUdsStatusOld=r4 dtcUdsStatusOld=r27
	diab.li		r5,0
	bl		Dem_TriggerOnDTCStatus
# 
# #if (STD_ON == DEM_EXTENDED_FIM)
#    siByteNew = Dem_BuildSiByte(eventId);
#    if (siByteNew != siByteOld)
#    {
#       FiM_DemTriggerOnSIStatus(eventId, siByteOld, siByteNew);
#    }
# #endif /* STD_ON == DEM_EXTENDED_FIM */
# }
	.d2line		4308
	.d2epilogue_begin
	lmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	2,10
.Llo691:
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3164:
	.type		UpdateEventStatus,@function
	.size		UpdateEventStatus,.-UpdateEventStatus
# Number of nodes = 126

# Allocations for UpdateEventStatus
#	?a4		eventId
#	?a5		eventState
#	?a6		eventUdsStatusOld
#	?a7		intDtc
#	?a8		dtcUdsStatusOld
#	?a9		setToCompleted
# static FUNC(Dem_EventStateType, DEM_CODE) GetEventStateInBuffer(Dem_EventIdType eventId)
	.align		1
	.section	.text_vle
        .d2line         5846,43
#$$ld
.L3179:

#$$bf	GetEventStateInBuffer,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,r5,xer
	.d2_cfa_start __cie
GetEventStateInBuffer:
.Llo704:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# eventId=r3 eventId=r3
	.d2prologue_end
# {
#    uint16 evStateArrayIndex = (eventId - 1U) / 4U;
	.d2line		5848
	rlwinm		r3,r3,0,16,31		# eventId=r3 eventId=r3
	diab.addi		r3,r3,-1		# eventId=r3 eventId=r3
	rlwinm		r4,r3,30,2,31		# evStateArrayIndex=r4 eventId=r3
.Llo706:
	mr		r4,r4		# evStateArrayIndex=r4 evStateArrayIndex=r4
#    uint8 shift = (uint8)(((eventId - 1U) % 4U) * 2U);
	.d2line		5849
	rlwinm		r3,r3,1,29,30		# eventId=r3 eventId=r3
.Llo705:
	mr		r3,r3		# shift=r3 shift=r3
# 
#    return (Dem_EventStateType)((Dem_LCfg.p_event_state_buffer[evStateArrayIndex] & (uint8)(3U << shift)) >> shift);
	.d2line		5851
	lis		r5,Dem_LCfg@ha
	lwz		r5,Dem_LCfg@l(r5)
	rlwinm		r4,r4,0,16,31		# evStateArrayIndex=r4 evStateArrayIndex=r4
.Llo707:
	lbzx		r5,r5,r4
	diab.li		r4,3		# evStateArrayIndex=r4
.Llo708:
	slw		r4,r4,r3		# evStateArrayIndex=r4 evStateArrayIndex=r4 shift=r3
	rlwinm		r4,r4,0,24,31		# evStateArrayIndex=r4 evStateArrayIndex=r4
	and		r4,r4,r5		# evStateArrayIndex=r4 evStateArrayIndex=r4
	sraw		r3,r4,r3		# shift=r3 evStateArrayIndex=r4 shift=r3
	rlwinm		r3,r3,0,24,31		# shift=r3 shift=r3
# }
	.d2line		5852
	.d2epilogue_begin
.Llo710:
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo709:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3180:
	.type		GetEventStateInBuffer,@function
	.size		GetEventStateInBuffer,.-GetEventStateInBuffer
# Number of nodes = 38

# Allocations for GetEventStateInBuffer
#	?a4		eventId
#	?a5		evStateArrayIndex
#	?a6		shift
# static FUNC(Dem_EventStateType, DEM_CODE) DebouncingCounter(Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
	.align		1
	.section	.text_vle
        .d2line         5580,43
#$$ld
.L3189:

#$$bf	DebouncingCounter,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
DebouncingCounter:
.Llo711:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	27,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
.Llo712:
	mr		r4,r4		# EventStatus=r4 EventStatus=r4
	.d2prologue_end
# {
#    CONSTP2VAR(sint16, AUTOMATIC, DEM_APPL_DATA) pDBCounter = &Dem_LCfg.p_counter_db_counter[Dem_LCfg.p_events[EventId - 1U].debounce_counter_idx];
#    CONSTP2CONST(Dem_CounterDebouncingType, AUTOMATIC, DEM_PBCFG_CALIB) pDbData = GetDbCounterData(EventId);
#    Dem_EventStateType retVal = DEM_EVENT_STATE_NONE;
	.d2line		5584
.Llo713:
	diab.li		r27,0		# retVal=r27
	.d2line		5582
	lis		r3,(Dem_LCfg+124)@ha
	lwz		r30,(Dem_LCfg+124)@l(r3)		# pDBCounter=r30
.Llo728:
	lis		r3,(Dem_LCfg+16)@ha
	lwz		r3,(Dem_LCfg+16)@l(r3)
	rlwinm		r0,r31,0,16,31		# EventId=r31
	e_mulli		r5,r0,20
	se_add		r3,r5
	lhz		r3,-4(r3)
	rlwinm		r3,r3,1,15,30
	se_add		r3,r30		# pDBCounter=r30
	mr		r30,r3		# pDBCounter=r30 pDBCounter=r3
	.d2line		5583
	lis		r5,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r5)
	lwz		r29,120(r3)
	lwz		r3,100(r3)
	se_add		r3,r0
	lbz		r0,-1(r3)
	rlwinm		r0,r0,4,20,27
	se_add		r0,r29
.Llo733:
	mr		r29,r0		# pDbData=r29 pDbData=r0
#    CONST(sint16, AUTOMATIC) pre_pDBCounter = *pDBCounter;
	.d2line		5585
	lha		r28,0(r30)		# pDBCounter=r30
.Llo740:
	mr		r28,r28		# pre_pDBCounter=r28 pre_pDBCounter=r28
# 
#    if (DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED == EventStatus)
	.d2line		5587
	rlwinm		r0,r4,0,24,31		# EventStatus=r4
.Llo734:
	se_cmpi		r0,4
	bc		0,2,.L832	# ne
#    {
#       /* ---------- Enter critical section ---------- */
#       SchM_Enter_Dem_EaDebounceCounter();
	.d2line		5590
.Llo717:
	bl		SchM_Enter_Dem_EaDebounceCounter
#       if (*pDBCounter < pDbData->fdc_threshold)
	.d2line		5591
	lha		r0,0(r30)		# pDBCounter=r30
	lha		r3,8(r29)		# pDbData=r29
	e_cmph		cr0,r0,r3
	bc		0,0,.L834	# ge
#       {
#          /*
#           * [SWS_Dem_01068]
#           * Setting the debouncing counter to fdc threshold and returning FDCTR state
#           * will trigger a FF /ED capture.
#           */
#          *pDBCounter = pDbData->fdc_threshold;
	.d2line		5598
	lha		r0,8(r29)		# pDbData=r29
	sth		r0,0(r30)		# pDBCounter=r30
#          retVal = DEM_EVENT_STATE_FDCTR;
	.d2line		5599
	diab.li		r27,2		# retVal=r27
.L834:
#       }
#       else
#       {
#          /* [VSTAR_Dem_00367] */
#       }
#       SchM_Exit_Dem_EaDebounceCounter();
	.d2line		5605
	bl		SchM_Exit_Dem_EaDebounceCounter
#       /* ---------- Exit critical section ----------- */
# 
#       if ((DEM_INIT == Dem_InitState) && (pre_pDBCounter < *pDBCounter))
	.d2line		5608
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)
	se_cmpi		r0,2
	bc		0,2,.L836	# ne
.Llo735:
	lha		r0,0(r30)		# pDBCounter=r30
	e_cmph		cr0,r28,r0		# pre_pDBCounter=r28
	bc		0,0,.L836	# ge
#       {
#          Dem_UpdateMaxFdcSinceLastClear(EventId);
	.d2line		5610
.Llo729:
	rlwinm		r3,r31,0,16,31		# EventId=r31
	bl		Dem_UpdateMaxFdcSinceLastClear
	b		.L836
.L832:
#       }
#    }
#    else if (DEM_EVENT_STATUS_PREFAILED == EventStatus)
	.d2line		5613
.Llo718:
	rlwinm		r4,r4,0,24,31		# EventStatus=r4 EventStatus=r4
	se_cmpi		r4,3		# EventStatus=r4
	bc		0,2,.L837	# ne
#    {
#       /* ---------- Enter critical section ---------- */
#       SchM_Enter_Dem_EaDebounceCounter();
	.d2line		5616
.Llo719:
	bl		SchM_Enter_Dem_EaDebounceCounter
#       if ((TRUE == pDbData->jump_up) && (*pDBCounter < pDbData->jump_up_value))
	.d2line		5617
	lbz		r0,14(r29)		# pDbData=r29
	se_cmpi		r0,1
	bc		0,2,.L838	# ne
	lha		r0,0(r30)		# pDBCounter=r30
	lha		r3,10(r29)		# pDbData=r29
	e_cmph		cr0,r0,r3
	bc		0,0,.L838	# ge
#       {
#          /* Perform jump-up, [SWS_Dem_00425] */
#          *pDBCounter = pDbData->jump_up_value;
	.d2line		5620
	lha		r0,10(r29)		# pDbData=r29
	sth		r0,0(r30)		# pDBCounter=r30
.L838:
#       }
# 
#       if (*pDBCounter >= (sint16)(pDbData->failed_threshold - pDbData->incr_step))
	.d2line		5623
	lha		r4,0(r30)		# EventStatus=r4 pDBCounter=r30
.Llo720:
	lha		r0,4(r29)		# pDbData=r29
	lha		r3,0(r29)		# pDbData=r29
	subf		r3,r3,r0
	e_cmph		cr0,r4,r3		# EventStatus=r4
	bc		1,0,.L839	# lt
#       {
#          *pDBCounter = pDbData->failed_threshold;
	.d2line		5625
.Llo721:
	lha		r0,4(r29)		# pDbData=r29
	sth		r0,0(r30)		# pDBCounter=r30
	b		.L840
.L839:
#       }
#       else
#       {
#          *pDBCounter += pDbData->incr_step;
	.d2line		5629
	lha		r0,0(r30)		# pDBCounter=r30
	lha		r3,0(r29)		# pDbData=r29
	se_add		r0,r3
	sth		r0,0(r30)		# pDBCounter=r30
.L840:
#       }
#       SchM_Exit_Dem_EaDebounceCounter();
	.d2line		5631
	bl		SchM_Exit_Dem_EaDebounceCounter
#       /* ---------- Exit critical section ----------- */
# 
#       if (*pDBCounter >= pDbData->fdc_threshold)
	.d2line		5634
	lha		r0,0(r30)		# pDBCounter=r30
	lha		r3,8(r29)		# retVal=r3 pDbData=r29
	e_cmph		cr0,r0,r3		# retVal=r3
#       {
#          retVal = DEM_EVENT_STATE_FDCTR;
	.d2line		5636
	diab.li		r0,2
	isel		r3,r27,r0,0		# retVal=r3 retVal=r27
.L841:
#       }
# 
#       if (*pDBCounter >= pDbData->failed_threshold) 
	.d2line		5639
.Llo736:
	lha		r0,0(r30)		# pDBCounter=r30
.Llo737:
	lha		r4,4(r29)		# EventStatus=r4 pDbData=r29
.Llo722:
	e_cmph		cr0,r0,r4		# EventStatus=r4
#       {
#          retVal = DEM_EVENT_STATE_FAILED;
	.d2line		5641
	diab.li		r0,3
	isel		r27,r3,r0,0		# retVal=r27 retVal=r3
.L842:
#       }
# 
#       if ((DEM_INIT == Dem_InitState) && (pre_pDBCounter < *pDBCounter))
	.d2line		5644
.Llo723:
	lis		r3,Dem_InitState@ha		# retVal=r3
.Llo738:
	lwz		r0,Dem_InitState@l(r3)		# retVal=r3
	se_cmpi		r0,2
	bc		0,2,.L836	# ne
	lha		r0,0(r30)		# pDBCounter=r30
	e_cmph		cr0,r28,r0		# pre_pDBCounter=r28
	bc		0,0,.L836	# ge
#       {
#          Dem_UpdateMaxFdcSinceLastClear(EventId);
	.d2line		5646
.Llo730:
	rlwinm		r3,r31,0,16,31		# retVal=r3 EventId=r31
	bl		Dem_UpdateMaxFdcSinceLastClear
	b		.L836
.L837:
#       }
#    }
#    else
#    {
#       /* DEM_EVENT_STATUS_PREPASSED */
#       /* ---------- Enter critical section ---------- */
#       SchM_Enter_Dem_EaDebounceCounter();
	.d2line		5653
.Llo731:
	bl		SchM_Enter_Dem_EaDebounceCounter
#       if ((TRUE == pDbData->jump_down) && (*pDBCounter > pDbData->jump_down_value))
	.d2line		5654
	lbz		r0,15(r29)		# pDbData=r29
	se_cmpi		r0,1
	bc		0,2,.L845	# ne
.Llo741:
	lha		r0,0(r30)		# pDBCounter=r30
	lha		r3,12(r29)		# pDbData=r29
	e_cmph		cr0,r0,r3
	bc		0,1,.L845	# le
#       {
#          /* Perform jump-down, [SWS_Dem_00423] */
#          *pDBCounter = pDbData->jump_down_value;
	.d2line		5657
	lha		r0,12(r29)		# pDbData=r29
	sth		r0,0(r30)		# pDBCounter=r30
.L845:
#       }
# 
#       if (*pDBCounter <= (sint16)(pDbData->passed_threshold - pDbData->decr_step))
	.d2line		5660
	lha		r4,0(r30)		# EventStatus=r4 pDBCounter=r30
.Llo724:
	lha		r0,6(r29)		# pDbData=r29
	lha		r3,2(r29)		# pDbData=r29
	subf		r3,r3,r0
	e_cmph		cr0,r4,r3		# EventStatus=r4
	bc		1,1,.L846	# gt
	.section	.text_vle
.L3213:
#       {
#          /* Check if there is an unhandled event state in the buffer. */
#          CONST(Dem_EventStateType, AUTOMATIC) oldEventState = (Dem_BitArrayIsBitSet(Dem_LCfg.p_event_state_update, EventId - 1U) ? GetEventStateInBuffer(EventId) : DEM_EVENT_STATE_NONE);
	.d2line		5663
.Llo725:
	lis		r3,(Dem_LCfg+4)@ha
	lwz		r4,(Dem_LCfg+4)@l(r3)		# EventStatus=r4
.Llo726:
	rlwinm		r3,r31,0,16,31		# EventId=r31
	diab.addi		r3,r3,-1
	se_srwi		r3,3
	lbzx		r3,r4,r3		# EventStatus=r4
	diab.li		r4,1		# EventStatus=r4
	diab.addi		r0,r31,255		# EventId=r31
	rlwinm		r0,r0,0,29,31
	slw		r4,r4,r0		# EventStatus=r4 EventStatus=r4
	rlwinm		r4,r4,0,24,31		# EventStatus=r4 EventStatus=r4
	and.		r3,r3,r4		# EventStatus=r4
	bc		1,2,.L850	# eq
.Llo727:
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		GetEventStateInBuffer
.Llo742:
	mr		r3,r3		# oldEventState=r3 oldEventState=r3
	b		.L851
.L850:
.Llo743:
	diab.li		r3,0		# oldEventState=r3
.L851:
#          if (oldEventState <= DEM_EVENT_STATE_PASSED)
	.d2line		5664
.Llo714:
	rlwinm		r3,r3,0,24,31		# oldEventState=r3 oldEventState=r3
	se_cmpi		r3,1		# oldEventState=r3
	bc		1,1,.L848	# gt
#          {
#             /* [VSTAR_Dem_00119] */
#             *pDBCounter = pDbData->passed_threshold;
	.d2line		5667
.Llo744:
	lha		r0,6(r29)		# pDbData=r29
	sth		r0,0(r30)		# pDBCounter=r30
	.section	.text_vle
.L3214:
	b		.L848
.L846:
#          }
#       }
#       else
#       {
#          *pDBCounter += pDbData->decr_step;
	.d2line		5672
.Llo715:
	lha		r0,0(r30)		# pDBCounter=r30
	lha		r3,2(r29)		# pDbData=r29
	se_add		r0,r3
	sth		r0,0(r30)		# pDBCounter=r30
.L848:
#       }
#       SchM_Exit_Dem_EaDebounceCounter();
	.d2line		5674
.Llo716:
	bl		SchM_Exit_Dem_EaDebounceCounter
#       /* ---------- Exit critical section ----------- */
# 
#       if (*pDBCounter <= pDbData->passed_threshold)
	.d2line		5677
	lha		r0,0(r30)		# pDBCounter=r30
	lha		r3,6(r29)		# oldEventState=r3 pDbData=r29
.Llo745:
	e_cmph		cr0,r0,r3		# oldEventState=r3
#       {
#          retVal = DEM_EVENT_STATE_PASSED;
	.d2line		5679
	diab.li		r0,1
	isel		r27,r27,r0,1		# retVal=r27 retVal=r27
.L836:
#       }
#    }
# 
#    return retVal;
	.d2line		5683
.Llo732:
	rlwinm		r3,r27,0,24,31		# retVal=r3 retVal=r27
# }
	.d2line		5684
	.d2epilogue_begin
	lmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
.Llo739:
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3190:
	.type		DebouncingCounter,@function
	.size		DebouncingCounter,.-DebouncingCounter
# Number of nodes = 299

# Allocations for DebouncingCounter
#	?a4		EventId
#	?a5		EventStatus
#	?a6		pDBCounter
#	?a7		pDbData
#	?a8		retVal
#	?a9		pre_pDBCounter
#	?a10		oldEventState
# static FUNC(void, DEM_CODE) Debouncing(Dem_EventIdType EventId, Dem_EventStatusType EventStatus, Dem_EventStateType* pEventState)
	.align		1
	.section	.text_vle
        .d2line         5522,29
#$$ld
.L3222:

#$$bf	Debouncing,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
Debouncing:
.Llo746:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# EventId=r3 EventId=r3
	mr		r4,r4		# EventStatus=r4 EventStatus=r4
	mr		r31,r5		# pEventState=r31 pEventState=r5
	.d2prologue_end
# {
# #if (STD_ON == DEM_DB_TIME_BASED)
#    uint16 counterIndex = Dem_LCfg.p_events[EventId - 1U].debounce_counter_idx;
# #endif /* STD_ON == DEM_DB_TIME_BASED */
# 
#    switch (Dem_LCfg.p_events[EventId - 1U].debounce_alg)
	.d2line		5528
	lis		r5,(Dem_LCfg+16)@ha
.Llo752:
	lwz		r0,(Dem_LCfg+16)@l(r5)
	rlwinm		r5,r3,0,16,31		# EventId=r3
	e_mulli		r5,r5,20
	se_add		r5,r0
	lbz		r0,-1(r5)
	se_cmpi		r0,2
	bc		0,2,.L824	# ne
#    {
#       case DEM_DB_TIME:
#       {
# #if (STD_ON == DEM_DB_TIME_BASED)
#          /* ---------- Enter critical section ---------- */
#          SchM_Enter_Dem_EaDebounceTime();
# 
#          if ((DEM_TIME_DB_COUNTER_FAILED != Dem_LCfg.p_time_db_dir[counterIndex]) && 
#              (DEM_TIME_DB_COUNTER_UP != Dem_LCfg.p_time_db_dir[counterIndex]) && 
#              (DEM_EVENT_STATUS_PREFAILED == EventStatus))
#          {  /* Change of direction from STOP/PREPASSED to PREFAILED */
#             Dem_LCfg.p_time_db_counter[counterIndex] = 0;
#             Dem_LCfg.p_time_db_dir[counterIndex] = DEM_TIME_DB_COUNTER_UP;
#          }
#          else if ((DEM_TIME_DB_COUNTER_PASSED != Dem_LCfg.p_time_db_dir[counterIndex]) && 
#                   (DEM_TIME_DB_COUNTER_DOWN != Dem_LCfg.p_time_db_dir[counterIndex]) && 
#                   (DEM_EVENT_STATUS_PREPASSED == EventStatus))
#          {  /* Change of direction from STOP/PREFAILED to PREPASSED*/
#             Dem_LCfg.p_time_db_counter[counterIndex] = 0;
#             Dem_LCfg.p_time_db_dir[counterIndex] = DEM_TIME_DB_COUNTER_DOWN;
#          }
#          else
#          {
#             /* No change of direction. Do nothing */
#          }
# 
#          SchM_Exit_Dem_EaDebounceTime();
#          /* ---------- Exit critical section ----------- */
# 
#          *pEventState = DEM_EVENT_STATE_NONE;
# #endif /* STD_ON == DEM_DB_TIME_BASED */
#          break;
#       }
#       case DEM_DB_COUNTER:
#       {
# #if (STD_ON == DEM_DB_COUNTER_BASED)
#          *pEventState = DebouncingCounter(EventId, EventStatus);
	.d2line		5565
.Llo750:
	mr		r3,r3		# EventId=r3 EventId=r3
.Llo747:
	mr		r4,r4		# EventStatus=r4 EventStatus=r4
.Llo751:
	bl		DebouncingCounter
.Llo748:
	stb		r3,0(r31)		# pEventState=r31 EventId=r3
.L824:
# #endif /* STD_ON == DEM_DB_COUNTER_BASED */
#          break;
#       }
#       default:
#       {
#          /*
#           * DEM_DB_MONITORINTERNAL: Pre-debouncing requested for event which is debounced by monitoring function
#           */
#          break;
#       }
#    }
# }
	.d2line		5577
	.d2epilogue_begin
.Llo749:
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3223:
	.type		Debouncing,@function
	.size		Debouncing,.-Debouncing
# Number of nodes = 28

# Allocations for Debouncing
#	?a4		EventId
#	?a5		EventStatus
#	?a6		pEventState
# static FUNC(void, DEM_CODE) SetEventStateInBuffer(Dem_EventIdType eventId, Dem_EventStateType eventState)
	.align		1
	.section	.text_vle
        .d2line         5854,29
#$$ld
.L3231:

#$$bf	SetEventStateInBuffer,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
SetEventStateInBuffer:
.Llo753:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# eventId=r31 eventId=r3
	mr		r30,r4		# eventState=r30 eventState=r4
	.d2prologue_end
# {
#    uint16 evStateArrayIndex = (eventId - 1U) / 4U;
	.d2line		5856
	rlwinm		r3,r3,0,16,31		# eventId=r3 eventId=r3
	diab.addi		r3,r3,-1		# eventId=r3 eventId=r3
	rlwinm		r29,r3,30,2,31		# evStateArrayIndex=r29 eventId=r3
.Llo760:
	mr		r29,r29		# evStateArrayIndex=r29 evStateArrayIndex=r29
#    uint8 shift = (uint8)(((eventId - 1U) % 4U) * 2U);
	.d2line		5857
	rlwinm		r3,r3,1,29,30		# eventId=r3 eventId=r3
.Llo754:
	mr		r28,r3		# shift=r28 shift=r3
# 
#    /* ---------- Enter critical section ---------- */
#    SchM_Enter_Dem_EaEventStateBuffer();
	.d2line		5860
	bl		SchM_Enter_Dem_EaEventStateBuffer
#    /* Set the two bits for this event to the given event state value. */
#    Dem_LCfg.p_event_state_buffer[evStateArrayIndex] = (uint8)(Dem_LCfg.p_event_state_buffer[evStateArrayIndex] & (uint8)(~((uint8)(3U << shift)))) | (uint8)(eventState << shift);
	.d2line		5862
.Llo757:
	lis		r4,Dem_LCfg@ha
	lwz		r3,Dem_LCfg@l(r4)		# eventId=r3
.Llo755:
	rlwinm		r29,r29,0,16,31		# evStateArrayIndex=r29 evStateArrayIndex=r29
.Llo761:
	lbzux		r0,r3,r29		# eventId=r3
	diab.li		r3,3		# eventId=r3
	slw		r3,r3,r28		# eventId=r3 eventId=r3 shift=r28
	andc		r0,r0,r3		# eventId=r3
.Llo758:
	slw		r30,r30,r28		# eventState=r30 eventState=r30 shift=r28
	or		r0,r0,r30		# eventState=r30
	lwz		r3,Dem_LCfg@l(r4)		# eventId=r3
	stbx		r0,r3,r29		# eventId=r3
#    /* Set update bit */
#    Dem_BitArraySetBit(Dem_LCfg.p_event_state_update, eventId - 1U);
	.d2line		5864
	lis		r3,(Dem_LCfg+4)@ha		# eventId=r3
	lwz		r3,(Dem_LCfg+4)@l(r3)		# eventId=r3 eventId=r3
	rlwinm		r5,r31,0,16,31		# eventId=r31
	diab.addi		r5,r5,-1
	se_srwi		r5,3
	lbzx		r0,r3,r5		# eventId=r3
	diab.li		r4,1
	diab.addi		r31,r31,255		# eventId=r31 eventId=r31
	rlwinm		r31,r31,0,29,31		# eventId=r31 eventId=r31
	slw		r4,r4,r31		# eventId=r31
	or		r0,r0,r4
	stbx		r0,r3,r5		# eventId=r3
#    SchM_Exit_Dem_EaEventStateBuffer();
	.d2line		5865
	bl		SchM_Exit_Dem_EaEventStateBuffer
#    /* ---------- Exit critical section ----------- */
# }
	.d2line		5867
	.d2epilogue_begin
.Llo756:
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
.Llo759:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3232:
	.type		SetEventStateInBuffer,@function
	.size		SetEventStateInBuffer,.-SetEventStateInBuffer
# Number of nodes = 70

# Allocations for SetEventStateInBuffer
#	?a4		eventId
#	?a5		eventState
#	?a6		$$9
#	?a7		evStateArrayIndex
#	?a8		shift
# FUNC(void, DEM_CODE) Dem_SetDebouncingCounter(Dem_EventIdType eventId, Dem_SetDBCounterType action)
	.align		2
	.section	.text_vle
        .d2line         7794,22
#$$ld
.L3242:

#$$bf	Dem_SetDebouncingCounter,interprocedural,rasave,nostackparams
	.globl		Dem_SetDebouncingCounter
	.d2_cfa_start __cie
Dem_SetDebouncingCounter:
.Llo762:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# eventId=r31 eventId=r3
.Llo763:
	mr		r30,r4		# action=r30 action=r4
	.d2prologue_end
# {
# #if (STD_ON == DEM_DB_COUNTER_BASED) || (STD_ON == DEM_DB_TIME_BASED)
#    uint16 counterIndex = Dem_LCfg.p_events[eventId - 1U].debounce_counter_idx;
	.d2line		7797
.Llo764:
	lis		r3,(Dem_LCfg+16)@ha
	lwz		r0,(Dem_LCfg+16)@l(r3)
	rlwinm		r3,r31,0,16,31		# eventId=r31
	e_mulli		r3,r3,20
	se_add		r3,r0
	lhz		r29,-4(r3)
.Llo772:
	mr		r29,r29		# counterIndex=r29 counterIndex=r29
# #endif
# 
#    switch (Dem_LCfg.p_events[eventId - 1U].debounce_alg)
	.d2line		7800
	lbz		r0,-1(r3)
	se_cmpi		r0,2
	bc		0,2,.L1276	# ne
#    {
#       case DEM_DB_TIME:
#       {
# #if (STD_ON == DEM_DB_TIME_BASED)
#          /* ---------- Enter critical section ---------- */
#          SchM_Enter_Dem_EaDebounceTime();
#          if (DEM_DB_COUNTER_PASSED == action)
#          {
#             Dem_LCfg.p_time_db_counter[counterIndex] = GetDbTimePassedThreshold(eventId);
#             Dem_LCfg.p_time_db_dir[counterIndex] = DEM_TIME_DB_COUNTER_PASSED;
#          }
#          else if (DEM_DB_COUNTER_FAILED == action)
#          {
#             Dem_LCfg.p_time_db_counter[counterIndex] = GetDbTimeFailedThreshold(eventId);
#             Dem_LCfg.p_time_db_dir[counterIndex] = DEM_TIME_DB_COUNTER_FAILED;
#          }
#          else
#          {
#             /* DEM_DB_COUNTER_CLEAR */
#             Dem_LCfg.p_time_db_counter[counterIndex] = 0;
#             Dem_LCfg.p_time_db_dir[counterIndex] = DEM_TIME_DB_COUNTER_STOP;
#          }
#          SchM_Exit_Dem_EaDebounceTime();
#          /* ---------- Exit critical section ----------- */
# #endif /* STD_ON == DEM_DB_TIME_BASED */
#          break;
#       }
#       case DEM_DB_COUNTER:
#       {
# #if (STD_ON == DEM_DB_COUNTER_BASED)
#          /* ---------- Enter critical section ---------- */
#          SchM_Enter_Dem_EaDebounceCounter();
	.d2line		7832
.Llo768:
	bl		SchM_Enter_Dem_EaDebounceCounter
#          if (DEM_DB_COUNTER_PASSED == action)
	.d2line		7833
.Llo769:
	se_cmpi		r30,0		# action=r30
	bc		0,2,.L1280	# ne
#          {
#             Dem_LCfg.p_counter_db_counter[counterIndex] = GetDbCounterPassedThreshold(eventId);
	.d2line		7835
.Llo765:
	lis		r4,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r4)
	lwz		r0,120(r3)
	lwz		r3,100(r3)
.Llo766:
	rlwinm		r31,r31,0,16,31		# eventId=r31 eventId=r31
	se_add		r31,r3		# eventId=r31 eventId=r31
	lbz		r3,-1(r31)		# eventId=r31
	rlwinm		r3,r3,4,20,27
	se_add		r3,r0
	lha		r0,6(r3)
	lis		r3,(Dem_LCfg+124)@ha
	lwz		r3,(Dem_LCfg+124)@l(r3)
.Llo773:
	rlwinm		r29,r29,1,15,30		# counterIndex=r29 counterIndex=r29
.Llo774:
	sthx		r0,r3,r29
	b		.L1281
.L1280:
#          }
#          else if (DEM_DB_COUNTER_FAILED == action)
	.d2line		7837
.Llo775:
	se_cmpi		r30,1		# action=r30
	bc		0,2,.L1282	# ne
#          {
#             Dem_LCfg.p_counter_db_counter[counterIndex] = GetDbCounterFailedThreshold(eventId);
	.d2line		7839
.Llo770:
	lis		r4,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r4)
	lwz		r0,120(r3)
	lwz		r4,100(r3)
	rlwinm		r3,r31,0,16,31		# eventId=r31
	se_add		r3,r4
	lbz		r3,-1(r3)
	rlwinm		r3,r3,4,20,27
	se_add		r3,r0
	lha		r0,4(r3)
	lis		r3,(Dem_LCfg+124)@ha
	lwz		r3,(Dem_LCfg+124)@l(r3)
.Llo776:
	rlwinm		r29,r29,1,15,30		# counterIndex=r29 counterIndex=r29
.Llo777:
	sthx		r0,r3,r29
#             if (DEM_INIT == Dem_InitState)
	.d2line		7840
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)
	se_cmpi		r0,2
	bc		0,2,.L1281	# ne
#             {
#                /* [SWS_Dem_00795] */
#                Dem_SetMaxFdcSinceLastClear(eventId, 127);
	.d2line		7843
	rlwinm		r3,r31,0,16,31		# eventId=r31
	diab.li		r4,127
	bl		Dem_SetMaxFdcSinceLastClear
	b		.L1281
.L1282:
#             }
#          }
#          else
#          {
#             /* DEM_DB_COUNTER_CLEAR */
#             Dem_LCfg.p_counter_db_counter[counterIndex] = 0U;
	.d2line		7849
	diab.li		r0,0
	lis		r3,(Dem_LCfg+124)@ha
	lwz		r3,(Dem_LCfg+124)@l(r3)
.Llo778:
	rlwinm		r29,r29,1,15,30		# counterIndex=r29 counterIndex=r29
.Llo779:
	sthx		r0,r3,r29
.L1281:
#          }
#          SchM_Exit_Dem_EaDebounceCounter();
	.d2line		7851
	bl		SchM_Exit_Dem_EaDebounceCounter
.L1276:
#          /* ---------- Exit critical section ----------- */
# #endif /* STD_ON == DEM_DB_COUNTER_BASED */
#          break;
#       }
#       default:
#       {
#          /*
#           * DEM_DB_MONITORINTERNAL: Pre-debouncing done by monitoring function
#           */
#          break;
#       }
#    }
# }
	.d2line		7864
	.d2epilogue_begin
.Llo767:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo771:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3243:
	.type		Dem_SetDebouncingCounter,@function
	.size		Dem_SetDebouncingCounter,.-Dem_SetDebouncingCounter
# Number of nodes = 133

# Allocations for Dem_SetDebouncingCounter
#	?a4		eventId
#	?a5		action
#	?a6		counterIndex
# static FUNC(void, DEM_CODE) UpdateEventState(Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
	.align		1
	.section	.text_vle
        .d2line         4157,29
#$$ld
.L3254:

#$$bf	UpdateEventState,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
UpdateEventState:
.Llo780:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
.Llo781:
	mr		r7,r4		# EventStatus=r7 EventStatus=r4
	.d2prologue_end
# {
#    Dem_EventStateType eventState = DEM_EVENT_STATE_NONE;
	.d2line		4159
.Llo782:
	diab.li		r0,0
.Llo784:
	stb		r0,8(r1)
#    Dem_EventStateType oldEventState = GetEventStateInBuffer(EventId);
	.d2line		4160
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		GetEventStateInBuffer
.Llo788:
	mr		r30,r3		# oldEventState=r30 oldEventState=r3
#    boolean eventStateUpdate = (boolean)Dem_BitArrayIsBitSet(Dem_LCfg.p_event_state_update, EventId - 1U);
	.d2line		4161
	lis		r3,(Dem_LCfg+4)@ha		# EventId=r3
.Llo789:
	lwz		r4,(Dem_LCfg+4)@l(r3)		# EventId=r3
	rlwinm		r3,r31,0,16,31		# EventId=r3 EventId=r31
	diab.addi		r3,r3,-1		# EventId=r3 EventId=r3
	se_srwi		r3,3		# EventId=r3 EventId=r3
	lbzx		r0,r4,r3
	diab.li		r4,1
	diab.addi		r3,r31,255		# EventId=r3 EventId=r31
	rlwinm		r3,r3,0,29,31		# EventId=r3 EventId=r3
	slw		r4,r4,r3		# EventId=r3
	rlwinm		r3,r4,0,24,31		# EventId=r3
	and		r3,r3,r0		# EventId=r3 EventId=r3
	addic		r29,r3,-1		# EventId=r3
	subfe		r29,r29,r3		# EventId=r3
.Llo794:
	mr		r29,r29		# eventStateUpdate=r29 eventStateUpdate=r29
# 
#    switch (EventStatus)
	.d2line		4163
	rlwinm		r6,r7,0,24,31		# EventStatus=r7
	se_cmpi		r6,2
	bc		1,1,.L3264	# gt
.Llo790:
	bc		1,2,.L491	# eq
	se_cmpi		r6,0
	bc		1,2,.L493	# eq
.Llo785:
	se_cmpi		r6,1
	bc		1,2,.L495	# eq
	b		.L492
.L3264:
.Llo786:
	se_cmpi		r6,3
	bc		1,2,.L491	# eq
	se_cmpi		r6,4
	bc		1,2,.L491	# eq
	b		.L492
.L491:
#    {
#       case DEM_EVENT_STATUS_PREPASSED:
#       case DEM_EVENT_STATUS_PREFAILED:
#       case DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED:
#       {
#          Debouncing(EventId, EventStatus, &eventState);
	.d2line		4169
	diab.addi		r5,r1,8
	mr		r3,r31		# EventId=r3 EventId=r31
	mr		r4,r7		# EventStatus=r4 EventStatus=r7
	bl		Debouncing
.Llo787:
	b		.L492
.L493:
#          break;
#       }
#       case DEM_EVENT_STATUS_PASSED:
#       {
#          if ((FALSE == eventStateUpdate) || (oldEventState <= DEM_EVENT_STATE_PASSED))
	.d2line		4174
	rlwinm		r0,r29,0,24,31		# eventStateUpdate=r29
	se_cmpi		r0,0
	bc		1,2,.L499	# eq
	rlwinm		r3,r30,0,24,31		# EventId=r3 oldEventState=r30
	se_cmpi		r3,1		# EventId=r3
	bc		1,1,.L494	# gt
.L499:
#          {
#             /* [VSTAR_Dem_00119] */
#             Dem_SetDebouncingCounter(EventId, DEM_DB_COUNTER_PASSED);
	.d2line		4177
	mr		r3,r31		# EventId=r3 EventId=r31
	diab.li		r4,0
	bl		Dem_SetDebouncingCounter
.L494:
#          }
#          eventState = DEM_EVENT_STATE_PASSED;
	.d2line		4179
	diab.li		r0,1
	stb		r0,8(r1)
	b		.L492
.L495:
#          break;
#       }
#       case DEM_EVENT_STATUS_FAILED:
#       {
#          Dem_SetDebouncingCounter(EventId, DEM_DB_COUNTER_FAILED);
	.d2line		4184
	mr		r3,r31		# EventId=r3 EventId=r31
	diab.li		r4,1
	bl		Dem_SetDebouncingCounter
#          eventState = DEM_EVENT_STATE_FAILED;
	.d2line		4185
	diab.li		r0,3
	stb		r0,8(r1)
.L492:
#          break;
#       }
#       default:
#       {
#          /* The default case shall not be entered.*/
#          break;
#       }
#    }
# 
#    /* [VSTAR_Dem_00119] */
#    if ((eventState != DEM_EVENT_STATE_NONE) &&
	.d2line		4196
	lbz		r0,8(r1)
	se_cmpi		r0,0
	bc		1,2,.L488	# eq
	rlwinm		r0,r29,0,24,31		# eventStateUpdate=r29
	se_cmpi		r0,0
	bc		0,2,.L501	# ne
	lbz		r0,8(r1)
	rlwinm		r3,r30,0,24,31		# EventId=r3 oldEventState=r30
	se_cmp		r0,r3		# EventId=r3
	bc		0,2,.L500	# ne
.L501:
	rlwinm		r29,r29,0,24,31		# eventStateUpdate=r29 eventStateUpdate=r29
	se_cmpi		r29,1		# eventStateUpdate=r29
	bc		0,2,.L488	# ne
.Llo791:
	lbz		r0,8(r1)
.Llo792:
	rlwinm		r30,r30,0,24,31		# oldEventState=r30 oldEventState=r30
	se_cmp		r0,r30		# oldEventState=r30
	bc		0,1,.L488	# le
.L500:
#       (((FALSE == eventStateUpdate) && (eventState != oldEventState)) ||
#       ((TRUE == eventStateUpdate) && (eventState > oldEventState))))
#    {
#       /* Update event status */
#       if (DEM_INIT == Dem_InitState)
	.d2line		4201
.Llo795:
	lis		r3,Dem_InitState@ha		# EventId=r3
	lwz		r0,Dem_InitState@l(r3)		# EventId=r3
	se_cmpi		r0,2
	bc		0,2,.L498	# ne
#       {
#          UpdateEventStatus(EventId, eventState);
	.d2line		4203
.Llo793:
	lbz		r4,8(r1)		# EventStatus=r4
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		UpdateEventStatus
.L498:
#       }
# 
# #if (DEM_STORAGE_CONDITION_SUPPORT == STD_ON)
#       /* [SWS_Dem_00455] */
#       if (StorageConditionsFulfilled(EventId, eventState))
# #endif /* DEM_STORAGE_CONDITION_SUPPORT == STD_ON */
#       {
#          /* [SWS_Dem_00167], [VSTAR_Dem_00118] */
#          SetEventStateInBuffer(EventId, eventState);
	.d2line		4212
	lbz		r4,8(r1)		# EventStatus=r4
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		SetEventStateInBuffer
.L488:
#       }
#    }
# }
	.d2line		4215
	.d2epilogue_begin
.Llo783:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3255:
	.type		UpdateEventState,@function
	.size		UpdateEventState,.-UpdateEventState
# Number of nodes = 123

# Allocations for UpdateEventState
#	?a4		EventId
#	?a5		EventStatus
#	SP,8		eventState
#	?a6		oldEventState
#	?a7		eventStateUpdate
# static FUNC(void, DEM_CODE) HandleEventState(Dem_EventIdType EventId, Dem_EventStateType EventState)
	.align		1
	.section	.text_vle
        .d2line         4310,29
#$$ld
.L3267:

#$$bf	HandleEventState,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
HandleEventState:
.Llo796:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r25,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	25,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
.Llo797:
	mr		r30,r4		# EventState=r30 EventState=r4
	.d2prologue_end
# {
#    CONST(Dem_UdsStatusByteType, AUTOMATIC) eventUdsStatusOld = Dem_GetUdsStatus(EventId);
#    CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(EventId);
#    CONST(Dem_UdsStatusByteType, AUTOMATIC) dtcUdsStatusOld = Dem_GetUdsStatusForValidDtc(intDtc);
#    boolean eventStateHandled = FALSE;
	.d2line		4315
.Llo798:
	diab.li		r27,0		# eventStateHandled=r27
#    boolean setToCompleted = TRUE;
	.d2line		4316
.Llo821:
	diab.li		r26,1		# setToCompleted=r26
	.d2line		4312
.Llo827:
	lis		r3,(Dem_NvUdsStatus-1)@ha
	e_add16i		r3,r3,(Dem_NvUdsStatus-1)@l
	rlwinm		r0,r31,0,16,31		# EventId=r31
	lbzx		r29,r3,r0
.Llo815:
	mr		r29,r29		# eventUdsStatusOld=r29 eventUdsStatusOld=r29
	.d2line		4313
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,128(r3)
	rlwinm		r0,r31,1,15,30		# EventId=r31
	se_add		r3,r0
	lhz		r28,-2(r3)		# intDtc=r28
.Llo816:
	mr		r28,r28		# intDtc=r28 intDtc=r28
	.d2line		4314
	rlwinm		r3,r28,0,16,31		# intDtc=r28
	cmpli		0,0,r3,65535
	bc		0,2,.L539	# ne
.Llo800:
	diab.li		r25,0		# dtcUdsStatusOld=r25
.Llo801:
	b		.L540
.L539:
.Llo817:
	rlwinm		r3,r28,0,16,31		# intDtc=r28
	bl		Dem_GetUdsStatusByIntDtc
.Llo818:
	mr		r25,r3		# dtcUdsStatusOld=r25 dtcUdsStatusOld=r3
.L540:
# 
# #if (DEM_PTO_SUPPORT == STD_ON)
#    setToCompleted = IsSetToCompletedAllowed(EventId);
# #endif /* DEM_PTO_SUPPORT == STD_ON */
# 
#    switch (EventState)
	.d2line		4322
.Llo819:
	rlwinm		r6,r30,0,24,31		# EventState=r30
.Llo820:
	se_cmpi		r6,1
	bc		1,2,.L529	# eq
.Llo802:
	se_cmpi		r6,2
.Llo803:
	bc		1,2,.L535	# eq
	se_cmpi		r6,3
	bc		1,2,.L532	# eq
	b		.L531
.L529:
#    {
#       case DEM_EVENT_STATE_PASSED:
#       {
#          /* [VSTAR_Dem_00289]
#           * Set/clear synchronous UDS status bits to avoid inconsistencies due to locking of UdsStatus Nv-block at clear.
#           * Do not touch testFailed bit since a later synchronous change might be overwritten.
#           */
#          if (setToCompleted)
	.d2line		4330
	rlwinm		r26,r26,0,24,31		# setToCompleted=r26 setToCompleted=r26
	se_cmpi		r26,0		# setToCompleted=r26
	bc		1,2,.L530	# eq
#          {
#             /* [SWS_Dem_00392], [SWS_Dem_00394] */
#             Dem_ClrUdsBits(EventId, DEM_UDS_SB_TNCSLC_CLR & DEM_UDS_SB_TNCTOC_CLR);
	.d2line		4333
.Llo822:
	mr		r3,r31		# EventId=r3 EventId=r31
	diab.li		r4,175
.Llo804:
	bl		Dem_ClrUdsBits
.L530:
#          }
#          HandleEventStatePassed(EventId);
	.d2line		4335
.Llo805:
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		HandleEventStatePassed
#          eventStateHandled = TRUE;
	.d2line		4336
.Llo806:
	diab.li		r27,1		# eventStateHandled=r27
# 
#          /* Trigger update of event status per entry */
#          UdsStatusModified = TRUE;
	.d2line		4339
.Llo823:
	diab.li		r0,1
	lis		r3,UdsStatusModified@ha		# EventId=r3
	e_add16i		r3,r3,UdsStatusModified@l		# EventId=r3 EventId=r3
	stb		r0,0(r3)		# EventId=r3
	b		.L531
.L532:
#          break;
#       }
#       case DEM_EVENT_STATE_FAILED:
#       {
#          if (TRUE == DtcRecordUpdateEnabled(EventId))
	.d2line		4344
.Llo807:
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		DtcRecordUpdateEnabled
.Llo808:
	rlwinm		r3,r3,0,24,31		# EventId=r3 EventId=r3
	se_cmpi		r3,1		# EventId=r3
	bc		0,2,.L531	# ne
#          {
#             /* [VSTAR_Dem_00289]
#              * Set/clear synchronous UDS status bits to avoid inconsistencies due to locking of UdsStatus Nv-block at clear.
#              * Do not touch testFailed bit since a later synchronous change might be overwritten.
#              */
#             /* [SWS_Dem_00389], [SWS_Dem_00390], [SWS_Dem_00393] */
#             Dem_SetUdsBits(EventId, DEM_UDS_SB_TFTOC_SET | DEM_UDS_SB_PDTC_SET | DEM_UDS_SB_TFSLC_SET);
	.d2line		4351
.Llo828:
	mr		r3,r31		# EventId=r3 EventId=r31
	diab.li		r4,38
	bl		Dem_SetUdsBits
#             if (setToCompleted)
	.d2line		4352
.Llo829:
	rlwinm		r26,r26,0,24,31		# setToCompleted=r26 setToCompleted=r26
	se_cmpi		r26,0		# setToCompleted=r26
	bc		1,2,.L534	# eq
#             {
#                /* [SWS_Dem_00392], [SWS_Dem_00394] */
#                Dem_ClrUdsBits(EventId, DEM_UDS_SB_TNCSLC_CLR & DEM_UDS_SB_TNCTOC_CLR);
	.d2line		4355
.Llo824:
	mr		r3,r31		# EventId=r3 EventId=r31
	diab.li		r4,175
	bl		Dem_ClrUdsBits
.L534:
#             }
#             HandleEventStateFailed(EventId);
	.d2line		4357
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		HandleEventStateFailed
#             eventStateHandled = TRUE;
	.d2line		4358
	diab.li		r27,1		# eventStateHandled=r27
# 
#             /* Trigger update of event status per entry */
#             UdsStatusModified = TRUE;
	.d2line		4361
.Llo825:
	diab.li		r0,1
	lis		r3,UdsStatusModified@ha		# EventId=r3
	e_add16i		r3,r3,UdsStatusModified@l		# EventId=r3 EventId=r3
	stb		r0,0(r3)		# EventId=r3
	b		.L531
.L535:
#          }
#          break;
#       }
# #if (STD_ON == DEM_DB_COUNTER_BASED)
#       case DEM_EVENT_STATE_FDCTR:
#       {
#          if (TRUE == DtcRecordUpdateEnabled(EventId))
	.d2line		4368
.Llo809:
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		DtcRecordUpdateEnabled
.Llo810:
	rlwinm		r3,r3,0,24,31		# EventId=r3 EventId=r3
	se_cmpi		r3,1		# EventId=r3
	bc		0,2,.L531	# ne
#          {
#             HandleEventStateFDCTR(EventId);
	.d2line		4370
.Llo830:
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		HandleEventStateFDCTR
#             eventStateHandled = TRUE;
	.d2line		4371
	diab.li		r27,1		# eventStateHandled=r27
# 
#             /* Trigger update of SI byte per entry */
#             Dem_SiModified = TRUE;
	.d2line		4374
	diab.li		r0,1
	lis		r3,Dem_SiModified@ha		# EventId=r3
	e_add16i		r3,r3,Dem_SiModified@l		# EventId=r3 EventId=r3
	stb		r0,0(r3)		# EventId=r3
.L531:
#          }
#          break;
#       }
# #endif /* (STD_ON == DEM_DB_COUNTER_BASED) */
#       default:
#       {
#          /* The default case shall not be entered */
#          break;
#       }
#    }
# 
#    if (TRUE == eventStateHandled)
	.d2line		4386
.Llo811:
	rlwinm		r27,r27,0,24,31		# eventStateHandled=r27 eventStateHandled=r27
	se_cmpi		r27,1		# eventStateHandled=r27
	bc		0,2,.L538	# ne
#    {
#       /* Only clear update bit if event state was actually handled. */
#       /* ---------- Enter critical section ---------- */
#       SchM_Enter_Dem_EaEventStateBuffer();
	.d2line		4390
.Llo826:
	bl		SchM_Enter_Dem_EaEventStateBuffer
#       Dem_BitArrayClearBit(Dem_LCfg.p_event_state_update, EventId - 1U);
	.d2line		4391
.Llo812:
	lis		r3,(Dem_LCfg+4)@ha		# EventId=r3
	lwz		r3,(Dem_LCfg+4)@l(r3)		# EventId=r3 EventId=r3
	rlwinm		r6,r31,0,16,31		# EventId=r31
	diab.addi		r6,r6,-1
	se_srwi		r6,3
	lbzx		r4,r3,r6		# EventId=r3
	diab.li		r5,1
	diab.addi		r0,r31,255		# EventId=r31
	rlwinm		r0,r0,0,29,31
	slw		r5,r5,r0
	xori		r5,r5,255
	and		r0,r4,r5
	stbx		r0,r3,r6		# EventId=r3
#       SchM_Exit_Dem_EaEventStateBuffer();
	.d2line		4392
	bl		SchM_Exit_Dem_EaEventStateBuffer
.L538:
#       /* ---------- Exit critical section ----------- */
#    }
# 
#    Dem_TriggerOnEventStatus(EventId, eventUdsStatusOld);
	.d2line		4396
.Llo813:
	mr		r3,r31		# EventId=r3 EventId=r31
	mr		r4,r29		# eventUdsStatusOld=r4 eventUdsStatusOld=r29
.Llo814:
	bl		Dem_TriggerOnEventStatus
#    Dem_TriggerOnDTCStatus(intDtc, dtcUdsStatusOld, FALSE);
	.d2line		4397
	mr		r3,r28		# intDtc=r3 intDtc=r28
	mr		r4,r25		# dtcUdsStatusOld=r4 dtcUdsStatusOld=r25
	diab.li		r5,0
	bl		Dem_TriggerOnDTCStatus
# }
	.d2line		4398
	.d2epilogue_begin
	lmw		r25,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	2,10
.Llo799:
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3268:
	.type		HandleEventState,@function
	.size		HandleEventState,.-HandleEventState
# Number of nodes = 178

# Allocations for HandleEventState
#	?a4		EventId
#	?a5		EventState
#	?a6		$$8
#	?a7		eventUdsStatusOld
#	?a8		intDtc
#	?a9		dtcUdsStatusOld
#	?a10		eventStateHandled
#	?a11		setToCompleted
# static FUNC(void, DEM_CODE) ClearEventStatus(Dem_EventIdType EventId)
	.align		1
	.section	.text_vle
        .d2line         4400,29
#$$ld
.L3284:

#$$bf	ClearEventStatus,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
ClearEventStatus:
.Llo831:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# EventId=r3 EventId=r3
	.d2prologue_end
# {
#    P2VAR(Dem_UdsStatusByteType, AUTOMATIC, DEM_NV_DATA) pEvStatusExt = Dem_GetUdsStatusPtr(EventId);
	.d2line		4402
	lis		r31,(Dem_NvUdsStatus-1)@ha		# pEvStatusExt=r31
	e_add16i		r31,r31,(Dem_NvUdsStatus-1)@l		# pEvStatusExt=r31 pEvStatusExt=r31
	rlwinm		r3,r3,0,16,31		# EventId=r3 EventId=r3
	se_add		r3,r31		# EventId=r3 EventId=r3 pEvStatusExt=r31
.Llo832:
	mr		r31,r3		# pEvStatusExt=r31 pEvStatusExt=r3
# 
#    /* [SWS_Dem_00385]
#     * Set event status bits testNotCompletedSinceLastClear and testNotCompletedThisOperationCycle and clear all other bits.
#     */
#    /* ---------- Enter critical section ---------- */
#    SchM_Enter_Dem_EaEventStatus();
	.d2line		4408
	bl		SchM_Enter_Dem_EaEventStatus
#    *pEvStatusExt = DEM_UDS_SB_TNCSLC | DEM_UDS_SB_TNCTOC;
	.d2line		4409
	diab.li		r0,80
	stb		r0,0(r31)		# pEvStatusExt=r31
#    SchM_Exit_Dem_EaEventStatus();
	.d2line		4410
	bl		SchM_Exit_Dem_EaEventStatus
#    /* ---------- Exit critical section ----------- */
# 
#    /* Set global flag to indicate that the Uds status has changed */
#    UdsStatusModified = TRUE;
	.d2line		4414
	diab.li		r3,1		# EventId=r3
.Llo833:
	lis		r4,UdsStatusModified@ha
	e_add16i		r4,r4,UdsStatusModified@l
	stb		r3,0(r4)		# EventId=r3
# }
	.d2line		4415
	.d2epilogue_begin
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
.Llo835:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo834:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3285:
	.type		ClearEventStatus,@function
	.size		ClearEventStatus,.-ClearEventStatus
# Number of nodes = 20

# Allocations for ClearEventStatus
#	?a4		EventId
#	?a5		pEvStatusExt
# static FUNC(void, DEM_CODE) ClearSi(Dem_EventIdType evId)
	.align		1
	.section	.text_vle
        .d2line         4417,29
#$$ld
.L3292:

#$$bf	ClearSi,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
ClearSi:
.Llo836:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# evId=r31 evId=r3
	.d2prologue_end
# {
#    Dem_ClrSiFdcThresholdReached(evId);
	.d2line		4419
.Llo837:
	rlwinm		r3,r3,0,16,31		# evId=r3 evId=r3
.Llo838:
	bl		Dem_ClrSiFdcThresholdReached
#    Dem_ClrSiFdcThresholdReachedTOC(evId);
	.d2line		4420
	rlwinm		r3,r31,0,16,31		# evId=r3 evId=r31
	bl		Dem_ClrSiFdcThresholdReachedTOC
# }
	.d2line		4421
	.d2epilogue_begin
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
.Llo839:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3293:
	.type		ClearSi,@function
	.size		ClearSi,.-ClearSi
# Number of nodes = 10

# Allocations for ClearSi
#	?a4		evId
# static FUNC(uint8, DEM_CODE) CheckOrigin(uint16 intDtc, Dem_DTCOriginType dtcOrigin)
	.align		1
	.section	.text_vle
        .d2line         4447,30
#$$ld
.L3298:

#$$bf	CheckOrigin,interprocedural,rasave,nostackparams

# Regs written: r0,r1,r3,r4,r5,cr0,lr
	.d2_cfa_start __cie
CheckOrigin:
.Llo840:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
.Llo850:
	stw		r0,20(r1)		# internalOrigin=r0
	.d2_cfa_offset    108,-1
	mr		r5,r3		# intDtc=r5 intDtc=r3
	mr		r3,r4		# dtcOrigin=r3 dtcOrigin=r4
	.d2prologue_end
# {
#    uint8 retVal;
#    uint8 eventDest;
#    CONST(uint8, AUTOMATIC) internalOrigin = GetInternalDTCOriginIndex(dtcOrigin);
	.d2line		4451
.Llo841:
	mr		r3,r3		# dtcOrigin=r3 dtcOrigin=r3
	bl		GetInternalDTCOriginIndex
.Llo851:
	mr		r0,r3		# internalOrigin=r0 internalOrigin=r3
# 
#    eventDest = GetDtcMemDest(intDtc);
	.d2line		4453
.Llo852:
	lis		r4,Dem_pPbCfg@ha
.Llo844:
	lwz		r3,Dem_pPbCfg@l(r4)
.Llo853:
	lwz		r3,20(r3)
.Llo854:
	lwz		r4,Dem_pPbCfg@l(r4)
	lwz		r4,92(r4)
.Llo842:
	rlwinm		r5,r5,0,16,31		# intDtc=r5 intDtc=r5
.Llo843:
	lbzx		r4,r4,r5
	lbzx		r4,r3,r4
.Llo849:
	mr		r4,r4		# eventDest=r4 eventDest=r4
# 
#    if ((DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX == internalOrigin) || Dem_IsClr(eventDest, Dem_OriginMasks[internalOrigin]))
	.d2line		4455
	rlwinm		r3,r0,0,24,31		# internalOrigin=r0
	cmpi		0,0,r3,255
	bc		1,2,.L558	# eq
.Llo855:
	rlwinm		r4,r4,0,24,31		# eventDest=r4 eventDest=r4
	lis		r3,Dem_OriginMasks@ha
	e_add16i		r3,r3,Dem_OriginMasks@l
.Llo856:
	rlwinm		r0,r0,0,24,31		# internalOrigin=r0 internalOrigin=r0
	lbzx		r0,r3,r0		# internalOrigin=r0
	and.		r0,r0,r4		# internalOrigin=r0 internalOrigin=r0 eventDest=r4
.Llo857:
	bc		0,2,.L556	# ne
.L558:
#    {
#       /* Invalid DTCOrigin */
#       retVal = DEM_WRONG_DTC;
	.d2line		4458
.Llo858:
	diab.li		r3,1		# retVal=r3
.Llo845:
	b		.L557
.L556:
#    }
#    else
#    {
#       retVal = DEM_OK;
	.d2line		4462
.Llo846:
	diab.li		r3,0		# retVal=r3
.L557:
#    }
# 
#    return retVal;
	.d2line		4465
.Llo847:
	rlwinm		r3,r3,0,24,31		# retVal=r3 retVal=r3
# }
	.d2line		4466
	.d2epilogue_begin
.Llo848:
	lwz		r0,20(r1)		# internalOrigin=r0
	mtspr		lr,r0		# internalOrigin=lr
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3299:
	.type		CheckOrigin,@function
	.size		CheckOrigin,.-CheckOrigin
# Number of nodes = 49

# Allocations for CheckOrigin
#	?a4		intDtc
#	?a5		dtcOrigin
#	?a6		retVal
#	?a7		eventDest
#	?a8		internalOrigin
# static FUNC(Dem_ReturnClearDTCType, DEM_CODE) ClearInternalDtc(uint16 intDtc, Dem_DTCOriginType DTCOrigin)
	.align		1
	.section	.text_vle
        .d2line         4468,47
#$$ld
.L3311:

#$$bf	ClearInternalDtc,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
ClearInternalDtc:
.Llo859:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r28,r3		# intDtc=r28 intDtc=r3
	mr		r6,r4		# DTCOrigin=r6 DTCOrigin=r4
	.d2prologue_end
# {
#    Dem_ReturnClearDTCType retVal = (Dem_ReturnClearDTCType)CheckOrigin(intDtc, DTCOrigin);
	.d2line		4470
	mr		r3,r28		# intDtc=r3 intDtc=r28
.Llo860:
	mr		r4,r6		# DTCOrigin=r4 DTCOrigin=r6
.Llo863:
	bl		CheckOrigin
.Llo865:
	mr		r31,r3		# retVal=r31 retVal=r3
# 
#    if (DEM_CLEAR_OK == retVal)
	.d2line		4472
	rlwinm		r3,r3,0,24,31		# retVal=r3 retVal=r3
	se_cmpi		r3,0		# retVal=r3
	bc		0,2,.L563	# ne
	.section	.text_vle
.L3319:
#    {
#       Dem_NvEvMemEntryPtrType pEvMemEntry;
#       uint8 originIndex = GetInternalDTCOriginIndex(DTCOrigin);
	.d2line		4475
.Llo861:
	mr		r3,r6		# DTCOrigin=r3 DTCOrigin=r6
.Llo866:
	bl		GetInternalDTCOriginIndex
.Llo868:
	mr		r30,r3		# originIndex=r30 originIndex=r3
#       uint8 eventEntryIndex = GetExistingEventMemoryEntry(intDtc, originIndex, &pEvMemEntry);
	.d2line		4476
.Llo869:
	diab.addi		r5,r1,8
.Llo870:
	mr		r3,r28		# intDtc=r3 intDtc=r28
	mr		r4,r30		# originIndex=r4 originIndex=r30
	bl		GetExistingEventMemoryEntry
.Llo864:
	mr		r29,r3		# eventEntryIndex=r29 eventEntryIndex=r3
# 
#       if (Dem_ClearIntDtcEventData(intDtc, pEvMemEntry))
	.d2line		4478
	lwz		r4,8(r1)		# retVal=r4
	rlwinm		r3,r28,0,16,31		# retVal=r3 intDtc=r28
.Llo872:
	bl		Dem_ClearIntDtcEventData
	e_andi.		r3,r3,255		# retVal=r3 retVal=r3
	bc		1,2,.L564	# eq
#       {
#          /* Clear of all of the events connected to the DTC was allowed by callback */
#          ClearEntry(pEvMemEntry, eventEntryIndex, originIndex);
	.d2line		4481
.Llo862:
	lwz		r3,8(r1)		# retVal=r3
	mr		r4,r29		# eventEntryIndex=r4 eventEntryIndex=r29
	mr		r5,r30		# originIndex=r5 originIndex=r30
	bl		ClearEntry
	b		.L563
.L564:
#       }
#       else
#       {
#          /* Clear of at least one of the events connected to the DTC was not allowed by callback */
# #if (DEM_EVENT_COMBINATION_ALT == DEM_EVCOMB_ONSTORAGE)
#          /* Update uds_status and si in this case to account for the actually cleared events part of this internal DTC. */
#          if (eventEntryIndex != DEM_EV_MEM_ENTRY_INVALID)
#          {
#             pEvMemEntry->uds_status = Dem_GetUdsStatusByIntDtc(intDtc);
#             pEvMemEntry->si = Dem_GetSiStatusByIntDtc(intDtc);
#          }
# #endif /* DEM_EVENT_COMBINATION_ALT == DEM_EVCOMB_ONSTORAGE */
#          retVal = DEM_CLEAR_FAILED;
	.d2line		4494
	diab.li		r31,3		# retVal=r31
	.section	.text_vle
.L3320:
.L563:
#       }
#    }
# 
#    return retVal;
	.d2line		4498
.Llo871:
	rlwinm		r3,r31,0,24,31		# retVal=r3 retVal=r31
# }
	.d2line		4499
	.d2epilogue_begin
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
.Llo867:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3312:
	.type		ClearInternalDtc,@function
	.size		ClearInternalDtc,.-ClearInternalDtc
# Number of nodes = 60

# Allocations for ClearInternalDtc
#	?a4		intDtc
#	?a5		DTCOrigin
#	?a6		retVal
#	SP,8		pEvMemEntry
#	?a7		originIndex
#	?a8		eventEntryIndex
# static FUNC(uint16, DEM_CODE) ClearInternalDtcGroup(uint8 intDtcGroup, Dem_DTCOriginType DTCOrigin,
	.align		1
	.section	.text_vle
        .d2line         4501,31
#$$ld
.L3330:

#$$bf	ClearInternalDtcGroup,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
ClearInternalDtcGroup:
.Llo873:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	26,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# intDtcGroup=r31 intDtcGroup=r3
	mr		r30,r4		# DTCOrigin=r30 DTCOrigin=r4
	mr		r29,r5		# DTCFormat=r29 DTCFormat=r5
	mr		r6,r6		# nextToClear=r6 nextToClear=r6
	.d2prologue_end
#                                                     Dem_DTCFormatType DTCFormat, uint16 nextToClear)
# {
#    uint16 i;
#    uint32 fDtc;
#    uint16 numCleared = 0;
	.d2line		4506
.Llo879:
	diab.li		r27,0		# numCleared=r27
#    uint16 retVal;
# 
#    for (i = nextToClear; (i < GetNumDTCs()) && (numCleared < Dem_LCfg.max_cleared_per_scheduling); i++)
	.d2line		4509
.Llo892:
	mr		r28,r6		# i=r28 i=r6
.L569:
.Llo874:
	rlwinm		r0,r28,0,16,31		# fDtc=r0 i=r28
.Llo875:
	lis		r3,Dem_pPbCfg@ha		# i=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# i=r3 i=r3
	lhz		r3,152(r3)		# i=r3 i=r3
	se_cmp		r0,r3		# fDtc=r0 i=r3
	bc		0,0,.L571	# ge
.Llo880:
	rlwinm		r0,r27,0,16,31		# fDtc=r0 numCleared=r27
.Llo881:
	lis		r3,(Dem_LCfg+148)@ha		# i=r3
	lhz		r3,(Dem_LCfg+148)@l(r3)		# i=r3 i=r3
	se_cmp		r0,r3		# fDtc=r0 i=r3
	bc		0,0,.L571	# ge
#    {
#       if (DEM_DTC_FORMAT_UDS == DTCFormat)
	.d2line		4511
.Llo882:
	rlwinm		r5,r29,0,24,31		# DTCFormat=r29
	se_cmpi		r5,11
	bc		0,2,.L572	# ne
#       {
#          fDtc = GetUdsDtc(i);
	.d2line		4513
	lis		r3,Dem_pPbCfg@ha		# i=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# i=r3 i=r3
	lwz		r3,76(r3)		# i=r3 i=r3
	rlwinm		r0,r28,2,14,29		# fDtc=r0 i=r28
	lwzx		r4,r3,r0		# fDtc=r4 i=r3
.Llo883:
	mr		r4,r4		# fDtc=r4 fDtc=r4
	b		.L573
.L572:
#       }
#       else
#       {
#          fDtc = (uint32)GetObdDtc(i);
	.d2line		4517
.Llo884:
	lis		r3,Dem_pPbCfg@ha		# i=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# i=r3 i=r3
	lwz		r3,72(r3)		# i=r3 i=r3
	rlwinm		r0,r28,1,15,30		# fDtc=r0 i=r28
.Llo885:
	lhzx		r0,r3,r0		# fDtc=r0 i=r3
	.d2line		4518
	mr.		r0,r0		# fDtc=?a11 fDtc=?a17
#          if (0 == fDtc)
#          {  /* To prevent non-emission related DTC to be cleared by OBD-service 04. */
#             fDtc = 0xffffffU;
	.d2line		4520
	diab.li		r4,16777215		# fDtc=r4
	isel		r4,r4,r0,2		# fDtc=r4 fDtc=r4 fDtc=r0
.L573:
#          }
#       }
# 
#       if ((fDtc >= Dem_LCfg.p_internal_dtc_groups[intDtcGroup].start_dtc_value) &&
	.d2line		4524
.Llo886:
	rlwinm		r0,r31,0,24,31		# fDtc=r0 intDtcGroup=r31
.Llo887:
	lis		r3,(Dem_LCfg+168)@ha		# i=r3
	lwz		r3,(Dem_LCfg+168)@l(r3)		# i=r3 i=r3
	rlwinm		r5,r0,4,0,27		# fDtc=r0
	se_slwi		r0,2		# fDtc=r0 fDtc=r0
	subf		r0,r0,r5		# fDtc=r0 fDtc=r0
	se_add		r3,r0		# i=r3 i=r3 fDtc=r0
	lwz		r0,4(r3)		# fDtc=r0 i=r3
	se_cmpl		r0,r4		# fDtc=r0 fDtc=r4
	bc		1,1,.L575	# gt
	rlwinm		r0,r31,0,24,31		# fDtc=r0 intDtcGroup=r31
	lis		r3,(Dem_LCfg+168)@ha		# i=r3
	lwz		r3,(Dem_LCfg+168)@l(r3)		# i=r3 i=r3
	rlwinm		r5,r0,4,0,27		# fDtc=r0
	se_slwi		r0,2		# fDtc=r0 fDtc=r0
	subf		r0,r0,r5		# fDtc=r0 fDtc=r0
	se_add		r3,r0		# i=r3 i=r3 fDtc=r0
	lwz		r0,8(r3)		# fDtc=r0 i=r3
	se_cmpl		r0,r4		# fDtc=r0 fDtc=r4
	bc		0,1,.L575	# le
#           ((fDtc < Dem_LCfg.p_internal_dtc_groups[intDtcGroup].end_dtc_value)))
#       {
#          /*
#           * MISRA-C:2004 RULE 16.10 VIOLATION:
#           * If a function returns error information, then that error information shall be tested.
#           * The return value can be ignored for the clear group as it is only relevant for the clear single event case.
#           */
#          (void)ClearInternalDtc(i, DTCOrigin);
	.d2line		4532
.Llo888:
	mr		r3,r28		# i=r3 i=r28
	mr		r4,r30		# DTCOrigin=r4 DTCOrigin=r30
	bl		ClearInternalDtc
#          numCleared++;
	.d2line		4533
	diab.addi		r0,r27,1		# fDtc=r0 numCleared=r27
	se_addi		r27,1		# numCleared=r27 numCleared=r27
.L575:
#       }
#    }
	.d2line		4535
.Llo889:
	diab.addi		r0,r28,1		# fDtc=r0 i=r28
	se_addi		r28,1		# i=r28 i=r28
	b		.L569
.L571:
# 
#    if (i == GetNumDTCs())
	.d2line		4537
.Llo890:
	rlwinm		r0,r28,0,16,31		# fDtc=r0 i=r28
.Llo891:
	lis		r3,Dem_pPbCfg@ha		# retVal=r3
.Llo893:
	lwz		r3,Dem_pPbCfg@l(r3)		# retVal=r3 retVal=r3
	lhz		r3,152(r3)		# retVal=r3 retVal=r3
	se_cmp		r0,r3		# fDtc=r0 retVal=r3
#    {
#       /* We have reached the end of the list. Mark clear as finished by setting return value to 0xffff. */
#       retVal = DEM_INT_DTC_INVALID;
	.d2line		4540
	diab.li		r3,65535		# retVal=r3
	isel		r3,r3,r26,2		# retVal=r3 retVal=r3 retVal=r26
.L576:
#    }
#    else
#    {
#       /*
#        * We have cleared the maximum number of DTCs for this execution.
#        * Store the internal DTC to start with next execution.
#        */
#       retVal = i;
	.d2line		4548
.Llo876:
	isel		r3,r3,r28,2		# retVal=r3 retVal=r3 i=r28
.L577:
#    }
# 
#    return retVal;
	.d2line		4551
.Llo877:
	rlwinm		r3,r3,0,16,31		# retVal=r3 retVal=r3
# }
	.d2line		4552
	.d2epilogue_begin
.Llo894:
	lmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	2,10
	lwz		r0,52(r1)		# fDtc=r0
	mtspr		lr,r0		# fDtc=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo878:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3331:
	.type		ClearInternalDtcGroup,@function
	.size		ClearInternalDtcGroup,.-ClearInternalDtcGroup
# Number of nodes = 119

# Allocations for ClearInternalDtcGroup
#	?a4		intDtcGroup
#	?a5		DTCOrigin
#	?a6		DTCFormat
#	?a7		nextToClear
#	?a8		$$22
#	?a9		$$21
#	?a10		i
#	?a11		fDtc
#	?a12		numCleared
#	?a13		retVal
# FUNC(boolean, DEM_CODE) Dem_ClearEventAllowed(Dem_EventIdType eventId)
	.align		2
	.section	.text_vle
        .d2line         7534,25
#$$ld
.L3348:

#$$bf	Dem_ClearEventAllowed,interprocedural,rasave,nostackparams
	.globl		Dem_ClearEventAllowed
	.d2_cfa_start __cie
Dem_ClearEventAllowed:
.Llo895:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)		# eventId=r0
	.d2_cfa_offset    108,-1
	mr		r0,r3		# eventId=r0 eventId=r3
	.d2prologue_end
# {
#    boolean allowedToClearEvent;
# 
#    /* Check for ClearEventAllowed function */
#    if (NULL_PTR != Dem_LCfg.p_events[eventId - 1U].pClearEventAllowed)
	.d2line		7539
.Llo896:
	lis		r3,(Dem_LCfg+16)@ha
.Llo897:
	lwz		r4,(Dem_LCfg+16)@l(r3)
	rlwinm		r3,r0,0,16,31		# eventId=r0
	e_mulli		r3,r3,20
	se_add		r3,r4
	lwz		r3,-12(r3)
	se_cmpi		r3,0
	bc		1,2,.L1230	# eq
#    {
#       /* [SWS_Dem_00515], [SWS_Dem_00563] */
#       if (E_OK != Dem_LCfg.p_events[eventId - 1U].pClearEventAllowed(&allowedToClearEvent))
	.d2line		7542
.Llo898:
	lis		r3,(Dem_LCfg+16)@ha
	lwz		r3,(Dem_LCfg+16)@l(r3)
.Llo899:
	rlwinm		r0,r0,0,16,31		# eventId=r0 eventId=r0
	e_mulli		r0,r0,20		# eventId=r0 eventId=r0
	se_add		r3,r0		# eventId=r0
	lwz		r0,-12(r3)		# eventId=r0
.Llo900:
	mtspr		ctr,r0		# eventId=ctr
	diab.addi		r3,r1,8
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 1 u
	bcctrl		20,0
	e_andi.		r3,r3,255
	bc		1,2,.L1232	# eq
#       {
#          /* [SWS_Dem_00516] */
#          allowedToClearEvent = TRUE;
	.d2line		7545
	diab.li		r0,1		# eventId=r0
.Llo901:
	stb		r0,8(r1)		# eventId=r0
	b		.L1232
.L1230:
#       }
#    }
#    else
#    {
#       /* No ClearEventAllowed function, allow clearing by default */
#       allowedToClearEvent = TRUE;
	.d2line		7551
.Llo902:
	diab.li		r0,1		# eventId=r0
.Llo903:
	stb		r0,8(r1)		# eventId=r0
.L1232:
#    }
# 
#    return allowedToClearEvent;
	.d2line		7554
.Llo904:
	lbz		r3,8(r1)
# }
	.d2line		7555
	.d2epilogue_begin
	lwz		r0,20(r1)		# eventId=r0
	mtspr		lr,r0		# eventId=lr
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3349:
	.type		Dem_ClearEventAllowed,@function
	.size		Dem_ClearEventAllowed,.-Dem_ClearEventAllowed
# Number of nodes = 45

# Allocations for Dem_ClearEventAllowed
#	?a4		eventId
#	SP,8		allowedToClearEvent
# static FUNC(void, DEM_CODE) ClearEventStateInBuffer(Dem_EventIdType eventId)
	.align		1
	.section	.text_vle
        .d2line         5884,29
#$$ld
.L3355:

#$$bf	ClearEventStateInBuffer,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
ClearEventStateInBuffer:
.Llo905:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# eventId=r31 eventId=r3
	.d2prologue_end
# {
#    uint16 evStateArrayIndex = (eventId - 1U) / 4U;
	.d2line		5886
	rlwinm		r3,r3,0,16,31		# eventId=r3 eventId=r3
	diab.addi		r3,r3,-1		# eventId=r3 eventId=r3
	rlwinm		r30,r3,30,2,31		# evStateArrayIndex=r30 eventId=r3
.Llo909:
	mr		r30,r30		# evStateArrayIndex=r30 evStateArrayIndex=r30
#    uint8 shift = (uint8)(((eventId - 1U) % 4U) * 2U);
	.d2line		5887
	rlwinm		r3,r3,1,29,30		# eventId=r3 eventId=r3
.Llo906:
	mr		r29,r3		# shift=r29 shift=r3
# 
#    /* ---------- Enter critical section ---------- */
#    SchM_Enter_Dem_EaEventStateBuffer();
	.d2line		5890
	bl		SchM_Enter_Dem_EaEventStateBuffer
#    Dem_ClrBits(Dem_LCfg.p_event_state_buffer[evStateArrayIndex], (uint8)~(uint8)(3U << shift));
	.d2line		5891
	lis		r3,Dem_LCfg@ha		# eventId=r3
.Llo907:
	lwz		r3,Dem_LCfg@l(r3)		# eventId=r3 eventId=r3
	rlwinm		r30,r30,0,16,31		# evStateArrayIndex=r30 evStateArrayIndex=r30
.Llo910:
	lbzx		r0,r3,r30		# eventId=r3
	diab.li		r4,3
	slw		r4,r4,r29		# shift=r29
	andc		r0,r0,r4
	stbx		r0,r3,r30		# eventId=r3
#    Dem_BitArrayClearBit(Dem_LCfg.p_event_state_update, eventId - 1U);
	.d2line		5892
	lis		r3,(Dem_LCfg+4)@ha		# eventId=r3
	lwz		r3,(Dem_LCfg+4)@l(r3)		# eventId=r3 eventId=r3
	rlwinm		r5,r31,0,16,31		# eventId=r31
	diab.addi		r5,r5,-1
	se_srwi		r5,3
	lbzx		r0,r3,r5		# eventId=r3
	diab.li		r4,1
	diab.addi		r31,r31,255		# eventId=r31 eventId=r31
	rlwinm		r31,r31,0,29,31		# eventId=r31 eventId=r31
	slw		r4,r4,r31		# eventId=r31
	xori		r4,r4,255
	and		r0,r0,r4
	stbx		r0,r3,r5		# eventId=r3
#    SchM_Exit_Dem_EaEventStateBuffer();
	.d2line		5893
	bl		SchM_Exit_Dem_EaEventStateBuffer
#    /* ---------- Exit critical section ----------- */
# }
	.d2line		5895
	.d2epilogue_begin
.Llo908:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
.Llo911:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3356:
	.type		ClearEventStateInBuffer,@function
	.size		ClearEventStateInBuffer,.-ClearEventStateInBuffer
# Number of nodes = 60

# Allocations for ClearEventStateInBuffer
#	?a4		eventId
#	?a5		$$12
#	?a6		$$11
#	?a7		evStateArrayIndex
#	?a8		shift
# FUNC(void, DEM_CODE) Dem_ClearEventData(Dem_EventIdType eventId)
	.align		2
	.section	.text_vle
        .d2line         7557,22
#$$ld
.L3365:

#$$bf	Dem_ClearEventData,interprocedural,rasave,nostackparams
	.globl		Dem_ClearEventData
	.d2_cfa_start __cie
Dem_ClearEventData:
.Llo912:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# eventId=r31 eventId=r3
	.d2prologue_end
# {
#    CONST(Dem_UdsStatusByteType, AUTOMATIC) eventUdsStatusOld = Dem_GetUdsStatus(eventId);
	.d2line		7559
.Llo913:
	lis		r3,(Dem_NvUdsStatus-1)@ha
.Llo914:
	e_add16i		r3,r3,(Dem_NvUdsStatus-1)@l
	rlwinm		r0,r31,0,16,31		# eventId=r31
	lbzx		r30,r3,r0
.Llo918:
	mr		r30,r30		# eventUdsStatusOld=r30 eventUdsStatusOld=r30
#    CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(eventId);
	.d2line		7560
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,128(r3)
	rlwinm		r0,r31,1,15,30		# eventId=r31
	se_add		r3,r0
	lhz		r28,-2(r3)		# intDtc=r28
	mr		r28,r28		# intDtc=r28 intDtc=r28
#    CONST(Dem_UdsStatusByteType, AUTOMATIC) dtcUdsStatusOld = Dem_GetUdsStatusForValidDtc(intDtc);
	.d2line		7561
	rlwinm		r3,r28,0,16,31		# intDtc=r28
	cmpli		0,0,r3,65535
	bc		0,2,.L1237	# ne
	diab.li		r29,0		# dtcUdsStatusOld=r29
.Llo921:
	b		.L1238
.L1237:
.Llo922:
	rlwinm		r3,r28,0,16,31		# intDtc=r28
	bl		Dem_GetUdsStatusByIntDtc
.Llo923:
	mr		r29,r3		# dtcUdsStatusOld=r29 dtcUdsStatusOld=r3
.L1238:
# 
#    /* Clear pre-debouncing counter */
#    Dem_SetDebouncingCounter(eventId, DEM_DB_COUNTER_CLEAR);
	.d2line		7564
.Llo924:
	mr		r3,r31		# eventId=r3 eventId=r31
.Llo925:
	diab.li		r4,2		# dtcUdsStatusOld=r4
	bl		Dem_SetDebouncingCounter
#    /* Clear event state buffer and update bit */
#    ClearEventStateInBuffer(eventId);
	.d2line		7566
	mr		r3,r31		# eventId=r3 eventId=r31
	bl		ClearEventStateInBuffer
#    /* Clear data of type Dem_UdsStatusByteType */
#    ClearEventStatus(eventId);
	.d2line		7568
	mr		r3,r31		# eventId=r3 eventId=r31
	bl		ClearEventStatus
#    /* Clear event specific SI-bits */
#    ClearSi(eventId);
	.d2line		7570
	mr		r3,r31		# eventId=r3 eventId=r31
	bl		ClearSi
#    /* [SWS_Dem_00794] Clear event specific counter MaxFdcSinceLastClear */
#    Dem_SetMaxFdcSinceLastClear(eventId, 0);
	.d2line		7572
	rlwinm		r3,r31,0,16,31		# eventId=r3 eventId=r31
	diab.li		r4,0		# dtcUdsStatusOld=r4
	bl		Dem_SetMaxFdcSinceLastClear
#    /* Callbacks for Event/DTC status changed */
#    Dem_TriggerOnEventStatus(eventId, eventUdsStatusOld);
	.d2line		7574
	mr		r3,r31		# eventId=r3 eventId=r31
	mr		r4,r30		# eventUdsStatusOld=r4 eventUdsStatusOld=r30
	bl		Dem_TriggerOnEventStatus
#    Dem_TriggerOnDTCStatus(intDtc, dtcUdsStatusOld, TRUE);
	.d2line		7575
	mr		r3,r28		# intDtc=r3 intDtc=r28
	mr		r4,r29		# dtcUdsStatusOld=r4 dtcUdsStatusOld=r29
	diab.li		r5,1
	bl		Dem_TriggerOnDTCStatus
# 
#    /* Call InitMonitor-function */
#    if (Dem_LCfg.p_events[eventId - 1U].p_init_m_for_e != NULL_PTR)
	.d2line		7578
	lis		r3,(Dem_LCfg+16)@ha		# intDtc=r3
	lwz		r3,(Dem_LCfg+16)@l(r3)		# intDtc=r3 intDtc=r3
	rlwinm		r0,r31,0,16,31		# eventId=r31
	e_mulli		r0,r0,20
	se_add		r3,r0		# intDtc=r3 intDtc=r3
	lwz		r0,-20(r3)		# intDtc=r3
	se_cmpi		r0,0
	bc		1,2,.L1235	# eq
#    {
#       /*
#        * MISRA-C:2004 RULE 16.10 VIOLATION:
#        * If a function returns error information, then that error information shall be tested.
#        * SWS_Dem_00003: The Dem module does not evaluate the return value (e.g. if other than E_OK) of this callback function.
#        */
#       (void)Dem_LCfg.p_events[eventId - 1U].p_init_m_for_e(DEM_INIT_MONITOR_CLEAR);
	.d2line		7585
.Llo915:
	lis		r3,(Dem_LCfg+16)@ha		# intDtc=r3
.Llo919:
	lwz		r3,(Dem_LCfg+16)@l(r3)		# intDtc=r3 intDtc=r3
.Llo916:
	rlwinm		r31,r31,0,16,31		# eventId=r31 eventId=r31
	e_mulli		r31,r31,20		# eventId=r31 eventId=r31
	se_add		r3,r31		# intDtc=r3 intDtc=r3 eventId=r31
	lwz		r0,-20(r3)		# intDtc=r3
	mtspr		ctr,r0
	diab.li		r3,1		# intDtc=r3
.Llo920:
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 1 u
	bcctrl		20,0
.L1235:
#    }
# }
	.d2line		7587
	.d2epilogue_begin
.Llo917:
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3366:
	.type		Dem_ClearEventData,@function
	.size		Dem_ClearEventData,.-Dem_ClearEventData
# Number of nodes = 118

# Allocations for Dem_ClearEventData
#	?a4		eventId
#	?a5		eventUdsStatusOld
#	?a6		intDtc
#	?a7		dtcUdsStatusOld
# static FUNC(uint16, DEM_CODE) ClearAllEvents(uint16 nextToClear)
	.align		1
	.section	.text_vle
        .d2line         4554,31
#$$ld
.L3377:

#$$bf	ClearAllEvents,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
ClearAllEvents:
.Llo926:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# nextToClear=r3 nextToClear=r3
	.d2prologue_end
# {
#    uint16 i;
#    uint16 intDtc;
#    uint16 numCleared = 0;
	.d2line		4558
.Llo927:
	diab.li		r30,0		# numCleared=r30
#    uint16 retVal;
# 
#    for (i = nextToClear; (i < Dem_LCfg.num_events) && (numCleared < Dem_LCfg.max_cleared_per_scheduling); i++)
	.d2line		4561
.Llo939:
	mr		r31,r3		# i=r31 i=r3
.L586:
.Llo928:
	rlwinm		r0,r31,0,16,31		# i=r31
.Llo929:
	lis		r3,(Dem_LCfg+136)@ha		# intDtc=r3
.Llo931:
	lhz		r3,(Dem_LCfg+136)@l(r3)		# intDtc=r3 intDtc=r3
	se_cmp		r0,r3		# intDtc=r3
	bc		0,0,.L588	# ge
.Llo932:
	rlwinm		r0,r30,0,16,31		# numCleared=r30
	lis		r3,(Dem_LCfg+148)@ha		# intDtc=r3
.Llo933:
	lhz		r3,(Dem_LCfg+148)@l(r3)		# intDtc=r3 intDtc=r3
	se_cmp		r0,r3		# intDtc=r3
	bc		0,0,.L588	# ge
#    {
#       intDtc = Dem_GetEventIntDtc(i + 1U);
	.d2line		4563
.Llo934:
	lis		r3,Dem_pPbCfg@ha		# intDtc=r3
.Llo935:
	lwz		r3,Dem_pPbCfg@l(r3)		# intDtc=r3 intDtc=r3
	lwz		r3,128(r3)		# intDtc=r3 intDtc=r3
	rlwinm		r0,r31,1,15,30		# i=r31
	lhzx		r3,r3,r0		# intDtc=r3 intDtc=r3
	mr		r3,r3		# intDtc=r3 intDtc=r3
#       if (DEM_INT_DTC_INVALID != intDtc)
	.d2line		4564
	rlwinm		r0,r3,0,16,31		# intDtc=r3
	cmpli		0,0,r0,65535
	bc		1,2,.L589	# eq
#       {
#          /*
#           * MISRA-C:2004 RULE 16.10 VIOLATION:
#           * If a function returns error information, then that error information shall be tested.
#           * The return value can be ignored for the clear all case as it is only relevant for the clear single event case.
#           */
#          /* This event is connected to a DTC and could occupy an event memory entry. */
#          (void)ClearInternalDtc(intDtc, DEM_DTC_ORIGIN_PRIMARY_MEMORY);
	.d2line		4572
	mr		r3,r3		# intDtc=r3 intDtc=r3
.Llo936:
	diab.li		r4,1
	bl		ClearInternalDtc
	b		.L590
.L589:
#       }
#       else
#       {
#          /* This is an internal event, i.e. without DTC and event memory entry. */
#          if (TRUE == Dem_ClearEventAllowed(i + 1U))
	.d2line		4577
	diab.addi		r3,r31,1		# intDtc=r3 i=r31
	bl		Dem_ClearEventAllowed
.Llo937:
	rlwinm		r3,r3,0,24,31		# intDtc=r3 intDtc=r3
	se_cmpi		r3,1		# intDtc=r3
	bc		0,2,.L590	# ne
#          {
#             /* Clear event data */
#             Dem_ClearEventData(i + 1U);
	.d2line		4580
.Llo938:
	diab.addi		r3,r31,1		# intDtc=r3 i=r31
	bl		Dem_ClearEventData
.L590:
#          }
#       }
#       numCleared++;
	.d2line		4583
	diab.addi		r0,r30,1		# numCleared=r30
	se_addi		r30,1		# numCleared=r30 numCleared=r30
#    }
	.d2line		4584
	diab.addi		r0,r31,1		# i=r31
	se_addi		r31,1		# i=r31 i=r31
	b		.L586
.L588:
# 
#    if (i == Dem_LCfg.num_events)
	.d2line		4586
	rlwinm		r0,r31,0,16,31		# i=r31
	lis		r3,(Dem_LCfg+136)@ha		# retVal=r3
.Llo941:
	lhz		r3,(Dem_LCfg+136)@l(r3)		# retVal=r3 retVal=r3
	se_cmp		r0,r3		# retVal=r3
#    {
#       /* We have reached the end of the list. Mark clear as finished by setting return value to 0xffff. */
#       retVal = 0xffffU;
	.d2line		4589
	diab.li		r3,65535		# retVal=r3
	isel		r3,r3,r29,2		# retVal=r3 retVal=r3 retVal=r29
.L592:
#    }
#    else
#    {
#       /*
#        * We have cleared the maximum number of events for this execution.
#        * Store the event to start with next execution.
#        */
#       retVal = i;
	.d2line		4597
.Llo940:
	isel		r3,r3,r31,2		# retVal=r3 retVal=r3 i=r31
.L593:
#    }
# 
#    return retVal;
	.d2line		4600
.Llo930:
	rlwinm		r3,r3,0,16,31		# retVal=r3 retVal=r3
# }
	.d2line		4601
	.d2epilogue_begin
.Llo942:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3378:
	.type		ClearAllEvents,@function
	.size		ClearAllEvents,.-ClearAllEvents
# Number of nodes = 88

# Allocations for ClearAllEvents
#	?a4		nextToClear
#	?a5		i
#	?a6		intDtc
#	?a7		numCleared
#	?a8		retVal
# static FUNC(uint16, DEM_CODE) GetIntDtcByUds(uint32 dtc, boolean useCache)
	.align		1
	.section	.text_vle
        .d2line         4603,31
#$$ld
.L3391:

#$$bf	GetIntDtcByUds,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,r30,r31,cr0,lr
	.d2_cfa_start __cie
GetIntDtcByUds:
.Llo943:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	30,31,1,1
	stw		r0,36(r1)		# useCache=r0
	.d2_cfa_offset    108,-1
	mr		r3,r3		# dtc=r3 dtc=r3
	mr		r0,r4		# useCache=r0 useCache=r4
	.d2prologue_end
# {
#    boolean searchFinished = FALSE;
	.d2line		4605
.Llo947:
	diab.li		r7,0		# searchFinished=r7
#    uint16 retVal = DEM_INT_DTC_INVALID;
	.d2line		4606
.Llo948:
	diab.li		r4,65535		# retVal=r4
#    uint16 i;
#    uint16 nDTCs = GetNumDTCs();
	.d2line		4608
.Llo949:
	lis		r5,Dem_pPbCfg@ha
	lwz		r5,Dem_pPbCfg@l(r5)
	lhz		r30,152(r5)
.Llo954:
	mr		r30,r30		# nDTCs=r30 nDTCs=r30
# 
#    if ((TRUE == useCache) && (dtc == CacheUdsDTC.dtc_value))
	.d2line		4610
	rlwinm		r6,r0,0,24,31		# useCache=r0
	se_cmpi		r6,1
	bc		0,2,.L601	# ne
	lis		r5,CacheUdsDTC@ha
	lwz		r5,CacheUdsDTC@l(r5)
	se_cmpl		r5,r3		# dtc=r3
	bc		0,2,.L601	# ne
#    {
#       retVal = CacheUdsDTC.int_dtc_index;
	.d2line		4612
.Llo944:
	lis		r3,(CacheUdsDTC+4)@ha		# dtc=r3
.Llo945:
	lhz		r4,(CacheUdsDTC+4)@l(r3)		# retVal=r4 dtc=r3
	mr		r4,r4		# retVal=r4 retVal=r4
	b		.L602
.L601:
#    }
#    else
#    {
#       for (i = 0; (i < nDTCs) && (FALSE == searchFinished); i++)
	.d2line		4616
	diab.li		r5,0		# i=r5
.L603:
.Llo950:
	rlwinm		r31,r5,0,16,31		# i=r5
.Llo951:
	rlwinm		r6,r30,0,16,31		# nDTCs=r30
	se_cmp		r31,r6
	bc		0,0,.L602	# ge
	rlwinm		r6,r7,0,24,31		# searchFinished=r7
	se_cmpi		r6,0
	bc		0,2,.L602	# ne
#       {
#          if (dtc == GetUdsDtc(i))
	.d2line		4618
	lis		r6,Dem_pPbCfg@ha
	lwz		r6,Dem_pPbCfg@l(r6)
	lwz		r6,76(r6)
	rlwinm		r31,r5,2,14,29		# i=r5
	lwzx		r6,r6,r31
	se_cmpl		r6,r3		# dtc=r3
	bc		0,2,.L606	# ne
#          {
#             /* We have a match */
#             retVal = i;
	.d2line		4621
	mr		r4,r5		# retVal=r4 retVal=r5
#             searchFinished = TRUE;
	.d2line		4622
	diab.li		r7,1		# searchFinished=r7
# 
#             if (TRUE == useCache)
	.d2line		4624
	rlwinm		r6,r0,0,24,31		# useCache=r0
	se_cmpi		r6,1
	bc		0,2,.L606	# ne
#             {  /* Cache DTC */
#                CacheUdsDTC.dtc_value = dtc;
	.d2line		4626
	lis		r6,CacheUdsDTC@ha
	e_add16i		r6,r6,CacheUdsDTC@l
	stw		r3,0(r6)		# dtc=r3
#                CacheUdsDTC.int_dtc_index = i;
	.d2line		4627
	lis		r6,(CacheUdsDTC+4)@ha
	sth		r5,(CacheUdsDTC+4)@l(r6)		# i=r5
.L606:
#             }
#          }
#       }
	.d2line		4630
	diab.addi		r31,r5,1		# i=r5
	se_addi		r5,1		# i=r5 i=r5
	b		.L603
.L602:
#    }
# 
#    return retVal;
	.d2line		4633
.Llo946:
	rlwinm		r3,r4,0,16,31		# dtc=r3 retVal=r4
# }
	.d2line		4634
	.d2epilogue_begin
.Llo952:
	lmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# useCache=r0
	mtspr		lr,r0		# useCache=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo953:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3392:
	.type		GetIntDtcByUds,@function
	.size		GetIntDtcByUds,.-GetIntDtcByUds
# Number of nodes = 80

# Allocations for GetIntDtcByUds
#	?a4		dtc
#	?a5		useCache
#	?a6		searchFinished
#	?a7		retVal
#	?a8		i
#	?a9		nDTCs
# static FUNC(boolean, DEM_CODE) GetIntDtcByObd(uint32 dtc, P2VAR(uint16, AUTOMATIC, DEM_APPL_DATA) pIntDtc)
	.align		1
	.section	.text_vle
        .d2line         4636,32
#$$ld
.L3406:

#$$bf	GetIntDtcByObd,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,r30,r31,cr0,lr
	.d2_cfa_start __cie
GetIntDtcByObd:
.Llo955:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo957:
	stmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	30,31,1,1
	stw		r0,36(r1)		# searchFinished=r0
	.d2_cfa_offset    108,-1
	mr		r3,r3		# dtc=r3 dtc=r3
	mr		r4,r4		# pIntDtc=r4 pIntDtc=r4
	.d2prologue_end
# {
#    boolean searchFinished = FALSE;
	.d2line		4638
	diab.li		r0,0		# searchFinished=r0
#    boolean retVal = FALSE;
	.d2line		4639
	diab.li		r5,0
#    uint16 i;
#    uint16 nDTCs = GetNumDTCs();
	.d2line		4641
.Llo958:
	lis		r6,Dem_pPbCfg@ha
	lwz		r6,Dem_pPbCfg@l(r6)
	lhz		r30,152(r6)
.Llo961:
	mr		r30,r30		# nDTCs=r30 nDTCs=r30
# 
#    for (i = *pIntDtc; (i < nDTCs) && (FALSE == searchFinished); i++)
	.d2line		4643
	lhz		r6,0(r4)		# pIntDtc=r4
.Llo960:
	mr		r6,r6		# i=r6 i=r6
.L613:
	rlwinm		r31,r6,0,16,31		# i=r6
	rlwinm		r7,r30,0,16,31		# nDTCs=r30
	se_cmp		r31,r7
	bc		0,0,.L615	# ge
	rlwinm		r7,r0,0,24,31		# searchFinished=r0
	se_cmpi		r7,0
	bc		0,2,.L615	# ne
#    {
#       if (dtc == (uint32)GetObdDtc(i))
	.d2line		4645
	lis		r7,Dem_pPbCfg@ha
	lwz		r7,Dem_pPbCfg@l(r7)
	lwz		r7,72(r7)
	rlwinm		r31,r6,1,15,30		# i=r6
	lhzx		r7,r7,r31
	se_cmpl		r7,r3		# dtc=r3
	bc		0,2,.L616	# ne
#       {
#          /* We have a match */
#          retVal = TRUE;
	.d2line		4648
	diab.li		r5,1		# retVal=r5
#          *pIntDtc = i;
	.d2line		4649
	sth		r6,0(r4)		# pIntDtc=r4 i=r6
#          searchFinished = TRUE;
	.d2line		4650
	diab.li		r0,1		# searchFinished=r0
.L616:
#       }
#    }
	.d2line		4652
	diab.addi		r31,r6,1		# i=r6
	se_addi		r6,1		# i=r6 i=r6
	b		.L613
.L615:
# 
#    return retVal;
	.d2line		4654
.Llo956:
	rlwinm		r3,r5,0,24,31		# dtc=r3 retVal=r5
# }
	.d2line		4655
	.d2epilogue_begin
	lmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# searchFinished=r0
	mtspr		lr,r0		# searchFinished=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo959:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3407:
	.type		GetIntDtcByObd,@function
	.size		GetIntDtcByObd,.-GetIntDtcByObd
# Number of nodes = 53

# Allocations for GetIntDtcByObd
#	?a4		dtc
#	?a5		pIntDtc
#	?a6		searchFinished
#	?a7		retVal
#	?a8		i
#	?a9		nDTCs
# static FUNC(boolean, DEM_CODE) GetDTCSuppression(uint32 interDtc)
	.align		1
	.section	.text_vle
        .d2line         6553,32
#$$ld
.L3421:

#$$bf	GetDTCSuppression,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,cr0,lr
	.d2_cfa_start __cie
GetDTCSuppression:
.Llo962:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	mr		r0,r3		# interDtc=r0 interDtc=r3
	.d2prologue_end
# {
#    boolean retVal = FALSE;
	.d2line		6555
	diab.li		r3,0		# retVal=r3
# 
#    if (NULL_PTR != Dem_LCfg.p_dtc_suppressed)
	.d2line		6557
.Llo963:
	lis		r4,(Dem_LCfg+116)@ha
	lwz		r4,(Dem_LCfg+116)@l(r4)
	se_cmpi		r4,0
	bc		1,2,.L1018	# eq
#    {   
#       retVal = (Dem_BitArrayIsBitSet(Dem_LCfg.p_dtc_suppressed, interDtc)) ? TRUE : FALSE;
	.d2line		6559
.Llo964:
	lis		r3,(Dem_LCfg+116)@ha		# retVal=r3
.Llo968:
	lwz		r3,(Dem_LCfg+116)@l(r3)		# retVal=r3 retVal=r3
	rlwinm		r4,r0,29,3,31		# interDtc=r0
	lbzx		r3,r3,r4		# retVal=r3 retVal=r3
	diab.li		r4,1
	rlwinm		r0,r0,0,29,31		# interDtc=r0 interDtc=r0
	slw		r0,r4,r0		# interDtc=r0 interDtc=r0
	rlwinm		r0,r0,0,24,31		# interDtc=r0 interDtc=r0
	and.		r0,r0,r3		# interDtc=r0 interDtc=r0 retVal=r3
.Llo965:
	isel		r0,r3,r4,2		# interDtc=r0 retVal=r3
.L1019:
.Llo966:
	isel		r3,0,r0,2		# retVal=r3 interDtc=r0
.L1020:
.Llo967:
	mr		r3,r3		# retVal=r3 retVal=r3
.L1018:
#    }
# 
#    return retVal;
	.d2line		6562
	rlwinm		r3,r3,0,24,31		# retVal=r3 retVal=r3
# }
	.d2line		6563
	.d2epilogue_begin
.Llo969:
	lwz		r0,20(r1)		# interDtc=r0
	mtspr		lr,r0		# interDtc=lr
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3422:
	.type		GetDTCSuppression,@function
	.size		GetDTCSuppression,.-GetDTCSuppression
# Number of nodes = 43

# Allocations for GetDTCSuppression
#	?a4		interDtc
#	?a5		$$15
#	?a6		retVal
# static FUNC(boolean, DEM_CODE) DTCFilterMatch(uint16 intDtc, P2VAR(sint8, AUTOMATIC, DEM_APPL_DATA) dtcFdc)  
	.align		1
	.section	.text_vle
        .d2line         4693,32
#$$ld
.L3429:

#$$bf	DTCFilterMatch,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
DTCFilterMatch:
.Llo970:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# intDtc=r31 intDtc=r3
.Llo971:
	mr		r30,r4		# dtcFdc=r30 dtcFdc=r4
	.d2prologue_end
# {
#    CONST(Dem_UdsStatusByteType, AUTOMATIC) udsStatus = Dem_GetUdsStatusByIntDtc(intDtc); /* [SWS_Dem_01049] */
#    boolean matchStatus = TRUE;
	.d2line		4696
.Llo972:
	diab.li		r29,1		# matchStatus=r29
	.d2line		4695
.Llo982:
	rlwinm		r3,r3,0,16,31		# intDtc=r3 intDtc=r3
	bl		Dem_GetUdsStatusByIntDtc
.Llo976:
	mr		r28,r3		# udsStatus=r28 udsStatus=r3
#    sint8 fdc;
# 
# #if (STD_ON == DEM_OBD_SUPPORT)
#    if (DEM_DTC_FORMAT_OBD == DTCFilter.dtc_format)
#    {
#       /* Status mask 0x08 indicates an OBD service 0x03 request according to Dcm289 */
#       if ((DisableOBDServiceOutput(0x03U)) &&
#          (0x08U == DTCFilter.status_mask))
#       {
#          /* OBD service $03 output is disabled */
#          matchStatus = FALSE;
#       }
#       /* Status mask 0x04 indicates an OBD service 0x07 request according to Dcm412 */
#       else if ((DisableOBDServiceOutput(0x07U)) &&
#          (0x04U == DTCFilter.status_mask))
#       {
#          /* OBD service $07 output is disabled */
#          matchStatus = FALSE;
#       }
#       else
#       {
#          /* Do nothing */
#       }
#    }
# #endif /* STD_ON == DEM_OBD_SUPPORT */
#    
#    if(!Dem_IsDtcAvailable(intDtc))
	.d2line		4723
	rlwinm		r3,r31,0,16,31		# intDtc=r3 intDtc=r31
.Llo978:
	bl		Dem_IsDtcAvailable
	e_andi.		r3,r3,255		# intDtc=r3 intDtc=r3
#    {
#       /* DTC is disabled */
#       matchStatus = FALSE;
	.d2line		4726
	isel		r5,0,r29,2		# matchStatus=r5 matchStatus=r29
.L637:
#    }
# 
#    if(TRUE == GetDTCSuppression((uint32)intDtc))
	.d2line		4729
.Llo977:
	rlwinm		r3,r31,0,16,31		# intDtc=r3 intDtc=r31
.Llo983:
	bl		GetDTCSuppression
	rlwinm		r3,r3,0,24,31		# intDtc=r3 intDtc=r3
	se_cmpi		r3,1		# intDtc=r3
#    {
#       /* DTC is suppressed */
#       matchStatus = FALSE;
	.d2line		4732
	isel		r29,0,r5,2		# matchStatus=r29 matchStatus=r5
.L638:
#    }
# 
#    if ((DTCFilter.status_mask != 0) && (0U == (DTCFilter.status_mask & udsStatus)))
	.d2line		4735
.Llo984:
	lis		r3,(DTCFilter+1)@ha		# intDtc=r3
.Llo985:
	lbz		r0,(DTCFilter+1)@l(r3)		# intDtc=r3
	se_cmpi		r0,0
	bc		1,2,.L639	# eq
.Llo979:
	lis		r3,(DTCFilter+1)@ha		# intDtc=r3
	lbz		r0,(DTCFilter+1)@l(r3)		# intDtc=r3
.Llo980:
	rlwinm		r28,r28,0,24,31		# udsStatus=r28 udsStatus=r28
	and.		r0,r0,r28		# udsStatus=r28
#    {
#       /* The status does not match the filter and all DTCs are not selected */
#       matchStatus = FALSE;
	.d2line		4738
	isel		r29,0,r29,2		# matchStatus=r29 matchStatus=r29
.L639:
#    }
# 
#    if ((DEM_DTC_KIND_EMISSION_REL_DTCS == DTCFilter.dtc_kind) && (!Dem_IsObdDtc(intDtc)))
	.d2line		4741
	lis		r3,(DTCFilter+2)@ha		# intDtc=r3
	lbz		r0,(DTCFilter+2)@l(r3)		# intDtc=r3
	se_cmpi		r0,2
	bc		0,2,.L640	# ne
.Llo981:
	lis		r3,Dem_pPbCfg@ha		# intDtc=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# intDtc=r3 intDtc=r3
	lwz		r3,72(r3)		# intDtc=r3 intDtc=r3
	rlwinm		r4,r31,1,15,30		# intDtc=r31
	lhzx		r0,r3,r4		# intDtc=r3
	se_cmpi		r0,0
#    {
#       /* The DTC kind does not match. */
#       matchStatus = FALSE;
	.d2line		4744
	isel		r29,0,r29,2		# matchStatus=r29 matchStatus=r29
.L640:
#    }
# 
#    if ((DEM_DTC_FORMAT_UDS == DTCFilter.dtc_format) && (!IsUdsDtc(intDtc)))
	.d2line		4747
	lis		r3,(DTCFilter+3)@ha		# intDtc=r3
	lbz		r0,(DTCFilter+3)@l(r3)		# intDtc=r3
	se_cmpi		r0,11
	bc		0,2,.L641	# ne
	lis		r3,Dem_pPbCfg@ha		# intDtc=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# intDtc=r3 intDtc=r3
	lwz		r3,76(r3)		# intDtc=r3 intDtc=r3
	rlwinm		r4,r31,2,14,29		# intDtc=r31
	lwzx		r0,r3,r4		# intDtc=r3
	se_cmpi		r0,0
#    {
#       /* DTC is disabled for UDS-format. */
#       matchStatus = FALSE;
	.d2line		4750
	isel		r29,0,r29,2		# matchStatus=r29 matchStatus=r29
.L641:
#    }
# 
#    if ((DEM_DTC_FORMAT_OBD == DTCFilter.dtc_format) && (!Dem_IsObdDtc(intDtc)))
	.d2line		4753
	lis		r3,(DTCFilter+3)@ha		# intDtc=r3
	lbz		r0,(DTCFilter+3)@l(r3)		# intDtc=r3
	se_cmpi		r0,0
	bc		0,2,.L642	# ne
	lis		r3,Dem_pPbCfg@ha		# intDtc=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# intDtc=r3 intDtc=r3
	lwz		r3,72(r3)		# intDtc=r3 intDtc=r3
	rlwinm		r4,r31,1,15,30		# intDtc=r31
	lhzx		r0,r3,r4		# intDtc=r3
	se_cmpi		r0,0
#    {
#       /* DTC is disabled for OBD-format. */
#       matchStatus = FALSE;
	.d2line		4756
	isel		r29,0,r29,2		# matchStatus=r29 matchStatus=r29
.L642:
#    }
# 
#    if ((TRUE == DTCFilter.dtc_severity_active) &&
	.d2line		4759
	lis		r3,(DTCFilter+5)@ha		# intDtc=r3
	lbz		r0,(DTCFilter+5)@l(r3)		# intDtc=r3
	se_cmpi		r0,1
	bc		0,2,.L643	# ne
	lis		r3,(DTCFilter+6)@ha		# intDtc=r3
	lbz		r0,(DTCFilter+6)@l(r3)		# intDtc=r3
	lis		r3,Dem_pPbCfg@ha		# intDtc=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# intDtc=r3 intDtc=r3
	lwz		r3,68(r3)		# intDtc=r3 intDtc=r3
	rlwinm		r4,r31,0,16,31		# intDtc=r31
	lbzx		r3,r3,r4		# intDtc=r3 intDtc=r3
	and.		r0,r0,r3		# intDtc=r3
#          (0U == (DTCFilter.dtc_severity_mask & GetDtcSeverity(intDtc))))
#    {
#       matchStatus = FALSE;
	.d2line		4762
	isel		r29,0,r29,2		# matchStatus=r29 matchStatus=r29
.L643:
#    }
# 
#    if (TRUE == DTCFilter.fdc_active)
	.d2line		4765
	lis		r3,(DTCFilter+7)@ha		# intDtc=r3
	lbz		r0,(DTCFilter+7)@l(r3)		# intDtc=r3
	se_cmpi		r0,1
	bc		0,2,.L644	# ne
#    {
#       if (E_OK == Dem_GetFaultDetectionCounterByIntDtc(intDtc, &fdc))
	.d2line		4767
	rlwinm		r3,r31,0,16,31		# intDtc=r3 intDtc=r31
	diab.addi		r4,r1,8
	bl		Dem_GetFaultDetectionCounterByIntDtc
	e_andi.		r3,r3,255		# intDtc=r3 intDtc=r3
	bc		0,2,.L645	# ne
#       {
#          if ((1 > fdc) || (0x7E < fdc))
	.d2line		4769
	lbz		r3,8(r1)		# intDtc=r3
	extsb		r3,r3		# intDtc=r3 intDtc=r3
	diab.addi		r3,r3,-1		# intDtc=r3 intDtc=r3
	cmpli		0,0,r3,126		# intDtc=r3
	bc		1,0,.L646	# lt
#          {
#             matchStatus = FALSE;
	.d2line		4771
	diab.li		r29,0		# matchStatus=r29
	b		.L644
.L646:
#          }
#          else if (NULL_PTR != dtcFdc)
	.d2line		4773
	se_cmpi		r30,0		# dtcFdc=r30
	bc		1,2,.L644	# eq
#          {
#             *dtcFdc = fdc;
	.d2line		4775
	lbz		r0,8(r1)
	stb		r0,0(r30)		# dtcFdc=r30
	b		.L644
.L645:
#          }
#          else
#          {
#             /* Do nothing */
#          }
#       }
#       else
#       {
#          /* [SWS_Dem_00513] */
#          matchStatus = FALSE;
	.d2line		4785
	diab.li		r29,0		# matchStatus=r29
.L644:
#       }
#    }
# 
#    if (DEM_DTC_ORIGIN_PERMANENT_MEMORY != DTCFilter.dtc_origin)
	.d2line		4789
	lis		r3,(DTCFilter+4)@ha		# intDtc=r3
	lbz		r0,(DTCFilter+4)@l(r3)		# intDtc=r3
	se_cmpi		r0,3
	bc		1,2,.L651	# eq
#    {
#       if (GetDtcMemDest(intDtc) != DTCFilter.dtc_origin)
	.d2line		4791
.Llo973:
	lis		r4,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r4)		# intDtc=r3
.Llo974:
	lwz		r3,20(r3)		# intDtc=r3 intDtc=r3
	lwz		r4,Dem_pPbCfg@l(r4)
	lwz		r4,92(r4)
	rlwinm		r31,r31,0,16,31		# intDtc=r31 intDtc=r31
	lbzx		r0,r4,r31
	lbzx		r0,r3,r0		# intDtc=r3
	lis		r3,(DTCFilter+4)@ha		# intDtc=r3
	lbz		r3,(DTCFilter+4)@l(r3)		# intDtc=r3 intDtc=r3
	se_cmp		r0,r3		# intDtc=r3
#       {
#          matchStatus = FALSE;
	.d2line		4793
	diab.li		r0,0
	isel		r29,r29,r0,2		# matchStatus=r29 matchStatus=r29
.L651:
#       }
#    }
# #if (STD_ON == DEM_OBD_PERMANENT_SUPPORT)
#    else
#    {
#       boolean isPermanent = FALSE;
#       if (!DisableOBDServiceOutput(0x0AU))
#       {
#          /* Handle permanent memory separate */
#          uint8 i;
#          for (i = 0; (i < Dem_LCfg.max_permanent_entries) && (FALSE == isPermanent); i++)
#          {
#             if ((Dem_NvOBDPermanent.perm_ev_mem_dtcs[i] == intDtc) &&
#                Dem_BitArrayIsBitSet(Dem_LCfg.p_perm_event_stored, i))
#             {
#                isPermanent = TRUE;
#             }
#          }
#       }
# 
#       if (FALSE == isPermanent)
#       {
#          matchStatus = FALSE;
#       }
#    }
# #endif /* STD_ON == DEM_OBD_PERMANENT_SUPPORT */
# 
#    return matchStatus;
	.d2line		4821
.Llo975:
	rlwinm		r3,r29,0,24,31		# intDtc=r3 matchStatus=r29
# }
	.d2line		4822
	.d2epilogue_begin
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
.Llo986:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3430:
	.type		DTCFilterMatch,@function
	.size		DTCFilterMatch,.-DTCFilterMatch
# Number of nodes = 230

# Allocations for DTCFilterMatch
#	?a4		intDtc
#	?a5		dtcFdc
#	?a6		udsStatus
#	?a7		matchStatus
#	SP,8		fdc
# static FUNC(boolean, DEM_CODE) GetPreviousFromChronologicalList(P2VAR(uint8, AUTOMATIC, DEM_NV_DATA)
	.align		1
	.section	.text_vle
        .d2line         4824,32
#$$ld
.L3444:

#$$bf	GetPreviousFromChronologicalList,interprocedural,rasave,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,cr0,lr
	.d2_cfa_start __cie
GetPreviousFromChronologicalList:
.Llo987:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	mr		r5,r3		# pCurrentEvMemEntryIndex=r5 pCurrentEvMemEntryIndex=r3
	mr		r3,r4		# Origin=r3 Origin=r4
	.d2prologue_end
#       pCurrentEvMemEntryIndex, Dem_DTCOriginType Origin)
# {
#    uint8 internalOrigin = GetInternalDTCOriginIndex(Origin);
#    boolean retVal = FALSE;
	.d2line		4828
.Llo988:
	diab.li		r4,0		# retVal=r4
	.d2line		4827
.Llo991:
	mr		r3,r3		# Origin=r3 Origin=r3
	bl		GetInternalDTCOriginIndex
.Llo992:
	mr		r0,r3		# internalOrigin=r0 internalOrigin=r3
# 
#    if ((internalOrigin != DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX) && Dem_EvMemExist(internalOrigin))
	.d2line		4830
	rlwinm		r3,r3,0,24,31		# internalOrigin=r3 internalOrigin=r3
.Llo993:
	cmpi		0,0,r3,255		# internalOrigin=r3
.Llo994:
	bc		1,2,.L666	# eq
.Llo989:
	lis		r3,(Dem_LCfg+20)@ha		# internalOrigin=r3
	e_add16i		r3,r3,(Dem_LCfg+20)@l		# internalOrigin=r3 internalOrigin=r3
	rlwinm		r6,r0,2,22,29		# internalOrigin=r0
	lwzx		r3,r3,r6		# internalOrigin=r3 internalOrigin=r3
	se_cmpi		r3,0		# internalOrigin=r3
	bc		1,2,.L666	# eq
	.section	.text_vle
.L3453:
#    {
#       Uint8NvPtrType pLast = GetLastEvMemEntryPtr(internalOrigin);
	.d2line		4832
.Llo995:
	lis		r3,(Dem_LCfg+20)@ha		# internalOrigin=r3
.Llo996:
	e_add16i		r3,r3,(Dem_LCfg+20)@l		# internalOrigin=r3 internalOrigin=r3
.Llo997:
	rlwinm		r0,r0,2,22,29		# internalOrigin=r0 internalOrigin=r0
.Llo998:
	lwzux		r6,r3,r0		# internalOrigin=r3
	lwz		r6,8(r6)
.Llo1010:
	mr		r6,r6		# pLast=r6 pLast=r6
#       Uint8NvPtrType pPrev = GetPreviousEvMemEntryPtr(internalOrigin);
	.d2line		4833
	lis		r3,(Dem_LCfg+20)@ha		# internalOrigin=r3
	e_add16i		r3,r3,(Dem_LCfg+20)@l		# internalOrigin=r3 internalOrigin=r3
	lwzx		r3,r3,r0		# internalOrigin=r3 internalOrigin=r3
	lwz		r3,16(r3)		# internalOrigin=r3 internalOrigin=r3
.Llo999:
	mr		r3,r3		# pPrev=r3 pPrev=r3
# 
#       if (DEM_EV_MEM_ENTRY_INVALID == *pCurrentEvMemEntryIndex)
	.d2line		4835
	lbz		r0,0(r5)		# internalOrigin=r0 pCurrentEvMemEntryIndex=r5
.Llo1000:
	cmpi		0,0,r0,255		# internalOrigin=r0
	bc		0,2,.L667	# ne
#       {
#          /* Set current pointer to latest element */
#          if (DEM_EV_MEM_ENTRY_INVALID != *pLast)
	.d2line		4838
.Llo1001:
	lbz		r0,0(r6)		# internalOrigin=r0 pLast=r6
.Llo1002:
	cmpi		0,0,r0,255		# internalOrigin=r0
	bc		1,2,.L666	# eq
#          {
#             *pCurrentEvMemEntryIndex = *pLast;
	.d2line		4840
.Llo1003:
	lbz		r0,0(r6)		# internalOrigin=r0 pLast=r6
.Llo1004:
	stb		r0,0(r5)		# pCurrentEvMemEntryIndex=r5 internalOrigin=r0
#             retVal = TRUE;
	.d2line		4841
	diab.li		r4,1		# retVal=r4
	b		.L666
.L667:
#          }
#       }
#       else
#       {
#          if (DEM_EV_MEM_ENTRY_INVALID != pPrev[*pCurrentEvMemEntryIndex])
	.d2line		4846
.Llo1005:
	lbz		r6,0(r5)		# pCurrentEvMemEntryIndex=r5
	lbzux		r0,r6,r3		# internalOrigin=r0
.Llo1006:
	cmpi		0,0,r0,255		# internalOrigin=r0
	bc		1,2,.L666	# eq
#          {
#             *pCurrentEvMemEntryIndex = pPrev[*pCurrentEvMemEntryIndex];
	.d2line		4848
.Llo1007:
	lbz		r4,0(r5)		# retVal=r4 pCurrentEvMemEntryIndex=r5
	lbzx		r0,r4,r3		# internalOrigin=r0 retVal=r4 pPrev=r3
.Llo1008:
	stb		r0,0(r5)		# pCurrentEvMemEntryIndex=r5 internalOrigin=r0
#             retVal = TRUE;
	.d2line		4849
	diab.li		r4,1		# retVal=r4
	.section	.text_vle
.L3454:
.L666:
#          }
#       }
#    }
# 
#    return retVal;
	.d2line		4854
.Llo990:
	rlwinm		r3,r4,0,24,31		# internalOrigin=r3 retVal=r4
# }
	.d2line		4855
	.d2epilogue_begin
	lwz		r0,20(r1)		# internalOrigin=r0
	mtspr		lr,r0		# internalOrigin=lr
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1009:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3445:
	.type		GetPreviousFromChronologicalList,@function
	.size		GetPreviousFromChronologicalList,.-GetPreviousFromChronologicalList
# Number of nodes = 98

# Allocations for GetPreviousFromChronologicalList
#	?a4		pCurrentEvMemEntryIndex
#	?a5		Origin
#	?a6		internalOrigin
#	?a7		retVal
#	?a8		pLast
#	?a9		pPrev
# FUNC(void, DEM_CODE) Dem_MemCpy(P2VAR(void, AUTOMATIC, DEM_APPL_DATA) pDest, P2CONST(void, AUTOMATIC, DEM_APPL_DATA) pSrc,
	.align		2
	.section	.text_vle
        .d2line         7727,22
#$$ld
.L3463:

#$$bf	Dem_MemCpy,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,cr0,lr
	.globl		Dem_MemCpy
	.d2_cfa_start __cie
Dem_MemCpy:
.Llo1011:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# pDest=r3 pDest=r3
.Llo1012:
	mr		r4,r4		# pSrc=r4 pSrc=r4
.Llo1013:
	mr		r0,r5		# count=r0 count=r5
	.d2prologue_end
#                                         uint16 count)
# {
#    P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) d = pDest;
	.d2line		7730
	mr		r3,r3		# d=r3 d=r3
#    P2CONST(uint8, AUTOMATIC, DEM_APPL_DATA) s = pSrc;
	.d2line		7731
	mr		r6,r4		# s=r6 s=r4
#    uint16 i;
# 
#    for(i = 0; i < count; i++)
	.d2line		7734
	diab.li		r4,0		# i=r4
.L1252:
.Llo1014:
	rlwinm		r5,r4,0,16,31		# i=r4
.Llo1015:
	rlwinm		r7,r0,0,16,31		# count=r0
	se_cmp		r5,r7
	bc		0,0,.L1251	# ge
#    {
#       d[i] = s[i];
	.d2line		7736
	rlwinm		r5,r4,0,16,31		# i=r4
	lbzux		r7,r5,r6
	rlwinm		r5,r4,0,16,31		# i=r4
	stbx		r7,r3,r5		# d=r3
#    }
	.d2line		7737
	diab.addi		r5,r4,1		# i=r4
	se_addi		r4,1		# i=r4 i=r4
	b		.L1252
.L1251:
# }
	.d2line		7738
	.d2epilogue_begin
.Llo1016:
	lwz		r0,20(r1)		# count=r0
	mtspr		lr,r0		# count=lr
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3464:
	.type		Dem_MemCpy,@function
	.size		Dem_MemCpy,.-Dem_MemCpy
# Number of nodes = 28

# Allocations for Dem_MemCpy
#	?a4		pDest
#	?a5		pSrc
#	?a6		count
#	?a7		d
#	?a8		s
#	?a9		i
# static FUNC(Dem_ReturnGetFreezeFrameDataByDTCType, DEM_CODE) UpdateBufferWithFreezeFrameData(uint16 ffClass,
	.align		1
	.section	.text_vle
        .d2line         5119,62
#$$ld
.L3479:

#$$bf	UpdateBufferWithFreezeFrameData,interprocedural,rasave,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r23,r24,r25,r26,r27,r28,r29,r30,r31,cr0,lr
	.d2_cfa_start __cie
UpdateBufferWithFreezeFrameData:
.Llo1017:
	stwu		r1,-64(r1)		
	.d2_cfa_def_cfa_offset	64
	mfspr		r0,lr
	stmw		r23,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	23,31,1,1
	stw		r0,68(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# ffClass=r3 ffClass=r3
	mr		r31,r4		# pFFData=r31 pFFData=r4
	mr		r30,r5		# pNumDids=r30 pNumDids=r5
	mr		r29,r6		# pDestBuffer=r29 pDestBuffer=r6
	mr		r28,r7		# pBufSize=r28 pBufSize=r7
	mr		r8,r8		# fillInData=r8 fillInData=r8
	.d2prologue_end
#       P2CONST(uint8, AUTOMATIC, DEM_NV_DATA) pFFData,
#       P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) pNumDids,
#       P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) pDestBuffer,
#       P2VAR(uint16, AUTOMATIC, DEM_APPL_DATA) pBufSize,
#       boolean fillInData)
# {
#    Dem_ReturnGetFreezeFrameDataByDTCType retVal = DEM_GET_FFDATABYDTC_OK;
	.d2line		5126
	diab.li		r27,0		# retVal=r27
#    P2CONST(uint16, AUTOMATIC, DEM_PBCFG_CALIB) pFFDidIdx = GetFFDids(ffClass);
#    uint8 numFFDids = GetFFNumDids(ffClass);
#    P2CONST(Dem_FFDidDefineType, AUTOMATIC, DEM_APPL_CONST) pDidConfig;
#    boolean abortUpdate = FALSE;
	.d2line		5130
.Llo1031:
	diab.li		r25,0
#    uint16 destBufferOffset = 0;
	.d2line		5131
.Llo1042:
	diab.li		r24,0
#    uint16 didOffset = 0;
	.d2line		5132
.Llo1043:
	mr		r10,r24		# didOffset=r10 didOffset=r24
#    uint16 didIdx;
#    uint8 i;
#    uint16 didSize;
#    uint8 numDids = 0;
	.d2line		5136
.Llo1060:
	mr		r23,r10		# numDids=r23 numDids=r10
	.d2line		5127
.Llo1058:
	lis		r4,Dem_pPbCfg@ha
.Llo1025:
	lwz		r5,Dem_pPbCfg@l(r4)
.Llo1027:
	lwz		r5,140(r5)
	rlwinm		r3,r3,3,13,28		# ffClass=r3 ffClass=r3
	lwzux		r9,r5,r3
.Llo1033:
	mr		r9,r9		# pFFDidIdx=r9 pFFDidIdx=r9
	.d2line		5128
.Llo1034:
	lwz		r4,Dem_pPbCfg@l(r4)
	lwz		r0,140(r4)
	se_add		r3,r0		# ffClass=r3 ffClass=r3
	lbz		r26,4(r3)		# ffClass=r3
.Llo1035:
	mr		r26,r26		# numFFDids=r26 numFFDids=r26
# 
#    /* Loop through all dids in the freeze frame */
#    for (i = 0; (i < numFFDids) && (FALSE == abortUpdate); i++)
	.d2line		5139
	mr		r11,r23		# i=r11 i=r23
.L712:
.Llo1018:
	rlwinm		r3,r11,0,24,31		# ffClass=r3 i=r11
.Llo1019:
	rlwinm		r0,r26,0,24,31		# didIdx=r0 numFFDids=r26
.Llo1044:
	se_cmp		r3,r0		# ffClass=r3 didIdx=r0
	bc		0,0,.L714	# ge
.Llo1020:
	rlwinm		r0,r25,0,24,31		# didIdx=r0 abortUpdate=r25
.Llo1045:
	se_cmpi		r0,0		# didIdx=r0
	bc		0,2,.L714	# ne
#    {
#       didIdx = pFFDidIdx[i];
	.d2line		5141
.Llo1046:
	rlwinm		r3,r11,1,23,30		# ffClass=r3 i=r11
.Llo1021:
	lhzux		r0,r3,r9		# didIdx=r0 ffClass=r3
.Llo1047:
	mr		r0,r0		# didIdx=r0 didIdx=r0
#       if (DEM_DID_INVALID != didIdx)
	.d2line		5142
	rlwinm		r3,r0,0,16,31		# ffClass=r3 didIdx=r0
	cmpli		0,0,r3,65535		# ffClass=r3
	bc		1,2,.L715	# eq
#       {
#          numDids++;
	.d2line		5144
.Llo1022:
	diab.addi		r3,r23,1		# ffClass=r3 numDids=r23
	diab.addi		r23,r23,1		# numDids=r23 numDids=r23
#          pDidConfig = &Dem_LCfg.p_ff_did_define[didIdx];
	.d2line		5145
	lis		r3,(Dem_LCfg+36)@ha		# ffClass=r3
.Llo1023:
	lwz		r3,(Dem_LCfg+36)@l(r3)		# ffClass=r3 ffClass=r3
.Llo1048:
	rlwinm		r0,r0,2,14,29		# didIdx=r0 didIdx=r0
	se_add		r0,r3		# didIdx=r0 didIdx=r0 ffClass=r3
.Llo1036:
	mr		r3,r0		# pDidConfig=r3 pDidConfig=r0
#          didSize = (uint16)Dem_LCfg.p_data_element[pDidConfig->data_element_idx].size;
	.d2line		5146
.Llo1024:
	lis		r4,(Dem_LCfg+28)@ha		# didOffset=r4
	lwz		r4,(Dem_LCfg+28)@l(r4)		# didOffset=r4 didOffset=r4
	lhz		r0,2(r3)		# didIdx=r0 pDidConfig=r3
.Llo1037:
	rlwinm		r0,r0,3,13,28		# didIdx=r0 didIdx=r0
.Llo1049:
	lbzx		r12,r4,r0		# didSize=r12 didOffset=r4
.Llo1059:
	mr		r12,r12		# didSize=r12 didSize=r12
# 
#          /* Only copy data if the destination buffer is large enough */
#          if (((destBufferOffset + didSize + ID_LENGTH) <= *pBufSize) || (FALSE == fillInData))
	.d2line		5149
	rlwinm		r4,r24,0,16,31		# didOffset=r4 destBufferOffset=r24
	rlwinm		r5,r12,0,16,31		# didSize=r5 didSize=r12
	se_add		r4,r5		# didOffset=r4 didOffset=r4 didSize=r5
	se_addi		r4,2		# didOffset=r4 didOffset=r4
	lhz		r0,0(r28)		# didIdx=r0 pBufSize=r28
.Llo1050:
	se_cmp		r4,r0		# didOffset=r4 didIdx=r0
	bc		0,1,.L720	# le
.Llo1038:
	rlwinm		r0,r8,0,24,31		# didIdx=r0 fillInData=r8
.Llo1051:
	se_cmpi		r0,0		# didIdx=r0
	bc		0,2,.L716	# ne
.L720:
#          {
#             /* Add DataID to dest buffer */
#             if (TRUE == fillInData)
	.d2line		5152
.Llo1052:
	rlwinm		r0,r8,0,24,31		# didIdx=r0 fillInData=r8
.Llo1053:
	se_cmpi		r0,1		# didIdx=r0
	bc		0,2,.L717	# ne
#             {
#                pDestBuffer[destBufferOffset] = HiByte(pDidConfig->did);
	.d2line		5154
.Llo1054:
	lhz		r0,0(r3)		# didIdx=r0 pDidConfig=r3
.Llo1055:
	rlwinm		r0,r0,24,24,31		# didIdx=r0 didIdx=r0
	rlwinm		r4,r24,0,16,31		# didOffset=r4 destBufferOffset=r24
	stbx		r0,r29,r4		# pDestBuffer=r29 didIdx=r0
#                pDestBuffer[destBufferOffset + 1U] = LoByte(pDidConfig->did);
	.d2line		5155
	lhz		r0,0(r3)		# didIdx=r0 pDidConfig=r3
	add		r3,r4,r29		# pDidConfig=r3 didOffset=r4 pDestBuffer=r29
	stb		r0,1(r3)		# pDidConfig=r3 didIdx=r0
#                Dem_MemCpy(&pDestBuffer[destBufferOffset + 2U], &pFFData[didOffset], didSize);
	.d2line		5156
	se_addi		r3,2		# pDidConfig=r3 pDidConfig=r3
.Llo1039:
	rlwinm		r4,r10,0,16,31		# didOffset=r4 didOffset=r10
	se_add		r4,r31		# didOffset=r4 didOffset=r4 pFFData=r31
	mr		r5,r12		# didSize=r5 didSize=r12
	bl		Dem_MemCpy
.L717:
# 
#             }
#             destBufferOffset += (didSize + ID_LENGTH);
	.d2line		5159
.Llo1040:
	add		r24,r24,r12		# destBufferOffset=r24 destBufferOffset=r24 didSize=r12
	se_addi		r24,2		# destBufferOffset=r24 destBufferOffset=r24
	mr		r24,r24		# destBufferOffset=r24 destBufferOffset=r24
	b		.L718
.L716:
#          }
#          else
#          {
#             /* Provided buffer is too small */
#             retVal = DEM_GET_FFDATABYDTC_WRONG_BUFFERSIZE;
	.d2line		5164
	diab.li		r27,4		# retVal=r27
# 
#             /* Abort buffer update */
#             abortUpdate = TRUE;
	.d2line		5167
	diab.li		r25,1		# abortUpdate=r25
.L718:
#          }
#          didOffset += didSize;
	.d2line		5169
.Llo1041:
	add		r10,r10,r12		# didOffset=r10 didOffset=r10 didSize=r12
	mr		r4,r10		# didOffset=r4 didOffset=r10
.L715:
#       }
#    }
	.d2line		5171
.Llo1056:
	diab.addi		r3,r11,1		# ffClass=r3 i=r11
	diab.addi		r11,r11,1		# i=r11 i=r11
	b		.L712
.L714:
#    *pBufSize = destBufferOffset;
	.d2line		5172
.Llo1057:
	sth		r24,0(r28)		# pBufSize=r28 destBufferOffset=r24
# 
#    if (pNumDids != NULL_PTR)
	.d2line		5174
	se_cmpi		r30,0		# pNumDids=r30
	bc		1,2,.L719	# eq
#    {
#       *pNumDids += numDids;
	.d2line		5176
.Llo1026:
	lbz		r0,0(r30)		# didIdx=r0 pNumDids=r30
.Llo1029:
	add		r0,r0,r23		# didIdx=r0 didIdx=r0 numDids=r23
	stb		r0,0(r30)		# pNumDids=r30 didIdx=r0
.L719:
#    }
# 
#    return retVal;
	.d2line		5179
.Llo1028:
	rlwinm		r3,r27,0,24,31		# ffClass=r3 retVal=r27
# }
	.d2line		5180
	.d2epilogue_begin
	lmw		r23,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	2,10
.Llo1032:
	lwz		r0,68(r1)		# didIdx=r0
	mtspr		lr,r0		# didIdx=lr
	diab.addi		r1,r1,64		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1030:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3480:
	.type		UpdateBufferWithFreezeFrameData,@function
	.size		UpdateBufferWithFreezeFrameData,.-UpdateBufferWithFreezeFrameData
# Number of nodes = 191

# Allocations for UpdateBufferWithFreezeFrameData
#	?a4		ffClass
#	?a5		pFFData
#	?a6		pNumDids
#	?a7		pDestBuffer
#	?a8		pBufSize
#	?a9		fillInData
#	?a10		retVal
#	?a11		pFFDidIdx
#	?a12		numFFDids
#	?a13		pDidConfig
#	?a14		abortUpdate
#	?a15		destBufferOffset
#	?a16		didOffset
#	?a17		didIdx
#	?a18		i
#	?a19		didSize
#	?a20		numDids
# static FUNC(Std_ReturnType, DEM_CODE) FillBufferWithDidData(boolean reportTotalRecord,
	.align		1
	.section	.text_vle
        .d2line         5182,39
#$$ld
.L3513:

#$$bf	FillBufferWithDidData,interprocedural,rasave,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r24,r25,r26,r27,r28,r29,r30,r31,cr0,lr
	.d2_cfa_start __cie
FillBufferWithDidData:
.Llo1061:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r24,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	24,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# reportTotalRecord=r31 reportTotalRecord=r3
	mr		r30,r4		# dataId=r30 dataId=r4
	mr		r5,r5		# ffClass=r5 ffClass=r5
	mr		r29,r6		# pFFData=r29 pFFData=r6
	mr		r28,r7		# pDestBuffer=r28 pDestBuffer=r7
	mr		r8,r8		# pBufSize=r8 pBufSize=r8
	.d2prologue_end
#          uint16 dataId,
#          uint16 ffClass,
#          P2CONST(uint8, AUTOMATIC, DEM_NV_DATA) pFFData,
#          P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) pDestBuffer,
#          P2VAR(uint16, AUTOMATIC, DEM_APPL_DATA) pBufSize)
# {
#    P2CONST(uint16, AUTOMATIC, DEM_PBCFG_CALIB) pFFDidIdx;
#    uint16 didIdx;
#    uint8 numFFDids;
#    uint8 i;
#    uint16 didSize;
#    uint16 didOffset = 0;
	.d2line		5194
	diab.li		r24,0		# didOffset=r24
#    uint16 destBufferOffset = 0;
	.d2line		5195
.Llo1088:
	mr		r10,r24		# destBufferOffset=r10 destBufferOffset=r24
#    boolean abortUpdate = FALSE;
	.d2line		5196
.Llo1089:
	mr		r11,r10		# abortUpdate=r11 abortUpdate=r10
#    P2CONST(Dem_FFDidDefineType, AUTOMATIC, DEM_APPL_CONST) pDidConfig;
#    Std_ReturnType retVal = E_OK;
	.d2line		5198
.Llo1097:
	mr		r12,r11		# retVal=r12 retVal=r11
# 
#    pFFDidIdx = GetFFDids(ffClass);
	.d2line		5200
	lis		r3,Dem_pPbCfg@ha
.Llo1062:
	lwz		r4,Dem_pPbCfg@l(r3)
.Llo1065:
	lwz		r4,140(r4)
	rlwinm		r5,r5,3,13,28		# ffClass=r5 ffClass=r5
	lwzux		r9,r4,r5
.Llo1069:
	mr		r9,r9		# pFFDidIdx=r9 pFFDidIdx=r9
#    numFFDids = GetFFNumDids(ffClass);
	.d2line		5201
.Llo1070:
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r0,140(r3)
	se_add		r5,r0		# ffClass=r5 ffClass=r5
	lbz		r27,4(r5)		# ffClass=r5
.Llo1086:
	mr		r27,r27		# numFFDids=r27 numFFDids=r27
# 
#    /* Loop through all dids in the freeze frame */
#    for (i = 0; (i < numFFDids) && (FALSE == abortUpdate); i++)
	.d2line		5204
	diab.li		r26,0
.L730:
.Llo1063:
	rlwinm		r3,r26,0,24,31		# pDidConfig=r3 i=r26
.Llo1066:
	rlwinm		r0,r27,0,24,31		# didIdx=r0 numFFDids=r27
.Llo1071:
	se_cmp		r3,r0		# pDidConfig=r3 didIdx=r0
	bc		0,0,.L732	# ge
.Llo1072:
	rlwinm		r0,r11,0,24,31		# didIdx=r0 abortUpdate=r11
.Llo1073:
	se_cmpi		r0,0		# didIdx=r0
	bc		0,2,.L732	# ne
#    {
#       didIdx = pFFDidIdx[i];
	.d2line		5206
.Llo1074:
	rlwinm		r3,r26,1,23,30		# pDidConfig=r3 i=r26
.Llo1090:
	lhzux		r0,r3,r9		# didIdx=r0 pDidConfig=r3
.Llo1075:
	mr		r0,r0		# didIdx=r0 didIdx=r0
#       if (DEM_DID_INVALID != didIdx)
	.d2line		5207
	rlwinm		r3,r0,0,16,31		# pDidConfig=r3 didIdx=r0
	cmpli		0,0,r3,65535		# pDidConfig=r3
	bc		1,2,.L733	# eq
#       {
#          pDidConfig = &Dem_LCfg.p_ff_did_define[didIdx];
	.d2line		5209
.Llo1076:
	lis		r3,(Dem_LCfg+36)@ha		# pDidConfig=r3
.Llo1091:
	lwz		r3,(Dem_LCfg+36)@l(r3)		# pDidConfig=r3 pDidConfig=r3
.Llo1077:
	rlwinm		r0,r0,2,14,29		# didIdx=r0 didIdx=r0
	se_add		r0,r3		# didIdx=r0 didIdx=r0 pDidConfig=r3
.Llo1078:
	mr		r3,r0		# pDidConfig=r3 pDidConfig=r0
#          didSize = (uint16)Dem_LCfg.p_data_element[pDidConfig->data_element_idx].size;
	.d2line		5210
	lis		r4,(Dem_LCfg+28)@ha		# didOffset=r4
	lwz		r4,(Dem_LCfg+28)@l(r4)		# didOffset=r4 didOffset=r4
	lhz		r0,2(r3)		# didIdx=r0 pDidConfig=r3
.Llo1079:
	rlwinm		r0,r0,3,13,28		# didIdx=r0 didIdx=r0
.Llo1080:
	lbzx		r25,r4,r0		# didSize=r25 didOffset=r4
.Llo1087:
	mr		r25,r25		# didSize=r25 didSize=r25
#          if ((dataId == pDidConfig->did) || (TRUE == reportTotalRecord))
	.d2line		5211
	rlwinm		r4,r30,0,16,31		# didOffset=r4 dataId=r30
	lhz		r0,0(r3)		# didIdx=r0 pDidConfig=r3
.Llo1081:
	se_cmp		r4,r0		# didOffset=r4 didIdx=r0
	bc		1,2,.L737	# eq
.Llo1082:
	rlwinm		r3,r31,0,24,31		# pDidConfig=r3 reportTotalRecord=r31
.Llo1092:
	se_cmpi		r3,1		# pDidConfig=r3
	bc		0,2,.L734	# ne
.L737:
#          {
#             /* Only copy data if the destination buffer is large enough */
#             if ((destBufferOffset + didSize) <= *pBufSize)
	.d2line		5214
.Llo1093:
	rlwinm		r0,r10,0,16,31		# didIdx=r0 destBufferOffset=r10
.Llo1083:
	rlwinm		r3,r25,0,16,31		# pDidConfig=r3 didSize=r25
.Llo1094:
	se_add		r3,r0		# pDidConfig=r3 pDidConfig=r3 didIdx=r0
	lhz		r0,0(r8)		# didIdx=r0 pBufSize=r8
	se_cmp		r3,r0		# pDidConfig=r3 didIdx=r0
	bc		1,1,.L735	# gt
#             {
#                /* Add DataID to dest buffer */
#                Dem_MemCpy(&pDestBuffer[destBufferOffset], &pFFData[didOffset], didSize);
	.d2line		5217
.Llo1084:
	rlwinm		r3,r10,0,16,31		# pDidConfig=r3 destBufferOffset=r10
.Llo1095:
	se_add		r3,r28		# pDidConfig=r3 pDidConfig=r3 pDestBuffer=r28
.Llo1096:
	rlwinm		r4,r24,0,16,31		# didOffset=r4 didOffset=r24
	se_add		r4,r29		# didOffset=r4 didOffset=r4 pFFData=r29
	mr		r5,r25		# didSize=r5 didSize=r25
	bl		Dem_MemCpy
#                destBufferOffset += didSize;
	.d2line		5218
	add		r10,r10,r25		# destBufferOffset=r10 destBufferOffset=r10 didSize=r25
	mr		r0,r10		# destBufferOffset=r0 destBufferOffset=r10
	b		.L734
.L735:
#             }
#             else
#             {
#                /* Provided buffer is too small */
#                retVal = E_NOT_OK;
	.d2line		5223
	diab.li		r12,1		# retVal=r12
# 
#                /* Abort buffer update */
#                abortUpdate = TRUE;
	.d2line		5226
	mr		r11,r12		# abortUpdate=r11 abortUpdate=r12
.L734:
#             }
#          }
#          didOffset += didSize;
	.d2line		5229
	se_add		r24,r25		# didOffset=r24 didOffset=r24 didSize=r25
	mr		r4,r24		# didOffset=r4 didOffset=r24
.L733:
#       }
#    }
	.d2line		5231
.Llo1085:
	diab.addi		r3,r26,1		# pDidConfig=r3 i=r26
	se_addi		r26,1		# i=r26 i=r26
	b		.L730
.L732:
#    *pBufSize = destBufferOffset;
	.d2line		5232
.Llo1064:
	sth		r10,0(r8)		# pBufSize=r8 destBufferOffset=r10
# 
#    return retVal;
	.d2line		5234
.Llo1067:
	rlwinm		r3,r12,0,24,31		# pDidConfig=r3 retVal=r12
# }
	.d2line		5235
	.d2epilogue_begin
	lmw		r24,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	2,10
	lwz		r0,52(r1)		# didIdx=r0
	mtspr		lr,r0		# didIdx=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1068:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3514:
	.type		FillBufferWithDidData,@function
	.size		FillBufferWithDidData,.-FillBufferWithDidData
# Number of nodes = 148

# Allocations for FillBufferWithDidData
#	?a4		reportTotalRecord
#	?a5		dataId
#	?a6		ffClass
#	?a7		pFFData
#	?a8		pDestBuffer
#	?a9		pBufSize
#	?a10		pFFDidIdx
#	?a11		didIdx
#	?a12		numFFDids
#	?a13		i
#	?a14		didSize
#	?a15		didOffset
#	?a16		destBufferOffset
#	?a17		abortUpdate
#	?a18		pDidConfig
#	?a19		retVal
# static FUNC(Dem_ReturnGetExtendedDataRecordByDTCType, DEM_CODE) UpdateBufferWithExtendedData(uint8 ExtendedDataNumber,
	.align		1
	.section	.text_vle
        .d2line         5435,65
#$$ld
.L3544:

#$$bf	UpdateBufferWithExtendedData,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
UpdateBufferWithExtendedData:
.Llo1098:
	stwu		r1,-80(r1)		
	.d2_cfa_def_cfa_offset	80
	mfspr		r0,lr
	stmw		r17,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	17,31,1,1
	stw		r0,84(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# ExtendedDataNumber=r31 ExtendedDataNumber=r3
	mr		r30,r4		# InternalOrigin=r30 InternalOrigin=r4
	mr		r29,r5		# pDestBuffer=r29 pDestBuffer=r5
	mr		r28,r6		# pBufSize=r28 pBufSize=r6
	mr		r27,r7		# intDtc=r27 intDtc=r7
	mr		r26,r8		# pEvMemEntry=r26 pEvMemEntry=r8
	mr		r25,r9		# EventId=r25 EventId=r9
	.d2prologue_end
#       uint8 InternalOrigin,
#       P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) pDestBuffer,
#       P2VAR(uint16, AUTOMATIC, DEM_APPL_DATA) pBufSize,
#       uint16 intDtc,
#       P2CONST(Dem_NvEvMemEntryType, AUTOMATIC, DEM_NV_DATA) pEvMemEntry,
#       Dem_EventIdType EventId)
# {
#    Dem_ReturnGetExtendedDataRecordByDTCType retVal = DEM_RECORD_OK;
	.d2line		5443
	diab.li		r17,0		# retVal=r17
#    boolean found = FALSE;
	.d2line		5444
	diab.li		r24,0
#    CONST(uint8, AUTOMATIC) edClassIndex = GetDtcEDClass(intDtc);
	.d2line		5445
.Llo1109:
	lis		r4,Dem_pPbCfg@ha
.Llo1102:
	lwz		r3,Dem_pPbCfg@l(r4)
.Llo1099:
	lwz		r3,32(r3)
	lwz		r4,Dem_pPbCfg@l(r4)
	lwz		r4,92(r4)
	rlwinm		r6,r27,0,16,31		# intDtc=r27
.Llo1106:
	lbzx		r0,r4,r6
	lbzx		r23,r3,r0		# edClassIndex=r23
.Llo1110:
	mr		r23,r23		# edClassIndex=r23 edClassIndex=r23
# 
#    /* Find the configuration of the record */
#    if (DEM_ED_CLASS_INVALID != edClassIndex)
	.d2line		5448
.Llo1135:
	rlwinm		r0,r23,0,24,31		# edClassIndex=r23
	cmpi		0,0,r0,255
	bc		1,2,.L796	# eq
#    {
#       /* The event has extended data configured. */
#       if (NULL_PTR != Dem_LCfg.pp_ed_storage[InternalOrigin])
	.d2line		5451
.Llo1100:
	lis		r3,(Dem_LCfg+76)@ha
.Llo1103:
	e_add16i		r3,r3,(Dem_LCfg+76)@l
	rlwinm		r4,r30,2,22,29		# InternalOrigin=r30
	lwzx		r0,r3,r4
	se_cmpi		r0,0
	bc		1,2,.L797	# eq
	.section	.text_vle
.L3561:
#       {
#          /* Search the configured external extended data records (data fetched from application). */
#          uint16 recOffset = 0;
	.d2line		5454
	diab.li		r22,0		# recOffset=r22
#          CONST(uint8, AUTOMATIC) numRecords = Dem_LCfg.p_ed_classes[edClassIndex].num_ext_ed_records;
	.d2line		5455
.Llo1111:
	lis		r3,(Dem_LCfg+104)@ha
	lwz		r3,(Dem_LCfg+104)@l(r3)
	rlwinm		r0,r23,4,20,27		# edClassIndex=r23
	add		r4,r3,r0
	lbz		r21,4(r4)
.Llo1115:
	mr		r21,r21		# numRecords=r21 numRecords=r21
#          CONSTP2CONST(uint8, AUTOMATIC, DEM_APPL_CONST) pRecConfigIndex = Dem_LCfg.p_ed_classes[edClassIndex].p_ext_ed_record_index;
	.d2line		5456
	lwzx		r20,r3,r0
.Llo1116:
	mr		r20,r20		# pRecConfigIndex=r20 pRecConfigIndex=r20
#          uint8 i;
#          for (i = 0; (i < numRecords) && (FALSE == found); i++)
	.d2line		5458
.Llo1117:
	mr		r19,r22		# i=r19 i=r22
.L798:
	rlwinm		r3,r19,0,24,31		# pExtEdRecord=r3 i=r19
.Llo1118:
	rlwinm		r0,r21,0,24,31		# numRecords=r21
	se_cmp		r3,r0		# pExtEdRecord=r3
	bc		0,0,.L797	# ge
.Llo1119:
	rlwinm		r0,r24,0,24,31		# found=r24
	se_cmpi		r0,0
	bc		0,2,.L797	# ne
	.section	.text_vle
.L3574:
#          {
#             CONSTP2CONST(Dem_ExtExtendedDataType, AUTOMATIC, DEM_APPL_CONST) pExtEdRecord = &Dem_LCfg.p_ext_ed_record_define[pRecConfigIndex[i]];
	.d2line		5460
	lis		r3,(Dem_LCfg+88)@ha		# pExtEdRecord=r3
.Llo1120:
	lwz		r4,(Dem_LCfg+88)@l(r3)		# recOffset=r4 pExtEdRecord=r3
	rlwinm		r3,r19,0,24,31		# pExtEdRecord=r3 i=r19
	lbzux		r0,r3,r20		# pExtEdRecord=r3
	rlwinm		r0,r0,3,21,28
	se_add		r0,r4		# recOffset=r4
	mr		r3,r0		# pExtEdRecord=r3 pExtEdRecord=r0
#             CONST(uint16, AUTOMATIC) dataSize = pExtEdRecord->size;
	.d2line		5461
.Llo1121:
	lhz		r18,2(r3)		# dataSize=r18 pExtEdRecord=r3
.Llo1122:
	mr		r18,r18		# dataSize=r18 dataSize=r18
#             if (ExtendedDataNumber == pExtEdRecord->record_number)
	.d2line		5462
	rlwinm		r0,r31,0,24,31		# ExtendedDataNumber=r31
.Llo1123:
	lbz		r3,0(r3)		# pExtEdRecord=r3 pExtEdRecord=r3
.Llo1124:
	se_cmp		r0,r3		# pExtEdRecord=r3
	bc		0,2,.L801	# ne
#             {
#                found = TRUE;
	.d2line		5464
.Llo1125:
	diab.li		r24,1		# found=r24
# 
#                if ((dataSize <= *pBufSize) || (NULL_PTR == pDestBuffer))
	.d2line		5466
	rlwinm		r5,r18,0,16,31		# dataSize=r5 dataSize=r18
	lhz		r0,0(r28)		# pBufSize=r28
	se_cmp		r5,r0		# dataSize=r5
	bc		0,1,.L812	# le
	se_cmpi		r29,0		# pDestBuffer=r29
	bc		0,2,.L802	# ne
.L812:
#                {
#                   if ((NULL_PTR != pEvMemEntry) && (TRUE == pEvMemEntry->ed_stored))
	.d2line		5468
	se_cmpi		r26,0		# pEvMemEntry=r26
	bc		1,2,.L803	# eq
	lbz		r0,12(r26)		# pEvMemEntry=r26
	se_cmpi		r0,1
	bc		0,2,.L803	# ne
#                   {
#                      if (pDestBuffer != NULL_PTR)
	.d2line		5470
	se_cmpi		r29,0		# pDestBuffer=r29
	bc		1,2,.L804	# eq
	.section	.text_vle
.L3583:
#                      {
#                         /* Copy the data */
#                         CONST(Uint8NvPtrType, AUTOMATIC) pEDData = Dem_LCfg.pp_ed_storage[InternalOrigin]->p_get_buffer_entry(pEvMemEntry->ed_storage_index);
	.d2line		5473
	lis		r3,(Dem_LCfg+76)@ha		# pExtEdRecord=r3
.Llo1126:
	e_add16i		r3,r3,(Dem_LCfg+76)@l		# pExtEdRecord=r3 pExtEdRecord=r3
	rlwinm		r4,r30,2,22,29		# recOffset=r4 InternalOrigin=r30
	lwzx		r3,r3,r4		# pExtEdRecord=r3 pExtEdRecord=r3
	lwz		r0,0(r3)		# pExtEdRecord=r3
	mtspr		ctr,r0
	lhz		r3,2(r26)		# pExtEdRecord=r3 pEvMemEntry=r26
.Llo1127:
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
.Llo1133:
	mr		r3,r3		# pEDData=r3 pEDData=r3
#                         Dem_MemCpy(pDestBuffer, &pEDData[recOffset], dataSize);
	.d2line		5474
	rlwinm		r4,r22,0,16,31		# recOffset=r4 recOffset=r22
	se_add		r4,r3		# recOffset=r4 recOffset=r4 pEDData=r3
	mr		r3,r29		# pDestBuffer=r3 pDestBuffer=r29
.Llo1134:
	mr		r5,r18		# dataSize=r5 dataSize=r18
	bl		Dem_MemCpy
	.section	.text_vle
.L3584:
.L804:
#                      }
#                      *pBufSize = dataSize;
	.d2line		5476
	sth		r18,0(r28)		# pBufSize=r28 dataSize=r18
	b		.L801
.L803:
#                   }
#                   else
#                   {
#                      *pBufSize = 0;
	.d2line		5480
	diab.li		r0,0
	sth		r0,0(r28)		# pBufSize=r28
	b		.L801
.L802:
#                   }
#                }
#                else
#                {
#                   /* Buffer is not large enough */
#                   retVal = DEM_RECORD_WRONG_BUFFERSIZE;
	.d2line		5486
	diab.li		r17,4		# retVal=r17
.L801:
#                }
#             }
#             recOffset += dataSize;
	.d2line		5489
	add		r22,r22,r18		# recOffset=r22 recOffset=r22 dataSize=r18
	mr		r4,r22		# recOffset=r4 recOffset=r22
	.section	.text_vle
.L3575:
#          }
	.d2line		5490
.Llo1132:
	diab.addi		r3,r19,1		# pExtEdRecord=r3 i=r19
	diab.addi		r19,r19,1		# i=r19 i=r19
	b		.L798
	.section	.text_vle
.L3562:
.L797:
	.section	.text_vle
.L3590:
#       }
# 
#       /* Search the internal extended data records (if configured). */
#       {
#          CONST(uint8, AUTOMATIC) numRecords = Dem_LCfg.p_ed_classes[edClassIndex].num_int_ed_records;
	.d2line		5495
.Llo1112:
	lis		r3,(Dem_LCfg+104)@ha		# pExtEdRecord=r3
.Llo1128:
	lwz		r3,(Dem_LCfg+104)@l(r3)		# pExtEdRecord=r3 pExtEdRecord=r3
	rlwinm		r23,r23,4,20,27		# edClassIndex=r23 edClassIndex=r23
	add		r3,r3,r23		# pExtEdRecord=r3 pExtEdRecord=r3 edClassIndex=r23
	lbz		r23,12(r3)		# edClassIndex=r23 pExtEdRecord=r3
	mr		r23,r23		# numRecords=r23 numRecords=r23
#          CONSTP2CONST(uint8, AUTOMATIC, DEM_APPL_CONST) pRecConfigIndex = Dem_LCfg.p_ed_classes[edClassIndex].p_int_ed_record_index;
	.d2line		5496
	lwz		r22,8(r3)		# recOffset=r22 pExtEdRecord=r3
.Llo1136:
	mr		r22,r22		# pRecConfigIndex=r22 pRecConfigIndex=r22
#          uint8 i;
#          for (i = 0; (i < numRecords) && (FALSE == found); i++)
	.d2line		5498
.Llo1137:
	diab.li		r21,0		# i=r21
.L807:
.Llo1129:
	rlwinm		r3,r21,0,24,31		# pExtEdRecord=r3 i=r21
.Llo1130:
	rlwinm		r0,r23,0,24,31		# numRecords=r23
	se_cmp		r3,r0		# pExtEdRecord=r3
	bc		0,0,.L796	# ge
.Llo1131:
	rlwinm		r0,r24,0,24,31		# found=r24
	se_cmpi		r0,0
	bc		0,2,.L796	# ne
	.section	.text_vle
.L3600:
#          {
#             CONSTP2CONST(Dem_IntExtendedDataType, AUTOMATIC, DEM_APPL_CONST) pIntEdRecord = &Dem_LCfg.p_int_ed_record_define[pRecConfigIndex[i]];
	.d2line		5500
	lis		r3,(Dem_LCfg+96)@ha		# pIntEdRecord=r3
.Llo1138:
	lwz		r4,(Dem_LCfg+96)@l(r3)		# recOffset=r4 pIntEdRecord=r3
.Llo1113:
	rlwinm		r3,r21,0,24,31		# pIntEdRecord=r3 i=r21
	lbzux		r0,r3,r22		# pIntEdRecord=r3
	rlwinm		r0,r0,3,21,28
	se_add		r0,r4		# recOffset=r4
	mr		r3,r0		# pIntEdRecord=r3 pIntEdRecord=r0
#             if (ExtendedDataNumber == pIntEdRecord->record_number)
	.d2line		5501
.Llo1139:
	rlwinm		r4,r31,0,24,31		# recOffset=r4 ExtendedDataNumber=r31
.Llo1140:
	lbz		r0,0(r3)		# pIntEdRecord=r3
.Llo1141:
	se_cmp		r4,r0		# recOffset=r4
	bc		0,2,.L810	# ne
#             {
#                found = TRUE;
	.d2line		5503
.Llo1114:
	diab.li		r24,1		# found=r24
#                /*
#                 * [SWS_Dem_00469]
#                 * Read the internal data record
#                 */
#                retVal = pIntEdRecord->p_read_int_data(pEvMemEntry, InternalOrigin, EventId, intDtc, pDestBuffer, pBufSize);
	.d2line		5508
	lwz		r0,4(r3)		# pIntEdRecord=r3
	mtspr		ctr,r0
	rlwinm		r4,r30,0,24,31		# recOffset=r4 InternalOrigin=r30
	rlwinm		r5,r25,0,16,31		# dataSize=r5 EventId=r25
	rlwinm		r6,r27,0,16,31		# intDtc=r27
	mr		r3,r26		# pEvMemEntry=r3 pEvMemEntry=r26
.Llo1142:
	mr		r7,r29		# pDestBuffer=r7 pDestBuffer=r29
	mr		r8,r28		# pBufSize=r8 pBufSize=r28
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x1f8 0x0 0x0 0x1
#$$rs 1 u
	bcctrl		20,0
.Llo1107:
	mr		r17,r3		# retVal=r17 retVal=r3
.L810:
	.section	.text_vle
.L3601:
#             }
#          }
	.d2line		5510
.Llo1108:
	diab.addi		r3,r21,1		# pIntEdRecord=r3 i=r21
	diab.addi		r21,r21,1		# i=r21 i=r21
	b		.L807
	.section	.text_vle
.L3591:
.L796:
#       }
#    }
# 
#    if (FALSE == found)
	.d2line		5514
	rlwinm		r24,r24,0,24,31		# found=r24 found=r24
	se_cmpi		r24,0		# found=r24
#    {
#       /* Extended data record number not configured */
#       retVal = DEM_RECORD_WRONG_NUMBER;
	.d2line		5517
	diab.li		r3,3		# retVal=r3
	isel		r3,r3,r17,2		# retVal=r3 retVal=r3 retVal=r17
.L811:
#    }
#    return retVal;
	.d2line		5519
.Llo1101:
	rlwinm		r3,r3,0,24,31		# retVal=r3 retVal=r3
# }
	.d2line		5520
	.d2epilogue_begin
.Llo1104:
	lmw		r17,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	1,10
	lwz		r0,84(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,80		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1105:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3545:
	.type		UpdateBufferWithExtendedData,@function
	.size		UpdateBufferWithExtendedData,.-UpdateBufferWithExtendedData
# Number of nodes = 289

# Allocations for UpdateBufferWithExtendedData
#	?a4		ExtendedDataNumber
#	?a5		InternalOrigin
#	?a6		pDestBuffer
#	?a7		pBufSize
#	?a8		intDtc
#	?a9		pEvMemEntry
#	?a10		EventId
#	?a11		retVal
#	?a12		found
#	?a13		edClassIndex
#	?a14		recOffset
#	?a15		numRecords
#	?a16		pRecConfigIndex
#	?a17		i
#	?a18		pExtEdRecord
#	?a19		dataSize
#	?a20		pEDData
#	?a21		numRecords
#	?a22		pRecConfigIndex
#	?a23		i
#	?a24		pIntEdRecord
# static FUNC(void, DEM_CODE) ClearHandledEventStates(Dem_EventIdType eventId)
	.align		1
	.section	.text_vle
        .d2line         5869,29
#$$ld
.L3613:

#$$bf	ClearHandledEventStates,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
ClearHandledEventStates:
.Llo1143:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# eventId=r31 eventId=r3
	.d2prologue_end
# {
#    uint16 evStateArrayIndex = (eventId - 1U) / 4U;
	.d2line		5871
	rlwinm		r3,r3,0,16,31		# eventId=r3 eventId=r3
	diab.addi		r3,r3,-1		# eventId=r3 eventId=r3
	rlwinm		r30,r3,30,2,31		# eventId=r3
.Llo1151:
	mr		r30,r30		# evStateArrayIndex=r30 evStateArrayIndex=r30
#    uint8 shift = (uint8)(((eventId - 1U) % 4U) * 2U);
	.d2line		5872
	rlwinm		r3,r3,1,29,30		# eventId=r3 eventId=r3
.Llo1144:
	mr		r29,r3		# shift=r29 shift=r3
# 
#    /* ---------- Enter critical section ---------- */
#    SchM_Enter_Dem_EaEventStateBuffer();
	.d2line		5875
	bl		SchM_Enter_Dem_EaEventStateBuffer
#    if (Dem_BitArrayIsBitCleared(Dem_LCfg.p_event_state_update, eventId - 1U))
	.d2line		5876
.Llo1154:
	lis		r3,(Dem_LCfg+4)@ha		# eventId=r3
.Llo1145:
	lwz		r4,(Dem_LCfg+4)@l(r3)		# eventId=r3
	rlwinm		r3,r31,0,16,31		# eventId=r3 eventId=r31
	diab.addi		r3,r3,-1		# eventId=r3 eventId=r3
	se_srwi		r3,3		# eventId=r3 eventId=r3
.Llo1146:
	lbzx		r0,r4,r3
	diab.li		r3,1		# eventId=r3
.Llo1147:
	diab.addi		r31,r31,255		# eventId=r31 eventId=r31
	rlwinm		r31,r31,0,29,31		# eventId=r31 eventId=r31
	slw		r3,r3,r31		# eventId=r3 eventId=r3 eventId=r31
	rlwinm		r3,r3,0,24,31		# eventId=r3 eventId=r3
	and.		r0,r0,r3		# eventId=r3
	bc		0,2,.L874	# ne
#    {
#       Dem_ClrBits(Dem_LCfg.p_event_state_buffer[evStateArrayIndex], (uint8)~(uint8)(3U << shift));
	.d2line		5878
.Llo1148:
	lis		r3,Dem_LCfg@ha		# eventId=r3
.Llo1149:
	lwz		r3,Dem_LCfg@l(r3)		# eventId=r3 eventId=r3
.Llo1152:
	rlwinm		r30,r30,0,16,31		# evStateArrayIndex=r30 evStateArrayIndex=r30
.Llo1153:
	lbzx		r0,r3,r30		# eventId=r3
	diab.li		r4,3
	slw		r4,r4,r29		# shift=r29
	andc		r0,r0,r4
	stbx		r0,r3,r30		# eventId=r3
.L874:
#    }
#    SchM_Exit_Dem_EaEventStateBuffer();
	.d2line		5880
.Llo1150:
	bl		SchM_Exit_Dem_EaEventStateBuffer
#    /* ---------- Exit critical section ----------- */
# }
	.d2line		5882
	.d2epilogue_begin
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3614:
	.type		ClearHandledEventStates,@function
	.size		ClearHandledEventStates,.-ClearHandledEventStates
# Number of nodes = 62

# Allocations for ClearHandledEventStates
#	?a4		eventId
#	?a5		$$10
#	?a6		evStateArrayIndex
#	?a7		shift
# static FUNC(void, DEM_CODE) HandleEventStateBuffer(void)
	.align		1
	.section	.text_vle
        .d2line         5897,29
#$$ld
.L3623:

#$$bf	HandleEventStateBuffer,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
HandleEventStateBuffer:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r24,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	24,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    uint16 i;
#    uint8 k = 0;
	.d2line		5900
	diab.li		r30,0		# k=r30
#    Dem_EventIdType eventId;
#    Dem_EventStateType eventState;
#    boolean suspend = FALSE;
	.d2line		5903
.Llo1157:
	diab.li		r27,0
#    uint16 numHandledFailedEvents = 0;
	.d2line		5904
.Llo1178:
	diab.li		r26,0
#    uint16 numHandledPassedEvents = 0;
	.d2line		5905
.Llo1179:
	diab.li		r25,0
#    uint16 numUpdateBytes = (uint16)((Dem_LCfg.num_events + 7) / 8);
	.d2line		5906
.Llo1180:
	lis		r3,(Dem_LCfg+136)@ha
	lhz		r3,(Dem_LCfg+136)@l(r3)
	se_addi		r3,7
	srawi		r3,r3,3
	addze		r24,r3
.Llo1181:
	mr		r24,r24		# numUpdateBytes=r24 numUpdateBytes=r24
# 
#    for (i = 0; (FALSE == suspend) && (i < numUpdateBytes); i++)
	.d2line		5908
	diab.li		r31,0
.L878:
.Llo1155:
	rlwinm		r0,r27,0,24,31		# suspend=r27
	se_cmpi		r0,0
	bc		0,2,.L877	# ne
	rlwinm		r0,r31,0,16,31		# i=r31
	rlwinm		r3,r24,0,16,31		# eventId=r3 numUpdateBytes=r24
.Llo1158:
	se_cmp		r0,r3		# eventId=r3
	bc		0,0,.L877	# ge
#    {
#       if (0 != Dem_LCfg.p_event_state_update[DemByteToHandle])
	.d2line		5910
.Llo1159:
	lis		r3,(Dem_LCfg+4)@ha		# eventId=r3
.Llo1160:
	lwz		r4,(Dem_LCfg+4)@l(r3)		# eventId=r4 eventId=r3
	lis		r3,DemByteToHandle@ha		# eventId=r3
	lhz		r0,DemByteToHandle@l(r3)		# eventId=r3
	lbzx		r0,r4,r0		# eventId=r4
	se_cmpi		r0,0
	bc		1,2,.L881	# eq
#       {
#          /*
#           * At least one of the 8 events represented by this byte has been updated.
#           * Loop through all 8 bits.
#           */
#          eventId = (DemByteToHandle * 8U) + DemBitToHandle + 1U;
	.d2line		5916
.Llo1161:
	lis		r3,DemByteToHandle@ha		# eventId=r3
.Llo1162:
	lhz		r29,DemByteToHandle@l(r3)		# eventId=r29 eventId=r3
	se_slwi		r29,3		# eventId=r29 eventId=r29
	lis		r3,DemBitToHandle@ha		# eventId=r3
	lbz		r0,DemBitToHandle@l(r3)		# eventId=r3
	se_add		r29,r0		# eventId=r29 eventId=r29
	se_addi		r29,1		# eventId=r29 eventId=r29
	mr		r29,r29		# eventId=r29 eventId=r29
#          for (k = DemBitToHandle; (k < 8U) && (0 != Dem_LCfg.p_event_state_update[DemByteToHandle]) &&
	.d2line		5917
	mr		r30,r0		# k=r30 k=r0
.L882:
.Llo1163:
	rlwinm		r0,r30,0,24,31		# k=r30
.Llo1164:
	se_cmpli	r0,8
	bc		0,0,.L881	# ge
	lis		r3,(Dem_LCfg+4)@ha		# eventId=r3
	lwz		r4,(Dem_LCfg+4)@l(r3)		# eventId=r4 eventId=r3
	lis		r3,DemByteToHandle@ha		# eventId=r3
	lhz		r0,DemByteToHandle@l(r3)		# eventId=r3
	lbzx		r0,r4,r0		# eventId=r4
	se_cmpi		r0,0
	bc		1,2,.L881	# eq
	rlwinm		r0,r27,0,24,31		# suspend=r27
	se_cmpi		r0,0
	bc		0,2,.L881	# ne
#                                   (FALSE == suspend); k++)
#          {
#             if (Dem_IsSet(Dem_LCfg.p_event_state_update[DemByteToHandle], (uint8)(1U << k)))
	.d2line		5920
	lis		r3,(Dem_LCfg+4)@ha		# eventId=r3
	lwz		r4,(Dem_LCfg+4)@l(r3)		# eventId=r4 eventId=r3
	lis		r3,DemByteToHandle@ha		# eventId=r3
	lhz		r0,DemByteToHandle@l(r3)		# eventId=r3
	lbzx		r3,r4,r0		# eventId=r3 eventId=r4
	diab.li		r0,1
	slw		r0,r0,r30		# k=r30
	rlwinm		r0,r0,0,24,31
	and.		r0,r0,r3		# eventId=r3
	bc		1,2,.L885	# eq
#             {
#                /* Updated event found */
#                eventState = GetEventStateInBuffer(eventId);
	.d2line		5923
	mr		r3,r29		# eventId=r3 eventId=r29
	bl		GetEventStateInBuffer
.Llo1174:
	mr		r28,r3		# eventState=r28 eventState=r3
#                HandleEventState(eventId, eventState);
	.d2line		5924
.Llo1175:
	mr		r3,r29		# eventId=r3 eventId=r29
.Llo1176:
	mr		r4,r28		# eventState=r4 eventState=r28
	bl		HandleEventState
#                if (DEM_EVENT_STATE_PASSED == eventState)
	.d2line		5925
	rlwinm		r28,r28,0,24,31		# eventState=r28 eventState=r28
	se_cmpi		r28,1		# eventState=r28
	bc		0,2,.L886	# ne
#                {
#                   numHandledPassedEvents++;
	.d2line		5927
.Llo1177:
	diab.addi		r0,r25,1		# numHandledPassedEvents=r25
	se_addi		r25,1		# numHandledPassedEvents=r25 numHandledPassedEvents=r25
	b		.L887
.L886:
#                }
#                else
#                {
#                   numHandledFailedEvents++;
	.d2line		5931
	diab.addi		r0,r26,1		# numHandledFailedEvents=r26
	se_addi		r26,1		# numHandledFailedEvents=r26 numHandledFailedEvents=r26
.L887:
#                }
# 
#                if ((numHandledPassedEvents >= Dem_LCfg.max_handled_passed_events_per_scheduling) ||
	.d2line		5934
	rlwinm		r0,r25,0,16,31		# numHandledPassedEvents=r25
	lis		r3,(Dem_LCfg+144)@ha		# eventId=r3
	lhz		r3,(Dem_LCfg+144)@l(r3)		# eventId=r3 eventId=r3
	se_cmp		r0,r3		# eventId=r3
	bc		0,0,.L892	# ge
	rlwinm		r0,r26,0,16,31		# numHandledFailedEvents=r26
	lis		r3,(Dem_LCfg+146)@ha		# eventId=r3
	lhz		r3,(Dem_LCfg+146)@l(r3)		# eventId=r3 eventId=r3
	se_cmp		r0,r3		# eventId=r3
	bc		0,0,.L892	# ge
	lis		r3,Dem_NvTriggerImmediateNvStorage@ha		# eventId=r3
	lbz		r0,Dem_NvTriggerImmediateNvStorage@l(r3)		# eventId=r3
	se_cmpi		r0,1
	bc		0,2,.L885	# ne
.L892:
#                    (numHandledFailedEvents >= Dem_LCfg.max_handled_failed_events_per_scheduling) ||
#                    (TRUE == Dem_NvTriggerImmediateNvStorage))
#                {
#                   /* [VSTAR_Dem_00149], [VSTAR_Dem_00150], [VSTAR_Dem_00151]
#                    * There is one limit for the FDCTR and FAILED states,
#                    * which are the heavy ones, and another limit for the PASSED states.
#                    * Remember which bit to continue with, next scheduling.
#                    * Suspend if an event memory entry is triggered for immediate storage.
#                    * Store that one and then continue with the other events in the buffer.
#                    */
#                   suspend = TRUE;
	.d2line		5945
	diab.li		r27,1		# suspend=r27
.L885:
#                }
#             }
#             eventId++;
	.d2line		5948
	diab.addi		r3,r29,1		# eventId=r3 eventId=r29
	se_addi		r29,1		# eventId=r29 eventId=r29
#          }
	.d2line		5949
	diab.addi		r0,r30,1		# k=r30
	se_addi		r30,1		# k=r30 k=r30
	b		.L882
.L881:
#       }
# 
#       if ((k >= 8U) || (0 == Dem_LCfg.p_event_state_update[DemByteToHandle]))
	.d2line		5952
	rlwinm		r0,r30,0,24,31		# k=r30
	se_cmpli	r0,8
	bc		0,0,.L893	# ge
.Llo1165:
	lis		r3,(Dem_LCfg+4)@ha		# eventId=r3
.Llo1166:
	lwz		r4,(Dem_LCfg+4)@l(r3)		# eventId=r4 eventId=r3
	lis		r3,DemByteToHandle@ha		# eventId=r3
	lhz		r0,DemByteToHandle@l(r3)		# eventId=r3
	lbzx		r0,r4,r0		# eventId=r4
	se_cmpi		r0,0
	bc		0,2,.L889	# ne
.L893:
#       {
#          /*
#           * Only increase the byte index for next scheduling if we are finished with all bits in the byte.
#           * Reset the bit index to 0 when we are finished with the currently handled byte.
#           */
#          DemByteToHandle++;
	.d2line		5958
.Llo1167:
	lis		r3,DemByteToHandle@ha		# eventId=r3
.Llo1168:
	lhz		r4,DemByteToHandle@l(r3)		# eventId=r4 eventId=r3
	diab.addi		r0,r4,1		# eventId=r4
	e_add16i		r4,r3,DemByteToHandle@l		# eventId=r4 eventId=r3
	sth		r0,0(r4)		# eventId=r4
#          DemBitToHandle = 0;
	.d2line		5959
	diab.li		r0,0
	lis		r4,DemBitToHandle@ha		# eventId=r4
	e_add16i		r4,r4,DemBitToHandle@l		# eventId=r4 eventId=r4
	stb		r0,0(r4)		# eventId=r4
#          if (DemByteToHandle >= numUpdateBytes)
	.d2line		5960
	lhz		r0,DemByteToHandle@l(r3)		# eventId=r3
	rlwinm		r3,r24,0,16,31		# eventId=r3 numUpdateBytes=r24
	se_cmp		r0,r3		# eventId=r3
	bc		1,0,.L891	# lt
#          {
#             DemByteToHandle = 0;
	.d2line		5962
.Llo1169:
	diab.li		r0,0
	lis		r3,DemByteToHandle@ha		# eventId=r3
.Llo1170:
	e_add16i		r3,r3,DemByteToHandle@l		# eventId=r3 eventId=r3
	sth		r0,0(r3)		# eventId=r3
	b		.L891
.L889:
#          }
#       }
#       else
#       {
#          /*
#           * The execution will be suspended and resumed the next scheduling.
#           * Remember which bit position in the byte to continue with next scheduling.
#           */
#          DemBitToHandle = k;
	.d2line		5971
.Llo1171:
	lis		r3,DemBitToHandle@ha		# eventId=r3
.Llo1172:
	e_add16i		r3,r3,DemBitToHandle@l		# eventId=r3 eventId=r3
	stb		r30,0(r3)		# eventId=r3 k=r30
.L891:
#       }
#    }
	.d2line		5973
.Llo1173:
	diab.addi		r0,r31,1		# i=r31
	se_addi		r31,1		# i=r31 i=r31
	b		.L878
.L877:
# }
	.d2line		5974
	.d2epilogue_begin
.Llo1156:
	lmw		r24,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	2,10
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3624:
	.type		HandleEventStateBuffer,@function
	.size		HandleEventStateBuffer,.-HandleEventStateBuffer
# Number of nodes = 189

# Allocations for HandleEventStateBuffer
#	?a4		i
#	?a5		k
#	?a6		eventId
#	?a7		eventState
#	?a8		suspend
#	?a9		numHandledFailedEvents
#	?a10		numHandledPassedEvents
#	?a11		numUpdateBytes
# static FUNC(void, DEM_CODE) OpCycleStartAllEvents(uint8 opCycleId)
	.align		1
	.section	.text_vle
        .d2line         6005,29
#$$ld
.L3644:

#$$bf	OpCycleStartAllEvents,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
OpCycleStartAllEvents:
.Llo1182:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	27,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# opCycleId=r31 opCycleId=r3
	.d2prologue_end
# {
#    Dem_EventIdType evId;
# 
#    for (evId = (Dem_EventIdType)1; evId <= Dem_LCfg.num_events; evId++)
	.d2line		6009
	diab.li		r30,1		# evId=r30
.L907:
.Llo1183:
	rlwinm		r0,r30,0,16,31		# evId=r30
.Llo1184:
	lis		r3,(Dem_LCfg+136)@ha		# intDtc=r3
.Llo1188:
	lhz		r3,(Dem_LCfg+136)@l(r3)		# intDtc=r3 intDtc=r3
	se_cmp		r0,r3		# intDtc=r3
	bc		1,1,.L906	# gt
#    {
#       if (Dem_GetOpCycle(evId) == opCycleId)
	.d2line		6011
.Llo1189:
	lis		r4,Dem_pPbCfg@ha		# dtcUdsStatusOld=r4
.Llo1195:
	lwz		r3,Dem_pPbCfg@l(r4)		# intDtc=r3 dtcUdsStatusOld=r4
.Llo1190:
	lwz		r3,52(r3)		# intDtc=r3 intDtc=r3
	lwz		r4,Dem_pPbCfg@l(r4)		# dtcUdsStatusOld=r4 dtcUdsStatusOld=r4
	lwz		r4,104(r4)		# dtcUdsStatusOld=r4 dtcUdsStatusOld=r4
	rlwinm		r0,r30,0,16,31		# evId=r30
	se_add		r4,r0		# dtcUdsStatusOld=r4 dtcUdsStatusOld=r4
	lbz		r0,-1(r4)		# dtcUdsStatusOld=r4
	lbzx		r0,r3,r0		# intDtc=r3
	rlwinm		r3,r31,0,24,31		# intDtc=r3 opCycleId=r31
	se_cmp		r0,r3		# intDtc=r3
	bc		0,2,.L910	# ne
	.section	.text_vle
.L3650:
#       {
#          /* Found an event with this op-cycle */
#          CONST(Dem_UdsStatusByteType, AUTOMATIC) eventUdsStatusOld = Dem_GetUdsStatus(evId);
	.d2line		6014
.Llo1191:
	lis		r3,(Dem_NvUdsStatus-1)@ha		# intDtc=r3
.Llo1192:
	e_add16i		r3,r3,(Dem_NvUdsStatus-1)@l		# intDtc=r3 intDtc=r3
	rlwinm		r0,r30,0,16,31		# evId=r30
	lbzx		r29,r3,r0		# intDtc=r3
.Llo1186:
	mr		r29,r29		# eventUdsStatusOld=r29 eventUdsStatusOld=r29
#          CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(evId);
	.d2line		6015
	lis		r3,Dem_pPbCfg@ha		# intDtc=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# intDtc=r3 intDtc=r3
	lwz		r3,128(r3)		# intDtc=r3 intDtc=r3
	rlwinm		r0,r30,1,15,30		# evId=r30
	se_add		r3,r0		# intDtc=r3 intDtc=r3
	lhz		r28,-2(r3)		# intDtc=r28 intDtc=r3
	mr		r28,r28		# intDtc=r28 intDtc=r28
#          CONST(Dem_UdsStatusByteType, AUTOMATIC) dtcUdsStatusOld = Dem_GetUdsStatusForValidDtc(intDtc);
	.d2line		6016
	rlwinm		r3,r28,0,16,31		# intDtc=r3 intDtc=r28
	cmpli		0,0,r3,65535		# intDtc=r3
	bc		0,2,.L912	# ne
.Llo1193:
	diab.li		r27,0		# dtcUdsStatusOld=r27
.Llo1194:
	b		.L913
.L912:
.Llo1196:
	rlwinm		r3,r28,0,16,31		# intDtc=r3 intDtc=r28
	bl		Dem_GetUdsStatusByIntDtc
.Llo1197:
	mr		r27,r3		# dtcUdsStatusOld=r27 dtcUdsStatusOld=r3
.L913:
# 
#          Dem_SetUdsBits(evId, DEM_UDS_SB_TNCTOC_SET); /* [SWS_Dem_00394] */
	.d2line		6018
.Llo1198:
	mr		r3,r30		# evId=r3 evId=r30
.Llo1199:
	diab.li		r4,64		# dtcUdsStatusOld=r4
	bl		Dem_SetUdsBits
#          Dem_ClrUdsBits(evId, DEM_UDS_SB_TFTOC_CLR); /* [SWS_Dem_00389] */
	.d2line		6019
	mr		r3,r30		# evId=r3 evId=r30
	diab.li		r4,253		# dtcUdsStatusOld=r4
	bl		Dem_ClrUdsBits
#          Dem_ClrSiFdcThresholdReachedTOC(evId);
	.d2line		6020
	rlwinm		r3,r30,0,16,31		# evId=r3 evId=r30
	bl		Dem_ClrSiFdcThresholdReachedTOC
# 
#          /* Clear pre-debouncing counter */
#          Dem_SetDebouncingCounter(evId, DEM_DB_COUNTER_CLEAR);
	.d2line		6023
	mr		r3,r30		# evId=r3 evId=r30
	diab.li		r4,2		# dtcUdsStatusOld=r4
	bl		Dem_SetDebouncingCounter
# 
# #if (STD_ON == DEM_OBD_SUPPORT)
#          /* Set event as enabled for this operation cycle */
#          Dem_BitArraySetBit(Dem_NvOBDAdmin.event_enabled, evId - 1U);
# #endif
# 
#          if (Dem_LCfg.p_events[evId - 1U].p_init_m_for_e != NULL_PTR)
	.d2line		6030
	lis		r3,(Dem_LCfg+16)@ha		# evId=r3
	lwz		r0,(Dem_LCfg+16)@l(r3)		# evId=r3
	rlwinm		r3,r30,0,16,31		# evId=r3 evId=r30
	e_mulli		r3,r3,20		# evId=r3 evId=r3
	se_add		r3,r0		# evId=r3 evId=r3
	lwz		r0,-20(r3)		# evId=r3
	se_cmpi		r0,0
	bc		1,2,.L911	# eq
#          {
#             /*
#              * MISRA-C:2004 RULE 16.10 VIOLATION:
#              * If a function returns error information, then that error information shall be tested.
#              * SWS_Dem_00003: The Dem module does not evaluate the return value (e.g. if other than E_OK) of this callback function.
#              */
#             /* Call InitMonitor-function */
#             (void)Dem_LCfg.p_events[evId - 1U].p_init_m_for_e(DEM_INIT_MONITOR_RESTART);
	.d2line		6038
	lis		r3,(Dem_LCfg+16)@ha		# evId=r3
	lwz		r0,(Dem_LCfg+16)@l(r3)		# evId=r3
	rlwinm		r3,r30,0,16,31		# evId=r3 evId=r30
	e_mulli		r3,r3,20		# evId=r3 evId=r3
	se_add		r3,r0		# evId=r3 evId=r3
	lwz		r0,-20(r3)		# evId=r3
	mtspr		ctr,r0
	diab.li		r3,2		# evId=r3
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 1 u
	bcctrl		20,0
.L911:
#          }
# 
#          Dem_TriggerOnEventStatus(evId, eventUdsStatusOld);
	.d2line		6041
	mr		r3,r30		# evId=r3 evId=r30
	mr		r4,r29		# eventUdsStatusOld=r4 eventUdsStatusOld=r29
	bl		Dem_TriggerOnEventStatus
#          Dem_TriggerOnDTCStatus(intDtc, dtcUdsStatusOld, FALSE);
	.d2line		6042
	mr		r3,r28		# intDtc=r3 intDtc=r28
	mr		r4,r27		# dtcUdsStatusOld=r4 dtcUdsStatusOld=r27
	diab.li		r5,0
	bl		Dem_TriggerOnDTCStatus
	.section	.text_vle
.L3651:
.L910:
#       }
#    }
	.d2line		6044
.Llo1187:
	diab.addi		r0,r30,1		# evId=r30
	se_addi		r30,1		# evId=r30 evId=r30
	b		.L907
.L906:
# }
	.d2line		6045
	.d2epilogue_begin
.Llo1185:
	lmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3645:
	.type		OpCycleStartAllEvents,@function
	.size		OpCycleStartAllEvents,.-OpCycleStartAllEvents
# Number of nodes = 151

# Allocations for OpCycleStartAllEvents
#	?a4		opCycleId
#	?a5		evId
#	?a6		eventUdsStatusOld
#	?a7		intDtc
#	?a8		dtcUdsStatusOld
# static FUNC(void, DEM_CODE) SetOperationCycleStateStart(uint8 opCycleId)
	.align		1
	.section	.text_vle
        .d2line         5976,29
#$$ld
.L3662:

#$$bf	SetOperationCycleStateStart,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
SetOperationCycleStateStart:
.Llo1200:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
# #if (STD_ON == DEM_OBD_SUPPORT)
#    if (opCycleId == Dem_LCfg.driving_cycle_id)
#    {
# #if (STD_ON == DEM_OBD_PERMANENT_SUPPORT)
#       uint8 i;
# 
#       /* [VSTAR_Dem_00051]
#        * Reset permanent memory clear physical conditions-flag
#        */
#       for (i = 0; i < Dem_LCfg.max_permanent_entries; i++)
#       {
#          Dem_NvOBDPermanent.perm_ev_mem_phys_cond_fulfilled[i] = FALSE;
#       }
# #endif /* STD_ON == DEM_OBD_PERMANENT_SUPPORT */
# 
#       /* [VSTAR_Dem_00081]
#        * Automatically end WUC at start of OBD driving cycle to be able to register 
#        * fulfilled WUC conditions during the cycle.
#        */
#       SetOpCycleState(Dem_LCfg.warmup_cycle_id, DEM_CYCLE_STATE_END);
#    }
# #endif /* STD_ON == DEM_OBD_SUPPORT */
# 
#    OpCycleStartAllEvents(opCycleId);
	.d2line		6001
	mr		r0,r3		# opCycleId=r0 opCycleId=r3
	bl		OpCycleStartAllEvents
# }
	.d2line		6002
	.d2epilogue_begin
.Llo1201:
	lwz		r0,20(r1)
	mtspr		lr,r0
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3663:
	.type		SetOperationCycleStateStart,@function
	.size		SetOperationCycleStateStart,.-SetOperationCycleStateStart
# Number of nodes = 5

# Allocations for SetOperationCycleStateStart
#	?a4		opCycleId
# static FUNC(void, DEM_CODE) IncrementOffBoardCounters(Dem_NvEvMemEntryPtrType pEvMemEntry)
	.align		1
	.section	.text_vle
        .d2line         6236,29
#$$ld
.L3668:

#$$bf	IncrementOffBoardCounters,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,cr0,lr
	.d2_cfa_start __cie
IncrementOffBoardCounters:
.Llo1202:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	mr		r4,r3		# pEvMemEntry=r4 pEvMemEntry=r3
	.d2prologue_end
# {
#    /* [SWS_Dem_00773] [SWS_Dem_00774] */
#    if (pEvMemEntry->cycles_since_last_failed < DEM_UINT8_MAX)
	.d2line		6239
	lbz		r0,16(r4)		# pEvMemEntry=r4
	cmpi		0,0,r0,255
	bc		0,0,.L969	# ge
#    {
#       pEvMemEntry->cycles_since_last_failed++;
	.d2line		6241
.Llo1203:
	lbz		r3,16(r4)		# pEvMemEntry=r4
.Llo1204:
	se_addi		r3,1
	stb		r3,16(r4)		# pEvMemEntry=r4
.L969:
#    }
# 
#    /* [SWS_Dem_00777] [SWS_Dem_00778]
#     * Since an event memory entry can be configured to be allocated on FDC_THRESHOLD_REACHED,
#     * we need to check that the event has reached testFailed threshold before starting incrementing.
#     */
#    if (Dem_IsSet(pEvMemEntry->uds_status, DEM_UDS_SB_TFSLC) &&
	.d2line		6248
	lbz		r0,13(r4)		# pEvMemEntry=r4
	se_btsti		r0,26
	bc		1,2,.L970	# eq
	lbz		r0,17(r4)		# pEvMemEntry=r4
	cmpi		0,0,r0,255
	bc		0,0,.L970	# ge
#       (pEvMemEntry->cycles_since_first_failed < DEM_UINT8_MAX))
#    {
#       pEvMemEntry->cycles_since_first_failed++;
	.d2line		6251
	lbz		r3,17(r4)		# pEvMemEntry=r4
	se_addi		r3,1
	stb		r3,17(r4)		# pEvMemEntry=r4
.L970:
#    }
# 
#    /* [SWS_Dem_00781] [SWS_Dem_00782] */
#    if (Dem_IsSet(pEvMemEntry->uds_status, DEM_UDS_SB_TFTOC) &&
	.d2line		6255
	lbz		r0,13(r4)		# pEvMemEntry=r4
	se_btsti		r0,30
	bc		1,2,.L968	# eq
	lbz		r0,18(r4)		# pEvMemEntry=r4
	cmpi		0,0,r0,255
	bc		0,0,.L968	# ge
#       (pEvMemEntry->failed_cycles < DEM_UINT8_MAX))
#    {
#       pEvMemEntry->failed_cycles++;
	.d2line		6258
	lbz		r3,18(r4)		# pEvMemEntry=r4
	se_addi		r3,1
	stb		r3,18(r4)		# pEvMemEntry=r4
.L968:
#    }
# }
	.d2line		6260
	.d2epilogue_begin
.Llo1205:
	lwz		r0,20(r1)
.Llo1206:
	mtspr		lr,r0
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1207:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3669:
	.type		IncrementOffBoardCounters,@function
	.size		IncrementOffBoardCounters,.-IncrementOffBoardCounters
# Number of nodes = 54

# Allocations for IncrementOffBoardCounters
#	?a4		pEvMemEntry
# static FUNC(void, DEM_CODE) OpCycleEndAllEvMemEntries(uint8 opCycleId)
	.align		1
	.section	.text_vle
        .d2line         6167,29
#$$ld
.L3674:

#$$bf	OpCycleEndAllEvMemEntries,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
OpCycleEndAllEvMemEntries:
.Llo1208:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	27,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# opCycleId=r31 opCycleId=r3
	.d2prologue_end
# {
#    uint8 origin;
# 
#    for (origin = (uint8)0; origin < DEM_NUMBER_OF_ORIGINS; origin++)
	.d2line		6171
	diab.li		r30,0		# origin=r30
.L939:
.Llo1209:
	rlwinm		r4,r30,0,24,31		# origin=r4 origin=r30
.Llo1210:
	se_cmpi		r4,2		# origin=r4
	bc		0,0,.L938	# ge
#    {
#       /* Find any event in any of event memories */
#       if (Dem_EvMemExist(origin) && (NULL_PTR != Dem_GetEvMemEntriesPtr(origin)))
	.d2line		6174
	lis		r3,(Dem_LCfg+20)@ha		# evMemEntryIndex=r3
.Llo1214:
	e_add16i		r3,r3,(Dem_LCfg+20)@l		# evMemEntryIndex=r3 evMemEntryIndex=r3
	rlwinm		r4,r30,2,22,29		# origin=r4 origin=r30
	lwzx		r0,r3,r4		# eventId=r0 evMemEntryIndex=r3
.Llo1225:
	se_cmpi		r0,0		# eventId=r0
	bc		1,2,.L942	# eq
.Llo1215:
	lis		r3,(Dem_LCfg+20)@ha		# evMemEntryIndex=r3
.Llo1216:
	e_add16i		r3,r3,(Dem_LCfg+20)@l		# evMemEntryIndex=r3 evMemEntryIndex=r3
	rlwinm		r4,r30,2,22,29		# origin=r4 origin=r30
	lwzx		r3,r3,r4		# evMemEntryIndex=r3 evMemEntryIndex=r3
	lwz		r0,0(r3)		# eventId=r0 evMemEntryIndex=r3
.Llo1226:
	se_cmpi		r0,0		# eventId=r0
	bc		1,2,.L942	# eq
	.section	.text_vle
.L3680:
#       {
#          uint8 evMemEntryIndex;
#          CONSTP2CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC, DEM_APPL_CONST) pEntries = Dem_GetEvMemEntriesPtr(origin);
	.d2line		6177
.Llo1217:
	lis		r3,(Dem_LCfg+20)@ha		# evMemEntryIndex=r3
.Llo1218:
	e_add16i		r3,r3,(Dem_LCfg+20)@l		# evMemEntryIndex=r3 evMemEntryIndex=r3
	rlwinm		r4,r30,2,22,29		# origin=r4 origin=r30
	lwzx		r3,r3,r4		# evMemEntryIndex=r3 evMemEntryIndex=r3
	lwz		r28,0(r3)		# evMemEntryIndex=r3
.Llo1221:
	mr		r28,r28		# pEntries=r28 pEntries=r28
# 
#          for (evMemEntryIndex = 0; evMemEntryIndex < Dem_MaxNumEvMemEntries[origin]; evMemEntryIndex++)
	.d2line		6179
.Llo1222:
	diab.li		r29,0		# evMemEntryIndex=r29
.L943:
.Llo1219:
	rlwinm		r0,r29,0,24,31		# eventId=r0 evMemEntryIndex=r29
.Llo1220:
	lis		r3,Dem_MaxNumEvMemEntries@ha		# evMemEntryIndex=r3
	e_add16i		r3,r3,Dem_MaxNumEvMemEntries@l		# evMemEntryIndex=r3 evMemEntryIndex=r3
	rlwinm		r4,r30,0,24,31		# origin=r4 origin=r30
	lbzx		r3,r3,r4		# evMemEntryIndex=r3 evMemEntryIndex=r3
	se_cmp		r0,r3		# eventId=r0 evMemEntryIndex=r3
	bc		0,0,.L942	# ge
	.section	.text_vle
.L3689:
#          {
#             CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC) pEvMemEntry = pEntries[evMemEntryIndex];
	.d2line		6181
.Llo1227:
	rlwinm		r3,r29,2,22,29		# evMemEntryIndex=r3 evMemEntryIndex=r29
	lwzux		r27,r3,r28		# pEvMemEntry=r27 evMemEntryIndex=r3
.Llo1223:
	mr		r27,r27		# pEvMemEntry=r27 pEvMemEntry=r27
#             CONST(Dem_EventIdType, AUTOMATIC) eventId = pEvMemEntry->event_id;
	.d2line		6182
	lhz		r0,0(r27)		# eventId=r0 pEvMemEntry=r27
.Llo1228:
	mr		r0,r0		# eventId=r0 eventId=r0
#             if (DEM_EVENTID_INVALID != eventId)
	.d2line		6183
	rlwinm		r3,r0,0,16,31		# evMemEntryIndex=r3 eventId=r0
	se_cmpi		r3,0		# evMemEntryIndex=r3
	bc		1,2,.L946	# eq
#             {
# #if (STD_ON == DEM_OBD_SUPPORT)
#                /* Additional aging counter for emission related events (warm-up cycle counter) */
#                if (Dem_LCfg.driving_cycle_id == opCycleId)
#                {
#                   if ((DEM_CYCLE_STATE_START == GetOpCycleState(Dem_LCfg.warmup_cycle_id)) &&
#                      Dem_IsClr(pEvMemEntry->uds_status, DEM_UDS_SB_WIR) &&
#                      (pEvMemEntry->wuc_counter < DEM_UINT8_MAX))
#                   {
#                      /* [VSTAR_Dem_00083], [VSTAR_Dem_00365] */
#                      pEvMemEntry->wuc_counter++;
#                   }
#                }
# #endif /* STD_ON == DEM_OBD_SUPPORT */
# 
#                if (Dem_GetOpCycle(eventId) == opCycleId)
	.d2line		6199
.Llo1229:
	lis		r4,Dem_pPbCfg@ha		# origin=r4
	lwz		r3,Dem_pPbCfg@l(r4)		# evMemEntryIndex=r3 origin=r4
	lwz		r3,52(r3)		# evMemEntryIndex=r3 evMemEntryIndex=r3
	lwz		r4,Dem_pPbCfg@l(r4)		# origin=r4 origin=r4
	lwz		r4,104(r4)		# origin=r4 origin=r4
.Llo1230:
	rlwinm		r0,r0,0,16,31		# eventId=r0 eventId=r0
	se_add		r4,r0		# origin=r4 origin=r4 eventId=r0
	lbz		r0,-1(r4)		# eventId=r0 origin=r4
	lbzx		r0,r3,r0		# eventId=r0 evMemEntryIndex=r3
	rlwinm		r3,r31,0,24,31		# evMemEntryIndex=r3 opCycleId=r31
	se_cmp		r0,r3		# eventId=r0 evMemEntryIndex=r3
	bc		0,2,.L947	# ne
#                {
#                   IncrementOffBoardCounters(pEvMemEntry);
	.d2line		6201
.Llo1231:
	mr		r3,r27		# pEvMemEntry=r3 pEvMemEntry=r27
	bl		IncrementOffBoardCounters
.L947:
#                }
#                Dem_HandleHealingCounter(pEvMemEntry, opCycleId);
	.d2line		6203
	rlwinm		r4,r31,0,24,31		# origin=r4 opCycleId=r31
	mr		r3,r27		# pEvMemEntry=r3 pEvMemEntry=r27
	bl		Dem_HandleHealingCounter
#                Dem_HandleFailureCounter(pEvMemEntry, opCycleId);
	.d2line		6204
	rlwinm		r4,r31,0,24,31		# origin=r4 opCycleId=r31
	mr		r3,r27		# pEvMemEntry=r3 pEvMemEntry=r27
	bl		Dem_HandleFailureCounter
#                HandleAging(evMemEntryIndex, origin, opCycleId);
	.d2line		6205
	mr		r5,r31		# opCycleId=r5 opCycleId=r31
	mr		r3,r29		# evMemEntryIndex=r3 evMemEntryIndex=r29
	mr		r4,r30		# origin=r4 origin=r30
	bl		HandleAging
.L946:
	.section	.text_vle
.L3690:
#             }
#          }
	.d2line		6207
.Llo1224:
	diab.addi		r0,r29,1		# eventId=r0 evMemEntryIndex=r29
	se_addi		r29,1		# evMemEntryIndex=r29 evMemEntryIndex=r29
	b		.L943
	.section	.text_vle
.L3681:
.L942:
#       }
#    }
	.d2line		6209
	diab.addi		r4,r30,1		# origin=r4 origin=r30
	se_addi		r30,1		# origin=r30 origin=r30
	b		.L939
.L938:
# }
	.d2line		6210
	.d2epilogue_begin
.Llo1211:
	lmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
.Llo1212:
	lwz		r0,52(r1)		# eventId=r0
	mtspr		lr,r0		# eventId=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1213:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3675:
	.type		OpCycleEndAllEvMemEntries,@function
	.size		OpCycleEndAllEvMemEntries,.-OpCycleEndAllEvMemEntries
# Number of nodes = 131

# Allocations for OpCycleEndAllEvMemEntries
#	?a4		opCycleId
#	?a5		origin
#	?a6		evMemEntryIndex
#	?a7		pEntries
#	?a8		pEvMemEntry
#	?a9		eventId
# static FUNC(void, DEM_CODE) OpCycleEndAllEvents(uint8 opCycleId)
	.align		1
	.section	.text_vle
        .d2line         6262,29
#$$ld
.L3699:

#$$bf	OpCycleEndAllEvents,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
OpCycleEndAllEvents:
.Llo1232:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	27,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# opCycleId=r31 opCycleId=r3
	.d2prologue_end
# {
#    Dem_EventIdType evId;
# 
#    for (evId = (Dem_EventIdType)1; evId <= Dem_LCfg.num_events; evId++)
	.d2line		6266
	diab.li		r30,1		# evId=r30
.L976:
.Llo1233:
	rlwinm		r4,r30,0,16,31		# dtcUdsStatusOld=r4 evId=r30
.Llo1234:
	lis		r3,(Dem_LCfg+136)@ha		# intDtc=r3
.Llo1238:
	lhz		r0,(Dem_LCfg+136)@l(r3)		# intDtc=r3
	se_cmp		r4,r0		# dtcUdsStatusOld=r4
	bc		1,1,.L975	# gt
#    {
#       if (Dem_GetOpCycle(evId) == opCycleId)
	.d2line		6268
.Llo1239:
	lis		r4,Dem_pPbCfg@ha		# dtcUdsStatusOld=r4
.Llo1245:
	lwz		r3,Dem_pPbCfg@l(r4)		# intDtc=r3 dtcUdsStatusOld=r4
.Llo1240:
	lwz		r3,52(r3)		# intDtc=r3 intDtc=r3
	lwz		r4,Dem_pPbCfg@l(r4)		# dtcUdsStatusOld=r4 dtcUdsStatusOld=r4
	lwz		r0,104(r4)		# dtcUdsStatusOld=r4
	rlwinm		r4,r30,0,16,31		# dtcUdsStatusOld=r4 evId=r30
	se_add		r4,r0		# dtcUdsStatusOld=r4 dtcUdsStatusOld=r4
	lbz		r0,-1(r4)		# dtcUdsStatusOld=r4
	lbzx		r0,r3,r0		# intDtc=r3
	rlwinm		r3,r31,0,24,31		# intDtc=r3 opCycleId=r31
	se_cmp		r0,r3		# intDtc=r3
	bc		0,2,.L979	# ne
	.section	.text_vle
.L3705:
#       {
#          /* Found an event with this op-cycle */
#          CONST(Dem_UdsStatusByteType, AUTOMATIC) eventUdsStatusOld = Dem_GetUdsStatus(evId);
	.d2line		6271
.Llo1241:
	lis		r3,(Dem_NvUdsStatus-1)@ha		# intDtc=r3
.Llo1242:
	e_add16i		r3,r3,(Dem_NvUdsStatus-1)@l		# intDtc=r3 intDtc=r3
	rlwinm		r4,r30,0,16,31		# dtcUdsStatusOld=r4 evId=r30
	lbzx		r29,r3,r4		# eventUdsStatusOld=r29 intDtc=r3
.Llo1236:
	mr		r29,r29		# eventUdsStatusOld=r29 eventUdsStatusOld=r29
#          CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(evId);
	.d2line		6272
	lis		r3,Dem_pPbCfg@ha		# intDtc=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# intDtc=r3 intDtc=r3
	lwz		r0,128(r3)		# intDtc=r3
	rlwinm		r3,r30,1,15,30		# intDtc=r3 evId=r30
	se_add		r3,r0		# intDtc=r3 intDtc=r3
	lhz		r28,-2(r3)		# intDtc=r28 intDtc=r3
	mr		r28,r28		# intDtc=r28 intDtc=r28
#          CONST(Dem_UdsStatusByteType, AUTOMATIC) dtcUdsStatusOld = Dem_GetUdsStatusForValidDtc(intDtc);
	.d2line		6273
	rlwinm		r3,r28,0,16,31		# intDtc=r3 intDtc=r28
	cmpli		0,0,r3,65535		# intDtc=r3
	bc		0,2,.L981	# ne
.Llo1243:
	diab.li		r27,0		# dtcUdsStatusOld=r27
.Llo1244:
	b		.L982
.L981:
.Llo1246:
	rlwinm		r3,r28,0,16,31		# intDtc=r3 intDtc=r28
	bl		Dem_GetUdsStatusByIntDtc
.Llo1247:
	mr		r27,r3		# dtcUdsStatusOld=r27 dtcUdsStatusOld=r3
.L982:
# 
#          if (Dem_IsClr(eventUdsStatusOld, (Dem_UdsStatusByteType)(DEM_UDS_SB_TFTOC | DEM_UDS_SB_TNCTOC)))
	.d2line		6275
.Llo1248:
	rlwinm		r0,r29,0,24,31		# eventUdsStatusOld=r29
.Llo1249:
	e_andi.		r0,r0,66
	se_cmpi		r0,0
	bc		0,2,.L980	# ne
#          {
#             /* [SWS_Dem_00390]
#              * The test for this event has passed but never failed during the now
#              * finished operation cycle. -> Clear pending bit.
#              */
#             Dem_ClrUdsBits(evId, DEM_UDS_SB_PDTC_CLR);
	.d2line		6281
	mr		r3,r30		# evId=r3 evId=r30
	diab.li		r4,251		# dtcUdsStatusOld=r4
	bl		Dem_ClrUdsBits
.L980:
#          }
# 
#          /* Clear already handled event states in buffer so reached debouncing
#           * thresholds in UpdateEventState() will result in Dem_MainFunction() handling for the event.
#           * Not yet handled events will remain in the buffer to avoid loosing event reports due to the asynchronous implementation.
#           * They will be processed in the next operation cycle.
#           */
#          ClearHandledEventStates(evId);
	.d2line		6289
	mr		r3,r30		# evId=r3 evId=r30
	bl		ClearHandledEventStates
# 
#          Dem_TriggerOnEventStatus(evId, eventUdsStatusOld);
	.d2line		6291
	mr		r3,r30		# evId=r3 evId=r30
	mr		r4,r29		# eventUdsStatusOld=r4 eventUdsStatusOld=r29
	bl		Dem_TriggerOnEventStatus
#          Dem_TriggerOnDTCStatus(intDtc, dtcUdsStatusOld, FALSE);
	.d2line		6292
	mr		r3,r28		# intDtc=r3 intDtc=r28
	mr		r4,r27		# dtcUdsStatusOld=r4 dtcUdsStatusOld=r27
	diab.li		r5,0
	bl		Dem_TriggerOnDTCStatus
	.section	.text_vle
.L3706:
.L979:
#       }
#    }
	.d2line		6294
.Llo1237:
	diab.addi		r3,r30,1		# intDtc=r3 evId=r30
	se_addi		r30,1		# evId=r30 evId=r30
	b		.L976
.L975:
# }
	.d2line		6295
	.d2epilogue_begin
.Llo1235:
	lmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3700:
	.type		OpCycleEndAllEvents,@function
	.size		OpCycleEndAllEvents,.-OpCycleEndAllEvents
# Number of nodes = 111

# Allocations for OpCycleEndAllEvents
#	?a4		opCycleId
#	?a5		evId
#	?a6		eventUdsStatusOld
#	?a7		intDtc
#	?a8		dtcUdsStatusOld
# static FUNC(void, DEM_CODE) SetOperationCycleStateEnd(uint8 opCycleId)
	.align		1
	.section	.text_vle
        .d2line         6141,29
#$$ld
.L3717:

#$$bf	SetOperationCycleStateEnd,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
SetOperationCycleStateEnd:
.Llo1250:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# opCycleId=r31 opCycleId=r3
	.d2prologue_end
# {
# #if (STD_ON == DEM_OBD_PERMANENT_SUPPORT)
#    if (opCycleId == Dem_LCfg.driving_cycle_id)
#    {
#       ClearOfPermanentEntries();
#    }
# #endif /* STD_ON == DEM_OBD_PERMANENT_SUPPORT */
# 
#    /* Call OpCycleEndAllEvents() before OpCycleEndAllEvMemEntries()
#     * to handle clear of pendingDTC-bit, needed by HandleAging().
#     */
#    OpCycleEndAllEvents(opCycleId);
	.d2line		6153
.Llo1251:
	mr		r3,r31		# opCycleId=r3 opCycleId=r31
.Llo1252:
	bl		OpCycleEndAllEvents
#    OpCycleEndAllEvMemEntries(opCycleId);
	.d2line		6154
	mr		r3,r31		# opCycleId=r3 opCycleId=r31
	bl		OpCycleEndAllEvMemEntries
# 
# #if (STD_ON == DEM_OBD_SUPPORT)
#    /* Register OBD driving cycles with warmup-conditions fulfilled */
#    if ((Dem_LCfg.driving_cycle_id == opCycleId) &&
#       (DEM_CYCLE_STATE_START == GetOpCycleState(Dem_LCfg.warmup_cycle_id)))
#    {
#       /* [VSTAR_Dem_00085], [VSTAR_Dem_00087] */
#       AgePidInfo();
#    }
# #endif /* DEM_OBD_SUPPORT */
# }
	.d2line		6165
	.d2epilogue_begin
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
.Llo1253:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3718:
	.type		SetOperationCycleStateEnd,@function
	.size		SetOperationCycleStateEnd,.-SetOperationCycleStateEnd
# Number of nodes = 10

# Allocations for SetOperationCycleStateEnd
#	?a4		opCycleId
# static FUNC(void, DEM_CODE) SetAgingCycleState(uint8 agingCycleId)
	.align		1
	.section	.text_vle
        .d2line         6212,29
#$$ld
.L3723:

#$$bf	SetAgingCycleState,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
SetAgingCycleState:
.Llo1254:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# agingCycleId=r31 agingCycleId=r3
	.d2prologue_end
# {
#    P2CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC, DEM_APPL_CONST) pEntries;
#    uint8 origin;
#    uint8 evMemEntryIndex;
# 
#    for (origin = (uint8)0; origin < DEM_NUMBER_OF_ORIGINS; origin++)
	.d2line		6218
	diab.li		r29,0		# origin=r29
.L955:
.Llo1255:
	rlwinm		r4,r29,0,24,31		# origin=r29
.Llo1256:
	se_cmpi		r4,2
	bc		0,0,.L954	# ge
#    {
#       /* Find any event in any of event memories */
#       if (Dem_EvMemExist(origin) && (NULL_PTR != Dem_GetEvMemEntriesPtr(origin)))
	.d2line		6221
	lis		r3,(Dem_LCfg+20)@ha
	e_add16i		r3,r3,(Dem_LCfg+20)@l
	rlwinm		r4,r29,2,22,29		# origin=r29
	lwzx		r0,r3,r4
	se_cmpi		r0,0
	bc		1,2,.L958	# eq
	lis		r3,(Dem_LCfg+20)@ha
	e_add16i		r3,r3,(Dem_LCfg+20)@l
	rlwinm		r4,r29,2,22,29		# origin=r29
	lwzx		r3,r3,r4
	lwz		r0,0(r3)
	se_cmpi		r0,0
	bc		1,2,.L958	# eq
#       {
#          pEntries = Dem_GetEvMemEntriesPtr(origin);
	.d2line		6223
	lis		r3,(Dem_LCfg+20)@ha
	e_add16i		r3,r3,(Dem_LCfg+20)@l
	rlwinm		r4,r29,2,22,29		# origin=r29
	lwzx		r3,r3,r4
	lwz		r30,0(r3)
.Llo1260:
	mr		r30,r30		# pEntries=r30 pEntries=r30
#          for (evMemEntryIndex = (uint8)0; evMemEntryIndex < Dem_MaxNumEvMemEntries[origin]; evMemEntryIndex++)
	.d2line		6224
.Llo1261:
	diab.li		r28,0		# evMemEntryIndex=r28
.L959:
.Llo1262:
	rlwinm		r0,r28,0,24,31		# evMemEntryIndex=r28
	lis		r3,Dem_MaxNumEvMemEntries@ha
	e_add16i		r3,r3,Dem_MaxNumEvMemEntries@l
	rlwinm		r4,r29,0,24,31		# origin=r29
	lbzx		r3,r3,r4
	se_cmp		r0,r3
	bc		0,0,.L958	# ge
#          {
#             if (DEM_EVENTID_INVALID != pEntries[evMemEntryIndex]->event_id)
	.d2line		6226
	rlwinm		r4,r28,2,22,29		# evMemEntryIndex=r28
	lwzux		r3,r4,r30
	lhz		r0,0(r3)
	se_cmpi		r0,0
	bc		1,2,.L962	# eq
#             {
#                /* [SWS_Dem_00494] */
#                HandleAging(evMemEntryIndex, origin, agingCycleId);
	.d2line		6229
	mr		r5,r31		# agingCycleId=r5 agingCycleId=r31
	mr		r3,r28		# evMemEntryIndex=r3 evMemEntryIndex=r28
	mr		r4,r29		# origin=r4 origin=r29
	bl		HandleAging
.L962:
#             }
#          }
	.d2line		6231
	diab.addi		r0,r28,1		# evMemEntryIndex=r28
	se_addi		r28,1		# evMemEntryIndex=r28 evMemEntryIndex=r28
	b		.L959
.L958:
#       }
#    }
	.d2line		6233
	diab.addi		r4,r29,1		# origin=r29
	se_addi		r29,1		# origin=r29 origin=r29
	b		.L955
.L954:
# }
	.d2line		6234
	.d2epilogue_begin
.Llo1257:
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
.Llo1258:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1259:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3724:
	.type		SetAgingCycleState,@function
	.size		SetAgingCycleState,.-SetAgingCycleState
# Number of nodes = 86

# Allocations for SetAgingCycleState
#	?a4		agingCycleId
#	?a5		pEntries
#	?a6		origin
#	?a7		evMemEntryIndex
# static FUNC(boolean, DEM_CODE) GetFFIndexByRecordNumber(uint8 evMemEntryIndex,
	.align		1
	.section	.text_vle
        .d2line         6494,32
#$$ld
.L3735:

#$$bf	GetFFIndexByRecordNumber,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,r8,r29,r30,r31,cr0,lr
	.d2_cfa_start __cie
GetFFIndexByRecordNumber:
.Llo1263:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)		# ffType=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# evMemEntryIndex=r31 evMemEntryIndex=r3
	mr		r4,r4		# internalOrigin=r4 internalOrigin=r4
	mr		r5,r5		# RecordNumber=r5 RecordNumber=r5
	mr.		r0,r6		# ffType=?a7 ffType=r6
	mr		r7,r7		# pFFIndex=r7 pFFIndex=r7
	.d2prologue_end
#                                                         uint8 internalOrigin,
#                                                         uint8 RecordNumber,
#                                                         Dem_FreezeFrameType ffType,
#                                                         P2VAR(uint16, AUTOMATIC, DEM_APPL_DATA) pFFIndex)
# {
#    uint8 i;
#    boolean retVal = FALSE;
	.d2line		6501
	diab.li		r3,0		# retVal=r3
#    Dem_NvEvMemEntryPtrType pEvMemEntry = Dem_GetEvMemEntryPtr(internalOrigin, evMemEntryIndex);
	.d2line		6502
.Llo1264:
	lis		r6,(Dem_LCfg+20)@ha
	.d2line		6506
.Llo1271:
	e_add16i		r6,r6,(Dem_LCfg+20)@l
	rlwinm		r4,r4,2,22,29		# internalOrigin=r4 internalOrigin=r4
	lwzx		r4,r6,r4		# internalOrigin=r4
	lwz		r4,0(r4)		# internalOrigin=r4 internalOrigin=r4
.Llo1265:
	rlwinm		r31,r31,2,22,29		# evMemEntryIndex=r31 evMemEntryIndex=r31
.Llo1266:
	lwzx		r4,r4,r31		# internalOrigin=r4 internalOrigin=r4
.Llo1269:
	mr		r4,r4		# pEvMemEntry=r4 pEvMemEntry=r4
#    *pFFIndex = 0;
	.d2line		6503
	diab.li		r6,0
	sth		r6,0(r7)		# pFFIndex=r7
#    uint16 intDtc = Dem_GetEventIntDtc(pEvMemEntry->event_id);
	.d2line		6504
	lis		r6,Dem_pPbCfg@ha
	lwz		r6,Dem_pPbCfg@l(r6)
	lwz		r31,128(r6)		# evMemEntryIndex=r31
.Llo1267:
	lhz		r6,0(r4)		# pEvMemEntry=r4
	rlwinm		r6,r6,1,15,30
	se_add		r6,r31		# evMemEntryIndex=r31
	lhz		r31,-2(r6)		# evMemEntryIndex=r31
.Llo1268:
	mr		r31,r31		# intDtc=r31 intDtc=r31
# 
#    if (DEM_STANDARD_FREEZE_FRAME == ffType)
	.d2line		6506
	bc		0,2,.L1003	# ne
#    {
#       for (i = 0; (i < pEvMemEntry->num_stored_ff) && (FALSE == retVal); i++)
	.d2line		6508
.Llo1272:
	diab.li		r30,0		# i=r30
.L1004:
.Llo1279:
	rlwinm		r6,r30,0,24,31		# i=r30
	lbz		r29,11(r4)		# pEvMemEntry=r4
	se_cmp		r6,r29
	bc		0,0,.L1003	# ge
	rlwinm		r6,r3,0,24,31		# retVal=r3
	se_cmpi		r6,0
	bc		0,2,.L1003	# ne
#       {
#          if ((RecordNumber == pEvMemEntry->record_numbers[i]) &&
	.d2line		6510
	rlwinm		r29,r5,0,24,31		# RecordNumber=r5
	rlwinm		r6,r30,0,24,31		# i=r30
	se_add		r6,r4		# pEvMemEntry=r4
	lbz		r6,10(r6)
	se_cmp		r29,r6
	bc		0,2,.L1007	# ne
	rlwinm		r6,r30,1,23,30		# i=r30
	se_add		r6,r4		# pEvMemEntry=r4
	lhz		r6,8(r6)
	cmpli		0,0,r6,65535
	bc		1,2,.L1007	# eq
#              (DEM_FF_BUFFER_INVALID != pEvMemEntry->ff_index[i]))
#          {
#             *pFFIndex = pEvMemEntry->ff_index[i];
	.d2line		6513
	rlwinm		r6,r30,1,23,30		# i=r30
	se_add		r6,r4		# pEvMemEntry=r4
	lhz		r3,8(r6)		# retVal=r3
	sth		r3,0(r7)		# pFFIndex=r7 retVal=r3
#             retVal = TRUE;
	.d2line		6514
	diab.li		r3,1		# retVal=r3
.L1007:
#          }
#       }
	.d2line		6516
	diab.addi		r6,r30,1		# i=r30
	se_addi		r30,1		# i=r30 i=r30
	b		.L1004
.L1003:
#    }
# 
#    if (DEM_DEV_A_FREEZE_FRAME == ffType)
	.d2line		6519
	se_cmpi		r0,1		# ffType=r0
	bc		0,2,.L1008	# ne
#    {
#       if ((pEvMemEntry->dev_a_ff_index != DEM_FF_BUFFER_INVALID) &&
	.d2line		6521
.Llo1280:
	lhz		r6,4(r4)		# pEvMemEntry=r4
	cmpli		0,0,r6,65535
	bc		1,2,.L1008	# eq
	rlwinm		r30,r5,0,24,31		# i=r30 RecordNumber=r5
.Llo1281:
	lis		r8,Dem_pPbCfg@ha
	lwz		r6,Dem_pPbCfg@l(r8)
	lwz		r6,40(r6)
	lwz		r8,Dem_pPbCfg@l(r8)
	lwz		r8,92(r8)
	rlwinm		r29,r31,0,16,31		# intDtc=r31
	lbzx		r8,r8,r29
	lbzx		r6,r6,r8
	se_cmp		r30,r6		# i=r30
	bc		0,2,.L1008	# ne
#          (RecordNumber == GetDtcDevAFFRecNum(intDtc)))
#       {
#          *pFFIndex = pEvMemEntry->dev_a_ff_index;
	.d2line		6524
.Llo1282:
	lhz		r3,4(r4)		# retVal=r3 pEvMemEntry=r4
	sth		r3,0(r7)		# pFFIndex=r7 retVal=r3
#          retVal = TRUE;
	.d2line		6525
	diab.li		r3,1		# retVal=r3
.L1008:
#       }
#    }
# 
#    if (DEM_DEV_B_FREEZE_FRAME == ffType)
	.d2line		6529
	se_cmpi		r0,2		# ffType=r0
	bc		0,2,.L1010	# ne
#    {
#       if ((pEvMemEntry->dev_b_ff_index != DEM_FF_BUFFER_INVALID) &&
	.d2line		6531
.Llo1273:
	lhz		r0,6(r4)		# ffType=r0 pEvMemEntry=r4
.Llo1274:
	cmpli		0,0,r0,65535		# ffType=r0
	bc		1,2,.L1010	# eq
.Llo1275:
	rlwinm		r30,r5,0,24,31		# i=r30 RecordNumber=r5
.Llo1283:
	lis		r6,Dem_pPbCfg@ha
	lwz		r5,Dem_pPbCfg@l(r6)		# RecordNumber=r5
	lwz		r5,44(r5)		# RecordNumber=r5 RecordNumber=r5
	lwz		r6,Dem_pPbCfg@l(r6)
	lwz		r6,92(r6)
.Llo1285:
	rlwinm		r31,r31,0,16,31		# intDtc=r31 intDtc=r31
.Llo1286:
	lbzx		r0,r6,r31		# ffType=r0
.Llo1276:
	lbzx		r0,r5,r0		# ffType=r0 RecordNumber=r5
	se_cmp		r30,r0		# i=r30 ffType=r0
	bc		0,2,.L1010	# ne
#           (RecordNumber == GetDtcDevBFFRecNum(intDtc)))
#       {
#          *pFFIndex = pEvMemEntry->dev_b_ff_index;
	.d2line		6534
.Llo1270:
	lhz		r0,6(r4)		# ffType=r0 pEvMemEntry=r4
.Llo1277:
	sth		r0,0(r7)		# pFFIndex=r7 ffType=r0
#          retVal = TRUE;
	.d2line		6535
	diab.li		r3,1		# retVal=r3
.L1010:
#       }
#    }
# 
# #if (DEM_OBD_SUPPORT == STD_ON) && (DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF)
#    if ((DEM_DTC_ORIGIN_PRIMARY_MEMORY_INTERNAL_INDEX == internalOrigin) && (DEM_OBD_FREEZE_FRAME == ffType))
#    {
#       if (DEM_FF_BUFFER_INVALID != pEvMemEntry->obd_ff_index)
#       {
#          *pFFIndex = pEvMemEntry->obd_ff_index;
#          retVal = TRUE;
#       }
#    }
# #endif /* DEM_OBD_SUPPORT == STD_ON && DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF */
# 
#    return retVal;
	.d2line		6550
.Llo1278:
	rlwinm		r3,r3,0,24,31		# retVal=r3 retVal=r3
# }
	.d2line		6551
	.d2epilogue_begin
.Llo1284:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# ffType=r0
	mtspr		lr,r0		# ffType=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3736:
	.type		GetFFIndexByRecordNumber,@function
	.size		GetFFIndexByRecordNumber,.-GetFFIndexByRecordNumber
# Number of nodes = 180

# Allocations for GetFFIndexByRecordNumber
#	?a4		evMemEntryIndex
#	?a5		internalOrigin
#	?a6		RecordNumber
#	?a7		ffType
#	?a8		pFFIndex
#	?a9		i
#	?a10		retVal
#	?a11		pEvMemEntry
#	?a12		intDtc
# static FUNC(boolean, DEM_CODE) IsFFRecordNumberValid(uint16 intDtc, uint8 recordNumber,
	.align		1
	.section	.text_vle
        .d2line         6565,32
#$$ld
.L3755:

#$$bf	IsFFRecordNumberValid,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,r8,r28,r29,r30,r31,cr0,lr
	.d2_cfa_start __cie
IsFFRecordNumberValid:
.Llo1287:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# intDtc=r3 intDtc=r3
	mr		r4,r4		# recordNumber=r4 recordNumber=r4
	mr		r5,r5		# pFFType=r5 pFFType=r5
	.d2prologue_end
#                                                      P2VAR(Dem_FreezeFrameType, AUTOMATIC, DEM_APPL_DATA) pFFType)
# {
#    uint8 i;
#    boolean retVal = FALSE;
	.d2line		6569
	diab.li		r7,0		# retVal=r7
#    uint8 ffRecNumClassIdx;
#    P2CONST(Dem_FreezeFrameRecordClassType, DEM_CONST, DEM_APPL_CONST) pFFRecords;
#    uint8 numFF;
# 
# #if (DEM_OBD_SUPPORT == STD_ON) && (DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF)
#    if ((0 == recordNumber) &&
#        (DEM_INT_DTC_INVALID != intDtc) &&
#        Dem_IsObdDtc(intDtc))
#    {
#       /* OBD-freeze frame requested for an emission related event. */
#       *pFFType = DEM_OBD_FREEZE_FRAME;
#       retVal = TRUE;
#    }
# #endif
# 
#    if (recordNumber < 0xffU)
	.d2line		6585
.Llo1301:
	rlwinm		r30,r4,0,24,31		# recordNumber=r4
	cmpli		0,0,r30,255
	bc		0,0,.L1025	# ge
#    {
#       /* Check standard freeze frames */
#       ffRecNumClassIdx = GetDtcFFRecNumClass(intDtc);
	.d2line		6588
	lis		r8,Dem_pPbCfg@ha
	lwz		r6,Dem_pPbCfg@l(r8)
	lwz		r6,36(r6)
	lwz		r8,Dem_pPbCfg@l(r8)
	lwz		r8,92(r8)
	rlwinm		r0,r3,0,16,31		# intDtc=r3
	lbzx		r0,r8,r0
	lbzx		r31,r6,r0		# ffRecNumClassIdx=r31
.Llo1303:
	mr		r31,r31		# ffRecNumClassIdx=r31 ffRecNumClassIdx=r31
#       if (DEM_FF_REC_NUM_CLASS_INVALID != ffRecNumClassIdx)
	.d2line		6589
	rlwinm		r0,r31,0,24,31		# ffRecNumClassIdx=r31
	cmpi		0,0,r0,255
	bc		1,2,.L1026	# eq
#       {
#          pFFRecords = GetFFRecNumClassFFRecords(ffRecNumClassIdx);
	.d2line		6591
.Llo1304:
	lis		r6,(Dem_LCfg+32)@ha		# i=r6
.Llo1293:
	lwz		r8,(Dem_LCfg+32)@l(r6)		# i=r6
.Llo1305:
	rlwinm		r31,r31,3,21,28		# ffRecNumClassIdx=r31 ffRecNumClassIdx=r31
	lwzux		r0,r8,r31
.Llo1317:
	mr		r0,r0		# pFFRecords=r0 pFFRecords=r0
#          numFF = GetFFRecNumClassNumFF(ffRecNumClassIdx);
	.d2line		6592
.Llo1318:
	lwz		r6,(Dem_LCfg+32)@l(r6)		# i=r6 i=r6
	se_add		r31,r6		# ffRecNumClassIdx=r31 ffRecNumClassIdx=r31 i=r6
	lbz		r28,4(r31)		# ffRecNumClassIdx=r31
.Llo1319:
	mr		r28,r28		# numFF=r28 numFF=r28
# 
#          for (i = 0; (i < numFF) && (FALSE == retVal); i++)
	.d2line		6594
	diab.li		r6,0		# i=r6
.L1027:
.Llo1306:
	rlwinm		r31,r6,0,24,31		# ffRecNumClassIdx=r31 i=r6
.Llo1307:
	rlwinm		r30,r28,0,24,31		# numFF=r28
	se_cmp		r31,r30		# ffRecNumClassIdx=r31
	bc		0,0,.L1026	# ge
.Llo1308:
	rlwinm		r31,r7,0,24,31		# ffRecNumClassIdx=r31 retVal=r7
.Llo1309:
	se_cmpi		r31,0		# ffRecNumClassIdx=r31
	bc		0,2,.L1026	# ne
#          {
#             if (recordNumber == pFFRecords[i].record_number)
	.d2line		6596
.Llo1310:
	rlwinm		r30,r4,0,24,31		# recordNumber=r4
	rlwinm		r31,r6,3,21,28		# ffRecNumClassIdx=r31 i=r6
.Llo1311:
	lbzux		r29,r31,r0		# ffRecNumClassIdx=r31
	se_cmp		r30,r29
	bc		0,2,.L1030	# ne
#             {
#                retVal = TRUE;
	.d2line		6598
.Llo1312:
	diab.li		r7,1		# retVal=r7
#                *pFFType = DEM_STANDARD_FREEZE_FRAME;
	.d2line		6599
	diab.li		r31,0		# ffRecNumClassIdx=r31
.Llo1313:
	stw		r31,0(r5)		# pFFType=r5 ffRecNumClassIdx=r31
.L1030:
#             }
#          }
	.d2line		6601
.Llo1314:
	diab.addi		r31,r6,1		# ffRecNumClassIdx=r31 i=r6
	se_addi		r6,1		# i=r6 i=r6
	b		.L1027
.L1026:
#       }
# 
#       /* Check development freeze frame A */
#       if (IsDevAFFSupported() && (recordNumber == GetDtcDevAFFRecNum(intDtc)))
	.d2line		6605
.Llo1294:
	lis		r6,Dem_pPbCfg@ha		# i=r6
.Llo1295:
	lwz		r6,Dem_pPbCfg@l(r6)		# i=r6 i=r6
	lwz		r0,40(r6)		# i=r6
	se_cmpi		r0,0
	bc		1,2,.L1031	# eq
.Llo1296:
	rlwinm		r30,r4,0,24,31		# recordNumber=r4
	lis		r8,Dem_pPbCfg@ha
	lwz		r6,Dem_pPbCfg@l(r8)		# i=r6
.Llo1297:
	lwz		r6,40(r6)		# i=r6 i=r6
	lwz		r8,Dem_pPbCfg@l(r8)
	lwz		r8,92(r8)
	rlwinm		r0,r3,0,16,31		# intDtc=r3
	lbzx		r0,r8,r0
	lbzx		r0,r6,r0		# i=r6
	se_cmp		r30,r0
	bc		0,2,.L1031	# ne
#       {
#          retVal = TRUE;
	.d2line		6607
.Llo1298:
	diab.li		r7,1		# retVal=r7
#          *pFFType = DEM_DEV_A_FREEZE_FRAME;
	.d2line		6608
	diab.li		r31,1		# ffRecNumClassIdx=r31
.Llo1315:
	stw		r31,0(r5)		# pFFType=r5 ffRecNumClassIdx=r31
.L1031:
#       }
# 
#       /* Check development freeze frame B */
#       if (IsDevBFFSupported() && (recordNumber == GetDtcDevBFFRecNum(intDtc)))
	.d2line		6612
.Llo1316:
	lis		r6,Dem_pPbCfg@ha		# i=r6
.Llo1299:
	lwz		r6,Dem_pPbCfg@l(r6)		# i=r6 i=r6
	lwz		r0,44(r6)		# i=r6
	se_cmpi		r0,0
	bc		1,2,.L1025	# eq
.Llo1288:
	rlwinm		r30,r4,0,24,31		# recordNumber=r4
	lis		r6,Dem_pPbCfg@ha		# i=r6
.Llo1300:
	lwz		r4,Dem_pPbCfg@l(r6)		# recordNumber=r4 i=r6
	lwz		r4,44(r4)		# recordNumber=r4 recordNumber=r4
	lwz		r6,Dem_pPbCfg@l(r6)		# i=r6 i=r6
	lwz		r6,92(r6)		# i=r6 i=r6
.Llo1289:
	rlwinm		r3,r3,0,16,31		# intDtc=r3 intDtc=r3
.Llo1290:
	lbzx		r0,r6,r3		# i=r6
	lbzx		r0,r4,r0		# recordNumber=r4
	se_cmp		r30,r0
	bc		0,2,.L1025	# ne
#       {
#          retVal = TRUE;
	.d2line		6614
.Llo1291:
	diab.li		r7,1		# retVal=r7
#          *pFFType = DEM_DEV_B_FREEZE_FRAME;
	.d2line		6615
	diab.li		r0,2
	stw		r0,0(r5)		# pFFType=r5
.L1025:
#       }
#    }
# 
#    return retVal;
	.d2line		6619
.Llo1292:
	rlwinm		r3,r7,0,24,31		# intDtc=r3 retVal=r7
# }
	.d2line		6620
	.d2epilogue_begin
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1302:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3756:
	.type		IsFFRecordNumberValid,@function
	.size		IsFFRecordNumberValid,.-IsFFRecordNumberValid
# Number of nodes = 155

# Allocations for IsFFRecordNumberValid
#	?a4		intDtc
#	?a5		recordNumber
#	?a6		pFFType
#	?a7		i
#	?a8		retVal
#	?a9		ffRecNumClassIdx
#	?a10		pFFRecords
#	?a11		numFF
# static FUNC(boolean, DEM_CODE) EnableConditionsFulfilled(Dem_EventIdType eventId)
	.align		1
	.section	.text_vle
        .d2line         6636,32
#$$ld
.L3778:

#$$bf	EnableConditionsFulfilled,interprocedural,nostackparams

# Regs written: r0,r1,r3
	.d2_cfa_start __cie
EnableConditionsFulfilled:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    boolean retVal = TRUE;
	.d2line		6638
.Llo1320:
	diab.li		r3,1		# retVal=r3
# #if (STD_ON == DEM_ENABLE_CONDITION_SUPPORT)
#    uint8 numEC;
#    uint8 i;
#    P2CONST(uint8, DEM_CONST, DEM_PBCFG_CONST) pEC;
#    uint8 enableCondGroup = GetEnableCondGroup(eventId);
# 
#    if (0xffU != enableCondGroup)
#    {
#       numEC = GetECGroupNumConditions(enableCondGroup);
#       pEC = GetECGroupConditions(enableCondGroup);
# 
#       /* [SWS_Dem_00447] [SWS_Dem_00450] */
#       for (i = 0; (i < numEC) && (TRUE == retVal); i++)
#       {
#          if ((DEM_ENABLE_CONDITION_ID_UNUSED != pEC[i]) && Dem_BitArrayIsBitCleared(Dem_LCfg.p_enable_condition, pEC[i]))
#          {
#             /* [SWS_Dem_00449] */
#             retVal = FALSE;
#          }
#       }
#    }
# #endif
# 
#    return retVal;
# }
	.d2line		6663
	.d2epilogue_begin
.Llo1321:
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3779:
	.type		EnableConditionsFulfilled,@function
	.size		EnableConditionsFulfilled,.-EnableConditionsFulfilled
# Number of nodes = 5

# Allocations for EnableConditionsFulfilled
#	not allocated	eventId
#	?a4		retVal
# static FUNC(void, DEM_CODE) ClearOccurrenceInfo(void)
	.align		1
	.section	.text_vle
        .d2line         6919,29
#$$ld
.L3785:

#$$bf	ClearOccurrenceInfo,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,lr
	.d2_cfa_start __cie
ClearOccurrenceInfo:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    Dem_NvAdmin.event_occurrence_info.first_confirmed_event = DEM_EVENTID_INVALID;
	.d2line		6921
	diab.li		r4,0
	lis		r3,(Dem_NvAdmin+6)@ha
	sth		r4,(Dem_NvAdmin+6)@l(r3)
#    Dem_NvAdmin.event_occurrence_info.first_failed_event = DEM_EVENTID_INVALID;
	.d2line		6922
	lis		r3,(Dem_NvAdmin+4)@ha
	sth		r4,(Dem_NvAdmin+4)@l(r3)
#    Dem_NvAdmin.event_occurrence_info.most_recent_confirmed_event = DEM_EVENTID_INVALID;
	.d2line		6923
	lis		r3,(Dem_NvAdmin+2)@ha
	sth		r4,(Dem_NvAdmin+2)@l(r3)
#    Dem_NvAdmin.event_occurrence_info.most_recent_failed_event = DEM_EVENTID_INVALID;
	.d2line		6924
	lis		r3,Dem_NvAdmin@ha
	e_add16i		r3,r3,Dem_NvAdmin@l
	sth		r4,0(r3)
# }
	.d2line		6925
	.d2epilogue_begin
	lwz		r0,20(r1)
	mtspr		lr,r0
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3786:
	.type		ClearOccurrenceInfo,@function
	.size		ClearOccurrenceInfo,.-ClearOccurrenceInfo
# Number of nodes = 26

# Allocations for ClearOccurrenceInfo
# static FUNC(void, DEM_CODE) HandleClear(void)
	.align		1
	.section	.text_vle
        .d2line         6726,29
#$$ld
.L3790:

#$$bf	HandleClear,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
HandleClear:
.Llo1417:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    uint16 intDtc;
#    uint8 internalOrigin;
#    boolean clearFinishedOk = FALSE;
	.d2line		6730
	diab.li		r31,0		# clearFinishedOk=r31
# 
#    if (DEM_CLEAR_INIT == DemClearState)
	.d2line		6732
	lis		r3,DemClearState@ha
	lwz		r0,DemClearState@l(r3)
	se_cmpi		r0,1
	bc		0,2,.L1043	# ne
#    {
#       internalOrigin = GetInternalDTCOriginIndex(DemClearData.in_param_dtc_origin);
	.d2line		6734
	lis		r3,(DemClearData+7)@ha		# internalOrigin=r3
.Llo1338:
	lbz		r3,(DemClearData+7)@l(r3)		# internalOrigin=r3 internalOrigin=r3
.Llo1339:
	bl		GetInternalDTCOriginIndex
.Llo1340:
	mr		r0,r3		# internalOrigin=r0 internalOrigin=r3
#       if ((DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX != internalOrigin) && Dem_EvMemExist(internalOrigin))
	.d2line		6735
	rlwinm		r3,r3,0,24,31		# internalOrigin=r3 internalOrigin=r3
.Llo1341:
	cmpi		0,0,r3,255		# internalOrigin=r3
.Llo1342:
	bc		1,2,.L1044	# eq
.Llo1343:
	lis		r3,(Dem_LCfg+20)@ha		# internalOrigin=r3
.Llo1344:
	e_add16i		r3,r3,(Dem_LCfg+20)@l		# internalOrigin=r3 internalOrigin=r3
.Llo1345:
	rlwinm		r0,r0,2,22,29		# internalOrigin=r0 internalOrigin=r0
.Llo1346:
	lwzx		r0,r3,r0		# internalOrigin=r0 internalOrigin=r3
	se_cmpi		r0,0		# internalOrigin=r0
	bc		1,2,.L1044	# eq
#       {
#          DemClearData.response = DEM_CLEAR_OK;
	.d2line		6737
.Llo1347:
	diab.li		r0,0		# internalOrigin=r0
.Llo1348:
	lis		r3,(DemClearData+8)@ha		# internalOrigin=r3
	stb		r0,(DemClearData+8)@l(r3)		# internalOrigin=r3 internalOrigin=r0
#          if ((DEM_DTC_GROUP_ALL_DTCS == DemClearData.in_param_dtc) &&
	.d2line		6738
	lis		r3,DemClearData@ha		# internalOrigin=r3
	lwz		r0,DemClearData@l(r3)		# internalOrigin=r0 internalOrigin=r3
	diab.li		r3,16777215		# internalOrigin=r3
	se_cmpl		r0,r3		# internalOrigin=r0 internalOrigin=r3
	bc		0,2,.L1045	# ne
.Llo1349:
	lis		r3,(DemClearData+6)@ha		# internalOrigin=r3
.Llo1350:
	lbz		r0,(DemClearData+6)@l(r3)		# internalOrigin=r0 internalOrigin=r3
	se_cmpi		r0,11		# internalOrigin=r0
	bc		0,2,.L1045	# ne
.Llo1351:
	lis		r3,(DemClearData+7)@ha		# internalOrigin=r3
.Llo1352:
	lbz		r0,(DemClearData+7)@l(r3)		# internalOrigin=r0 internalOrigin=r3
	se_cmpi		r0,1		# internalOrigin=r0
	bc		0,2,.L1045	# ne
.Llo1353:
	lis		r3,(Dem_LCfg+174)@ha		# internalOrigin=r3
.Llo1354:
	lbz		r0,(Dem_LCfg+174)@l(r3)		# internalOrigin=r0 internalOrigin=r3
	se_cmpi		r0,1		# internalOrigin=r0
	bc		0,2,.L1045	# ne
#                (DEM_DTC_FORMAT_UDS == DemClearData.in_param_dtc_format) &&
#                (DEM_DTC_ORIGIN_PRIMARY_MEMORY == DemClearData.in_param_dtc_origin) &&
#                (TRUE == Dem_LCfg.clear_internal_events))
#          {
#             /* [VSTAR_Dem_00133]
#              * This is a UDS service 0x14 call with group set to "all DTCs".
#              * That type of call is configured to trigger clearing of all events including internal events.
#              */
#             DemClearData.next_to_clear = 0;
	.d2line		6747
.Llo1355:
	diab.li		r0,0		# internalOrigin=r0
.Llo1356:
	lis		r3,(DemClearData+4)@ha		# internalOrigin=r3
	sth		r0,(DemClearData+4)@l(r3)		# internalOrigin=r3 internalOrigin=r0
#             DemClearState = DEM_CLEAR_ALL_ONGOING;
	.d2line		6748
	diab.li		r0,3		# internalOrigin=r0
	lis		r3,DemClearState@ha		# internalOrigin=r3
	e_add16i		r3,r3,DemClearState@l		# internalOrigin=r3 internalOrigin=r3
	stw		r0,0(r3)		# internalOrigin=r3 internalOrigin=r0
	b		.L1043
.L1045:
#          }
#          else if (TRUE == ConvertToIntDtcGroupId(DemClearData.in_param_dtc, &DemClearData.internal_dtc_group))
	.d2line		6750
.Llo1357:
	lis		r4,(DemClearData+9)@ha
	e_add16i		r4,r4,(DemClearData+9)@l
	lis		r3,DemClearData@ha		# internalOrigin=r3
.Llo1358:
	lwz		r3,DemClearData@l(r3)		# internalOrigin=r3 internalOrigin=r3
.Llo1359:
	bl		ConvertToIntDtcGroupId
.Llo1360:
	rlwinm		r3,r3,0,24,31		# internalOrigin=r3 internalOrigin=r3
	se_cmpi		r3,1		# internalOrigin=r3
	bc		0,2,.L1047	# ne
#          {
#             /* Handle the found DTC-group, special handling for emission-related group */
#             if (DEM_DTC_GROUP_EMISSION_REL_DTCS == DemClearData.in_param_dtc)
	.d2line		6753
.Llo1361:
	lis		r3,DemClearData@ha		# internalOrigin=r3
.Llo1362:
	lwz		r0,DemClearData@l(r3)		# internalOrigin=r0 internalOrigin=r3
	se_cmpi		r0,0		# internalOrigin=r0
	bc		0,2,.L1048	# ne
#             {
#                /* Handle emission related group as DEM_DTC_GROUP_ALL_DTCS with format OBD */
#                DemClearData.internal_dtc_group = Dem_LCfg.num_dtc_groups - 1;
	.d2line		6756
.Llo1363:
	lis		r3,(Dem_LCfg+140)@ha		# internalOrigin=r3
.Llo1364:
	lbz		r3,(Dem_LCfg+140)@l(r3)		# internalOrigin=r3 internalOrigin=r3
	diab.addi		r0,r3,255		# internalOrigin=r0 internalOrigin=r3
	lis		r3,(DemClearData+9)@ha		# internalOrigin=r3
.Llo1365:
	stb		r0,(DemClearData+9)@l(r3)		# internalOrigin=r3 internalOrigin=r0
.L1048:
#             }
#             DemClearData.next_to_clear = 0;
	.d2line		6758
	diab.li		r0,0		# internalOrigin=r0
.Llo1366:
	lis		r3,(DemClearData+4)@ha		# internalOrigin=r3
	sth		r0,(DemClearData+4)@l(r3)		# internalOrigin=r3 internalOrigin=r0
#             DemClearState = DEM_CLEAR_GROUP_ONGOING;
	.d2line		6759
	diab.li		r0,4		# internalOrigin=r0
	lis		r3,DemClearState@ha		# internalOrigin=r3
	e_add16i		r3,r3,DemClearState@l		# internalOrigin=r3 internalOrigin=r3
	stw		r0,0(r3)		# internalOrigin=r3 internalOrigin=r0
	b		.L1043
.L1047:
#          }
#          else
#          {
#             DemClearState = DEM_CLEAR_SINGLE_ONGOING;
	.d2line		6763
.Llo1367:
	diab.li		r0,2		# internalOrigin=r0
.Llo1368:
	lis		r3,DemClearState@ha		# internalOrigin=r3
	e_add16i		r3,r3,DemClearState@l		# internalOrigin=r3 internalOrigin=r3
	stw		r0,0(r3)		# internalOrigin=r3 internalOrigin=r0
	b		.L1043
.L1044:
#          }
#       }
#       else
#       {
#          DemClearData.response = DEM_CLEAR_WRONG_DTCORIGIN;
	.d2line		6768
.Llo1369:
	diab.li		r0,2		# internalOrigin=r0
.Llo1370:
	lis		r3,(DemClearData+8)@ha		# internalOrigin=r3
	stb		r0,(DemClearData+8)@l(r3)		# internalOrigin=r3 internalOrigin=r0
#          DemClearState = DEM_CLEAR_FINISHED;
	.d2line		6769
	diab.li		r0,6		# internalOrigin=r0
	lis		r3,DemClearState@ha		# internalOrigin=r3
	e_add16i		r3,r3,DemClearState@l		# internalOrigin=r3 internalOrigin=r3
	stw		r0,0(r3)		# internalOrigin=r3 internalOrigin=r0
.L1043:
#       }
#    }
# 
#    if (DEM_CLEAR_SINGLE_ONGOING == DemClearState)
	.d2line		6773
.Llo1371:
	lis		r3,DemClearState@ha		# internalOrigin=r3
.Llo1372:
	lwz		r0,DemClearState@l(r3)		# internalOrigin=r0 internalOrigin=r3
	se_cmpi		r0,2		# internalOrigin=r0
	bc		0,2,.L1051	# ne
#    {
#       /*
#        * No DTC-group matched the input DTC. Search for a single DTC.
#        * Clear of single DTC only supported through UDS (see Dcm SWS).
#        */
#       intDtc = GetIntDtcByUds(DemClearData.in_param_dtc, FALSE);
	.d2line		6779
.Llo1373:
	lis		r3,DemClearData@ha		# internalOrigin=r3
.Llo1374:
	lwz		r3,DemClearData@l(r3)		# internalOrigin=r3 internalOrigin=r3
.Llo1375:
	diab.li		r4,0
	bl		GetIntDtcByUds
.Llo1322:
	mr		r0,r3		# intDtc=r0 intDtc=r3
#       if ((DEM_INT_DTC_INVALID != intDtc) && (DEM_DTC_FORMAT_UDS == DemClearData.in_param_dtc_format))
	.d2line		6780
	rlwinm		r3,r3,0,16,31		# intDtc=r3 intDtc=r3
.Llo1323:
	cmpli		0,0,r3,65535		# intDtc=r3
.Llo1324:
	bc		1,2,.L1052	# eq
	lis		r3,(DemClearData+6)@ha		# intDtc=r3
	lbz		r3,(DemClearData+6)@l(r3)		# intDtc=r3 intDtc=r3
	se_cmpi		r3,11		# intDtc=r3
	bc		0,2,.L1052	# ne
#       {
#          DemClearData.response = ClearInternalDtc(intDtc, DemClearData.in_param_dtc_origin);
	.d2line		6782
	lis		r3,(DemClearData+7)@ha		# intDtc=r3
	lbz		r4,(DemClearData+7)@l(r3)		# intDtc=r3
	mr		r3,r0		# intDtc=r3 intDtc=r0
	bl		ClearInternalDtc
.Llo1325:
	lis		r4,(DemClearData+8)@ha
.Llo1326:
	stb		r3,(DemClearData+8)@l(r4)		# intDtc=r3
	b		.L1053
.L1052:
#       }
#       else
#       {
#          /* No matching single DTC was found. */
#          DemClearData.response = DEM_CLEAR_WRONG_DTC;
	.d2line		6787
.Llo1327:
	diab.li		r0,1		# internalOrigin=r0
.Llo1376:
	lis		r3,(DemClearData+8)@ha		# intDtc=r3
.Llo1328:
	stb		r0,(DemClearData+8)@l(r3)		# intDtc=r3 internalOrigin=r0
.L1053:
#       }
# 
#       if (DEM_CLEAR_OK == DemClearData.response)
	.d2line		6790
.Llo1329:
	lis		r3,(DemClearData+8)@ha		# intDtc=r3
.Llo1330:
	lbz		r0,(DemClearData+8)@l(r3)		# internalOrigin=r0 intDtc=r3
.Llo1377:
	se_cmpi		r0,0		# internalOrigin=r0
	bc		0,2,.L1054	# ne
#       {
#          clearFinishedOk = TRUE;
	.d2line		6792
.Llo1331:
	diab.li		r31,1		# clearFinishedOk=r31
	b		.L1056
.L1054:
#       }
#       else
#       {
#          Dem_UpdateIndicators();
	.d2line		6796
	bl		Dem_UpdateIndicators
#          DemClearState = DEM_CLEAR_FINISHED;
	.d2line		6797
	diab.li		r0,6		# internalOrigin=r0
.Llo1378:
	lis		r3,DemClearState@ha		# intDtc=r3
.Llo1332:
	e_add16i		r3,r3,DemClearState@l		# intDtc=r3 intDtc=r3
	stw		r0,0(r3)		# intDtc=r3 internalOrigin=r0
	b		.L1056
.L1051:
#       }
#    }
#    else if (DEM_CLEAR_ALL_ONGOING == DemClearState)
	.d2line		6800
.Llo1333:
	lis		r3,DemClearState@ha		# internalOrigin=r3
.Llo1379:
	lwz		r0,DemClearState@l(r3)		# internalOrigin=r0 internalOrigin=r3
	se_cmpi		r0,3		# internalOrigin=r0
	bc		0,2,.L1057	# ne
#    {
#       DemClearData.next_to_clear = ClearAllEvents(DemClearData.next_to_clear);
	.d2line		6802
.Llo1380:
	lis		r3,(DemClearData+4)@ha		# internalOrigin=r3
.Llo1381:
	lhz		r3,(DemClearData+4)@l(r3)		# internalOrigin=r3 internalOrigin=r3
.Llo1382:
	bl		ClearAllEvents
.Llo1383:
	lis		r4,(DemClearData+4)@ha
	sth		r3,(DemClearData+4)@l(r4)		# internalOrigin=r3
#       if (0xffffU == DemClearData.next_to_clear)
	.d2line		6803
	rlwinm		r3,r3,0,16,31		# internalOrigin=r3 internalOrigin=r3
	e_cmphl16i	r3,65535		# internalOrigin=r3
	bc		0,2,.L1056	# ne
#       {
# #if (STD_ON == DEM_OBD_SUPPORT)
#          ClearOBDInfo();
# #endif /* DEM_OBD_SUPPORT */
#          ClearOccurrenceInfo();
	.d2line		6808
.Llo1384:
	bl		ClearOccurrenceInfo
#          internalOrigin = GetInternalDTCOriginIndex(DemClearData.in_param_dtc_origin);
	.d2line		6809
	lis		r3,(DemClearData+7)@ha		# internalOrigin=r3
.Llo1385:
	lbz		r3,(DemClearData+7)@l(r3)		# internalOrigin=r3 internalOrigin=r3
.Llo1386:
	bl		GetInternalDTCOriginIndex
.Llo1387:
	mr		r0,r3		# internalOrigin=r0 internalOrigin=r3
#          Dem_ClrBits(Dem_NvAdmin.event_memory_overflow_ind, (uint8)(~Dem_OriginMasks[internalOrigin]));
	.d2line		6810
	lis		r4,(Dem_NvAdmin+8)@ha
	lbz		r5,(Dem_NvAdmin+8)@l(r4)
	lis		r3,Dem_OriginMasks@ha		# internalOrigin=r3
.Llo1388:
	e_add16i		r3,r3,Dem_OriginMasks@l		# internalOrigin=r3 internalOrigin=r3
.Llo1389:
	rlwinm		r0,r0,0,24,31		# internalOrigin=r0 internalOrigin=r0
	lbzx		r0,r3,r0		# internalOrigin=r0 internalOrigin=r3
	andc		r0,r5,r0		# internalOrigin=r0 internalOrigin=r0
	stb		r0,(Dem_NvAdmin+8)@l(r4)		# internalOrigin=r0
#          clearFinishedOk = TRUE;
	.d2line		6811
	diab.li		r31,1		# clearFinishedOk=r31
	b		.L1056
.L1057:
#       }
#    }
#    else if (DEM_CLEAR_GROUP_ONGOING == DemClearState)
	.d2line		6814
.Llo1390:
	lis		r3,DemClearState@ha		# internalOrigin=r3
.Llo1391:
	lwz		r0,DemClearState@l(r3)		# internalOrigin=r0 internalOrigin=r3
	se_cmpi		r0,4		# internalOrigin=r0
	bc		0,2,.L1056	# ne
#    {
#       if (DEM_DTC_GROUP_EMISSION_REL_DTCS == DemClearData.in_param_dtc)
	.d2line		6816
.Llo1392:
	lis		r3,DemClearData@ha		# internalOrigin=r3
.Llo1393:
	lwz		r0,DemClearData@l(r3)		# internalOrigin=r0 internalOrigin=r3
	se_cmpi		r0,0		# internalOrigin=r0
	bc		0,2,.L1061	# ne
#       {
#          /* Handle emission related group as DEM_DTC_GROUP_ALL_DTCS with format OBD */
#          DemClearData.next_to_clear = ClearInternalDtcGroup(DemClearData.internal_dtc_group, DemClearData.in_param_dtc_origin,
	.d2line		6819
.Llo1394:
	lis		r3,(DemClearData+9)@ha		# internalOrigin=r3
.Llo1395:
	lbz		r3,(DemClearData+9)@l(r3)		# internalOrigin=r3 internalOrigin=r3
.Llo1396:
	lis		r4,(DemClearData+7)@ha
	lbz		r4,(DemClearData+7)@l(r4)
	lis		r5,(DemClearData+4)@ha
	lhz		r6,(DemClearData+4)@l(r5)
	diab.li		r5,0
	bl		ClearInternalDtcGroup
.Llo1397:
	lis		r4,(DemClearData+4)@ha
	sth		r3,(DemClearData+4)@l(r4)		# internalOrigin=r3
#                                                           DEM_DTC_FORMAT_OBD, DemClearData.next_to_clear);
#          if (0xffffU == DemClearData.next_to_clear)
	.d2line		6821
	rlwinm		r3,r3,0,16,31		# internalOrigin=r3 internalOrigin=r3
	e_cmphl16i	r3,65535		# internalOrigin=r3
	bc		0,2,.L1056	# ne
#          {
# #if (STD_ON == DEM_OBD_SUPPORT)
#             ClearOBDInfo();
# #endif /* DEM_OBD_SUPPORT */
#             clearFinishedOk = TRUE;
	.d2line		6826
.Llo1398:
	diab.li		r31,1		# clearFinishedOk=r31
	b		.L1056
.L1061:
#          }
#       }
#       else
#       {
#          DemClearData.next_to_clear = ClearInternalDtcGroup(DemClearData.internal_dtc_group, DemClearData.in_param_dtc_origin,
	.d2line		6831
	lis		r3,(DemClearData+9)@ha		# internalOrigin=r3
.Llo1399:
	lbz		r3,(DemClearData+9)@l(r3)		# internalOrigin=r3 internalOrigin=r3
.Llo1400:
	lis		r4,(DemClearData+7)@ha
	lbz		r4,(DemClearData+7)@l(r4)
	lis		r5,(DemClearData+6)@ha
	lbz		r5,(DemClearData+6)@l(r5)
	lis		r6,(DemClearData+4)@ha
	lhz		r6,(DemClearData+4)@l(r6)
	bl		ClearInternalDtcGroup
.Llo1401:
	lis		r4,(DemClearData+4)@ha
	sth		r3,(DemClearData+4)@l(r4)		# internalOrigin=r3
#                                                           DemClearData.in_param_dtc_format, DemClearData.next_to_clear);
#          if (0xffffU == DemClearData.next_to_clear)
	.d2line		6833
	rlwinm		r3,r3,0,16,31		# internalOrigin=r3 internalOrigin=r3
	e_cmphl16i	r3,65535		# internalOrigin=r3
	bc		0,2,.L1056	# ne
#          {
#             if ((DEM_DTC_ORIGIN_PRIMARY_MEMORY == DemClearData.in_param_dtc_origin) &&
	.d2line		6835
.Llo1402:
	lis		r3,(DemClearData+7)@ha		# internalOrigin=r3
.Llo1403:
	lbz		r0,(DemClearData+7)@l(r3)		# internalOrigin=r0 internalOrigin=r3
	se_cmpi		r0,1		# internalOrigin=r0
	bc		0,2,.L1065	# ne
.Llo1404:
	lis		r3,(Dem_LCfg+140)@ha		# internalOrigin=r3
.Llo1405:
	lbz		r3,(Dem_LCfg+140)@l(r3)		# internalOrigin=r3 internalOrigin=r3
	diab.addi		r0,r3,-1		# internalOrigin=r0 internalOrigin=r3
	lis		r3,(DemClearData+9)@ha		# internalOrigin=r3
.Llo1406:
	lbz		r3,(DemClearData+9)@l(r3)		# internalOrigin=r3 internalOrigin=r3
.Llo1407:
	se_cmpl		r0,r3		# internalOrigin=r0 internalOrigin=r3
	bc		0,2,.L1065	# ne
#                 ((Dem_LCfg.num_dtc_groups - 1U) == DemClearData.internal_dtc_group))
#             {
# #if (STD_ON == DEM_OBD_SUPPORT)
#                ClearOBDInfo();
# #endif /* DEM_OBD_SUPPORT */
#                ClearOccurrenceInfo();
	.d2line		6841
.Llo1408:
	bl		ClearOccurrenceInfo
#                internalOrigin = GetInternalDTCOriginIndex(DemClearData.in_param_dtc_origin);
	.d2line		6842
	lis		r3,(DemClearData+7)@ha		# internalOrigin=r3
.Llo1409:
	lbz		r3,(DemClearData+7)@l(r3)		# internalOrigin=r3 internalOrigin=r3
.Llo1410:
	bl		GetInternalDTCOriginIndex
.Llo1411:
	mr		r0,r3		# internalOrigin=r0 internalOrigin=r3
#                Dem_ClrBits(Dem_NvAdmin.event_memory_overflow_ind, (uint8)(~Dem_OriginMasks[internalOrigin]));
	.d2line		6843
	lis		r4,(Dem_NvAdmin+8)@ha
	lbz		r5,(Dem_NvAdmin+8)@l(r4)
	lis		r3,Dem_OriginMasks@ha		# internalOrigin=r3
.Llo1412:
	e_add16i		r3,r3,Dem_OriginMasks@l		# internalOrigin=r3 internalOrigin=r3
.Llo1413:
	rlwinm		r0,r0,0,24,31		# internalOrigin=r0 internalOrigin=r0
	lbzx		r0,r3,r0		# internalOrigin=r0 internalOrigin=r3
	andc		r0,r5,r0		# internalOrigin=r0 internalOrigin=r0
	stb		r0,(Dem_NvAdmin+8)@l(r4)		# internalOrigin=r0
.L1065:
#             }
#             clearFinishedOk = TRUE;
	.d2line		6845
.Llo1414:
	diab.li		r31,1		# clearFinishedOk=r31
.L1056:
#          }
#       }
#    }
#    else
#    {
#       /* DEM_CLEAR_IDLE, DEM_CLEAR_FINISHED: no action. */
#    }
# 
#    if (TRUE == clearFinishedOk)
	.d2line		6854
.Llo1418:
	rlwinm		r31,r31,0,24,31		# clearFinishedOk=r31 clearFinishedOk=r31
	se_cmpi		r31,1		# clearFinishedOk=r31
	bc		0,2,.L1042	# ne
#    {
#       DemClearData.response = DEM_CLEAR_OK;
	.d2line		6856
.Llo1419:
	diab.li		r0,0		# internalOrigin=r0
.Llo1415:
	lis		r3,(DemClearData+8)@ha		# intDtc=r3
.Llo1334:
	stb		r0,(DemClearData+8)@l(r3)		# intDtc=r3 internalOrigin=r0
#       Dem_UpdateIndicators();
	.d2line		6857
	bl		Dem_UpdateIndicators
# #if (DEM_CLRRESP_VOLATILE == DEM_CLEAR_DTC_BEHAVIOR)
#       /* [SWS_Dem_00570] */
#       DemClearState = DEM_CLEAR_FINISHED;
	.d2line		6860
.Llo1335:
	diab.li		r0,6		# internalOrigin=r0
.Llo1416:
	lis		r3,DemClearState@ha		# intDtc=r3
.Llo1336:
	e_add16i		r3,r3,DemClearState@l		# intDtc=r3 intDtc=r3
	stw		r0,0(r3)		# intDtc=r3 internalOrigin=r0
.L1042:
# #elif (DEM_CLRRESP_NONVOLATILE_TRIGGER == DEM_CLEAR_DTC_BEHAVIOR)
#       /* [SWS_Dem_00571] */
#       Dem_NvTriggerImmediateNvStorage = TRUE;
#       DemClearState = DEM_CLEAR_FINISHED;
# #else /* DEM_CLRRESP_NONVOLATILE_FINISH */
#       Dem_NvTriggerImmediateNvStorage = TRUE;
#       DemClearState = DEM_CLEAR_NV_WRITE_PENDING;
# #endif /* DEM_CLEAR_DTC_BEHAVIOR */
# 
#    }
# }
	.d2line		6871
	.d2epilogue_begin
.Llo1337:
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# internalOrigin=r0
	mtspr		lr,r0		# internalOrigin=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3791:
	.type		HandleClear,@function
	.size		HandleClear,.-HandleClear
# Number of nodes = 425

# Allocations for HandleClear
#	?a4		intDtc
#	?a5		internalOrigin
#	?a6		clearFinishedOk
# static FUNC(Std_ReturnType, DEM_CODE) SetDTCSuppression(uint16 intDtc, boolean suppressionStatus)
	.align		1
	.section	.text_vle
        .d2line         6927,39
#$$ld
.L3801:

#$$bf	SetDTCSuppression,interprocedural,rasave,nostackparams

# Regs written: r0,r1,r3,r4,r5,r6,r7,r8,r26,r27,r28,r29,r30,r31,cr0,lr
	.d2_cfa_start __cie
SetDTCSuppression:
.Llo1420:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	26,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# intDtc=r31 intDtc=r3
.Llo1421:
	mr		r30,r4		# suppressionStatus=r30 suppressionStatus=r4
	.d2prologue_end
# {
#    Std_ReturnType retVal = E_OK;
	.d2line		6929
.Llo1422:
	diab.li		r29,0		# retVal=r29
#    uint8 origin;
#    boolean originFound = FALSE;
	.d2line		6931
.Llo1430:
	diab.li		r27,0
#    Dem_DTCOriginType eventDest;
#    Dem_NvEvMemEntryPtrType pEvMemEntry;
#    eventDest = GetDtcMemDest(intDtc);
	.d2line		6934
.Llo1435:
	lis		r4,Dem_pPbCfg@ha
.Llo1428:
	lwz		r3,Dem_pPbCfg@l(r4)
	lwz		r3,20(r3)
	lwz		r4,Dem_pPbCfg@l(r4)
	lwz		r4,92(r4)
	rlwinm		r0,r31,0,16,31		# intDtc=r31
	lbzx		r0,r4,r0
	lbzx		r26,r3,r0
.Llo1436:
	mr		r26,r26		# eventDest=r26 eventDest=r26
# 
#    /* Check that event is not stored in event-memory, in that case reject request! */
#    for (origin = 0; (origin < DEM_NUMBER_OF_ORIGINS) && (E_OK == retVal); origin++)
	.d2line		6937
	diab.li		r28,0
.L1084:
.Llo1429:
	rlwinm		r4,r28,0,24,31		# origin=r4 origin=r28
	se_cmpi		r4,2		# origin=r4
	bc		0,0,.L1086	# ge
	rlwinm		r3,r29,0,24,31		# intDtc=r3 retVal=r29
	se_cmpi		r3,0		# intDtc=r3
	bc		0,2,.L1086	# ne
#    {
#       if (Dem_IsSet(eventDest, Dem_OriginMasks[origin]))
	.d2line		6939
	rlwinm		r0,r26,0,24,31		# eventDest=r26
	lis		r3,Dem_OriginMasks@ha		# intDtc=r3
	e_add16i		r3,r3,Dem_OriginMasks@l		# intDtc=r3 intDtc=r3
	rlwinm		r4,r28,0,24,31		# origin=r4 origin=r28
	lbzx		r3,r3,r4		# intDtc=r3 intDtc=r3
	and.		r0,r0,r3		# intDtc=r3
	bc		1,2,.L1087	# eq
#       {  /* Configured origin found */
#          originFound = TRUE;
	.d2line		6941
	diab.li		r27,1		# originFound=r27
# 
#          if ((DEM_EV_MEM_ENTRY_INVALID != GetExistingEventMemoryEntry(intDtc, origin, &pEvMemEntry)) &&
	.d2line		6943
	diab.addi		r5,r1,8
	mr		r3,r31		# intDtc=r3 intDtc=r31
	mr		r4,r28		# origin=r4 origin=r28
	bl		GetExistingEventMemoryEntry
	rlwinm		r3,r3,0,24,31		# intDtc=r3 intDtc=r3
	cmpi		0,0,r3,255		# intDtc=r3
	bc		1,2,.L1087	# eq
	rlwinm		r4,r30,0,24,31		# origin=r4 suppressionStatus=r30
	se_cmpi		r4,1		# origin=r4
	bc		0,2,.L1087	# ne
#             (TRUE == suppressionStatus))
#          {
#             if (NULL_PTR != pEvMemEntry)
	.d2line		6946
	lwz		r0,8(r1)
	se_cmpi		r0,0
#             {
#                retVal = E_NOT_OK;
	.d2line		6948
	diab.li		r0,1
	isel		r29,r29,r0,2		# retVal=r29 retVal=r29
.L1087:
#             }
#          }
#       }
#    }
	.d2line		6952
	diab.addi		r4,r28,1		# origin=r4 origin=r28
	se_addi		r28,1		# origin=r28 origin=r28
	b		.L1084
.L1086:
# 
#    if((TRUE == originFound) && (E_OK == retVal))
	.d2line		6954
	rlwinm		r27,r27,0,24,31		# originFound=r27 originFound=r27
	se_cmpi		r27,1		# originFound=r27
	bc		0,2,.L1090	# ne
.Llo1432:
	rlwinm		r3,r29,0,24,31		# intDtc=r3 retVal=r29
	se_cmpi		r3,0		# intDtc=r3
	bc		0,2,.L1090	# ne
#    {
#       if(TRUE == suppressionStatus)
	.d2line		6956
	rlwinm		r30,r30,0,24,31		# suppressionStatus=r30 suppressionStatus=r30
	se_cmpi		r30,1		# suppressionStatus=r30
	bc		0,2,.L1091	# ne
#       {  /* Suppress DTC */
#          Dem_BitArraySetBit(Dem_LCfg.p_dtc_suppressed, intDtc);
	.d2line		6958
.Llo1423:
	lis		r3,(Dem_LCfg+116)@ha		# intDtc=r3
.Llo1424:
	lwz		r3,(Dem_LCfg+116)@l(r3)		# intDtc=r3 intDtc=r3
	rlwinm		r5,r31,29,19,31		# intDtc=r31
	lbzx		r0,r3,r5		# intDtc=r3
	diab.li		r4,1		# origin=r4
.Llo1433:
	rlwinm		r31,r31,0,29,31		# intDtc=r31 intDtc=r31
	slw		r4,r4,r31		# origin=r4 origin=r4 intDtc=r31
	or		r0,r0,r4		# origin=r4
	stbx		r0,r3,r5		# intDtc=r3
	b		.L1090
.L1091:
#       }
#       else
#       {  /* Release suppress of DTC */
#          Dem_BitArrayClearBit(Dem_LCfg.p_dtc_suppressed, intDtc);
	.d2line		6962
.Llo1425:
	lis		r3,(Dem_LCfg+116)@ha		# intDtc=r3
.Llo1426:
	lwz		r3,(Dem_LCfg+116)@l(r3)		# intDtc=r3 intDtc=r3
	rlwinm		r5,r31,29,19,31		# intDtc=r31
	lbzx		r0,r3,r5		# intDtc=r3
	diab.li		r4,1		# origin=r4
.Llo1434:
	rlwinm		r31,r31,0,29,31		# intDtc=r31 intDtc=r31
	slw		r4,r4,r31		# origin=r4 origin=r4 intDtc=r31
	xori		r4,r4,255		# origin=r4 origin=r4
	and		r0,r0,r4		# origin=r4
	stbx		r0,r3,r5		# intDtc=r3
.L1090:
#       }
#    }
# 
#    return retVal;
	.d2line		6966
.Llo1427:
	rlwinm		r3,r29,0,24,31		# intDtc=r3 retVal=r29
# }
	.d2line		6967
	.d2epilogue_begin
	lmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	2,10
.Llo1431:
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3802:
	.type		SetDTCSuppression,@function
	.size		SetDTCSuppression,.-SetDTCSuppression
# Number of nodes = 129

# Allocations for SetDTCSuppression
#	?a4		intDtc
#	?a5		suppressionStatus
#	?a6		$$17
#	?a7		$$16
#	?a8		retVal
#	?a9		origin
#	?a10		originFound
#	?a11		eventDest
#	SP,8		pEvMemEntry
# static FUNC(Dem_ReturnClearDTCType, Dem_CODE) UserClearDTC(Dem_UserClearDTCType user, uint32 DTC, Dem_DTCFormatType DTCFormat, Dem_DTCOriginType DTCOrigin)
	.align		1
	.section	.text_vle
        .d2line         6969,47
#$$ld
.L3818:

#$$bf	UserClearDTC,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
UserClearDTC:
.Llo1437:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
.Llo1468:
	stmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	27,31,1,1
	stw		r0,52(r1)		# OBDService0x04Disabled=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# user=r31 user=r3
	mr		r30,r4		# DTC=r30 DTC=r4
	mr		r29,r5		# DTCFormat=r29 DTCFormat=r5
	mr		r28,r6		# DTCOrigin=r28 DTCOrigin=r6
	.d2prologue_end
# {
#    Dem_ReturnClearDTCType retVal = DEM_CLEAR_FAILED;
	.d2line		6971
	diab.li		r27,3		# retVal=r27
#    boolean OBDService0x04Disabled = FALSE;
	.d2line		6972
	diab.li		r0,0		# OBDService0x04Disabled=r0
# 
#    if ((DEM_DTC_GROUP_ALL_DTCS == DTC) &&
	.d2line		6974
	diab.li		r3,16777215
.Llo1438:
	se_cmpl		r30,r3		# DTC=r30
	bc		0,2,.L1099	# ne
.Llo1439:
	rlwinm		r5,r29,0,24,31		# DTCFormat=r29
.Llo1443:
	se_cmpi		r5,0
	bc		0,2,.L1099	# ne
	rlwinm		r6,r28,0,24,31		# DTCOrigin=r28
	se_cmpi		r6,1
	bc		0,2,.L1099	# ne
#        (DEM_DTC_FORMAT_OBD == DTCFormat) &&
#        (DEM_DTC_ORIGIN_PRIMARY_MEMORY == DTCOrigin))
#    {
#       /* [VSTAR_Dem_00130]
#        * This is a OBD service 0x04 call.
#        * Service 0x04 calls are configured to be translated to a UDS service 0x14 call.
#        */
#       if (Dem_LCfg.service_04_clear_all)
	.d2line		6982
	lis		r3,(Dem_LCfg+173)@ha
	lbz		r3,(Dem_LCfg+173)@l(r3)
	se_cmpi		r3,0
#       {
#          DTCFormat = DEM_DTC_FORMAT_UDS;
	.d2line		6984
	diab.li		r3,11
	isel		r29,r29,r3,2		# DTCFormat=r29 DTCFormat=r29
.L1099:
#       }
# 
# #if (DEM_OBD_SUPPORT == STD_ON)
#       if (DisableOBDServiceOutput(0x04U))
#       {
#          OBDService0x04Disabled = TRUE;
#          retVal = DEM_CLEAR_OK;
#       }
# #endif /* DEM_OBD_SUPPORT == STD_ON */
#    }
# 
#    /* Check init-state, to protect NV-ram at shutdown. */
#    if ((DEM_INIT == Dem_InitState) && (FALSE == OBDService0x04Disabled))
	.d2line		6997
	lis		r3,Dem_InitState@ha
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		0,2,.L1101	# ne
	rlwinm		r0,r0,0,24,31		# OBDService0x04Disabled=r0 OBDService0x04Disabled=r0
	se_cmpi		r0,0		# OBDService0x04Disabled=r0
	bc		0,2,.L1101	# ne
#    {
#       SchM_Enter_Dem_EaClearDtc();
	.d2line		6999
.Llo1469:
	bl		SchM_Enter_Dem_EaClearDtc
#       switch (DemClearState)
	.d2line		7000
	lis		r3,DemClearState@ha
	lwz		r6,DemClearState@l(r3)
	se_cmpi		r6,2
	bc		1,1,.L3831	# gt
.Llo1461:
	bc		1,2,.L1107	# eq
	se_cmpi		r6,0
	bc		1,2,.L1102	# eq
	se_cmpi		r6,1
	bc		1,2,.L1107	# eq
	b		.L1111
.L3831:
	se_cmpi		r6,3
	bc		1,2,.L1107	# eq
	se_cmpi		r6,4
	bc		1,2,.L1107	# eq
	b		.L1111
.L1102:
#       {
#          case DEM_CLEAR_IDLE:
#          {
#             /* [SWS_Dem_00661]
#              * Clearing process is not locked, lock the clearing process from other users,
#              * and save input parameters for handling in Dem_MainFunction().
#              */
#             DemClearData.in_param_dtc = DTC;
	.d2line		7008
	lis		r3,DemClearData@ha
	e_add16i		r3,r3,DemClearData@l
	stw		r30,0(r3)		# DTC=r30
#             DemClearData.in_param_dtc_format = DTCFormat;
	.d2line		7009
	lis		r3,(DemClearData+6)@ha
	stb		r29,(DemClearData+6)@l(r3)		# DTCFormat=r29
#             DemClearData.in_param_dtc_origin = DTCOrigin;
	.d2line		7010
	lis		r3,(DemClearData+7)@ha
	stb		r28,(DemClearData+7)@l(r3)		# DTCOrigin=r28
#             DemClearData.user_clear_dtc = user;
	.d2line		7011
	lis		r3,(DemClearData+12)@ha
	stw		r31,(DemClearData+12)@l(r3)		# user=r31
#             retVal = DEM_CLEAR_PENDING;
	.d2line		7012
	diab.li		r27,4		# retVal=r27
#             DemClearState = DEM_CLEAR_INIT;
	.d2line		7013
.Llo1462:
	diab.li		r0,1		# OBDService0x04Disabled=r0
.Llo1470:
	lis		r3,DemClearState@ha
	e_add16i		r3,r3,DemClearState@l
	stw		r0,0(r3)		# OBDService0x04Disabled=r0
	b		.L1103
.L1107:
#             break;
#          }
#          case DEM_CLEAR_INIT:
#          case DEM_CLEAR_SINGLE_ONGOING:
#          case DEM_CLEAR_ALL_ONGOING:
#          case DEM_CLEAR_GROUP_ONGOING:
#          {
#             if ((DemClearData.in_param_dtc == DTC) &&
	.d2line		7021
.Llo1463:
	lis		r3,DemClearData@ha
	lwz		r0,DemClearData@l(r3)		# OBDService0x04Disabled=r0
.Llo1471:
	se_cmpl		r0,r30		# OBDService0x04Disabled=r0 DTC=r30
	bc		0,2,.L1108	# ne
.Llo1444:
	lis		r3,(DemClearData+6)@ha
	lbz		r0,(DemClearData+6)@l(r3)		# OBDService0x04Disabled=r0
.Llo1451:
	rlwinm		r29,r29,0,24,31		# DTCFormat=r29 DTCFormat=r29
	se_cmp		r0,r29		# OBDService0x04Disabled=r0 DTCFormat=r29
	bc		0,2,.L1108	# ne
.Llo1452:
	lis		r3,(DemClearData+7)@ha
	lbz		r0,(DemClearData+7)@l(r3)		# OBDService0x04Disabled=r0
.Llo1457:
	rlwinm		r28,r28,0,24,31		# DTCOrigin=r28 DTCOrigin=r28
	se_cmp		r0,r28		# OBDService0x04Disabled=r0 DTCOrigin=r28
	bc		0,2,.L1108	# ne
.Llo1458:
	lis		r3,(DemClearData+12)@ha
	lwz		r0,(DemClearData+12)@l(r3)		# OBDService0x04Disabled=r0
.Llo1472:
	se_cmp		r0,r31		# OBDService0x04Disabled=r0 user=r31
	bc		0,2,.L1108	# ne
#                 (DemClearData.in_param_dtc_format == DTCFormat) &&
#                 (DemClearData.in_param_dtc_origin == DTCOrigin) &&
#                 (DemClearData.user_clear_dtc == user))
#             {
#                /* [SWS_Dem_00663]
#                 * Clearing process is ongoing.
#                 */
#                retVal = DEM_CLEAR_PENDING;
	.d2line		7029
.Llo1440:
	diab.li		r27,4		# retVal=r27
.Llo1464:
	b		.L1103
.L1108:
#             }
#             else
#             {
#                /* [SWS_Dem_00662], [SWS_Dem_00664]
#                 * Clearing process is locked by another user or called with different set of parameters.
#                 */
#                retVal = DEM_CLEAR_BUSY;
	.d2line		7036
.Llo1441:
	diab.li		r27,5		# retVal=r27
.Llo1465:
	b		.L1103
.L1111:
#             }
#             break;
#          }
# #if (DEM_CLRRESP_NONVOLATILE_FINISH == DEM_CLEAR_DTC_BEHAVIOR)
#          case DEM_CLEAR_NV_WRITE_PENDING:
#          {
#             if ((DemClearData.in_param_dtc == DTC) &&
#                 (DemClearData.in_param_dtc_format == DTCFormat) &&
#                 (DemClearData.in_param_dtc_origin == DTCOrigin) &&
#                 (DemClearData.user_clear_dtc == user))
#             {
#                /* [SWS_Dem_00663]
#                 * Clearing process ongoing.
#                 */
#                retVal = DEM_CLEAR_PENDING;
#             }
#             else
#             {
#                /* [SWS_Dem_00662], [SWS_Dem_00664]
#                 * Clearing process is locked by another user or called with different set of parameters.
#                 */
#                retVal = DEM_CLEAR_BUSY;
#             }
#             break;
#          }
# #endif /* DEM_CLEAR_DTC_BEHAVIOR */
#          case DEM_CLEAR_FINISHED:
#          default:
#          {
#             if (DemClearData.user_clear_dtc == user)
	.d2line		7066
.Llo1445:
	lis		r3,(DemClearData+12)@ha
	lwz		r0,(DemClearData+12)@l(r3)		# OBDService0x04Disabled=r0
.Llo1473:
	se_cmp		r0,r31		# OBDService0x04Disabled=r0 user=r31
	bc		0,2,.L1112	# ne
#             {
#                /* No matter what set of parameters, the state machine
#                 * will go to IDLE to prevent infinit loops
#                 */
#                if ((DemClearData.in_param_dtc == DTC) &&
	.d2line		7071
.Llo1442:
	lis		r3,DemClearData@ha
	lwz		r0,DemClearData@l(r3)		# OBDService0x04Disabled=r0
.Llo1474:
	se_cmpl		r0,r30		# OBDService0x04Disabled=r0 DTC=r30
	bc		0,2,.L1113	# ne
.Llo1446:
	lis		r3,(DemClearData+6)@ha
	lbz		r0,(DemClearData+6)@l(r3)		# OBDService0x04Disabled=r0
.Llo1453:
	rlwinm		r29,r29,0,24,31		# DTCFormat=r29 DTCFormat=r29
	se_cmp		r0,r29		# OBDService0x04Disabled=r0 DTCFormat=r29
	bc		0,2,.L1113	# ne
.Llo1454:
	lis		r3,(DemClearData+7)@ha
	lbz		r0,(DemClearData+7)@l(r3)		# OBDService0x04Disabled=r0
.Llo1459:
	rlwinm		r28,r28,0,24,31		# DTCOrigin=r28 DTCOrigin=r28
	se_cmp		r0,r28		# OBDService0x04Disabled=r0 DTCOrigin=r28
	bc		0,2,.L1113	# ne
#                    (DemClearData.in_param_dtc_format == DTCFormat) &&
#                    (DemClearData.in_param_dtc_origin == DTCOrigin))
#                {
#                   /* [SWS_Dem_00663]
#                    * Clearing process has finished.
#                    */
#                   retVal = DemClearData.response;
	.d2line		7078
.Llo1460:
	lis		r3,(DemClearData+8)@ha
	lbz		r27,(DemClearData+8)@l(r3)		# retVal=r27
.Llo1466:
	mr		r27,r27		# retVal=r27 retVal=r27
	b		.L1114
.L1113:
#                }
#                else
#                {
#                   /* [SWS_Dem_00664]
#                    * DTC clear called with different set of parameters.
#                    */
#                   retVal = DEM_CLEAR_BUSY;
	.d2line		7085
.Llo1455:
	diab.li		r27,5		# retVal=r27
.L1114:
#                }
# 
#                /* [SWS_Dem_01042]
#                 * The clearing process is finished.
#                 */
#                DemClearState = DEM_CLEAR_IDLE;
	.d2line		7091
.Llo1456:
	diab.li		r0,0		# OBDService0x04Disabled=r0
.Llo1475:
	lis		r3,DemClearState@ha
	e_add16i		r3,r3,DemClearState@l
	stw		r0,0(r3)		# OBDService0x04Disabled=r0
	b		.L1103
.L1112:
#             }
#             else
#             {
#                /* [SWS_Dem_00662]
#                 * Clearing process is locked by another user.
#                 */
#                retVal = DEM_CLEAR_BUSY;
	.d2line		7098
.Llo1447:
	diab.li		r27,5		# retVal=r27
.L1103:
#             }
#             break;
#          }
#       }
#       SchM_Exit_Dem_EaClearDtc();
	.d2line		7103
.Llo1448:
	bl		SchM_Exit_Dem_EaClearDtc
.L1101:
#    }
# 
#    return retVal;
	.d2line		7106
.Llo1449:
	rlwinm		r3,r27,0,24,31		# retVal=r27
# }
	.d2line		7107
	.d2epilogue_begin
	lmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
.Llo1467:
	lwz		r0,52(r1)		# OBDService0x04Disabled=r0
	mtspr		lr,r0		# OBDService0x04Disabled=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1450:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3819:
	.type		UserClearDTC,@function
	.size		UserClearDTC,.-UserClearDTC
# Number of nodes = 162

# Allocations for UserClearDTC
#	?a4		user
#	?a5		DTC
#	?a6		DTCFormat
#	?a7		DTCOrigin
#	?a8		retVal
#	?a9		OBDService0x04Disabled
# static FUNC(void, DEM_CODE) HandleQueuedEvents(void)
	.align		1
	.section	.text_vle
        .d2line         7132,29
#$$ld
.L3834:

#$$bf	HandleQueuedEvents,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
HandleQueuedEvents:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	27,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    uint16 i;
#    uint8 k = 0;
	.d2line		7135
	diab.li		r31,0		# k=r31
#    Dem_EventIdType eventId;
#    Dem_EventStateType eventState;
#    uint16 numUpdateBytes = (uint16)((Dem_LCfg.num_events + 7) / 8);
	.d2line		7138
.Llo1476:
	lis		r3,(Dem_LCfg+136)@ha
	lhz		r3,(Dem_LCfg+136)@l(r3)
	se_addi		r3,7
	srawi		r3,r3,3
	addze		r27,r3
.Llo1484:
	mr		r27,r27		# numUpdateBytes=r27 numUpdateBytes=r27
# 
#    for (i = 0; i < numUpdateBytes; i++)
.L1135:
	.d2line		7140
	rlwinm		r0,r31,0,16,31		# i=r31
	rlwinm		r3,r27,0,16,31		# numUpdateBytes=r27
	se_cmp		r0,r3
	bc		0,0,.L1134	# ge
#    {
#       if (0 != Dem_LCfg.p_event_state_update[i])
	.d2line		7142
	lis		r3,(Dem_LCfg+4)@ha
	lwz		r3,(Dem_LCfg+4)@l(r3)
	rlwinm		r0,r31,0,16,31		# i=r31
	lbzx		r0,r3,r0
	se_cmpi		r0,0
	bc		1,2,.L1138	# eq
#       {
#          /*
#           * At least one of the 8 events represented by this byte has been updated.
#           * Loop through all 8 bits.
#           */
#          for (k = 0; (k < 8U) && (0 != Dem_LCfg.p_event_state_update[i]); k++)
	.d2line		7148
	diab.li		r30,0		# k=r30
.L1139:
.Llo1478:
	rlwinm		r6,r30,0,24,31		# k=r30
	se_cmpli	r6,8
	bc		0,0,.L1138	# ge
	lis		r3,(Dem_LCfg+4)@ha
	lwz		r3,(Dem_LCfg+4)@l(r3)
	rlwinm		r0,r31,0,16,31		# i=r31
	lbzx		r0,r3,r0
	se_cmpi		r0,0
	bc		1,2,.L1138	# eq
#          {
#             if (Dem_IsSet(Dem_LCfg.p_event_state_update[i], (uint8)(1U << k)))
	.d2line		7150
	lis		r3,(Dem_LCfg+4)@ha
	lwz		r3,(Dem_LCfg+4)@l(r3)
	rlwinm		r0,r31,0,16,31		# i=r31
	lbzx		r3,r3,r0
	diab.li		r0,1
	slw		r0,r0,r30		# k=r30
	rlwinm		r0,r0,0,24,31
	and.		r0,r0,r3
	bc		1,2,.L1142	# eq
#             {
#                eventId = (i * 8U) + k + 1U;
	.d2line		7152
	rlwinm		r0,r31,3,0,28		# i=r31
	rlwinm		r6,r30,0,24,31		# k=r30
	se_add		r6,r0
	addi		r29,r6,1
#                eventState = GetEventStateInBuffer(eventId);
	.d2line		7153
.Llo1479:
	mr		r3,r29		# eventId=r3 eventId=r29
	bl		GetEventStateInBuffer
.Llo1481:
	mr		r28,r3		# eventState=r28 eventState=r3
# 
#                UpdateEventStatus(eventId, eventState);
	.d2line		7155
.Llo1482:
	diab.addi		r3,r6,1
.Llo1483:
	mr		r4,r28		# eventState=r4 eventState=r28
	bl		UpdateEventStatus
# 
#                if (0U == DTCRecordUpdateDisabled)
	.d2line		7157
	lis		r3,DTCRecordUpdateDisabled@ha
	lwz		r0,DTCRecordUpdateDisabled@l(r3)
	se_cmpi		r0,0
	bc		0,2,.L1142	# ne
#                {
#                   /* Updated event found */
#                   HandleEventState(eventId, eventState);
	.d2line		7160
	mr		r3,r29		# eventId=r3 eventId=r29
	mr		r4,r28		# eventState=r4 eventState=r28
	bl		HandleEventState
.L1142:
#                }
#             }
#          }
	.d2line		7163
	diab.addi		r6,r30,1		# k=r30
	se_addi		r30,1		# k=r30 k=r30
	b		.L1139
.L1138:
#       }
#    }
	.d2line		7165
.Llo1480:
	diab.addi		r0,r31,1		# i=r31
	se_addi		r31,1		# i=r31 i=r31
	b		.L1135
.L1134:
# }
	.d2line		7166
	.d2epilogue_begin
.Llo1477:
	lmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3835:
	.type		HandleQueuedEvents,@function
	.size		HandleQueuedEvents,.-HandleQueuedEvents
# Number of nodes = 114

# Allocations for HandleQueuedEvents
#	?a4		i
#	?a5		k
#	?a6		eventId
#	?a7		eventState
#	?a8		numUpdateBytes
# static FUNC(void, DEM_CODE) ProcessBswEvents(void)
	.align		1
	.section	.text_vle
        .d2line         7109,29
#$$ld
.L3849:

#$$bf	ProcessBswEvents,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
ProcessBswEvents:
.Llo1485:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    Dem_EventIdType evId;
#    uint8 opCycle;
# 
#    /* Loop over event-ids */
#    for (evId = (Dem_EventIdType)1; evId <= Dem_LCfg.num_events; evId++)
	.d2line		7115
	diab.li		r31,1		# evId=r31
.L1127:
	rlwinm		r0,r31,0,16,31		# opCycle=r0 evId=r31
.Llo1487:
	lis		r3,(Dem_LCfg+136)@ha		# evId=r3
	lhz		r3,(Dem_LCfg+136)@l(r3)		# evId=r3 evId=r3
	se_cmp		r0,r3		# opCycle=r0 evId=r3
	bc		1,1,.L1129	# gt
#    {
#       opCycle = Dem_GetOpCycle(evId);
	.d2line		7117
.Llo1488:
	lis		r3,Dem_pPbCfg@ha		# evId=r3
	lwz		r4,Dem_pPbCfg@l(r3)		# evId=r3
	lwz		r4,52(r4)
	lwz		r3,Dem_pPbCfg@l(r3)		# evId=r3 evId=r3
	lwz		r0,104(r3)		# opCycle=r0 evId=r3
.Llo1489:
	rlwinm		r3,r31,0,16,31		# evId=r3 evId=r31
	se_add		r3,r0		# evId=r3 evId=r3 opCycle=r0
	lbz		r0,-1(r3)		# opCycle=r0 evId=r3
	lbzx		r0,r4,r0		# opCycle=r0
	mr		r0,r0		# opCycle=r0 opCycle=r0
#       if (DEM_CYCLE_STATE_START != GetOpCycleState(opCycle))
	.d2line		7118
	lis		r3,Dem_NvOpCycleState@ha		# evId=r3
	e_add16i		r3,r3,Dem_NvOpCycleState@l		# evId=r3 evId=r3
	rlwinm		r0,r0,0,24,31		# opCycle=r0 opCycle=r0
	lbzx		r0,r3,r0		# opCycle=r0 evId=r3
	se_cmpi		r0,0		# opCycle=r0
	bc		1,2,.L1130	# eq
#       {  /* Operation is not started for specified event */
#          /* Clear pre-debouncing counter */
#          Dem_SetDebouncingCounter(evId, DEM_DB_COUNTER_CLEAR);
	.d2line		7121
.Llo1490:
	mr		r3,r31		# evId=r3 evId=r31
	diab.li		r4,2
	bl		Dem_SetDebouncingCounter
#          /* [SWS_Dem_00854] Clear event state buffer and update bit, i.e. event will be dropped. */
#          ClearEventStateInBuffer(evId);
	.d2line		7123
	mr		r3,r31		# evId=r3 evId=r31
	bl		ClearEventStateInBuffer
.L1130:
#       }
#    }
	.d2line		7125
	diab.addi		r0,r31,1		# opCycle=r0 evId=r31
	se_addi		r31,1		# evId=r31 evId=r31
	b		.L1127
.L1129:
# 
#    /* Process events reported but not yet handled
#       by Dem_MainFunction() */
#    HandleQueuedEvents();
	.d2line		7129
.Llo1486:
	bl		HandleQueuedEvents
# }
	.d2line		7130
	.d2epilogue_begin
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# opCycle=r0
	mtspr		lr,r0		# opCycle=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3850:
	.type		ProcessBswEvents,@function
	.size		ProcessBswEvents,.-ProcessBswEvents
# Number of nodes = 57

# Allocations for ProcessBswEvents
#	?a4		evId
#	?a5		opCycle
# static FUNC(uint16, DEM_CODE) GetNumberOfFilteredDTCInEventMemory(void)
	.align		1
	.section	.text_vle
        .d2line         7168,31
#$$ld
.L3858:

#$$bf	GetNumberOfFilteredDTCInEventMemory,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
GetNumberOfFilteredDTCInEventMemory:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    uint16 numberOfFilteredDTC = 0;
	.d2line		7170
	diab.li		r31,0		# numberOfFilteredDTC=r31
#    CONST(uint8, AUTOMATIC) internalOrigin = GetInternalDTCOriginIndex(DTCFilter.dtc_origin);
	.d2line		7171
.Llo1491:
	lis		r3,(DTCFilter+4)@ha
	lbz		r3,(DTCFilter+4)@l(r3)
	bl		GetInternalDTCOriginIndex
.Llo1493:
	mr		r30,r3		# internalOrigin=r30 internalOrigin=r3
#    uint8 i;
# 
#    if ((internalOrigin != DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX) && Dem_EvMemExist(internalOrigin))
	.d2line		7174
	rlwinm		r0,r30,0,24,31		# internalOrigin=r30
	cmpi		0,0,r0,255
	bc		1,2,.L1150	# eq
.Llo1494:
	lis		r3,(Dem_LCfg+20)@ha
.Llo1495:
	e_add16i		r3,r3,(Dem_LCfg+20)@l
	rlwinm		r0,r30,2,22,29		# internalOrigin=r30
	lwzx		r0,r3,r0
	se_cmpi		r0,0
	bc		1,2,.L1150	# eq
	.section	.text_vle
.L3867:
#    {
#       P2CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC, DEM_APPL_CONST) pEvMemEntries = Dem_GetEvMemEntriesPtr(internalOrigin);
	.d2line		7176
	lis		r3,(Dem_LCfg+20)@ha
	e_add16i		r3,r3,(Dem_LCfg+20)@l
	rlwinm		r0,r30,2,22,29		# internalOrigin=r30
	lwzx		r3,r3,r0
	lwz		r28,0(r3)
.Llo1498:
	mr		r28,r28		# pEvMemEntries=r28 pEvMemEntries=r28
# 
#       for (i = (uint8)0U; i < Dem_MaxNumEvMemEntries[internalOrigin]; i++)
	.d2line		7178
.Llo1499:
	diab.li		r29,0		# i=r29
.L1151:
.Llo1497:
	rlwinm		r4,r29,0,24,31		# i=r29
	lis		r3,Dem_MaxNumEvMemEntries@ha
	e_add16i		r3,r3,Dem_MaxNumEvMemEntries@l
	rlwinm		r0,r30,0,24,31		# internalOrigin=r30
	lbzx		r0,r3,r0
	se_cmp		r4,r0
	bc		0,0,.L1150	# ge
#       {
#          if (pEvMemEntries[i]->event_id != DEM_EVENTID_INVALID)
	.d2line		7180
	rlwinm		r3,r29,2,22,29		# i=r29
	lwzux		r4,r3,r28
	lhz		r0,0(r4)
	se_cmpi		r0,0
	bc		1,2,.L1154	# eq
	.section	.text_vle
.L3873:
#          {
#             CONST(uint16, AUTOMATIC) internalDtc = Dem_GetEventIntDtc(pEvMemEntries[i]->event_id);
	.d2line		7182
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r0,128(r3)
	rlwinm		r3,r29,2,22,29		# i=r29
	lwzux		r4,r3,r28
	lhz		r3,0(r4)
	rlwinm		r3,r3,1,15,30
	se_add		r3,r0
	lhz		r3,-2(r3)
.Llo1500:
	mr		r3,r3		# internalDtc=r3 internalDtc=r3
# 
#             /* Check if found DTC matches the filter */
#             if (DTCFilterMatch(internalDtc, NULL_PTR))
	.d2line		7185
	mr		r3,r3		# internalDtc=r3 internalDtc=r3
.Llo1501:
	diab.li		r4,0
	bl		DTCFilterMatch
	e_andi.		r3,r3,255
	bc		1,2,.L1154	# eq
#             {
#                numberOfFilteredDTC++;
	.d2line		7187
	diab.addi		r3,r31,1		# numberOfFilteredDTC=r31
	se_addi		r31,1		# numberOfFilteredDTC=r31 numberOfFilteredDTC=r31
	.section	.text_vle
.L3874:
.L1154:
#             }
#          }
#       }
	.d2line		7190
	diab.addi		r3,r29,1		# i=r29
	se_addi		r29,1		# i=r29 i=r29
	b		.L1151
	.section	.text_vle
.L3868:
.L1150:
#    }
# 
#    return numberOfFilteredDTC;
	.d2line		7193
.Llo1496:
	rlwinm		r3,r31,0,16,31		# numberOfFilteredDTC=r31
# }
	.d2line		7194
	.d2epilogue_begin
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
.Llo1492:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3859:
	.type		GetNumberOfFilteredDTCInEventMemory,@function
	.size		GetNumberOfFilteredDTCInEventMemory,.-GetNumberOfFilteredDTCInEventMemory
# Number of nodes = 105

# Allocations for GetNumberOfFilteredDTCInEventMemory
#	?a4		numberOfFilteredDTC
#	?a5		internalOrigin
#	?a6		i
#	?a7		pEvMemEntries
#	?a8		internalDtc
# static FUNC(boolean, Dem_CODE) OpCycleCircularQueuePut(P2CONST(Dem_SetOpCycleParamType, AUTOMATIC, DEM_APPL_DATA) pItem)
	.align		1
	.section	.text_vle
        .d2line         7311,32
#$$ld
.L3881:

#$$bf	OpCycleCircularQueuePut,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
OpCycleCircularQueuePut:
.Llo1502:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	30,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# pItem=r31 pItem=r3
	.d2prologue_end
# {
#    boolean retVal = FALSE;
	.d2line		7313
	diab.li		r30,0		# retVal=r30
# 
#    /* ---------- Enter critical section ---------- */
#    SchM_Enter_Dem_EaOpCycleQueue();
	.d2line		7316
	bl		SchM_Enter_Dem_EaOpCycleQueue
#    if (Dem_OpCycleQueue.num_items < Dem_LCfg.op_cycle_change_buffer_size)
	.d2line		7317
.Llo1503:
	lis		r3,(Dem_OpCycleQueue+2)@ha
	lbz		r0,(Dem_OpCycleQueue+2)@l(r3)
	lis		r3,(Dem_LCfg+12)@ha
	lbz		r3,(Dem_LCfg+12)@l(r3)
	se_cmp		r0,r3
	bc		0,0,.L1160	# ge
#    {
#       Dem_MemCpy(&Dem_LCfg.p_op_cycle_change_buffer[Dem_OpCycleQueue.rear], pItem, sizeof(Dem_SetOpCycleParamType));
	.d2line		7319
.Llo1504:
	lis		r3,(Dem_LCfg+8)@ha
	lwz		r3,(Dem_LCfg+8)@l(r3)
	lis		r4,Dem_OpCycleQueue@ha
	lbz		r0,Dem_OpCycleQueue@l(r4)
	rlwinm		r0,r0,1,23,30
	se_add		r3,r0
	mr		r4,r31		# pItem=r4 pItem=r31
	diab.li		r5,2
	bl		Dem_MemCpy
#       Dem_OpCycleQueue.rear = (uint8)(Dem_OpCycleQueue.rear + (uint8)1U) % Dem_LCfg.op_cycle_change_buffer_size;
	.d2line		7320
	lis		r3,Dem_OpCycleQueue@ha
	lbz		r4,Dem_OpCycleQueue@l(r3)
	se_addi		r4,1
	rlwinm		r4,r4,0,24,31
	lis		r3,(Dem_LCfg+12)@ha
	lbz		r3,(Dem_LCfg+12)@l(r3)
	divwu		r0,r4,r3
	mullw		r0,r0,r3
	subf		r0,r0,r4
	lis		r3,Dem_OpCycleQueue@ha
	e_add16i		r3,r3,Dem_OpCycleQueue@l
	stb		r0,0(r3)
#       Dem_OpCycleQueue.num_items++;
	.d2line		7321
	lis		r4,(Dem_OpCycleQueue+2)@ha
	lbz		r3,(Dem_OpCycleQueue+2)@l(r4)
	se_addi		r3,1
	stb		r3,(Dem_OpCycleQueue+2)@l(r4)
#       retVal = TRUE;
	.d2line		7322
	diab.li		r30,1		# retVal=r30
.L1160:
#    }
#    SchM_Exit_Dem_EaOpCycleQueue();
	.d2line		7324
.Llo1505:
	bl		SchM_Exit_Dem_EaOpCycleQueue
#    /* ---------- Exit critical section ----------- */
# 
#    return retVal;
	.d2line		7327
	rlwinm		r3,r30,0,24,31		# retVal=r30
# }
	.d2line		7328
	.d2epilogue_begin
	lmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	3,10
.Llo1506:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3882:
	.type		OpCycleCircularQueuePut,@function
	.size		OpCycleCircularQueuePut,.-OpCycleCircularQueuePut
# Number of nodes = 65

# Allocations for OpCycleCircularQueuePut
#	?a4		pItem
#	?a5		retVal
# static FUNC(boolean, Dem_CODE) OpCycleCircularQueueGet(P2VAR(Dem_SetOpCycleParamType, AUTOMATIC, DEM_APPL_DATA) pItem)
	.align		1
	.section	.text_vle
        .d2line         7330,32
#$$ld
.L3893:

#$$bf	OpCycleCircularQueueGet,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
OpCycleCircularQueueGet:
.Llo1507:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	mr		r0,r3		# pItem=r0 pItem=r3
	.d2prologue_end
# {
#    boolean retVal = FALSE;
	.d2line		7332
	diab.li		r4,0		# retVal=r4
# 
#    if (Dem_OpCycleQueue.num_items > 0)
	.d2line		7334
.Llo1511:
	lis		r3,(Dem_OpCycleQueue+2)@ha
.Llo1508:
	lbz		r3,(Dem_OpCycleQueue+2)@l(r3)
	se_cmpi		r3,0
	bc		0,1,.L1163	# le
#    {
#       Dem_MemCpy(pItem, &Dem_LCfg.p_op_cycle_change_buffer[Dem_OpCycleQueue.front], sizeof(Dem_SetOpCycleParamType));
	.d2line		7336
.Llo1509:
	lis		r3,(Dem_LCfg+8)@ha
	lwz		r4,(Dem_LCfg+8)@l(r3)		# retVal=r4
	lis		r3,(Dem_OpCycleQueue+1)@ha
	lbz		r3,(Dem_OpCycleQueue+1)@l(r3)
	rlwinm		r3,r3,1,23,30
	se_add		r4,r3		# retVal=r4 retVal=r4
	mr		r3,r0		# pItem=r3 pItem=r0
	diab.li		r5,2
	bl		Dem_MemCpy
#       Dem_OpCycleQueue.front = (uint8)(Dem_OpCycleQueue.front + (uint8)1U) % Dem_LCfg.op_cycle_change_buffer_size;
	.d2line		7337
.Llo1510:
	lis		r3,(Dem_OpCycleQueue+1)@ha
	lbz		r5,(Dem_OpCycleQueue+1)@l(r3)
	se_addi		r5,1
	rlwinm		r5,r5,0,24,31
	lis		r4,(Dem_LCfg+12)@ha		# retVal=r4
	lbz		r4,(Dem_LCfg+12)@l(r4)		# retVal=r4 retVal=r4
	divwu		r0,r5,r4		# retVal=r4
	mullw		r0,r0,r4		# retVal=r4
	subf		r0,r0,r5
	stb		r0,(Dem_OpCycleQueue+1)@l(r3)
#       /* ---------- Enter critical section ---------- */
#       SchM_Enter_Dem_EaOpCycleQueue();
	.d2line		7339
	bl		SchM_Enter_Dem_EaOpCycleQueue
#       Dem_OpCycleQueue.num_items--;
	.d2line		7340
	lis		r4,(Dem_OpCycleQueue+2)@ha		# retVal=r4
	lbz		r3,(Dem_OpCycleQueue+2)@l(r4)		# retVal=r4
	diab.addi		r3,r3,255
	stb		r3,(Dem_OpCycleQueue+2)@l(r4)		# retVal=r4
#       SchM_Exit_Dem_EaOpCycleQueue();
	.d2line		7341
	bl		SchM_Exit_Dem_EaOpCycleQueue
#       /* ---------- Exit critical section ----------- */
#       retVal = TRUE;
	.d2line		7343
	diab.li		r4,1		# retVal=r4
.L1163:
#    }
# 
#    return retVal;
	.d2line		7346
	rlwinm		r3,r4,0,24,31		# retVal=r4
# }
	.d2line		7347
	.d2epilogue_begin
	lwz		r0,20(r1)
	mtspr		lr,r0
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1512:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3894:
	.type		OpCycleCircularQueueGet,@function
	.size		OpCycleCircularQueueGet,.-OpCycleCircularQueueGet
# Number of nodes = 66

# Allocations for OpCycleCircularQueueGet
#	?a4		pItem
#	?a5		retVal
# static FUNC(boolean, DEM_CODE) HandleOpCycleChanges(void)
	.align		1
	.section	.text_vle
        .d2line         7349,32
#$$ld
.L3902:

#$$bf	HandleOpCycleChanges,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
HandleOpCycleChanges:
.Llo1513:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    Dem_SetOpCycleParamType paramValues;
#    boolean retVal = FALSE;
	.d2line		7352
	diab.li		r31,0		# retVal=r31
# 
#    if (DEM_OP_CYCLE_CHANGE_IDLE == DemOpCycleChange.state)
	.d2line		7354
	lis		r3,DemOpCycleChange@ha
	lwz		r0,DemOpCycleChange@l(r3)
	se_cmpi		r0,0
	bc		0,2,.L1166	# ne
#    {
#       if (OpCycleCircularQueueGet(&paramValues))
	.d2line		7356
	diab.addi		r3,r1,8
	bl		OpCycleCircularQueueGet
	e_andi.		r3,r3,255
	bc		1,2,.L1166	# eq
#       {
#          if (DEM_CYCLE_STATE_START == paramValues.cycle_state)
	.d2line		7358
	lbz		r0,9(r1)
	se_cmpi		r0,0
	bc		0,2,.L1168	# ne
#          {
#             if (DEM_CYCLE_STATE_START == GetOpCycleState(paramValues.operation_cycle_id))
	.d2line		7360
	lis		r3,Dem_NvOpCycleState@ha
	e_add16i		r3,r3,Dem_NvOpCycleState@l
	lbz		r0,8(r1)
	lbzx		r0,r3,r0
	se_cmpi		r0,0
	bc		0,2,.L1169	# ne
#             {
#                DemOpCycleChange.state = DEM_OP_CYCLE_CHANGE_RESTART_ONGOING;
	.d2line		7362
	diab.li		r0,3
	lis		r3,DemOpCycleChange@ha
	e_add16i		r3,r3,DemOpCycleChange@l
	stw		r0,0(r3)
	b		.L1171
.L1169:
#             }
#             else
#             {
#                DemOpCycleChange.state = DEM_OP_CYCLE_CHANGE_START_ONGOING;
	.d2line		7366
	diab.li		r0,1
	lis		r3,DemOpCycleChange@ha
	e_add16i		r3,r3,DemOpCycleChange@l
	stw		r0,0(r3)
	b		.L1171
.L1168:
#             }
#          }
#          else if (DEM_CYCLE_STATE_END == paramValues.cycle_state)
	.d2line		7369
	lbz		r0,9(r1)
	se_cmpi		r0,1
	bc		0,2,.L1172	# ne
#          {
#             if (DEM_CYCLE_STATE_START == GetOpCycleState(paramValues.operation_cycle_id))
	.d2line		7371
	lis		r3,Dem_NvOpCycleState@ha
	e_add16i		r3,r3,Dem_NvOpCycleState@l
	lbz		r0,8(r1)
	lbzx		r0,r3,r0
	se_cmpi		r0,0
	bc		0,2,.L1171	# ne
#             {
#                /* Do END only if not already in END-state. */
#                DemOpCycleChange.state = DEM_OP_CYCLE_CHANGE_END_ONGOING;
	.d2line		7374
	diab.li		r0,2
	lis		r3,DemOpCycleChange@ha
	e_add16i		r3,r3,DemOpCycleChange@l
	stw		r0,0(r3)
	b		.L1171
.L1172:
#             }
#          }
#          else
#          {
#             /* DEM_CYCLE_STATE_AGING */
#             DemOpCycleChange.state = DEM_OP_CYCLE_CHANGE_AGING_ONGOING;
	.d2line		7380
	diab.li		r0,4
	lis		r3,DemOpCycleChange@ha
	e_add16i		r3,r3,DemOpCycleChange@l
	stw		r0,0(r3)
.L1171:
#          }
#          DemOpCycleChange.in_param_op_cycle_id = paramValues.operation_cycle_id;
	.d2line		7382
	lbz		r0,8(r1)
	lis		r3,(DemOpCycleChange+4)@ha
	stb		r0,(DemOpCycleChange+4)@l(r3)
.L1166:
#       }
#    }
# 
#    if (DEM_OP_CYCLE_CHANGE_START_ONGOING == DemOpCycleChange.state)
	.d2line		7386
	lis		r3,DemOpCycleChange@ha
	lwz		r0,DemOpCycleChange@l(r3)
	se_cmpi		r0,1
	bc		0,2,.L1175	# ne
#    {
#       SetOpCycleState(DemOpCycleChange.in_param_op_cycle_id, DEM_CYCLE_STATE_START);
	.d2line		7388
	diab.li		r31,0		# retVal=r31
	lis		r3,Dem_NvOpCycleState@ha
	e_add16i		r3,r3,Dem_NvOpCycleState@l
	lis		r4,(DemOpCycleChange+4)@ha
	lbz		r0,(DemOpCycleChange+4)@l(r4)
	stbx		r31,r3,r0		# retVal=r31
#       SetOperationCycleStateStart(DemOpCycleChange.in_param_op_cycle_id);
	.d2line		7389
	lbz		r3,(DemOpCycleChange+4)@l(r4)
	bl		SetOperationCycleStateStart
#       DemOpCycleChange.state = DEM_OP_CYCLE_CHANGE_IDLE;
	.d2line		7390
	lis		r3,DemOpCycleChange@ha
	e_add16i		r3,r3,DemOpCycleChange@l
	stw		r31,0(r3)		# retVal=r31
#       retVal = TRUE;
	.d2line		7391
	diab.li		r31,1		# retVal=r31
	b		.L1176
.L1175:
#    }
#    else if (DEM_OP_CYCLE_CHANGE_END_ONGOING == DemOpCycleChange.state)
	.d2line		7393
	lis		r3,DemOpCycleChange@ha
	lwz		r0,DemOpCycleChange@l(r3)
	se_cmpi		r0,2
	bc		0,2,.L1177	# ne
#    {
#       SetOpCycleState(DemOpCycleChange.in_param_op_cycle_id, DEM_CYCLE_STATE_END);
	.d2line		7395
	diab.li		r5,1
	lis		r4,Dem_NvOpCycleState@ha
	e_add16i		r4,r4,Dem_NvOpCycleState@l
	lis		r3,(DemOpCycleChange+4)@ha
	lbz		r0,(DemOpCycleChange+4)@l(r3)
	stbx		r5,r4,r0
#       SetOperationCycleStateEnd(DemOpCycleChange.in_param_op_cycle_id);
	.d2line		7396
	lbz		r3,(DemOpCycleChange+4)@l(r3)
	bl		SetOperationCycleStateEnd
#       DemOpCycleChange.state = DEM_OP_CYCLE_CHANGE_IDLE;
	.d2line		7397
	diab.li		r0,0
	lis		r3,DemOpCycleChange@ha
	e_add16i		r3,r3,DemOpCycleChange@l
	stw		r0,0(r3)
#       retVal = TRUE;
	.d2line		7398
	diab.li		r31,1		# retVal=r31
	b		.L1176
.L1177:
#    }
#    else if (DEM_OP_CYCLE_CHANGE_RESTART_ONGOING == DemOpCycleChange.state)
	.d2line		7400
	lis		r3,DemOpCycleChange@ha
	lwz		r0,DemOpCycleChange@l(r3)
	se_cmpi		r0,3
	bc		0,2,.L1179	# ne
#    {
#       /* Stay in start state (i.e. do not set current state to end) during the re-start procedure to 
#        * avoid loosing event reports in Dem_SetEventStatus()/Dem_ReportErrorStatus().
#        */
#       SetOperationCycleStateEnd(DemOpCycleChange.in_param_op_cycle_id);
	.d2line		7405
	lis		r3,(DemOpCycleChange+4)@ha
	lbz		r3,(DemOpCycleChange+4)@l(r3)
	bl		SetOperationCycleStateEnd
#       DemOpCycleChange.state = DEM_OP_CYCLE_CHANGE_START_ONGOING;
	.d2line		7406
	diab.li		r31,1		# retVal=r31
	lis		r3,DemOpCycleChange@ha
	e_add16i		r3,r3,DemOpCycleChange@l
	stw		r31,0(r3)		# retVal=r31
#       retVal = TRUE;
	.d2line		7407
	b		.L1176
.L1179:
#    }
#    else if (DEM_OP_CYCLE_CHANGE_AGING_ONGOING == DemOpCycleChange.state)
	.d2line		7409
	lis		r3,DemOpCycleChange@ha
	lwz		r0,DemOpCycleChange@l(r3)
	se_cmpi		r0,4
	bc		0,2,.L1176	# ne
#    {
#       SetAgingCycleState(DemOpCycleChange.in_param_op_cycle_id);
	.d2line		7411
	lis		r3,(DemOpCycleChange+4)@ha
	lbz		r3,(DemOpCycleChange+4)@l(r3)
	bl		SetAgingCycleState
#       DemOpCycleChange.state = DEM_OP_CYCLE_CHANGE_IDLE;
	.d2line		7412
	diab.li		r0,0
	lis		r3,DemOpCycleChange@ha
	e_add16i		r3,r3,DemOpCycleChange@l
	stw		r0,0(r3)
#       retVal = TRUE;
	.d2line		7413
	diab.li		r31,1		# retVal=r31
.L1176:
#    }
#    else
#    {
#       /* DEM_OP_CYCLE_CHANGE_IDLE */
#    }
# 
#    return retVal;
	.d2line		7420
	rlwinm		r3,r31,0,24,31		# retVal=r31
# }
	.d2line		7421
	.d2epilogue_begin
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
.Llo1514:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3903:
	.type		HandleOpCycleChanges,@function
	.size		HandleOpCycleChanges,.-HandleOpCycleChanges
# Number of nodes = 203

# Allocations for HandleOpCycleChanges
#	SP,8		paramValues
#	?a4		retVal
# static FUNC(void, DEM_CODE) UpdateEventStatusPerEntry(void)
	.align		1
	.section	.text_vle
        .d2line         7424,29
#$$ld
.L3910:

#$$bf	UpdateEventStatusPerEntry,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
UpdateEventStatusPerEntry:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	26,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    uint8 origin;
# 
#    for (origin = (uint8)0U; origin < DEM_NUMBER_OF_ORIGINS; origin++)
	.d2line		7428
	diab.li		r31,0		# origin=r31
.L1193:
.Llo1515:
	rlwinm		r0,r31,0,24,31		# origin=r31
	se_cmpi		r0,2
	bc		0,0,.L1192	# ge
#    {
#       if (Dem_EvMemExist(origin) && (NULL_PTR != Dem_GetEvMemEntriesPtr(origin)))
	.d2line		7430
	lis		r3,(Dem_LCfg+20)@ha
	e_add16i		r3,r3,(Dem_LCfg+20)@l
	rlwinm		r0,r31,2,22,29		# origin=r31
	lwzx		r0,r3,r0
	se_cmpi		r0,0
	bc		1,2,.L1196	# eq
	lis		r3,(Dem_LCfg+20)@ha
	e_add16i		r3,r3,(Dem_LCfg+20)@l
	rlwinm		r0,r31,2,22,29		# origin=r31
	lwzx		r3,r3,r0
	lwz		r0,0(r3)
	se_cmpi		r0,0
	bc		1,2,.L1196	# eq
	.section	.text_vle
.L3915:
#       {
#          uint8 entryIdx;
#          CONSTP2CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC, DEM_APPL_CONST) pEvMemEntries = Dem_GetEvMemEntriesPtr(origin);
	.d2line		7433
	lis		r3,(Dem_LCfg+20)@ha
	e_add16i		r3,r3,(Dem_LCfg+20)@l
	rlwinm		r0,r31,2,22,29		# origin=r31
	lwzx		r3,r3,r0
	lwz		r29,0(r3)
.Llo1518:
	mr		r29,r29		# pEvMemEntries=r29 pEvMemEntries=r29
# 
#          for (entryIdx = (uint8)0U; entryIdx < Dem_MaxNumEvMemEntries[origin]; entryIdx++)
	.d2line		7435
.Llo1519:
	diab.li		r30,0		# entryIdx=r30
.L1197:
.Llo1517:
	rlwinm		r4,r30,0,24,31		# entryIdx=r30
	lis		r3,Dem_MaxNumEvMemEntries@ha
	e_add16i		r3,r3,Dem_MaxNumEvMemEntries@l
	rlwinm		r0,r31,0,24,31		# origin=r31
	lbzx		r0,r3,r0
	se_cmp		r4,r0
	bc		0,0,.L1196	# ge
	.section	.text_vle
.L3923:
#          {
#             CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC) pEvMemEntry = pEvMemEntries[entryIdx];
	.d2line		7437
	rlwinm		r4,r30,2,22,29		# entryIdx=r30
	lwzux		r26,r4,r29
.Llo1520:
	mr		r26,r26		# pEvMemEntry=r26 pEvMemEntry=r26
#             if (DEM_EVENTID_INVALID != pEvMemEntry->event_id)
	.d2line		7438
	lhz		r0,0(r26)		# pEvMemEntry=r26
	se_cmpi		r0,0
	bc		1,2,.L1200	# eq
	.section	.text_vle
.L3929:
#             {
#                uint16 intDtc = Dem_GetEventIntDtc(pEvMemEntry->event_id);
	.d2line		7440
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r0,128(r3)
	lhz		r3,0(r26)		# pEvMemEntry=r26
	rlwinm		r3,r3,1,15,30
	se_add		r3,r0
	lhz		r28,-2(r3)
.Llo1522:
	mr		r28,r28		# intDtc=r28 intDtc=r28
#                uint8 udsStatus = Dem_GetUdsStatusByIntDtc(intDtc);
	.d2line		7441
	rlwinm		r3,r28,0,16,31		# intDtc=r28
	bl		Dem_GetUdsStatusByIntDtc
.Llo1524:
	mr		r27,r3		# udsStatus=r27 udsStatus=r3
#                /* The event status per event memory entry shall not be updated if any event 
#                 * connected to the entry has unhandled event state updates, to avoid missing flanks in StoreEventInMemory().
#                 */
#                /* ---------- Enter critical section ---------- */
#                SchM_Enter_Dem_EaEventStateBuffer();
	.d2line		7446
	bl		SchM_Enter_Dem_EaEventStateBuffer
#                if (!Dem_EvMemEntryHasPendingUpdates(intDtc))
	.d2line		7447
.Llo1525:
	rlwinm		r3,r28,0,16,31		# intDtc=r28
	bl		Dem_EvMemEntryHasPendingUpdates
	e_andi.		r3,r3,255
	bc		0,2,.L1201	# ne
#                {
#                   pEvMemEntry->uds_status = udsStatus;
	.d2line		7449
.Llo1523:
	stb		r27,13(r26)		# pEvMemEntry=r26 udsStatus=r27
.L1201:
#                }
#                SchM_Exit_Dem_EaEventStateBuffer();
	.d2line		7451
	bl		SchM_Exit_Dem_EaEventStateBuffer
	.section	.text_vle
.L3930:
.L1200:
	.section	.text_vle
.L3924:
#                /* ---------- Exit critical section ----------- */
#             }
#          }
	.d2line		7454
.Llo1521:
	diab.addi		r4,r30,1		# entryIdx=r30
	se_addi		r30,1		# entryIdx=r30 entryIdx=r30
	b		.L1197
	.section	.text_vle
.L3916:
.L1196:
#       }
#    }
	.d2line		7456
	diab.addi		r0,r31,1		# origin=r31
	se_addi		r31,1		# origin=r31 origin=r31
	b		.L1193
.L1192:
# }
	.d2line		7457
	.d2epilogue_begin
.Llo1516:
	lmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	2,10
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3911:
	.type		UpdateEventStatusPerEntry,@function
	.size		UpdateEventStatusPerEntry,.-UpdateEventStatusPerEntry
# Number of nodes = 118

# Allocations for UpdateEventStatusPerEntry
#	?a4		origin
#	?a5		entryIdx
#	?a6		pEvMemEntries
#	?a7		pEvMemEntry
#	?a8		intDtc
#	?a9		udsStatus
# static FUNC(void, DEM_CODE) UpdateSiPerEntry(void)
	.align		1
	.section	.text_vle
        .d2line         7459,29
#$$ld
.L3939:

#$$bf	UpdateSiPerEntry,interprocedural,rasave,nostackparams
	.d2_cfa_start __cie
UpdateSiPerEntry:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	26,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    uint8 origin;
# 
#    for (origin = (uint8)0U; origin < DEM_NUMBER_OF_ORIGINS; origin++)
	.d2line		7463
	diab.li		r31,0		# origin=r31
.L1209:
.Llo1526:
	rlwinm		r0,r31,0,24,31		# origin=r31
	se_cmpi		r0,2
	bc		0,0,.L1208	# ge
#    {
#       if (Dem_EvMemExist(origin) && (NULL_PTR != Dem_GetEvMemEntriesPtr(origin)))
	.d2line		7465
	lis		r3,(Dem_LCfg+20)@ha
	e_add16i		r3,r3,(Dem_LCfg+20)@l
	rlwinm		r0,r31,2,22,29		# origin=r31
	lwzx		r0,r3,r0
	se_cmpi		r0,0
	bc		1,2,.L1212	# eq
	lis		r3,(Dem_LCfg+20)@ha
	e_add16i		r3,r3,(Dem_LCfg+20)@l
	rlwinm		r0,r31,2,22,29		# origin=r31
	lwzx		r3,r3,r0
	lwz		r0,0(r3)
	se_cmpi		r0,0
	bc		1,2,.L1212	# eq
	.section	.text_vle
.L3944:
#       {
#          uint8 entryIdx;
#          P2CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC, DEM_APPL_CONST) pEvMemEntries = Dem_GetEvMemEntriesPtr(origin);
	.d2line		7468
	lis		r3,(Dem_LCfg+20)@ha
	e_add16i		r3,r3,(Dem_LCfg+20)@l
	rlwinm		r0,r31,2,22,29		# origin=r31
	lwzx		r3,r3,r0
	lwz		r29,0(r3)
.Llo1529:
	mr		r29,r29		# pEvMemEntries=r29 pEvMemEntries=r29
#          for (entryIdx = (uint8)0U; entryIdx < Dem_MaxNumEvMemEntries[origin]; entryIdx++)
	.d2line		7469
.Llo1530:
	diab.li		r30,0		# entryIdx=r30
.L1213:
.Llo1528:
	rlwinm		r4,r30,0,24,31		# entryIdx=r30
	lis		r3,Dem_MaxNumEvMemEntries@ha
	e_add16i		r3,r3,Dem_MaxNumEvMemEntries@l
	rlwinm		r0,r31,0,24,31		# origin=r31
	lbzx		r0,r3,r0
	se_cmp		r4,r0
	bc		0,0,.L1212	# ge
	.section	.text_vle
.L3952:
#          {
#             CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC) pEvMemEntry = pEvMemEntries[entryIdx];
	.d2line		7471
	rlwinm		r4,r30,2,22,29		# entryIdx=r30
	lwzux		r26,r4,r29
.Llo1531:
	mr		r26,r26		# pEvMemEntry=r26 pEvMemEntry=r26
#             if (DEM_EVENTID_INVALID != pEvMemEntry->event_id)
	.d2line		7472
	lhz		r0,0(r26)		# pEvMemEntry=r26
	se_cmpi		r0,0
	bc		1,2,.L1216	# eq
	.section	.text_vle
.L3958:
#             {
#                uint16 intDtc = Dem_GetEventIntDtc(pEvMemEntry->event_id);
	.d2line		7474
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r0,128(r3)
	lhz		r3,0(r26)		# pEvMemEntry=r26
	rlwinm		r3,r3,1,15,30
	se_add		r3,r0
	lhz		r28,-2(r3)
.Llo1533:
	mr		r28,r28		# intDtc=r28 intDtc=r28
#                uint8 siStatus = Dem_GetSiStatusByIntDtc(intDtc);
	.d2line		7475
	rlwinm		r3,r28,0,16,31		# intDtc=r28
	bl		Dem_GetSiStatusByIntDtc
.Llo1535:
	mr		r27,r3		# siStatus=r27 siStatus=r3
#                /* The event status per event memory entry shall not be updated if any event 
#                 * connected to the entry has unhandled event state updates, to avoid missing flanks in StoreEventInMemory().
#                 */
#                /* ---------- Enter critical section ---------- */
#                SchM_Enter_Dem_EaEventStateBuffer();
	.d2line		7480
	bl		SchM_Enter_Dem_EaEventStateBuffer
#                if (!Dem_EvMemEntryHasPendingUpdates(intDtc))
	.d2line		7481
.Llo1536:
	rlwinm		r3,r28,0,16,31		# intDtc=r28
	bl		Dem_EvMemEntryHasPendingUpdates
	e_andi.		r3,r3,255
	bc		0,2,.L1217	# ne
#                {
#                   pEvMemEntry->si = siStatus;
	.d2line		7483
.Llo1534:
	stb		r27,14(r26)		# pEvMemEntry=r26 siStatus=r27
.L1217:
#                }
#                SchM_Exit_Dem_EaEventStateBuffer();
	.d2line		7485
	bl		SchM_Exit_Dem_EaEventStateBuffer
	.section	.text_vle
.L3959:
.L1216:
	.section	.text_vle
.L3953:
#                /* ---------- Exit critical section ----------- */
#             }
#          }
	.d2line		7488
.Llo1532:
	diab.addi		r4,r30,1		# entryIdx=r30
	se_addi		r30,1		# entryIdx=r30 entryIdx=r30
	b		.L1213
	.section	.text_vle
.L3945:
.L1212:
#       }
#    }
	.d2line		7490
	diab.addi		r0,r31,1		# origin=r31
	se_addi		r31,1		# origin=r31 origin=r31
	b		.L1209
.L1208:
# }
	.d2line		7491
	.d2epilogue_begin
.Llo1527:
	lmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	2,10
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3940:
	.type		UpdateSiPerEntry,@function
	.size		UpdateSiPerEntry,.-UpdateSiPerEntry
# Number of nodes = 118

# Allocations for UpdateSiPerEntry
#	?a4		origin
#	?a5		entryIdx
#	?a6		pEvMemEntries
#	?a7		pEvMemEntry
#	?a8		intDtc
#	?a9		siStatus
# FUNC(uint8, DEM_CODE) Dem_BuildSiByte(Dem_EventIdType evId)
	.align		2
	.section	.text_vle
        .d2line         7519,23
#$$ld
.L3968:

#$$bf	Dem_BuildSiByte,interprocedural,rasave,nostackparams
	.globl		Dem_BuildSiByte
	.d2_cfa_start __cie
Dem_BuildSiByte:
.Llo1537:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	30,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# evId=r31 evId=r3
	.d2prologue_end
# {
#    uint8 siByte = 0;
	.d2line		7521
	diab.li		r30,0		# siByte=r30
#    if (Dem_GetSiFdcThresholdReached(evId))
	.d2line		7522
	rlwinm		r3,r3,0,16,31		# evId=r3 evId=r3
.Llo1538:
	bl		Dem_GetSiFdcThresholdReached
.Llo1539:
	e_andi.		r3,r3,255		# evId=r3 evId=r3
.Llo1540:
	bc		1,2,.L1225	# eq
#    {
#       Dem_SetBits(siByte, DEM_SI_FDCTR_SET);
	.d2line		7524
.Llo1541:
	.diab.bseti		r30,31		# siByte=r30
	mr		r3,r30		# siByte=r3 siByte=r30
.L1225:
#    }
#    if (Dem_GetSiFdcThresholdReachedTOC(evId))
	.d2line		7526
	rlwinm		r3,r31,0,16,31		# evId=r3 evId=r31
	bl		Dem_GetSiFdcThresholdReachedTOC
	e_andi.		r3,r3,255		# evId=r3 evId=r3
	bc		1,2,.L1226	# eq
#    {
#       Dem_SetBits(siByte, DEM_SI_FDCTRTOC_SET);
	.d2line		7528
.Llo1542:
	.diab.bseti		r30,30		# siByte=r30
	mr		r3,r30		# siByte=r3 siByte=r30
.L1226:
#    }
# 
#    return siByte;
	.d2line		7531
	rlwinm		r3,r30,0,24,31		# evId=r3 siByte=r30
# }
	.d2line		7532
	.d2epilogue_begin
	lmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	3,10
.Llo1543:
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3969:
	.type		Dem_BuildSiByte,@function
	.size		Dem_BuildSiByte,.-Dem_BuildSiByte
# Number of nodes = 27

# Allocations for Dem_BuildSiByte
#	?a4		evId
#	?a5		siByte
# FUNC(void, DEM_CODE) Dem_GetVersionInfo(P2VAR(Std_VersionInfoType, AUTOMATIC, DEM_APPL_DATA) versioninfo)
	.align		2
	.section	.text_vle
        .d2line         7979,22
#$$ld
.L3976:

#$$bf	Dem_GetVersionInfo,interprocedural,rasave,nostackparams
	.globl		Dem_GetVersionInfo
	.d2_cfa_start __cie
Dem_GetVersionInfo:
.Llo1544:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo1550:
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr.		r31,r3		# versioninfo=?a4 versioninfo=r3
	.d2prologue_end
# {
#    DEM_PRE_ASSERT()
	.d2line		7981
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_GETVERSIONINFO, versioninfo != NULL_PTR)
	.d2line		7982
	bc		0,2,.L1312	# ne
.Llo1545:
	diab.li		r3,54
.Llo1546:
	diab.li		r4,0
	diab.li		r5,0
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1312:
#    DEM_POST_ASSERT_VOID()
	.d2line		7983
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		1,2,.L1311	# eq
# 
#    if (versioninfo != NULL_PTR)
	.d2line		7985
.Llo1551:
	se_cmpi		r31,0		# versioninfo=r31
	bc		1,2,.L1311	# eq
#    {
#       /* [SWS_BSW_00052] */
#       versioninfo->vendorID = DEM_VENDOR_ID;
	.d2line		7988
	diab.li		r0,31		# noErrors=r0
.Llo1552:
	sth		r0,0(r31)		# versioninfo=r31 noErrors=r0
#       versioninfo->moduleID = DEM_MODULE_ID;
	.d2line		7989
	diab.li		r0,54		# noErrors=r0
	sth		r0,2(r31)		# versioninfo=r31 noErrors=r0
#       versioninfo->sw_major_version = DEM_SW_MAJOR_VERSION;
	.d2line		7990
	diab.li		r0,6		# noErrors=r0
	stb		r0,4(r31)		# versioninfo=r31 noErrors=r0
#       versioninfo->sw_minor_version = DEM_SW_MINOR_VERSION;
	.d2line		7991
	diab.li		r0,1		# noErrors=r0
	stb		r0,5(r31)		# versioninfo=r31 noErrors=r0
#       versioninfo->sw_patch_version = DEM_SW_PATCH_VERSION;
	.d2line		7992
	diab.li		r0,0		# noErrors=r0
	stb		r0,6(r31)		# versioninfo=r31 noErrors=r0
.L1311:
#    }
# }
	.d2line		7994
	.d2epilogue_begin
.Llo1547:
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
.Llo1548:
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1549:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3977:
	.type		Dem_GetVersionInfo,@function
	.size		Dem_GetVersionInfo,.-Dem_GetVersionInfo
# Number of nodes = 54

# Allocations for Dem_GetVersionInfo
#	?a4		versioninfo
#	?a5		noErrors
# FUNC(Std_ReturnType, DEM_CODE) Dem_ConsistencyCheck(P2CONST(Dem_ConfigType, AUTOMATIC, DEM_CONST) ConfigPtr)
	.align		2
	.section	.text_vle
        .d2line         11759,32
#$$ld
.L3987:

#$$bf	Dem_ConsistencyCheck,interprocedural,nostackparams

# Regs written: r0,r1,r3,r4,cr0,lr
	.globl		Dem_ConsistencyCheck
	.d2_cfa_start __cie
Dem_ConsistencyCheck:
.Llo1553:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	mr		r4,r3		# ConfigPtr=r4 ConfigPtr=r3
	.d2prologue_end
# {
#    Std_ReturnType retVal;
# 
#    if ((DEM_PC_HASH_VALUE == Dem_LTtoPCHashValue) &&
	.d2line		11763
	lis		r3,Dem_LTtoPCHashValue@ha
.Llo1554:
	lwz		r0,Dem_LTtoPCHashValue@l(r3)
	e_lis		r3,12780
	e_or2i		r3,43590
	se_cmpl		r0,r3
	bc		0,2,.L2308	# ne
.Llo1555:
	lwz		r3,156(r4)		# ConfigPtr=r4
	lwz		r0,0(r3)
	e_lis		r3,12780
	e_or2i		r3,43590
	se_cmpl		r0,r3
	bc		0,2,.L2308	# ne
	lwz		r3,160(r4)		# ConfigPtr=r4
	lwz		r0,0(r3)
	lis		r3,Dem_LTHashValue@ha
	lwz		r3,Dem_LTHashValue@l(r3)
	se_cmpl		r0,r3
	bc		0,2,.L2308	# ne
#        (DEM_PC_HASH_VALUE == *(ConfigPtr->PBtoPCHashValue_P)) &&
#        (Dem_LTHashValue == *(ConfigPtr->PBtoLTHashValue_P)))
#    {
#       retVal = E_OK;
	.d2line		11767
.Llo1556:
	diab.li		r3,0		# retVal=r3
.Llo1559:
	b		.L2309
.L2308:
#    }
#    else
#    {
#       retVal = E_NOT_OK;
	.d2line		11771
.Llo1557:
	diab.li		r3,1		# retVal=r3
.L2309:
#    }
# 
#    return retVal;
	.d2line		11774
.Llo1558:
	rlwinm		r3,r3,0,24,31		# retVal=r3 retVal=r3
# }
	.d2line		11775
	.d2epilogue_begin
.Llo1560:
	lwz		r0,20(r1)
	mtspr		lr,r0
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L3988:
	.type		Dem_ConsistencyCheck,@function
	.size		Dem_ConsistencyCheck,.-Dem_ConsistencyCheck
# Number of nodes = 26

# Allocations for Dem_ConsistencyCheck
#	?a4		ConfigPtr
#	?a5		retVal
# FUNC(void, DEM_CODE) Dem_PreInit(P2CONST(Dem_ConfigType, AUTOMATIC, DEM_PBCFG_CONST) ConfigPtr)
	.align		2
	.section	.text_vle
        .d2line         7998,22
#$$ld
.L3999:

#$$bf	Dem_PreInit,interprocedural,rasave,nostackparams
	.globl		Dem_PreInit
	.d2_cfa_start __cie
Dem_PreInit:
.Llo1561:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo1579:
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr.		r31,r3		# ConfigPtr=?a4 ConfigPtr=r3
	.d2prologue_end
# {
#    uint8 i;
# 
#    DEM_PRE_ASSERT()
	.d2line		8002
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_PREINIT, ConfigPtr != NULL_PTR)
	.d2line		8003
	bc		0,2,.L1318	# ne
.Llo1562:
	diab.li		r3,54
.Llo1563:
	diab.li		r4,0
	diab.li		r5,1
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1318:
#    DEM_POST_ASSERT_VOID()
	.d2line		8004
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		1,2,.L1317	# eq
# 
#    Dem_pPbCfg = ConfigPtr;
	.d2line		8006
.Llo1580:
	lis		r3,Dem_pPbCfg@ha
	e_add16i		r3,r3,Dem_pPbCfg@l
	stw		r31,0(r3)		# ConfigPtr=r31
# 
#    if (NULL_PTR != Dem_pPbCfg)
	.d2line		8008
	se_cmpi		r31,0		# ConfigPtr=r31
	bc		1,2,.L1317	# eq
#    {
#       if (E_OK == Dem_ConsistencyCheck(Dem_pPbCfg))
	.d2line		8010
	mr		r3,r31		# ConfigPtr=r3 ConfigPtr=r31
	bl		Dem_ConsistencyCheck
	rlwinm		r3,r3,0,24,31		# ConfigPtr=r3 ConfigPtr=r3
	se_cmpi		r3,0		# ConfigPtr=r3
	bc		0,2,.L1317	# ne
#       {
# #if (STD_ON == DEM_ENABLE_CONDITION_SUPPORT)
#          for (i = (uint8)0; i < (uint8)((Dem_LCfg.num_enable_conditions + 7U) / 8U); i++)
#          {
#             Dem_LCfg.p_enable_condition[i] = Dem_LCfg.p_enable_condition_init[i];
#          }
# #endif /* STD_ON == DEM_ENABLE_CONDITION_SUPPORT */
# 
# #if (STD_ON == DEM_STORAGE_CONDITION_SUPPORT)
#          for (i = (uint8)0; i < (uint8)((Dem_LCfg.num_storage_conditions + 7U) / 8U); i++)
#          {
#             Dem_LCfg.p_storage_condition[i] = Dem_LCfg.p_storage_condition_init[i];
#          }
# #endif /* STD_ON == DEM_STORAGE_CONDITION_SUPPORT */
# 
#          /* Clear event state buffer. One event state occupies two bits in the buffer. */
#          Dem_MemSet(Dem_LCfg.p_event_state_buffer, 0, (uint16)((Dem_LCfg.num_events + 3U) / 4U));
	.d2line		8027
.Llo1564:
	lis		r3,(Dem_LCfg+136)@ha		# ConfigPtr=r3
.Llo1565:
	lhz		r5,(Dem_LCfg+136)@l(r3)		# ConfigPtr=r3
	se_addi		r5,3
	se_srwi		r5,2
	lis		r3,Dem_LCfg@ha		# ConfigPtr=r3
	lwz		r3,Dem_LCfg@l(r3)		# ConfigPtr=r3 ConfigPtr=r3
.Llo1566:
	diab.li		r4,0		# i=r4
	bl		Dem_MemSet
#          /* Clear event state update bit-array. */
#          Dem_MemSet(Dem_LCfg.p_event_state_update, 0, (uint16)((Dem_LCfg.num_events + 7U) / 8U));
	.d2line		8029
	lis		r3,(Dem_LCfg+136)@ha		# ConfigPtr=r3
.Llo1567:
	lhz		r5,(Dem_LCfg+136)@l(r3)		# ConfigPtr=r3
	se_addi		r5,7
	se_srwi		r5,3
	lis		r3,(Dem_LCfg+4)@ha		# ConfigPtr=r3
	lwz		r3,(Dem_LCfg+4)@l(r3)		# ConfigPtr=r3 ConfigPtr=r3
.Llo1568:
	diab.li		r4,0		# i=r4
	bl		Dem_MemSet
# 
#          /* Enabled DTC storage for all DTC groups */
#          for (i = (uint8)0; i < Dem_LCfg.num_dtc_groups; i++)
	.d2line		8032
	diab.li		r4,0		# i=r4
.L1322:
.Llo1577:
	rlwinm		r5,r4,0,24,31		# i=r4
	lis		r3,(Dem_LCfg+140)@ha		# ConfigPtr=r3
.Llo1569:
	lbz		r0,(Dem_LCfg+140)@l(r3)		# noErrors=r0 ConfigPtr=r3
.Llo1581:
	se_cmp		r5,r0		# noErrors=r0
	bc		0,0,.L1324	# ge
#          {
#             Dem_LCfg.p_dtc_storage[i] = TRUE;
	.d2line		8034
.Llo1570:
	diab.li		r0,1		# noErrors=r0
.Llo1582:
	lis		r3,(Dem_LCfg+112)@ha		# ConfigPtr=r3
.Llo1571:
	lwz		r3,(Dem_LCfg+112)@l(r3)		# ConfigPtr=r3 ConfigPtr=r3
	rlwinm		r5,r4,0,24,31		# i=r4
	stbx		r0,r3,r5		# ConfigPtr=r3 noErrors=r0
#          }
	.d2line		8035
	diab.addi		r5,r4,1		# i=r4
	se_addi		r4,1		# i=r4 i=r4
	b		.L1322
.L1324:
# 
#          Dem_InitState = DEM_PREINIT;
	.d2line		8037
.Llo1572:
	diab.li		r0,1		# noErrors=r0
.Llo1583:
	lis		r3,Dem_InitState@ha		# ConfigPtr=r3
.Llo1573:
	e_add16i		r3,r3,Dem_InitState@l		# ConfigPtr=r3 ConfigPtr=r3
	stw		r0,0(r3)		# ConfigPtr=r3 noErrors=r0
#          Dem_NvTriggerImmediateNvStorage = FALSE;
	.d2line		8038
	diab.li		r4,0		# i=r4
.Llo1578:
	lis		r3,Dem_NvTriggerImmediateNvStorage@ha		# ConfigPtr=r3
	e_add16i		r3,r3,Dem_NvTriggerImmediateNvStorage@l		# ConfigPtr=r3 ConfigPtr=r3
	stb		r4,0(r3)		# ConfigPtr=r3 i=r4
#          DemByteToHandle = (uint16)0;
	.d2line		8039
	lis		r3,DemByteToHandle@ha		# ConfigPtr=r3
	e_add16i		r3,r3,DemByteToHandle@l		# ConfigPtr=r3 ConfigPtr=r3
	sth		r4,0(r3)		# ConfigPtr=r3 i=r4
#          DemBitToHandle = (uint8)0;
	.d2line		8040
	lis		r3,DemBitToHandle@ha		# ConfigPtr=r3
	e_add16i		r3,r3,DemBitToHandle@l		# ConfigPtr=r3 ConfigPtr=r3
	stb		r4,0(r3)		# ConfigPtr=r3 i=r4
# 
# #if (STD_ON == DEM_DB_COUNTER_BASED)
#          Dem_MemSet(Dem_LCfg.p_counter_db_counter, 0, Dem_LCfg.num_counter_db_events * (uint16)sizeof(sint16));
	.d2line		8043
	lis		r3,(Dem_LCfg+128)@ha		# ConfigPtr=r3
	lhz		r5,(Dem_LCfg+128)@l(r3)		# ConfigPtr=r3
	se_slwi		r5,1
	lis		r3,(Dem_LCfg+124)@ha		# ConfigPtr=r3
	lwz		r3,(Dem_LCfg+124)@l(r3)		# ConfigPtr=r3 ConfigPtr=r3
.Llo1574:
	bl		Dem_MemSet
.L1317:
# #endif /* STD_ON == DEM_DB_COUNTER_BASED */
# 
# #if (STD_ON == DEM_DB_TIME_BASED)
#          Dem_MemSet(Dem_LCfg.p_time_db_counter, 0, Dem_LCfg.num_time_db_events * (uint16)sizeof(sint32));
#          Dem_MemSet(Dem_LCfg.p_time_db_dir, DEM_TIME_DB_COUNTER_STOP, Dem_LCfg.num_time_db_events * (uint16)sizeof(uint8));
# #endif /* STD_ON == DEM_DB_TIME_BASED */
# 
# #if (DEM_NVM_SUPPORT == STD_ON)
#          Dem_NvImNvStorageEvMemEntry = DEM_EV_MEM_ENTRY_INVALID;
#          Dem_NvPreInit();
# #endif /* DEM_NVM_SUPPORT == STD_ON */
#       }
#    }
# }
	.d2line		8057
	.d2epilogue_begin
.Llo1575:
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1576:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4000:
	.type		Dem_PreInit,@function
	.size		Dem_PreInit,.-Dem_PreInit
# Number of nodes = 137

# Allocations for Dem_PreInit
#	?a4		ConfigPtr
#	?a5		i
#	?a6		noErrors
# FUNC(void, DEM_CODE) Dem_Init(void)
	.align		2
	.section	.text_vle
        .d2line         8060,22
#$$ld
.L4009:

#$$bf	Dem_Init,interprocedural,rasave,nostackparams
	.globl		Dem_Init
	.d2_cfa_start __cie
Dem_Init:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo1592:
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    uint16 i;
# 
#    DEM_PRE_ASSERT()
	.d2line		8064
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_INIT, DEM_UNINIT != Dem_InitState)
	.d2line		8065
	lis		r3,Dem_InitState@ha
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,0
	bc		0,2,.L1330	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,2
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1330:
#    DEM_ASSERT_CONFIG_INVALID(DEM_SID_INIT, (NULL_PTR != Dem_pPbCfg))
	.d2line		8066
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	se_cmpi		r3,0
	bc		0,2,.L1331	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,2
	diab.li		r6,80
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1331:
#    DEM_POST_ASSERT_VOID()
	.d2line		8067
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		1,2,.L1329	# eq
# 
#    if (NULL_PTR != Dem_pPbCfg)
	.d2line		8069
.Llo1593:
	lis		r3,Dem_pPbCfg@ha
	lwz		r0,Dem_pPbCfg@l(r3)		# noErrors=r0
.Llo1594:
	se_cmpi		r0,0		# noErrors=r0
	bc		1,2,.L1329	# eq
#    {
#       if (E_OK == Dem_ConsistencyCheck(Dem_pPbCfg))
	.d2line		8071
.Llo1595:
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	bl		Dem_ConsistencyCheck
	e_andi.		r3,r3,255
	bc		0,2,.L1329	# ne
#       {
#          DTCFilter.filter_active = FALSE;
	.d2line		8073
	diab.li		r4,0
	lis		r3,DTCFilter@ha
	e_add16i		r3,r3,DTCFilter@l
	stb		r4,0(r3)
#          DTCRecordFilter.next_ev_mem_entry_index = (uint8)0xffU;
	.d2line		8074
	diab.li		r0,255		# noErrors=r0
.Llo1596:
	lis		r3,DTCRecordFilter@ha
	e_add16i		r3,r3,DTCRecordFilter@l
	stb		r0,0(r3)		# noErrors=r0
#          DTCRecordUpdateDisabled = (uint32)0U;
	.d2line		8075
	lis		r3,DTCRecordUpdateDisabled@ha
	e_add16i		r3,r3,DTCRecordUpdateDisabled@l
	stw		r4,0(r3)
# 
#          CacheUdsDTC.dtc_value = 0;
	.d2line		8077
	lis		r3,CacheUdsDTC@ha
	e_add16i		r3,r3,CacheUdsDTC@l
	stw		r4,0(r3)
#          CacheUdsDTC.int_dtc_index = DEM_INT_DTC_INVALID;
	.d2line		8078
	diab.li		r0,65535		# noErrors=r0
	lis		r3,(CacheUdsDTC+4)@ha
	sth		r0,(CacheUdsDTC+4)@l(r3)		# noErrors=r0
# 
# #if (STD_ON == DEM_OBD_SUPPORT)
#          EngineTimestamp = (uint32)0U;
# #endif /* STD_ON == DEM_OBD_SUPPORT */
# 
# #if (STD_ON == DEM_PTO_SUPPORT)
#          CurrentPTOStatus = FALSE;
# #endif /* STD_ON == DEM_PTO_SUPPORT */
# 
#          /* [VSTAR_Dem_00247] */
#          Dem_NvInit();
	.d2line		8089
	bl		Dem_NvInit
# 
# #if (STD_ON == DEM_OBD_SUPPORT)
#          if (NULL_PTR != Dem_LCfg.p_obd_ff_prestorage)
#          {
#             Dem_MemSet(Dem_LCfg.p_obd_ff_prestorage->p_entry_occupied, 0, (uint16)Dem_LCfg.p_obd_ff_prestorage->num_prestore_entries * (uint16)sizeof(Dem_EventIdType));
#          }
# #endif /* STD_ON == DEM_OBD_SUPPORT */
# 
#          if (NULL_PTR != Dem_LCfg.p_ff_prestorage)
	.d2line		8098
.Llo1597:
	lis		r3,(Dem_LCfg+44)@ha
	lwz		r0,(Dem_LCfg+44)@l(r3)		# noErrors=r0
.Llo1598:
	se_cmpi		r0,0		# noErrors=r0
	bc		1,2,.L1335	# eq
#          {
#             Dem_MemSet(Dem_LCfg.p_ff_prestorage->p_entry_occupied, 0, (uint16)Dem_LCfg.p_ff_prestorage->num_prestore_entries * (uint16)sizeof(Dem_EventIdType));
	.d2line		8100
.Llo1599:
	lis		r3,(Dem_LCfg+44)@ha
	lwz		r3,(Dem_LCfg+44)@l(r3)
	lbz		r5,8(r3)
	se_slwi		r5,1
	lwz		r3,4(r3)
	diab.li		r4,0
	bl		Dem_MemSet
.L1335:
#          }
# 
# #if   (STD_OFF == DEM_OP_CYCLE_NVM_SUPPORT)
#          {
#             /* Loop over all cycles */
#             uint8 oc;
#             for (oc = (uint8)0U; oc < Dem_LCfg.num_op_cycles; oc++)
#             {  /* Cycle state is not retained over power cycle */
#                SetOpCycleState(oc, DEM_CYCLE_STATE_END);
#             }
#          }
# #endif /* STD_OFF == DEM_OP_CYCLE_NVM_SUPPORT */
# 
#          /* [SWS_Dem_00388], [SWS_Dem_00525]
#           * Clear UDS status bit 0 (TestFailed) if DemStatusBitStorageTestFailed is set to false, otherwise
#           * use TestFailed that was saved in NVRAM.
#           */
# #if   (STD_OFF == DEM_ESEXT_TF_NVM_SUPPORT)
#          {
#             Dem_EventIdType evId;
#             /* Loop over all events */
#             for (evId = (Dem_EventIdType)1U; evId <= GetNumEvents(); evId++)
#             {
#                /* TF is not retained over power cycle */
#                Dem_ClrUdsBits(evId, DEM_UDS_SB_TF_CLR);
#             }
#          }
# #endif /* STD_OFF == DEM_ESEXT_TF_NVM_SUPPORT */
# 
# #if (STD_ON == DEM_OBD_PERMANENT_SUPPORT)
#          Dem_SetPermanentStoredStatus();
# #endif /* STD_ON == DEM_OBD_PERMANENT_SUPPORT */
# 
#          Dem_MemSet(Dem_LCfg.p_indicator_status, 0, (uint16)Dem_LCfg.num_indicators * (uint16)sizeof(Dem_IndicatorStatusType));
	.d2line		8134
	lis		r3,(Dem_LCfg+138)@ha		# i=r3
.Llo1584:
	lbz		r5,(Dem_LCfg+138)@l(r3)		# i=r3
	lis		r3,(Dem_LCfg+108)@ha		# i=r3
	lwz		r3,(Dem_LCfg+108)@l(r3)		# i=r3 i=r3
.Llo1585:
	diab.li		r4,0
	bl		Dem_MemSet
# 
#          /* Clear operation cycle change circular queue */
#          Dem_OpCycleQueue.front = 0;
	.d2line		8137
	diab.li		r0,0		# noErrors=r0
.Llo1600:
	lis		r3,(Dem_OpCycleQueue+1)@ha		# i=r3
.Llo1586:
	stb		r0,(Dem_OpCycleQueue+1)@l(r3)		# i=r3 noErrors=r0
#          Dem_OpCycleQueue.rear = 0;
	.d2line		8138
	lis		r3,Dem_OpCycleQueue@ha		# i=r3
	e_add16i		r3,r3,Dem_OpCycleQueue@l		# i=r3 i=r3
	stb		r0,0(r3)		# i=r3 noErrors=r0
#          Dem_OpCycleQueue.num_items = 0;
	.d2line		8139
	lis		r3,(Dem_OpCycleQueue+2)@ha		# i=r3
	stb		r0,(Dem_OpCycleQueue+2)@l(r3)		# i=r3 noErrors=r0
# 
#          /* Update the event status per event memory entry */
#          UpdateEventStatusPerEntry();
	.d2line		8142
	bl		UpdateEventStatusPerEntry
#          UpdateSiPerEntry();
	.d2line		8143
.Llo1587:
	bl		UpdateSiPerEntry
# 
#          /* Calculate freeze frame lengths. Done runtime since length might change during calibration. */
#          for (i = 0; i < Dem_LCfg.num_ff_classes; i++)
	.d2line		8146
	diab.li		r3,0		# i=r3
.L1336:
.Llo1588:
	rlwinm		r5,r3,0,16,31		# pFFLength=r5 i=r3
.Llo1612:
	lis		r4,(Dem_LCfg+142)@ha		# j=r4
.Llo1604:
	lhz		r0,(Dem_LCfg+142)@l(r4)		# noErrors=r0 j=r4
.Llo1601:
	se_cmp		r5,r0		# pFFLength=r5 noErrors=r0
	bc		0,0,.L1338	# ge
	.section	.text_vle
.L4016:
#          {
#             uint8 j;
#             uint8 numFFDids = GetFFNumDids(i);
	.d2line		8149
.Llo1602:
	lis		r4,Dem_pPbCfg@ha		# j=r4
.Llo1605:
	lwz		r5,Dem_pPbCfg@l(r4)		# pFFLength=r5 j=r4
.Llo1613:
	lwz		r6,140(r5)		# pDidConfig=r6 pFFLength=r5
.Llo1614:
	rlwinm		r5,r3,3,13,28		# pFFLength=r5 i=r3
	se_add		r6,r5		# pDidConfig=r6 pDidConfig=r6 pFFLength=r5
	lbz		r0,4(r6)		# noErrors=r0 pDidConfig=r6
.Llo1609:
	mr		r0,r0		# numFFDids=r0 numFFDids=r0
#             P2CONST(uint16, AUTOMATIC, DEM_PBCFG_CALIB) pFFDidIdx = GetFFDids(i);
	.d2line		8150
	lwz		r4,Dem_pPbCfg@l(r4)		# j=r4 j=r4
	lwz		r4,140(r4)		# j=r4 j=r4
	lwzx		r8,r4,r5		# j=r4
.Llo1610:
	mr		r8,r8		# pFFDidIdx=r8 pFFDidIdx=r8
#             P2VAR(uint16, AUTOMATIC, DEM_APPL_DATA) pFFLength = &Dem_LCfg.p_ff_length[i];
	.d2line		8151
.Llo1611:
	lis		r4,(Dem_LCfg+120)@ha		# j=r4
	lwz		r5,(Dem_LCfg+120)@l(r4)		# pFFLength=r5 j=r4
	rlwinm		r4,r3,1,15,30		# j=r4 i=r3
	se_add		r4,r5		# j=r4 j=r4 pFFLength=r5
.Llo1606:
	mr		r5,r4		# pFFLength=r5 pFFLength=r4
#             *pFFLength = 0;
	.d2line		8152
	diab.li		r4,0		# j=r4
.Llo1607:
	sth		r4,0(r5)		# pFFLength=r5 j=r4
#             for (j = 0; j < numFFDids; j++)
.L1339:
	.d2line		8153
.Llo1615:
	rlwinm		r6,r4,0,24,31		# pDidConfig=r6 j=r4
.Llo1616:
	rlwinm		r7,r0,0,24,31		# numFFDids=r0
	se_cmp		r6,r7		# pDidConfig=r6
	bc		0,0,.L1341	# ge
#             {
#                if (pFFDidIdx[j] != DEM_DID_INVALID)
	.d2line		8155
.Llo1617:
	rlwinm		r6,r4,1,23,30		# pDidConfig=r6 j=r4
.Llo1618:
	lhzux		r7,r6,r8		# pDidConfig=r6
	cmpli		0,0,r7,65535
	bc		1,2,.L1342	# eq
	.section	.text_vle
.L4028:
#                {
#                   P2CONST(Dem_FFDidDefineType, AUTOMATIC, DEM_APPL_CONST) pDidConfig = &Dem_LCfg.p_ff_did_define[pFFDidIdx[j]];
	.d2line		8157
.Llo1619:
	lis		r6,(Dem_LCfg+36)@ha		# pDidConfig=r6
.Llo1620:
	lwz		r31,(Dem_LCfg+36)@l(r6)		# pDidConfig=r6
	rlwinm		r6,r4,1,23,30		# pDidConfig=r6 j=r4
	lhzux		r7,r6,r8		# pDidConfig=r6
	rlwinm		r7,r7,2,14,29
	add		r6,r31,r7		# pDidConfig=r6
	mr		r6,r6		# pDidConfig=r6 pDidConfig=r6
#                   *pFFLength += (uint16)Dem_LCfg.p_data_element[pDidConfig->data_element_idx].size;
	.d2line		8158
	lhz		r31,0(r5)		# pFFLength=r5
	lis		r7,(Dem_LCfg+28)@ha
	lwz		r7,(Dem_LCfg+28)@l(r7)
	lhz		r6,2(r6)		# pDidConfig=r6 pDidConfig=r6
	rlwinm		r6,r6,3,13,28		# pDidConfig=r6 pDidConfig=r6
	lbzx		r6,r7,r6		# pDidConfig=r6
	se_add		r6,r31		# pDidConfig=r6 pDidConfig=r6
	sth		r6,0(r5)		# pFFLength=r5 pDidConfig=r6
	.section	.text_vle
.L4029:
.L1342:
#                }
#             }
	.d2line		8160
.Llo1621:
	diab.addi		r6,r4,1		# pDidConfig=r6 j=r4
	se_addi		r4,1		# j=r4 j=r4
	b		.L1339
.L1341:
	.section	.text_vle
.L4017:
#          }
	.d2line		8161
.Llo1608:
	diab.addi		r4,r3,1		# j=r4 i=r3
	se_addi		r3,1		# i=r3 i=r3
	b		.L1336
.L1338:
# 
#          /* Process BSW event which are reported after Dem_PreInit */
#          ProcessBswEvents();
	.d2line		8164
.Llo1589:
	bl		ProcessBswEvents
# 
#          /* Initialize indicator statuses */
#          UpdateIndicators = TRUE;
	.d2line		8167
	diab.li		r0,1		# noErrors=r0
.Llo1603:
	lis		r3,UpdateIndicators@ha		# i=r3
.Llo1590:
	e_add16i		r3,r3,UpdateIndicators@l		# i=r3 i=r3
	stb		r0,0(r3)		# i=r3 noErrors=r0
# 
#          /* Set global flag to indicate that the Uds status has changed */
#          UdsStatusModified = TRUE;
	.d2line		8170
	lis		r3,UdsStatusModified@ha		# i=r3
	e_add16i		r3,r3,UdsStatusModified@l		# i=r3 i=r3
	stb		r0,0(r3)		# i=r3 noErrors=r0
# 
# #if (DEM_TRIGGER_DCM == STD_ON)
#          /* Disable Dcm DTC status changed notification */
#          Dem_DcmDTCStatusChangedNotification = FALSE;
# #endif /* DEM_TRIGGER_DCM == STD_ON */
# 
#          DemClearState = DEM_CLEAR_IDLE;
	.d2line		8177
	diab.li		r0,0		# noErrors=r0
	lis		r3,DemClearState@ha		# i=r3
	e_add16i		r3,r3,DemClearState@l		# i=r3 i=r3
	stw		r0,0(r3)		# i=r3 noErrors=r0
#          DemOpCycleChange.state = DEM_OP_CYCLE_CHANGE_IDLE;
	.d2line		8178
	lis		r3,DemOpCycleChange@ha		# i=r3
	e_add16i		r3,r3,DemOpCycleChange@l		# i=r3 i=r3
	stw		r0,0(r3)		# i=r3 noErrors=r0
#          Dem_InitState = DEM_INIT;
	.d2line		8179
	diab.li		r0,2		# noErrors=r0
	lis		r3,Dem_InitState@ha		# i=r3
	e_add16i		r3,r3,Dem_InitState@l		# i=r3 i=r3
	stw		r0,0(r3)		# i=r3 noErrors=r0
.L1329:
#       }
#    }
# }
	.d2line		8182
	.d2epilogue_begin
.Llo1591:
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4010:
	.type		Dem_Init,@function
	.size		Dem_Init,.-Dem_Init
# Number of nodes = 283

# Allocations for Dem_Init
#	?a4		i
#	?a5		noErrors
#	?a6		j
#	?a7		numFFDids
#	?a8		pFFDidIdx
#	?a9		pFFLength
#	?a10		pDidConfig
# FUNC(void, DEM_CODE) Dem_Shutdown(void)
	.align		2
	.section	.text_vle
        .d2line         8186,22
#$$ld
.L4036:

#$$bf	Dem_Shutdown,interprocedural,rasave,nostackparams
	.globl		Dem_Shutdown
	.d2_cfa_start __cie
Dem_Shutdown:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
.Llo1622:
	stw		r0,20(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    DEM_PRE_ASSERT()
	.d2line		8188
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_SHUTDOWN, DEM_INIT == Dem_InitState)
	.d2line		8189
	lis		r3,Dem_InitState@ha
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1353	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,3
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1353:
#    DEM_POST_ASSERT_VOID()
	.d2line		8190
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		1,2,.L1352	# eq
# 
#    if (DEM_INIT == Dem_InitState)
	.d2line		8192
.Llo1623:
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo1624:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1352	# ne
#    {
#       /* Set state to pre-initialized */
#       Dem_InitState = DEM_PREINIT;
	.d2line		8195
.Llo1625:
	diab.li		r0,1		# noErrors=r0
.Llo1626:
	lis		r3,Dem_InitState@ha
	e_add16i		r3,r3,Dem_InitState@l
	stw		r0,0(r3)		# noErrors=r0
.L1352:
#    }
# }
	.d2line		8197
	.d2epilogue_begin
.Llo1627:
	lwz		r0,20(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4037:
	.type		Dem_Shutdown,@function
	.size		Dem_Shutdown,.-Dem_Shutdown
# Number of nodes = 29

# Allocations for Dem_Shutdown
#	?a4		noErrors
# FUNC(Std_ReturnType, Dem_CODE) Dem_SetEventStatus(Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
	.align		2
	.section	.text_vle
        .d2line         8214,32
#$$ld
.L4043:

#$$bf	Dem_SetEventStatus,interprocedural,rasave,nostackparams
	.globl		Dem_SetEventStatus
	.d2_cfa_start __cie
Dem_SetEventStatus:
.Llo1628:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
	mr		r30,r4		# EventStatus=r30 EventStatus=r4
	.d2prologue_end
# {
#    Std_ReturnType retVal = E_NOT_OK;
	.d2line		8216
	diab.li		r29,1		# retVal=r29
# 
#    DEM_PRE_ASSERT()
	.d2line		8218
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_SETEVENTSTATUS, DEM_INIT == Dem_InitState)
	.d2line		8219
.Llo1633:
	lis		r3,Dem_InitState@ha
.Llo1629:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1359	# eq
.Llo1630:
	diab.li		r3,54
.Llo1632:
	diab.li		r4,0
	diab.li		r5,4
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1359:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_SETEVENTSTATUS, (EventId <= Dem_LCfg.num_events) && (EventId > 0))
	.d2line		8220
	rlwinm		r5,r31,0,16,31		# EventId=r31
	lis		r3,(Dem_LCfg+136)@ha
	lhz		r3,(Dem_LCfg+136)@l(r3)
	se_cmp		r5,r3
	bc		1,1,.L1366	# gt
	rlwinm		r3,r31,0,16,31		# EventId=r31
	se_cmpi		r3,0
	bc		1,1,.L1360	# gt
.L1366:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,4
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1360:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_SETEVENTSTATUS, EventStatus <= DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED)
	.d2line		8221
	rlwinm		r4,r30,0,24,31		# EventStatus=r30
	se_cmpli	r4,4
	bc		0,1,.L1361	# le
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,4
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1361:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		8222
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1362	# ne
.Llo1634:
	diab.li		r3,1
	b		.L1358
.L1362:
# 
#    /* Check init-state, to protect NV-ram at shutdown. */
#    if ((DEM_INIT == Dem_InitState) && Dem_IsEventAvailable(EventId)
	.d2line		8225
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo1635:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1363	# ne
.Llo1636:
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r4,96(r3)
	rlwinm		r3,r31,0,16,31		# EventId=r31
	diab.addi		r3,r3,-1
	se_srwi		r3,3
	lbzx		r0,r4,r3		# noErrors=r0
.Llo1637:
	diab.li		r4,1
	diab.addi		r3,r31,255		# EventId=r31
	rlwinm		r3,r3,0,29,31
	slw		r4,r4,r3
	rlwinm		r4,r4,0,24,31
	and.		r0,r0,r4		# noErrors=r0 noErrors=r0
.Llo1638:
	bc		1,2,.L1363	# eq
# #if (DEM_REPLACEMENT_EVENT_SUPPORT == STD_ON)
#       && Dem_BitArrayIsBitCleared(Dem_LCfg.p_replacement_events, EventId - 1U)
# #endif /* DEM_REPLACEMENT_EVENT_SUPPORT == STD_ON */
#       )
#    {
#       if (TRUE == IsEvMemStorageEnabled(EventId))
	.d2line		8231
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		IsEvMemStorageEnabled
	rlwinm		r3,r3,0,24,31		# EventId=r3 EventId=r3
	se_cmpi		r3,1		# EventId=r3
	bc		0,2,.L1363	# ne
#       {
#          if ((TRUE == EnableConditionsFulfilled(EventId)) && /* [SWS_Dem_00447] */
	.d2line		8233
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		EnableConditionsFulfilled
	rlwinm		r3,r3,0,24,31		# EventId=r3 EventId=r3
	se_cmpi		r3,1		# EventId=r3
	bc		0,2,.L1363	# ne
	lis		r3,Dem_NvOpCycleState@ha		# EventId=r3
	e_add16i		r3,r3,Dem_NvOpCycleState@l		# EventId=r3 EventId=r3
	lis		r5,Dem_pPbCfg@ha
	lwz		r4,Dem_pPbCfg@l(r5)
	lwz		r4,52(r4)
	lwz		r5,Dem_pPbCfg@l(r5)
	lwz		r0,104(r5)		# noErrors=r0
.Llo1639:
	rlwinm		r5,r31,0,16,31		# EventId=r31
	se_add		r5,r0		# noErrors=r0
	lbz		r0,-1(r5)		# noErrors=r0
	lbzx		r0,r4,r0		# noErrors=r0
	lbzx		r0,r3,r0		# noErrors=r0 EventId=r3
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1363	# ne
#              (DEM_CYCLE_STATE_START == GetOpCycleState(Dem_GetOpCycle(EventId))))
#          {
#             UpdateEventState(EventId, EventStatus);
	.d2line		8236
.Llo1640:
	mr		r3,r31		# EventId=r3 EventId=r31
	mr		r4,r30		# EventStatus=r4 EventStatus=r30
	bl		UpdateEventState
#             retVal = E_OK;
	.d2line		8237
	diab.li		r29,0		# retVal=r29
.L1363:
#          }
#       }
#    }
# 
#    return retVal;
	.d2line		8242
	rlwinm		r3,r29,0,24,31		# EventId=r3 retVal=r29
.L1358:
# }
	.d2line		8243
	.d2epilogue_begin
.Llo1631:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4044:
	.type		Dem_SetEventStatus,@function
	.size		Dem_SetEventStatus,.-Dem_SetEventStatus
# Number of nodes = 154

# Allocations for Dem_SetEventStatus
#	?a4		EventId
#	?a5		EventStatus
#	?a6		retVal
#	?a7		noErrors
# FUNC(Std_ReturnType, Dem_CODE) Dem_ResetEventStatus(Dem_EventIdType EventId)
	.align		2
	.section	.text_vle
        .d2line         8257,32
#$$ld
.L4054:

#$$bf	Dem_ResetEventStatus,interprocedural,rasave,nostackparams
	.globl		Dem_ResetEventStatus
	.d2_cfa_start __cie
Dem_ResetEventStatus:
.Llo1641:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	27,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
	.d2prologue_end
# {
#    Std_ReturnType retVal = E_NOT_OK;
	.d2line		8259
	diab.li		r30,1		# retVal=r30
# 
#    DEM_PRE_ASSERT()
	.d2line		8261
.Llo1645:
	diab.li		r0,1
#    DEM_ASSERT_PARAM_DATA(DEM_SID_RESETEVENTSTATUS, (EventId <= Dem_LCfg.num_events) && (EventId > 0))
	.d2line		8262
.Llo1646:
	rlwinm		r4,r31,0,16,31		# EventId=r31
	lis		r3,(Dem_LCfg+136)@ha
.Llo1642:
	lhz		r3,(Dem_LCfg+136)@l(r3)
	se_cmp		r4,r3
	bc		1,1,.L1381	# gt
.Llo1643:
	rlwinm		r3,r31,0,16,31		# EventId=r31
	se_cmpi		r3,0
	bc		1,1,.L1375	# gt
.L1381:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,5
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1375:
#    DEM_ASSERT_UNINIT(DEM_SID_RESETEVENTSTATUS, DEM_INIT == Dem_InitState)
	.d2line		8263
	lis		r3,Dem_InitState@ha
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1376	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,5
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1376:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		8264
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1377	# ne
.Llo1647:
	diab.li		r3,1
	b		.L1374
.L1377:
# 
#    /* Check init-state, to protect NV-ram at shutdown. */
#    if (DEM_INIT == Dem_InitState)
	.d2line		8267
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo1648:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1378	# ne
	.section	.text_vle
.L4062:
#    {
#       CONST(Dem_UdsStatusByteType, AUTOMATIC) eventUdsStatusOld = Dem_GetUdsStatus(EventId);
	.d2line		8269
.Llo1649:
	lis		r3,(Dem_NvUdsStatus-1)@ha
	e_add16i		r3,r3,(Dem_NvUdsStatus-1)@l
	rlwinm		r4,r31,0,16,31		# EventId=r31
	lbzx		r29,r3,r4		# eventUdsStatusOld=r29
.Llo1654:
	mr		r29,r29		# eventUdsStatusOld=r29 eventUdsStatusOld=r29
# 
#       /* [SWS_Dem_00638] Check if the event has been tested this operation cycle */
#       if (Dem_IsSet(eventUdsStatusOld, DEM_UDS_SB_TNCTOC))
	.d2line		8272
	rlwinm		r4,r29,0,24,31		# eventUdsStatusOld=r29
	se_btsti		r4,25
	bc		1,2,.L1378	# eq
	.section	.text_vle
.L4068:
#       {
#          CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(EventId);
	.d2line		8274
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r0,128(r3)		# noErrors=r0
.Llo1650:
	rlwinm		r3,r31,1,15,30		# EventId=r31
	se_add		r3,r0		# noErrors=r0
	lhz		r28,-2(r3)		# intDtc=r28
.Llo1655:
	mr		r28,r28		# intDtc=r28 intDtc=r28
#          CONST(Dem_UdsStatusByteType, AUTOMATIC) dtcUdsStatusOld = Dem_GetUdsStatusForValidDtc(intDtc);
	.d2line		8275
	rlwinm		r3,r28,0,16,31		# intDtc=r28
	cmpli		0,0,r3,65535
	bc		0,2,.L1382	# ne
.Llo1651:
	diab.li		r27,0		# dtcUdsStatusOld=r27
.Llo1657:
	b		.L1383
.L1382:
.Llo1658:
	rlwinm		r3,r28,0,16,31		# intDtc=r28
	bl		Dem_GetUdsStatusByIntDtc
.Llo1659:
	mr		r27,r3		# dtcUdsStatusOld=r27 dtcUdsStatusOld=r3
.L1383:
# 
#          /* Clear UDS DTC status bit 0 (TestFailed) and the debouncing counter, [SWS_Dem_00187] */
#          /* ---------- Enter critical section ---------- */
#          SchM_Enter_Dem_EaNvStorageOngoing();
	.d2line		8279
.Llo1660:
	bl		SchM_Enter_Dem_EaNvStorageOngoing
#          /* [VSTAR_Dem_00289] */
#          if (FALSE == Dem_NvAllStorageOngoing)
	.d2line		8281
.Llo1661:
	lis		r3,Dem_NvAllStorageOngoing@ha
	lbz		r0,Dem_NvAllStorageOngoing@l(r3)		# noErrors=r0
.Llo1652:
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1380	# ne
#          {
#             /* Clear UDS DTC status bit 0 (TestFailed) and the debouncing counter, [SWS_Dem_00187] */
#             Dem_ClrUdsBits(EventId, DEM_UDS_SB_TF_CLR);
	.d2line		8284
.Llo1653:
	mr		r3,r31		# EventId=r3 EventId=r31
	diab.li		r4,254
	bl		Dem_ClrUdsBits
#             retVal = E_OK;
	.d2line		8285
	diab.li		r30,0		# retVal=r30
.L1380:
#          }
#          SchM_Exit_Dem_EaNvStorageOngoing();
	.d2line		8287
	bl		SchM_Exit_Dem_EaNvStorageOngoing
#          /* ---------- Exit critical section ----------- */
# 
#          /* Clear pre-debouncing counter */
#          Dem_SetDebouncingCounter(EventId, DEM_DB_COUNTER_CLEAR);
	.d2line		8291
	mr		r3,r31		# EventId=r3 EventId=r31
	diab.li		r4,2		# dtcUdsStatusOld=r4
	bl		Dem_SetDebouncingCounter
# 
#          Dem_TriggerOnEventStatus(EventId, eventUdsStatusOld);
	.d2line		8293
	mr		r3,r31		# EventId=r3 EventId=r31
	mr		r4,r29		# eventUdsStatusOld=r4 eventUdsStatusOld=r29
	bl		Dem_TriggerOnEventStatus
#          Dem_TriggerOnDTCStatus(intDtc, dtcUdsStatusOld, FALSE);
	.d2line		8294
	mr		r3,r28		# intDtc=r3 intDtc=r28
	mr		r4,r27		# dtcUdsStatusOld=r4 dtcUdsStatusOld=r27
	diab.li		r5,0
	bl		Dem_TriggerOnDTCStatus
	.section	.text_vle
.L4069:
	.section	.text_vle
.L4063:
.L1378:
#       }
#    }
# 
#    return retVal;
	.d2line		8298
.Llo1656:
	rlwinm		r3,r30,0,24,31		# intDtc=r3 retVal=r30
.L1374:
# }
	.d2line		8299
	.d2epilogue_begin
.Llo1644:
	lmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,52(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4055:
	.type		Dem_ResetEventStatus,@function
	.size		Dem_ResetEventStatus,.-Dem_ResetEventStatus
# Number of nodes = 148

# Allocations for Dem_ResetEventStatus
#	?a4		EventId
#	?a5		retVal
#	?a6		noErrors
#	?a7		eventUdsStatusOld
#	?a8		intDtc
#	?a9		dtcUdsStatusOld
# FUNC(Std_ReturnType, Dem_CODE) Dem_GetEventStatus(Dem_EventIdType EventId,
	.align		2
	.section	.text_vle
        .d2line         8302,32
#$$ld
.L4078:

#$$bf	Dem_GetEventStatus,interprocedural,rasave,nostackparams
	.globl		Dem_GetEventStatus
	.d2_cfa_start __cie
Dem_GetEventStatus:
.Llo1662:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo1672:
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
	mr		r30,r4		# EventStatusByte=r30 EventStatusByte=r4
	.d2prologue_end
#    P2VAR(Dem_UdsStatusByteType, AUTOMATIC, RTE_APPL_DATA) EventStatusByte)
# {
#    Std_ReturnType retVal = E_OK;
	.d2line		8305
	diab.li		r29,0		# retVal=r29
# 
#    DEM_PRE_ASSERT()
	.d2line		8307
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_GETEVENTSTATUS, DEM_INIT == Dem_InitState)
	.d2line		8308
	lis		r3,Dem_InitState@ha
.Llo1663:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1394	# eq
.Llo1664:
	diab.li		r3,54
.Llo1670:
	diab.li		r4,0
	diab.li		r5,10
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1394:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_GETEVENTSTATUS, (EventId <= Dem_LCfg.num_events) && (EventId > 0))
	.d2line		8309
	rlwinm		r4,r31,0,16,31		# EventId=r31
	lis		r3,(Dem_LCfg+136)@ha
	lhz		r3,(Dem_LCfg+136)@l(r3)
	se_cmp		r4,r3
	bc		1,1,.L1400	# gt
	rlwinm		r3,r31,0,16,31		# EventId=r31
	se_cmpi		r3,0
	bc		1,1,.L1395	# gt
.L1400:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,10
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1395:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_GETEVENTSTATUS, EventStatusByte != NULL_PTR)
	.d2line		8310
	se_cmpi		r30,0		# EventStatusByte=r30
	bc		0,2,.L1396	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,10
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1396:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		8311
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1397	# ne
.Llo1673:
	diab.li		r3,1
	b		.L1393
.L1397:
# 
#    if ((DEM_INIT == Dem_InitState) && (EventStatusByte != NULL_PTR))
	.d2line		8313
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo1674:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1398	# ne
.Llo1675:
	se_cmpi		r30,0		# EventStatusByte=r30
	bc		1,2,.L1398	# eq
#    {
#       /* [SWS_Dem_00051] */
#       *EventStatusByte = Dem_GetUdsStatus(EventId);
	.d2line		8316
.Llo1665:
	lis		r3,(Dem_NvUdsStatus-1)@ha
	e_add16i		r3,r3,(Dem_NvUdsStatus-1)@l
.Llo1666:
	rlwinm		r31,r31,0,16,31		# EventId=r31 EventId=r31
.Llo1667:
	lbzx		r0,r3,r31		# noErrors=r0
.Llo1676:
	stb		r0,0(r30)		# EventStatusByte=r30 noErrors=r0
	b		.L1399
.L1398:
#    }
#    else
#    {
#       retVal = E_NOT_OK;
	.d2line		8320
.Llo1668:
	diab.li		r29,1		# retVal=r29
.L1399:
#    }
# 
#    return retVal;
	.d2line		8323
.Llo1669:
	rlwinm		r3,r29,0,24,31		# retVal=r29
.L1393:
# }
	.d2line		8324
	.d2epilogue_begin
.Llo1671:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4079:
	.type		Dem_GetEventStatus,@function
	.size		Dem_GetEventStatus,.-Dem_GetEventStatus
# Number of nodes = 94

# Allocations for Dem_GetEventStatus
#	?a4		EventId
#	?a5		EventStatusByte
#	?a6		retVal
#	?a7		noErrors
# FUNC(Std_ReturnType, Dem_CODE) Dem_GetEventFailed(Dem_EventIdType EventId, P2VAR(boolean, AUTOMATIC, RTE_APPL_DATA) EventFailed)
	.align		2
	.section	.text_vle
        .d2line         8336,32
#$$ld
.L4089:

#$$bf	Dem_GetEventFailed,interprocedural,rasave,nostackparams
	.globl		Dem_GetEventFailed
	.d2_cfa_start __cie
Dem_GetEventFailed:
.Llo1677:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo1687:
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
	mr		r30,r4		# EventFailed=r30 EventFailed=r4
	.d2prologue_end
# {
#    Std_ReturnType retVal = E_OK;
	.d2line		8338
	diab.li		r29,0		# retVal=r29
# 
#    DEM_PRE_ASSERT()
	.d2line		8340
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_GETEVENTFAILED, DEM_INIT == Dem_InitState)
	.d2line		8341
	lis		r3,Dem_InitState@ha
.Llo1678:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1410	# eq
.Llo1679:
	diab.li		r3,54
.Llo1685:
	diab.li		r4,0
	diab.li		r5,11
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1410:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_GETEVENTFAILED, (EventId <= Dem_LCfg.num_events) && (EventId > 0))
	.d2line		8342
	rlwinm		r4,r31,0,16,31		# EventId=r31
	lis		r3,(Dem_LCfg+136)@ha
	lhz		r3,(Dem_LCfg+136)@l(r3)
	se_cmp		r4,r3
	bc		1,1,.L1418	# gt
	rlwinm		r3,r31,0,16,31		# EventId=r31
	se_cmpi		r3,0
	bc		1,1,.L1411	# gt
.L1418:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,11
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1411:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_GETEVENTFAILED, NULL_PTR != EventFailed)
	.d2line		8343
	se_cmpi		r30,0		# EventFailed=r30
	bc		0,2,.L1412	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,11
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1412:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		8344
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1413	# ne
.Llo1688:
	diab.li		r3,1
	b		.L1409
.L1413:
# 
#    if ((DEM_INIT == Dem_InitState) && (NULL_PTR != EventFailed))
	.d2line		8346
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo1689:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1414	# ne
.Llo1690:
	se_cmpi		r30,0		# EventFailed=r30
	bc		1,2,.L1414	# eq
#    {
#       /* [SWS_Dem_00052] */
#       if (Dem_IsSet(Dem_GetUdsStatus(EventId), DEM_UDS_SB_TF))
	.d2line		8349
.Llo1680:
	lis		r3,(Dem_NvUdsStatus-1)@ha
	e_add16i		r3,r3,(Dem_NvUdsStatus-1)@l
.Llo1681:
	rlwinm		r31,r31,0,16,31		# EventId=r31 EventId=r31
.Llo1682:
	lbzx		r0,r3,r31		# noErrors=r0
.Llo1691:
	se_btsti		r0,31		# noErrors=r0
	bc		1,2,.L1415	# eq
#       {
#          *EventFailed = TRUE;
	.d2line		8351
.Llo1692:
	diab.li		r0,1		# noErrors=r0
.Llo1693:
	stb		r0,0(r30)		# EventFailed=r30 noErrors=r0
	b		.L1417
.L1415:
#       }
#       else
#       {
#          *EventFailed = FALSE;
	.d2line		8355
.Llo1694:
	diab.li		r0,0		# noErrors=r0
.Llo1695:
	stb		r0,0(r30)		# EventFailed=r30 noErrors=r0
	b		.L1417
.L1414:
#       }
#    }
#    else
#    {
#       retVal = E_NOT_OK;
	.d2line		8360
.Llo1683:
	diab.li		r29,1		# retVal=r29
.L1417:
#    }
# 
#    return retVal;
	.d2line		8363
.Llo1684:
	rlwinm		r3,r29,0,24,31		# retVal=r29
.L1409:
# }
	.d2line		8364
	.d2epilogue_begin
.Llo1686:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4090:
	.type		Dem_GetEventFailed,@function
	.size		Dem_GetEventFailed,.-Dem_GetEventFailed
# Number of nodes = 105

# Allocations for Dem_GetEventFailed
#	?a4		EventId
#	?a5		EventFailed
#	?a6		retVal
#	?a7		noErrors
# FUNC(Std_ReturnType, Dem_CODE) Dem_GetEventTested(Dem_EventIdType EventId, P2VAR(boolean, AUTOMATIC, RTE_APPL_DATA) EventTested)
	.align		2
	.section	.text_vle
        .d2line         8376,32
#$$ld
.L4101:

#$$bf	Dem_GetEventTested,interprocedural,rasave,nostackparams
	.globl		Dem_GetEventTested
	.d2_cfa_start __cie
Dem_GetEventTested:
.Llo1696:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo1706:
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
	mr		r30,r4		# EventTested=r30 EventTested=r4
	.d2prologue_end
# {
#    Std_ReturnType retVal = E_OK;
	.d2line		8378
	diab.li		r29,0		# retVal=r29
# 
#    DEM_PRE_ASSERT()
	.d2line		8380
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_GETEVENTTESTED, DEM_INIT == Dem_InitState)
	.d2line		8381
	lis		r3,Dem_InitState@ha
.Llo1697:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1429	# eq
.Llo1698:
	diab.li		r3,54
.Llo1704:
	diab.li		r4,0
	diab.li		r5,12
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1429:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_GETEVENTTESTED, (EventId <= Dem_LCfg.num_events) && (EventId > 0))
	.d2line		8382
	rlwinm		r4,r31,0,16,31		# EventId=r31
	lis		r3,(Dem_LCfg+136)@ha
	lhz		r3,(Dem_LCfg+136)@l(r3)
	se_cmp		r4,r3
	bc		1,1,.L1437	# gt
	rlwinm		r3,r31,0,16,31		# EventId=r31
	se_cmpi		r3,0
	bc		1,1,.L1430	# gt
.L1437:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,12
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1430:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_GETEVENTTESTED, NULL_PTR != EventTested)
	.d2line		8383
	se_cmpi		r30,0		# EventTested=r30
	bc		0,2,.L1431	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,12
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1431:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		8384
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1432	# ne
.Llo1707:
	diab.li		r3,1
	b		.L1428
.L1432:
# 
#    if ((DEM_INIT == Dem_InitState) && (NULL_PTR != EventTested))
	.d2line		8386
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo1708:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1433	# ne
.Llo1709:
	se_cmpi		r30,0		# EventTested=r30
	bc		1,2,.L1433	# eq
#    {
#       /* [SWS_Dem_00053] */
#       if (Dem_IsSet(Dem_GetUdsStatus(EventId), DEM_UDS_SB_TNCTOC))
	.d2line		8389
.Llo1699:
	lis		r3,(Dem_NvUdsStatus-1)@ha
	e_add16i		r3,r3,(Dem_NvUdsStatus-1)@l
.Llo1700:
	rlwinm		r31,r31,0,16,31		# EventId=r31 EventId=r31
.Llo1701:
	lbzx		r0,r3,r31		# noErrors=r0
.Llo1710:
	se_btsti		r0,25		# noErrors=r0
	bc		1,2,.L1434	# eq
#       {
#          *EventTested = FALSE;
	.d2line		8391
.Llo1711:
	diab.li		r0,0		# noErrors=r0
.Llo1712:
	stb		r0,0(r30)		# EventTested=r30 noErrors=r0
	b		.L1436
.L1434:
#       }
#       else
#       {
#          *EventTested = TRUE;
	.d2line		8395
.Llo1713:
	diab.li		r0,1		# noErrors=r0
.Llo1714:
	stb		r0,0(r30)		# EventTested=r30 noErrors=r0
	b		.L1436
.L1433:
#       }
#    }
#    else
#    {
#       retVal = E_NOT_OK;
	.d2line		8400
.Llo1702:
	diab.li		r29,1		# retVal=r29
.L1436:
#    }
# 
#    return retVal;
	.d2line		8403
.Llo1703:
	rlwinm		r3,r29,0,24,31		# retVal=r29
.L1428:
# }
	.d2line		8404
	.d2epilogue_begin
.Llo1705:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4102:
	.type		Dem_GetEventTested,@function
	.size		Dem_GetEventTested,.-Dem_GetEventTested
# Number of nodes = 105

# Allocations for Dem_GetEventTested
#	?a4		EventId
#	?a5		EventTested
#	?a6		retVal
#	?a7		noErrors
# FUNC(Std_ReturnType, Dem_CODE) Dem_GetDTCOfEvent(Dem_EventIdType EventId, Dem_DTCFormatType DTCFormat,
	.align		2
	.section	.text_vle
        .d2line         8417,32
#$$ld
.L4112:

#$$bf	Dem_GetDTCOfEvent,interprocedural,rasave,nostackparams
	.globl		Dem_GetDTCOfEvent
	.d2_cfa_start __cie
Dem_GetDTCOfEvent:
.Llo1715:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo1729:
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
	mr		r30,r4		# DTCFormat=r30 DTCFormat=r4
	mr		r29,r5		# DTCOfEvent=r29 DTCOfEvent=r5
	.d2prologue_end
#       P2VAR(uint32, AUTOMATIC, RTE_APPL_DATA) DTCOfEvent)
# {
#    Std_ReturnType retVal = E_OK;
	.d2line		8420
	diab.li		r28,0		# retVal=r28
# 
#    DEM_PRE_ASSERT()
	.d2line		8422
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_GETDTCOFEVENT, DEM_INIT == Dem_InitState)
	.d2line		8423
	lis		r3,Dem_InitState@ha
.Llo1716:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1448	# eq
.Llo1717:
	diab.li		r3,54
.Llo1723:
	diab.li		r4,0
	diab.li		r5,13
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1448:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_GETDTCOFEVENT, (EventId <= Dem_LCfg.num_events) && (EventId > 0))
	.d2line		8424
	rlwinm		r4,r31,0,16,31		# EventId=r31
	lis		r3,(Dem_LCfg+136)@ha
	lhz		r3,(Dem_LCfg+136)@l(r3)
	se_cmp		r4,r3
	bc		1,1,.L1461	# gt
	rlwinm		r3,r31,0,16,31		# EventId=r31
	se_cmpi		r3,0
	bc		1,1,.L1449	# gt
.L1461:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,13
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1449:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_GETDTCOFEVENT, (DTCFormat == DEM_DTC_FORMAT_OBD) || (DTCFormat == DEM_DTC_FORMAT_UDS))
	.d2line		8425
	rlwinm		r4,r30,0,24,31		# DTCFormat=r30
	se_cmpi		r4,0
	bc		1,2,.L1450	# eq
	rlwinm		r4,r30,0,24,31		# DTCFormat=r30
	se_cmpi		r4,11
	bc		1,2,.L1450	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,13
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1450:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_GETDTCOFEVENT, (NULL_PTR != DTCOfEvent))
	.d2line		8426
	se_cmpi		r29,0		# DTCOfEvent=r29
	bc		0,2,.L1451	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,13
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1451:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		8427
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1452	# ne
.Llo1730:
	diab.li		r3,1
	b		.L1447
.L1452:
# 
#    if ((DEM_INIT == Dem_InitState) && (NULL_PTR != DTCOfEvent))
	.d2line		8429
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo1731:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1453	# ne
.Llo1732:
	se_cmpi		r29,0		# DTCOfEvent=r29
	bc		1,2,.L1453	# eq
	.section	.text_vle
.L4123:
#    {
#       uint16 intDtc = Dem_GetEventIntDtc(EventId);
	.d2line		8431
.Llo1718:
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r0,128(r3)		# noErrors=r0
.Llo1719:
	rlwinm		r31,r31,1,15,30		# EventId=r31 EventId=r31
	se_add		r31,r0		# EventId=r31 EventId=r31 noErrors=r0
	lhz		r0,-2(r31)		# noErrors=r0 EventId=r31
.Llo1733:
	mr		r0,r0		# intDtc=r0 intDtc=r0
# 
#       if (DEM_INT_DTC_INVALID != intDtc)
	.d2line		8433
	rlwinm		r4,r0,0,16,31		# intDtc=r0
	cmpli		0,0,r4,65535
	bc		1,2,.L1454	# eq
#       {
#          /* [SWS_Dem_00277], [SWS_Dem_00269] */
#          if ((DEM_DTC_FORMAT_UDS == DTCFormat) && IsUdsDtc(intDtc))
	.d2line		8436
.Llo1720:
	rlwinm		r4,r30,0,24,31		# DTCFormat=r30
	se_cmpi		r4,11
	bc		0,2,.L1455	# ne
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,76(r3)
	rlwinm		r4,r0,2,14,29		# intDtc=r0
	lwzx		r3,r3,r4
	se_cmpi		r3,0
	bc		1,2,.L1455	# eq
#          {
#             *DTCOfEvent = GetUdsDtc(intDtc);
	.d2line		8438
.Llo1734:
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,76(r3)
.Llo1735:
	rlwinm		r0,r0,2,14,29		# intDtc=r0 intDtc=r0
	lwzx		r0,r3,r0		# intDtc=r0
	stw		r0,0(r29)		# DTCOfEvent=r29 intDtc=r0
	b		.L1460
.L1455:
#          }
#          else if ((DEM_DTC_FORMAT_OBD == DTCFormat) && Dem_IsObdDtc(intDtc)) 
	.d2line		8440
	rlwinm		r30,r30,0,24,31		# DTCFormat=r30 DTCFormat=r30
	se_cmpi		r30,0		# DTCFormat=r30
	bc		0,2,.L1457	# ne
.Llo1724:
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,72(r3)
	rlwinm		r4,r0,1,15,30		# intDtc=r0
	lhzx		r3,r3,r4
	se_cmpi		r3,0
	bc		1,2,.L1457	# eq
#          {
#             *DTCOfEvent = (uint32)GetObdDtc(intDtc) << 8;
	.d2line		8442
.Llo1736:
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,72(r3)
.Llo1737:
	rlwinm		r0,r0,1,15,30		# intDtc=r0 intDtc=r0
	lhzx		r0,r3,r0		# intDtc=r0
	rlwinm		r0,r0,8,8,23		# intDtc=r0 intDtc=r0
	stw		r0,0(r29)		# DTCOfEvent=r29 intDtc=r0
	b		.L1460
.L1457:
#          }
#          else
#          {
#             retVal = DEM_E_NO_DTC_AVAILABLE;
	.d2line		8446
	diab.li		r28,2		# retVal=r28
	b		.L1460
.L1454:
#          }
#       }
#       else
#       {
#          retVal = DEM_E_NO_DTC_AVAILABLE;
	.d2line		8451
.Llo1725:
	diab.li		r28,2		# retVal=r28
	.section	.text_vle
.L4124:
.Llo1726:
	b		.L1460
.L1453:
#       }
#    }
#    else
#    {
#       retVal = E_NOT_OK;
	.d2line		8456
.Llo1721:
	diab.li		r28,1		# retVal=r28
.L1460:
#    }
# 
#    return retVal;
	.d2line		8459
.Llo1722:
	rlwinm		r3,r28,0,24,31		# retVal=r28
.L1447:
# }
	.d2line		8460
	.d2epilogue_begin
.Llo1727:
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1728:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4113:
	.type		Dem_GetDTCOfEvent,@function
	.size		Dem_GetDTCOfEvent,.-Dem_GetDTCOfEvent
# Number of nodes = 193

# Allocations for Dem_GetDTCOfEvent
#	?a4		EventId
#	?a5		DTCFormat
#	?a6		DTCOfEvent
#	?a7		retVal
#	?a8		noErrors
#	?a9		intDtc
# FUNC(void, DEM_CODE) Dem_ReportErrorStatus(Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
	.align		2
	.section	.text_vle
        .d2line         8464,22
#$$ld
.L4131:

#$$bf	Dem_ReportErrorStatus,interprocedural,rasave,nostackparams
	.globl		Dem_ReportErrorStatus
	.d2_cfa_start __cie
Dem_ReportErrorStatus:
.Llo1738:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo1743:
	stmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	30,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
	mr		r30,r4		# EventStatus=r30 EventStatus=r4
	.d2prologue_end
# {
#    DEM_PRE_ASSERT()
	.d2line		8466
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_REPORTERRORSTATUS, DEM_UNINIT != Dem_InitState) /* [SWS_Dem_00364] */
	.d2line		8467
	lis		r3,Dem_InitState@ha
.Llo1739:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,0
	bc		0,2,.L1475	# ne
.Llo1740:
	diab.li		r3,54
.Llo1742:
	diab.li		r4,0
	diab.li		r5,15
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1475:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_REPORTERRORSTATUS, (EventId <= Dem_LCfg.num_events) && (EventId > 0))
	.d2line		8468
	rlwinm		r5,r31,0,16,31		# EventId=r31
	lis		r3,(Dem_LCfg+136)@ha
	lhz		r3,(Dem_LCfg+136)@l(r3)
	se_cmp		r5,r3
	bc		1,1,.L1483	# gt
	rlwinm		r3,r31,0,16,31		# EventId=r31
	se_cmpi		r3,0
	bc		1,1,.L1476	# gt
.L1483:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,15
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1476:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_REPORTERRORSTATUS, EventStatus <= DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED)
	.d2line		8469
	rlwinm		r4,r30,0,24,31		# EventStatus=r30
	se_cmpli	r4,4
	bc		0,1,.L1477	# le
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,15
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1477:
#    DEM_POST_ASSERT_VOID()
	.d2line		8470
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		1,2,.L1474	# eq
# 
#    if (Dem_IsEventAvailable(EventId)
	.d2line		8472
.Llo1744:
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r4,96(r3)
	rlwinm		r3,r31,0,16,31		# EventId=r31
	diab.addi		r3,r3,-1
	se_srwi		r3,3
	lbzx		r0,r4,r3		# noErrors=r0
.Llo1745:
	diab.li		r4,1
	diab.addi		r3,r31,255		# EventId=r31
	rlwinm		r3,r3,0,29,31
	slw		r4,r4,r3
	rlwinm		r4,r4,0,24,31
	and.		r0,r0,r4		# noErrors=r0 noErrors=r0
.Llo1746:
	bc		1,2,.L1474	# eq
# #if (DEM_REPLACEMENT_EVENT_SUPPORT == STD_ON)
#       && Dem_BitArrayIsBitCleared(Dem_LCfg.p_replacement_events, EventId - 1U)
# #endif /* DEM_REPLACEMENT_EVENT_SUPPORT == STD_ON */
#       )
#    {
#       if (TRUE == IsEvMemStorageEnabled(EventId))
	.d2line		8478
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		IsEvMemStorageEnabled
	rlwinm		r3,r3,0,24,31		# EventId=r3 EventId=r3
	se_cmpi		r3,1		# EventId=r3
	bc		0,2,.L1474	# ne
#       {
#          if (TRUE == EnableConditionsFulfilled(EventId)) /* [SWS_Dem_00447] */
	.d2line		8480
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		EnableConditionsFulfilled
	rlwinm		r3,r3,0,24,31		# EventId=r3 EventId=r3
	se_cmpi		r3,1		# EventId=r3
	bc		0,2,.L1474	# ne
#          {
#             /* [SWS_Dem_00851] */
#             if (((DEM_INIT == Dem_InitState) && (DEM_CYCLE_STATE_START == GetOpCycleState(Dem_GetOpCycle(EventId)))) ||
	.d2line		8483
	lis		r3,Dem_InitState@ha		# EventId=r3
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0 EventId=r3
.Llo1747:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1485	# ne
.Llo1748:
	lis		r4,Dem_NvOpCycleState@ha
	e_add16i		r4,r4,Dem_NvOpCycleState@l
	lis		r5,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r5)		# EventId=r3
	lwz		r3,52(r3)		# EventId=r3 EventId=r3
	lwz		r5,Dem_pPbCfg@l(r5)
	lwz		r0,104(r5)		# noErrors=r0
.Llo1749:
	rlwinm		r5,r31,0,16,31		# EventId=r31
	se_add		r5,r0		# noErrors=r0
	lbz		r0,-1(r5)		# noErrors=r0
	lbzx		r0,r3,r0		# noErrors=r0 EventId=r3
	lbzx		r0,r4,r0		# noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		1,2,.L1484	# eq
.L1485:
.Llo1750:
	lis		r3,Dem_InitState@ha		# EventId=r3
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0 EventId=r3
.Llo1751:
	se_cmpi		r0,1		# noErrors=r0
	bc		0,2,.L1474	# ne
.L1484:
#                 (DEM_PREINIT == Dem_InitState))
#             {
#                UpdateEventState(EventId, EventStatus);
	.d2line		8486
.Llo1752:
	mr		r3,r31		# EventId=r3 EventId=r31
	mr		r4,r30		# EventStatus=r4 EventStatus=r30
	bl		UpdateEventState
.L1474:
#             }
#          }
#       }
#    }
# }
	.d2line		8491
	.d2epilogue_begin
.Llo1741:
	lmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4132:
	.type		Dem_ReportErrorStatus,@function
	.size		Dem_ReportErrorStatus,.-Dem_ReportErrorStatus
# Number of nodes = 146

# Allocations for Dem_ReportErrorStatus
#	?a4		EventId
#	?a5		EventStatus
#	?a6		noErrors
# FUNC(Dem_ReturnGetStatusOfDTCType, DEM_CODE) Dem_DcmGetStatusOfDTC(uint32 DTC,
	.align		2
	.section	.text_vle
        .d2line         8494,46
#$$ld
.L4140:

#$$bf	Dem_DcmGetStatusOfDTC,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetStatusOfDTC
	.d2_cfa_start __cie
Dem_DcmGetStatusOfDTC:
.Llo1753:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo1772:
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)		# retVal=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# DTCOrigin=r30 DTCOrigin=r4
.Llo1757:
	mr		r28,r5		# DTCStatus=r28 DTCStatus=r5
	.d2prologue_end
#       Dem_DTCOriginType DTCOrigin,
#       P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) DTCStatus)
# {
#    uint16 intDtc;
#    Dem_ReturnGetStatusOfDTCType retVal = DEM_STATUS_OK;
	.d2line		8499
.Llo1758:
	diab.li		r0,0		# retVal=r0
#    uint8 internalOrigin = GetInternalDTCOriginIndex(DTCOrigin);
# 
#    DEM_PRE_ASSERT()
	.d2line		8502
.Llo1773:
	diab.li		r4,1		# noErrors=r4
	.d2line		8500
.Llo1790:
	mr		r3,r30		# DTCOrigin=r3 DTCOrigin=r30
.Llo1754:
	bl		GetInternalDTCOriginIndex
.Llo1785:
	mr		r29,r3		# internalOrigin=r29 internalOrigin=r3
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETSTATUSOFDTC, DEM_INIT == Dem_InitState)
	.d2line		8503
	lis		r3,Dem_InitState@ha		# noErrors=r3
.Llo1786:
	lwz		r0,Dem_InitState@l(r3)		# retVal=r0 noErrors=r3
.Llo1774:
	se_cmpi		r0,2		# retVal=r0
	bc		1,2,.L1494	# eq
.Llo1755:
	diab.li		r3,54		# noErrors=r3
.Llo1762:
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,21
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1494:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMGETSTATUSOFDTC, DTC <= DEM_DTC_GROUP_ALL_DTCS)
	.d2line		8504
	diab.li		r0,16777215		# retVal=r0
.Llo1775:
	se_cmpl		r31,r0		# DTC=r31 retVal=r0
	bc		0,1,.L1495	# le
.Llo1776:
	diab.li		r3,54		# noErrors=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,21
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1495:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMGETSTATUSOFDTC, (DEM_DTC_ORIGIN_PRIMARY_MEMORY == DTCOrigin) || (DEM_DTC_ORIGIN_SECONDARY_MEMORY == DTCOrigin))
	.d2line		8505
	rlwinm		r3,r30,0,24,31		# noErrors=r3 DTCOrigin=r30
	se_cmpi		r3,1		# noErrors=r3
	bc		1,2,.L1496	# eq
	rlwinm		r3,r30,0,24,31		# noErrors=r3 DTCOrigin=r30
	se_cmpi		r3,4		# noErrors=r3
	bc		1,2,.L1496	# eq
	diab.li		r3,54		# noErrors=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,21
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1496:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETSTATUSOFDTC, NULL_PTR != DTCStatus)
	.d2line		8506
	se_cmpi		r28,0		# DTCStatus=r28
	bc		0,2,.L1497	# ne
	diab.li		r3,54		# noErrors=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,21
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1497:
#    DEM_POST_ASSERT_RETVAL(DEM_STATUS_FAILED)
	.d2line		8507
	rlwinm		r4,r4,0,24,31		# noErrors=r4 noErrors=r4
	se_cmpi		r4,0		# noErrors=r4
	bc		0,2,.L1498	# ne
.Llo1791:
	diab.li		r3,3		# noErrors=r3
	b		.L1493
.L1498:
# 
#    if ((DEM_INIT == Dem_InitState) && (NULL_PTR != DTCStatus) && (internalOrigin != DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX))
	.d2line		8509
	lis		r3,Dem_InitState@ha		# noErrors=r3
.Llo1792:
	lwz		r0,Dem_InitState@l(r3)		# retVal=r0 noErrors=r3
.Llo1777:
	se_cmpi		r0,2		# retVal=r0
	bc		0,2,.L1499	# ne
.Llo1778:
	se_cmpi		r28,0		# DTCStatus=r28
	bc		1,2,.L1499	# eq
	rlwinm		r3,r29,0,24,31		# noErrors=r3 internalOrigin=r29
.Llo1793:
	cmpi		0,0,r3,255		# noErrors=r3
	bc		1,2,.L1499	# eq
#    {
#       if (Dem_EvMemExist(internalOrigin))
	.d2line		8511
.Llo1787:
	lis		r3,(Dem_LCfg+20)@ha		# noErrors=r3
.Llo1794:
	e_add16i		r3,r3,(Dem_LCfg+20)@l		# noErrors=r3 noErrors=r3
.Llo1788:
	rlwinm		r29,r29,2,22,29		# internalOrigin=r29 internalOrigin=r29
.Llo1789:
	lwzx		r0,r3,r29		# retVal=r0 noErrors=r3
.Llo1779:
	se_cmpi		r0,0		# retVal=r0
	bc		1,2,.L1500	# eq
#       {
#          intDtc = GetIntDtcByUds(DTC, TRUE);
	.d2line		8513
.Llo1780:
	mr		r3,r31		# DTC=r3 DTC=r31
	diab.li		r4,1		# noErrors=r4
	bl		GetIntDtcByUds
.Llo1766:
	mr		r6,r3		# intDtc=r6 intDtc=r3
#          if (DEM_INT_DTC_INVALID != intDtc)
	.d2line		8514
	rlwinm		r3,r3,0,16,31		# intDtc=r3 intDtc=r3
	cmpli		0,0,r3,65535		# intDtc=r3
	bc		1,2,.L1501	# eq
#          {
#             retVal = (Dem_ReturnGetStatusOfDTCType)CheckOrigin(intDtc, DTCOrigin);
	.d2line		8516
.Llo1756:
	mr		r3,r6		# intDtc=r3 intDtc=r6
.Llo1767:
	mr		r4,r30		# DTCOrigin=r4 DTCOrigin=r30
	bl		CheckOrigin
.Llo1781:
	mr		r31,r3		# retVal=r31 retVal=r3
#             if (DEM_STATUS_OK == retVal)
	.d2line		8517
	rlwinm		r3,r3,0,24,31		# retVal=r3 retVal=r3
	se_cmpi		r3,0		# retVal=r3
	bc		0,2,.L1505	# ne
#             {
#                /* [SWS_Dem_00059], [SWS_Dem_00657], [SWS_Dem_01049] */
#                *DTCStatus = (Dem_UdsStatusByteType)(Dem_GetUdsStatusByIntDtc(intDtc) & DEM_DTC_STATUS_AVAILABILITY_MASK);
	.d2line		8520
.Llo1759:
	rlwinm		r3,r6,0,16,31		# retVal=r3 intDtc=r6
.Llo1782:
	bl		Dem_GetUdsStatusByIntDtc
.Llo1768:
	rlwinm		r0,r3,0,24,31		# retVal=r0 intDtc=r3
.Llo1769:
	stb		r3,0(r28)		# DTCStatus=r28 intDtc=r3
	b		.L1505
.L1501:
#             }
#          }
#          else
#          {
#             /* No matching DTC was found. */
#             retVal = DEM_STATUS_WRONG_DTC;
	.d2line		8526
.Llo1760:
	diab.li		r31,1		# retVal=r31
.Llo1770:
	b		.L1505
.L1500:
#          }
#       }
#       else
#       {
#          /* A non existent origin was requested */
#          retVal = DEM_STATUS_WRONG_DTCORIGIN;
	.d2line		8532
.Llo1771:
	diab.li		r31,2		# retVal=r31
.Llo1783:
	b		.L1505
.L1499:
#       }
#    }
#    else
#    {
#       retVal = DEM_STATUS_FAILED;
	.d2line		8537
.Llo1784:
	diab.li		r31,3		# retVal=r31
.L1505:
#    }
# 
#    return retVal;
	.d2line		8540
.Llo1761:
	rlwinm		r3,r31,0,24,31		# retVal=r3 retVal=r31
.L1493:
# }
	.d2line		8541
	.d2epilogue_begin
.Llo1763:
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
.Llo1764:
	lwz		r0,36(r1)		# retVal=r0
	mtspr		lr,r0		# retVal=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1765:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4141:
	.type		Dem_DcmGetStatusOfDTC,@function
	.size		Dem_DcmGetStatusOfDTC,.-Dem_DcmGetStatusOfDTC
# Number of nodes = 161

# Allocations for Dem_DcmGetStatusOfDTC
#	?a4		DTC
#	?a5		DTCOrigin
#	?a6		DTCStatus
#	?a7		intDtc
#	?a8		retVal
#	?a9		internalOrigin
#	?a10		noErrors
# FUNC(Dem_ReturnClearDTCType, Dem_CODE) Dem_DcmClearDTC(uint32 DTC, Dem_DTCFormatType DTCFormat, Dem_DTCOriginType DTCOrigin)
	.align		2
	.section	.text_vle
        .d2line         8544,40
#$$ld
.L4157:

#$$bf	Dem_DcmClearDTC,interprocedural,rasave,nostackparams
	.globl		Dem_DcmClearDTC
	.d2_cfa_start __cie
Dem_DcmClearDTC:
.Llo1795:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo1803:
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# DTCFormat=r30 DTCFormat=r4
	mr		r29,r5		# DTCOrigin=r29 DTCOrigin=r5
	.d2prologue_end
# {
#    Dem_ReturnClearDTCType retVal;
# 
#    DEM_PRE_ASSERT()
	.d2line		8548
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_DCMCLEARDTC, DEM_INIT == Dem_InitState)
	.d2line		8549
	lis		r3,Dem_InitState@ha
.Llo1796:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1517	# eq
.Llo1797:
	diab.li		r3,54
.Llo1799:
	diab.li		r4,0
	diab.li		r5,34
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1517:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMCLEARDTC, DTC <= DEM_DTC_GROUP_ALL_DTCS)
	.d2line		8550
	diab.li		r3,16777215
	se_cmpl		r31,r3		# DTC=r31
	bc		0,1,.L1518	# le
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,34
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1518:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMCLEARDTC, (DTCFormat == DEM_DTC_FORMAT_OBD) || (DTCFormat == DEM_DTC_FORMAT_UDS))
	.d2line		8551
	rlwinm		r4,r30,0,24,31		# DTCFormat=r30
	se_cmpi		r4,0
	bc		1,2,.L1519	# eq
	rlwinm		r4,r30,0,24,31		# DTCFormat=r30
	se_cmpi		r4,11
	bc		1,2,.L1519	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,34
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1519:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMCLEARDTC, (DEM_DTC_ORIGIN_PRIMARY_MEMORY == DTCOrigin) || (DEM_DTC_ORIGIN_SECONDARY_MEMORY == DTCOrigin))
	.d2line		8552
	rlwinm		r5,r29,0,24,31		# DTCOrigin=r29
	se_cmpi		r5,1
	bc		1,2,.L1520	# eq
	rlwinm		r5,r29,0,24,31		# DTCOrigin=r29
	se_cmpi		r5,4
	bc		1,2,.L1520	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,34
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1520:
#    DEM_POST_ASSERT_RETVAL(DEM_CLEAR_FAILED)
	.d2line		8553
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1521	# ne
.Llo1804:
	diab.li		r3,3
	b		.L1516
.L1521:
# 
#    if ((DEM_DTC_ORIGIN_PRIMARY_MEMORY == DTCOrigin) || (DEM_DTC_ORIGIN_SECONDARY_MEMORY == DTCOrigin))
	.d2line		8555
	rlwinm		r5,r29,0,24,31		# DTCOrigin=r29
	se_cmpi		r5,1
	bc		1,2,.L1524	# eq
	rlwinm		r5,r29,0,24,31		# DTCOrigin=r29
	se_cmpi		r5,4
	bc		0,2,.L1522	# ne
.L1524:
#    {
#       retVal = UserClearDTC(DEM_CLEAR_USER_DCM, DTC, DTCFormat, DTCOrigin);
	.d2line		8557
	mr		r6,r29		# DTCOrigin=r6 DTCOrigin=r29
	mr		r5,r30		# DTCFormat=r5 DTCFormat=r30
	mr		r4,r31		# DTC=r4 DTC=r31
	diab.li		r3,0
	bl		UserClearDTC
.Llo1800:
	mr		r3,r3		# retVal=r3 retVal=r3
	b		.L1523
.L1522:
#    }
#    else
#    {
#       retVal = DEM_CLEAR_WRONG_DTCORIGIN;
	.d2line		8561
.Llo1801:
	diab.li		r3,2		# retVal=r3
.L1523:
#    }
# 
#    return retVal;
	.d2line		8564
.Llo1798:
	rlwinm		r3,r3,0,24,31		# retVal=r3 retVal=r3
.L1516:
# }
	.d2line		8565
	.d2epilogue_begin
.Llo1802:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4158:
	.type		Dem_DcmClearDTC,@function
	.size		Dem_DcmClearDTC,.-Dem_DcmClearDTC
# Number of nodes = 112

# Allocations for Dem_DcmClearDTC
#	?a4		DTC
#	?a5		DTCFormat
#	?a6		DTCOrigin
#	?a7		retVal
#	?a8		noErrors
# FUNC(Dem_ReturnClearDTCType, Dem_CODE) Dem_ClearDTC(uint32 DTC, Dem_DTCFormatType DTCFormat, Dem_DTCOriginType DTCOrigin)
	.align		2
	.section	.text_vle
        .d2line         8583,40
#$$ld
.L4169:

#$$bf	Dem_ClearDTC,interprocedural,rasave,nostackparams
	.globl		Dem_ClearDTC
	.d2_cfa_start __cie
Dem_ClearDTC:
.Llo1805:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo1813:
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# DTCFormat=r30 DTCFormat=r4
	mr		r29,r5		# DTCOrigin=r29 DTCOrigin=r5
	.d2prologue_end
# {
#    Dem_ReturnClearDTCType retVal;
# 
#    DEM_PRE_ASSERT()
	.d2line		8587
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_CLEARDTC, DEM_INIT == Dem_InitState)
	.d2line		8588
	lis		r3,Dem_InitState@ha
.Llo1806:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1535	# eq
.Llo1807:
	diab.li		r3,54
.Llo1809:
	diab.li		r4,0
	diab.li		r5,35
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1535:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_CLEARDTC, DTC <= DEM_DTC_GROUP_ALL_DTCS)
	.d2line		8589
	diab.li		r3,16777215
	se_cmpl		r31,r3		# DTC=r31
	bc		0,1,.L1536	# le
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,35
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1536:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_CLEARDTC, (DTCFormat == DEM_DTC_FORMAT_OBD) || (DTCFormat == DEM_DTC_FORMAT_UDS))
	.d2line		8590
	rlwinm		r4,r30,0,24,31		# DTCFormat=r30
	se_cmpi		r4,0
	bc		1,2,.L1537	# eq
	rlwinm		r4,r30,0,24,31		# DTCFormat=r30
	se_cmpi		r4,11
	bc		1,2,.L1537	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,35
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1537:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_CLEARDTC, (DEM_DTC_ORIGIN_PRIMARY_MEMORY == DTCOrigin) || (DEM_DTC_ORIGIN_SECONDARY_MEMORY == DTCOrigin))
	.d2line		8591
	rlwinm		r5,r29,0,24,31		# DTCOrigin=r29
	se_cmpi		r5,1
	bc		1,2,.L1538	# eq
	rlwinm		r5,r29,0,24,31		# DTCOrigin=r29
	se_cmpi		r5,4
	bc		1,2,.L1538	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,35
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1538:
#    DEM_POST_ASSERT_RETVAL(DEM_CLEAR_FAILED)
	.d2line		8592
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1539	# ne
.Llo1814:
	diab.li		r3,3
	b		.L1534
.L1539:
# 
#    if ((DEM_DTC_ORIGIN_PRIMARY_MEMORY == DTCOrigin) || (DEM_DTC_ORIGIN_SECONDARY_MEMORY == DTCOrigin))
	.d2line		8594
	rlwinm		r5,r29,0,24,31		# DTCOrigin=r29
	se_cmpi		r5,1
	bc		1,2,.L1542	# eq
	rlwinm		r5,r29,0,24,31		# DTCOrigin=r29
	se_cmpi		r5,4
	bc		0,2,.L1540	# ne
.L1542:
#    {
#       retVal = UserClearDTC(DEM_CLEAR_USER_CDD, DTC, DTCFormat, DTCOrigin);
	.d2line		8596
	mr		r6,r29		# DTCOrigin=r6 DTCOrigin=r29
	mr		r5,r30		# DTCFormat=r5 DTCFormat=r30
	mr		r4,r31		# DTC=r4 DTC=r31
	diab.li		r3,1
	bl		UserClearDTC
.Llo1810:
	mr		r3,r3		# retVal=r3 retVal=r3
	b		.L1541
.L1540:
#    }
#    else
#    {
#       retVal = DEM_CLEAR_WRONG_DTCORIGIN;
	.d2line		8600
.Llo1811:
	diab.li		r3,2		# retVal=r3
.L1541:
#    }
# 
#    return retVal;
	.d2line		8603
.Llo1808:
	rlwinm		r3,r3,0,24,31		# retVal=r3 retVal=r3
.L1534:
# }
	.d2line		8604
	.d2epilogue_begin
.Llo1812:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4170:
	.type		Dem_ClearDTC,@function
	.size		Dem_ClearDTC,.-Dem_ClearDTC
# Number of nodes = 112

# Allocations for Dem_ClearDTC
#	?a4		DTC
#	?a5		DTCFormat
#	?a6		DTCOrigin
#	?a7		retVal
#	?a8		noErrors
# FUNC(void, DEM_CODE) Dem_MainFunction(void)
	.align		2
	.section	.text_vle
        .d2line         8611,22
#$$ld
.L4181:

#$$bf	Dem_MainFunction,interprocedural,rasave,nostackparams
	.globl		Dem_MainFunction
	.d2_cfa_start __cie
Dem_MainFunction:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
.Llo1815:
	stw		r0,20(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    DEM_PRE_ASSERT()
	.d2line		8613
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_MAINFUNCTION, DEM_INIT == Dem_InitState)
	.d2line		8614
	lis		r3,Dem_InitState@ha
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1553	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,85
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1553:
#    DEM_POST_ASSERT_VOID()
	.d2line		8615
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		1,2,.L1552	# eq
# 
# #if (STD_ON == DEM_NVM_SUPPORT)
#    if(Dem_NvStorageOngoing)
#    {
#       Dem_NvWriteStatusType writeStatus = Dem_NvCheckWriteCompleted();
#       if (DEM_NV_WRITE_PENDING != writeStatus)
#       {
# #if (DEM_CLRRESP_NONVOLATILE_FINISH == DEM_CLEAR_DTC_BEHAVIOR)
#          if (DEM_CLEAR_NV_WRITE_PENDING == DemClearState)
#          {
#             /* [SWS_Dem_00572]
#              * The immediate storage was triggered by a ClearDTC-call. The clearing process has now finished.
#              */
#             DemClearState = DEM_CLEAR_FINISHED;
# 
#             if (DEM_NV_WRITE_NOT_OK == writeStatus)
#             {
#                /* [SWS_Dem_01057] */
#                DemClearData.response = DEM_CLEAR_MEMORY_ERROR;
#             }
#          }
# #endif /* DEM_CLEAR_DTC_BEHAVIOR */
#       }
#    }
# #endif /* STD_ON == DEM_NVM_SUPPORT */
# 
#    /* Check init-state, to protect NV-ram at shutdown. */
#    if (DEM_INIT == Dem_InitState)
	.d2line		8643
.Llo1816:
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo1817:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1552	# ne
#    {
# #if (STD_ON == DEM_OBD_SUPPORT)
#       if ((execCtr % DEM_ODOMETER_TIME_SCHEDULE) == 0)
#       {
#          CalculateOdometerAndTime();
#          execCtr = 0;
#       }
#       execCtr++;
# #endif /* STD_ON == DEM_OBD_SUPPORT */
# 
# #if (STD_ON == DEM_DB_TIME_BASED)
#       DebouncingTime();
# #endif /* STD_ON == DEM_DB_TIME_BASED */
# 
#       /* [VSTAR_Dem_00288] */
#       if (!Dem_NvStorageOngoing)
	.d2line		8659
.Llo1818:
	lis		r3,Dem_NvStorageOngoing@ha
	lbz		r0,Dem_NvStorageOngoing@l(r3)		# noErrors=r0
.Llo1819:
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1552	# ne
#       {
#          if (!HandleOpCycleChanges())
	.d2line		8661
.Llo1820:
	bl		HandleOpCycleChanges
	e_andi.		r3,r3,255
	bc		0,2,.L1557	# ne
#          {
#             /* Pause asynchronous event handling while performing the cycle state changes */
#             HandleEventStateBuffer();
	.d2line		8664
	bl		HandleEventStateBuffer
#             HandleClear();
	.d2line		8665
	bl		HandleClear
.L1557:
#          }
# 
#          if (TRUE == UdsStatusModified)
	.d2line		8668
	lis		r3,UdsStatusModified@ha
	lbz		r0,UdsStatusModified@l(r3)		# noErrors=r0
.Llo1821:
	se_cmpi		r0,1		# noErrors=r0
	bc		0,2,.L1558	# ne
#          {
#             UpdateEventStatusPerEntry();
	.d2line		8670
.Llo1822:
	bl		UpdateEventStatusPerEntry
#             UdsStatusModified = FALSE;
	.d2line		8671
	diab.li		r0,0		# noErrors=r0
.Llo1823:
	lis		r3,UdsStatusModified@ha
	e_add16i		r3,r3,UdsStatusModified@l
	stb		r0,0(r3)		# noErrors=r0
.L1558:
#          }
# 
#          if (TRUE == Dem_SiModified)
	.d2line		8674
.Llo1824:
	lis		r3,Dem_SiModified@ha
	lbz		r0,Dem_SiModified@l(r3)		# noErrors=r0
.Llo1825:
	se_cmpi		r0,1		# noErrors=r0
	bc		0,2,.L1559	# ne
#          {
#             UpdateSiPerEntry();
	.d2line		8676
.Llo1826:
	bl		UpdateSiPerEntry
#             Dem_SiModified = FALSE;
	.d2line		8677
	diab.li		r0,0		# noErrors=r0
.Llo1827:
	lis		r3,Dem_SiModified@ha
	e_add16i		r3,r3,Dem_SiModified@l
	stb		r0,0(r3)		# noErrors=r0
.L1559:
#          }
# 
#          if (UpdateIndicators)
	.d2line		8680
.Llo1828:
	lis		r3,UpdateIndicators@ha
	lbz		r0,UpdateIndicators@l(r3)		# noErrors=r0
.Llo1829:
	se_cmpi		r0,0		# noErrors=r0
	bc		1,2,.L1552	# eq
#          {
#             Dem_CalculateIndicatorStatus();
	.d2line		8682
.Llo1830:
	bl		Dem_CalculateIndicatorStatus
# #if (STD_ON == DEM_OBD_SUPPORT)
#             UpdateMILStatus();
# #endif /* STD_ON == DEM_OBD_SUPPORT */
#             UpdateIndicators = FALSE;
	.d2line		8686
	diab.li		r0,0		# noErrors=r0
.Llo1831:
	lis		r3,UpdateIndicators@ha
	e_add16i		r3,r3,UpdateIndicators@l
	stb		r0,0(r3)		# noErrors=r0
.L1552:
#          }
# 
# #if (STD_ON == DEM_NVM_SUPPORT)
#          if (Dem_NvTriggerImmediateNvStorage)
#          {
#             HandleImmediateNvStorage();
#             Dem_NvTriggerImmediateNvStorage = FALSE;
#          }
# #endif /* STD_ON == DEM_NVM_SUPPORT */
#       }
#    }
# }
	.d2line		8698
	.d2epilogue_begin
.Llo1832:
	lwz		r0,20(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4182:
	.type		Dem_MainFunction,@function
	.size		Dem_MainFunction,.-Dem_MainFunction
# Number of nodes = 66

# Allocations for Dem_MainFunction
#	?a4		noErrors
# FUNC(Std_ReturnType, Dem_CODE) Dem_SetOperationCycleState(uint8 OperationCycleId,
	.align		2
	.section	.text_vle
        .d2line         8709,32
#$$ld
.L4188:

#$$bf	Dem_SetOperationCycleState,interprocedural,rasave,nostackparams
	.globl		Dem_SetOperationCycleState
	.d2_cfa_start __cie
Dem_SetOperationCycleState:
.Llo1833:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# OperationCycleId=r31 OperationCycleId=r3
	mr		r30,r4		# CycleState=r30 CycleState=r4
	.d2prologue_end
#                                                                Dem_OperationCycleStateType CycleState)
# {
#    Std_ReturnType retVal = E_NOT_OK;
	.d2line		8712
	diab.li		r29,1		# retVal=r29
#    Dem_SetOpCycleParamType newItem;
# 
#    DEM_PRE_ASSERT()
	.d2line		8715
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_SETOPERATIONCYCLESTATE, DEM_INIT == Dem_InitState)
	.d2line		8716
.Llo1838:
	lis		r3,Dem_InitState@ha
.Llo1834:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1567	# eq
.Llo1835:
	diab.li		r3,54
.Llo1837:
	diab.li		r4,0
	diab.li		r5,8
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1567:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_SETOPERATIONCYCLESTATE, OperationCycleId < Dem_LCfg.num_op_cycles)
	.d2line		8717
	rlwinm		r4,r31,0,24,31		# OperationCycleId=r31
	lis		r3,(Dem_LCfg+139)@ha
	lbz		r3,(Dem_LCfg+139)@l(r3)
	se_cmp		r4,r3
	bc		1,0,.L1568	# lt
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,8
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1568:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_SETOPERATIONCYCLESTATE, (DEM_CYCLE_STATE_START == CycleState) || (DEM_CYCLE_STATE_END == CycleState))
	.d2line		8718
	rlwinm		r4,r30,0,24,31		# CycleState=r30
	se_cmpi		r4,0
	bc		1,2,.L1569	# eq
	rlwinm		r4,r30,0,24,31		# CycleState=r30
	se_cmpi		r4,1
	bc		1,2,.L1569	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,8
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1569:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		8719
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1570	# ne
.Llo1839:
	diab.li		r3,1
	b		.L1566
.L1570:
# 
#    /* Check init-state, to protect NV-ram at shutdown. */
#    if (DEM_INIT == Dem_InitState)
	.d2line		8722
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo1840:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1571	# ne
#    {
#       /* Queue the requested state change. */
#       newItem.cycle_state = CycleState;
	.d2line		8725
.Llo1841:
	stb		r30,9(r1)		# CycleState=r30
#       newItem.operation_cycle_id = OperationCycleId;
	.d2line		8726
	stb		r31,8(r1)		# OperationCycleId=r31
#       if (OpCycleCircularQueuePut(&newItem))
	.d2line		8727
	diab.addi		r3,r1,8
	bl		OpCycleCircularQueuePut
	e_andi.		r3,r3,255
#       {
#          retVal = E_OK;
	.d2line		8729
	diab.li		r0,0		# noErrors=r0
.Llo1842:
	isel		r29,r29,r0,2		# retVal=r29 retVal=r29 noErrors=r0
.L1571:
#       }
#    }
# 
#    return retVal;
	.d2line		8733
.Llo1843:
	rlwinm		r3,r29,0,24,31		# retVal=r29
.L1566:
# }
	.d2line		8734
	.d2epilogue_begin
.Llo1836:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4189:
	.type		Dem_SetOperationCycleState,@function
	.size		Dem_SetOperationCycleState,.-Dem_SetOperationCycleState
# Number of nodes = 100

# Allocations for Dem_SetOperationCycleState
#	?a4		OperationCycleId
#	?a5		CycleState
#	?a6		retVal
#	SP,8		newItem
#	?a7		noErrors
# FUNC(Std_ReturnType, Dem_CODE) Dem_SetAgingCycleState(uint8 OperationCycleId)
	.align		2
	.section	.text_vle
        .d2line         8745,32
#$$ld
.L4201:

#$$bf	Dem_SetAgingCycleState,interprocedural,rasave,nostackparams
	.globl		Dem_SetAgingCycleState
	.d2_cfa_start __cie
Dem_SetAgingCycleState:
.Llo1844:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	30,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# OperationCycleId=r31 OperationCycleId=r3
	.d2prologue_end
# {
#    Std_ReturnType retVal = E_NOT_OK;
	.d2line		8747
	diab.li		r30,1		# retVal=r30
#    Dem_SetOpCycleParamType newItem;
# 
#    DEM_PRE_ASSERT()
	.d2line		8750
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_SETAGINGCYCLESTATE, DEM_INIT == Dem_InitState)
	.d2line		8751
.Llo1848:
	lis		r3,Dem_InitState@ha
.Llo1845:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1580	# eq
.Llo1846:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,17
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1580:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_SETAGINGCYCLESTATE, OperationCycleId < Dem_LCfg.num_op_cycles)
	.d2line		8752
	rlwinm		r4,r31,0,24,31		# OperationCycleId=r31
	lis		r3,(Dem_LCfg+139)@ha
	lbz		r3,(Dem_LCfg+139)@l(r3)
	se_cmp		r4,r3
	bc		1,0,.L1581	# lt
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,17
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1581:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		8753
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1582	# ne
.Llo1849:
	diab.li		r3,1
	b		.L1579
.L1582:
# 
#    /* Check init-state, to protect NV-ram at shutdown. */
#    if (DEM_INIT == Dem_InitState)
	.d2line		8756
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo1850:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1583	# ne
#    {
#       /* Queue the requested state change. */
#       newItem.cycle_state = DEM_CYCLE_STATE_AGING;
	.d2line		8759
.Llo1851:
	diab.li		r0,2		# noErrors=r0
.Llo1852:
	stb		r0,9(r1)		# noErrors=r0
#       newItem.operation_cycle_id = OperationCycleId;
	.d2line		8760
	stb		r31,8(r1)		# OperationCycleId=r31
#       if (OpCycleCircularQueuePut(&newItem))
	.d2line		8761
	diab.addi		r3,r1,8
	bl		OpCycleCircularQueuePut
.Llo1853:
	e_andi.		r3,r3,255
#       {
#          retVal = E_OK;
	.d2line		8763
	diab.li		r0,0		# noErrors=r0
.Llo1854:
	isel		r30,r30,r0,2		# retVal=r30 retVal=r30 noErrors=r0
.L1583:
#       }
#    }
# 
#    return retVal;
	.d2line		8767
.Llo1855:
	rlwinm		r3,r30,0,24,31		# retVal=r30
.L1579:
# }
	.d2line		8768
	.d2epilogue_begin
.Llo1847:
	lmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4202:
	.type		Dem_SetAgingCycleState,@function
	.size		Dem_SetAgingCycleState,.-Dem_SetAgingCycleState
# Number of nodes = 79

# Allocations for Dem_SetAgingCycleState
#	?a4		OperationCycleId
#	?a5		retVal
#	SP,8		newItem
#	?a6		noErrors
# FUNC(Std_ReturnType, Dem_CODE) Dem_GetEventExtendedDataRecord(Dem_EventIdType EventId,
	.align		2
	.section	.text_vle
        .d2line         8782,32
#$$ld
.L4212:

#$$bf	Dem_GetEventExtendedDataRecord,interprocedural,rasave,nostackparams
	.globl		Dem_GetEventExtendedDataRecord
	.d2_cfa_start __cie
Dem_GetEventExtendedDataRecord:
.Llo1856:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r25,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	25,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
	mr		r27,r4		# RecordNumber=r27 RecordNumber=r4
.Llo1901:
	mr		r30,r5		# DestBuffer=r30 DestBuffer=r5
	.d2prologue_end
#                                                                    uint8 RecordNumber,
#                                                                    P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) DestBuffer)
# {
#    Std_ReturnType retVal = E_NOT_OK;
	.d2line		8786
	diab.li		r29,1		# retVal=r29
# 
#    DEM_PRE_ASSERT()
	.d2line		8788
.Llo1867:
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_GETEVENTEXTENDEDDATARECORD, DEM_INIT == Dem_InitState)
	.d2line		8789
.Llo1876:
	lis		r3,Dem_InitState@ha
.Llo1857:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1591	# eq
.Llo1858:
	diab.li		r3,54
.Llo1862:
	diab.li		r4,0
	diab.li		r5,48
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1591:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_GETEVENTEXTENDEDDATARECORD, DestBuffer != NULL_PTR)
	.d2line		8790
	se_cmpi		r30,0		# DestBuffer=r30
	bc		0,2,.L1592	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,48
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1592:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_GETEVENTEXTENDEDDATARECORD, (EventId <= Dem_LCfg.num_events) && (EventId > 0))
	.d2line		8791
	rlwinm		r9,r31,0,16,31		# EventId=r31
	lis		r3,(Dem_LCfg+136)@ha
	lhz		r3,(Dem_LCfg+136)@l(r3)
	cmp		0,0,r9,r3
	bc		1,1,.L1608	# gt
	rlwinm		r3,r31,0,16,31		# EventId=r31
	se_cmpi		r3,0
	bc		1,1,.L1593	# gt
.L1608:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,48
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1593:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		8792
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1594	# ne
.Llo1877:
	diab.li		r3,1
	b		.L1590
.L1594:
# 
#    if ((DEM_INIT == Dem_InitState) && (NULL_PTR != DestBuffer) && (DEM_INT_DTC_INVALID != Dem_GetEventIntDtc(EventId)))
	.d2line		8794
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo1878:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1595	# ne
.Llo1879:
	se_cmpi		r30,0		# DestBuffer=r30
	bc		1,2,.L1595	# eq
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,128(r3)
	rlwinm		r9,r31,1,15,30		# EventId=r31
	add		r3,r3,r9
	lhz		r0,-2(r3)		# noErrors=r0
.Llo1880:
	cmpli		0,0,r0,65535		# noErrors=r0
	bc		1,2,.L1595	# eq
	.section	.text_vle
.L4222:
#    {
#       /*
#        * [SWS_Dem_01062]
#        * First, find the configured origin for the event.
#        * Second, check if that event is stored in the event memory.
#        */
#       CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(EventId);
#       CONST(uint8, AUTOMATIC) origin = GetDtcMemDest(intDtc);
#       CONST(uint8, AUTOMATIC) internalOrigin = GetInternalDTCOriginIndex(origin);
#       Dem_NvEvMemEntryPtrType pEvMemEntry = NULL_PTR;
	.d2line		8804
.Llo1881:
	diab.li		r0,0		# noErrors=r0
.Llo1882:
	stw		r0,12(r1)		# noErrors=r0
	.d2line		8801
	lis		r3,Dem_pPbCfg@ha		# internalOrigin=r3
.Llo1897:
	lwz		r4,Dem_pPbCfg@l(r3)		# internalOrigin=r3
	lwz		r4,128(r4)
	rlwinm		r9,r31,1,15,30		# EventId=r31
	add		r4,r4,r9
	lhz		r28,-2(r4)		# intDtc=r28
.Llo1894:
	mr		r28,r28		# intDtc=r28 intDtc=r28
	.d2line		8802
	lwz		r4,Dem_pPbCfg@l(r3)		# internalOrigin=r3
	lwz		r4,20(r4)
	lwz		r3,Dem_pPbCfg@l(r3)		# internalOrigin=r3 internalOrigin=r3
	lwz		r3,92(r3)		# internalOrigin=r3 internalOrigin=r3
	rlwinm		r7,r28,0,16,31		# intDtc=r28
	lbzx		r0,r3,r7		# noErrors=r0 internalOrigin=r3
.Llo1883:
	lbzx		r3,r4,r0		# internalOrigin=r3
.Llo1895:
	mr		r3,r3		# origin=r3 origin=r3
	.d2line		8803
	mr		r3,r3		# origin=r3 origin=r3
.Llo1896:
	bl		GetInternalDTCOriginIndex
.Llo1898:
	mr		r25,r3		# internalOrigin=r25 internalOrigin=r3
# 
#       if (DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX != internalOrigin)
	.d2line		8806
	rlwinm		r3,r3,0,24,31		# internalOrigin=r3 internalOrigin=r3
	cmpi		0,0,r3,255		# internalOrigin=r3
	bc		1,2,.L1596	# eq
#       {
#          /*
#           * MISRA-C:2004 RULE 16.10 VIOLATION:
#           * If a function returns error information, then that error information shall be tested.
#           * This function returns the index of and a pointer to (out parameter ppEvMemEntry) the event memory entry.
#           * In this case the index is not needed.
#           */
#          (void)GetExistingEventMemoryEntry(intDtc, internalOrigin, &pEvMemEntry);
	.d2line		8814
.Llo1899:
	diab.addi		r5,r1,12
.Llo1900:
	mr		r3,r28		# intDtc=r3 intDtc=r28
	mr		r4,r25		# internalOrigin=r4 internalOrigin=r25
	bl		GetExistingEventMemoryEntry
.L1596:
#       }
# 
#       if (NULL_PTR != pEvMemEntry)
	.d2line		8817
	lwz		r0,12(r1)		# noErrors=r0
.Llo1884:
	se_cmpi		r0,0		# noErrors=r0
	bc		1,2,.L1595	# eq
#       {
#          if (0xFFU == RecordNumber)
	.d2line		8819
.Llo1885:
	rlwinm		r3,r27,0,24,31		# internalOrigin=r3 RecordNumber=r27
	cmpi		0,0,r3,255		# internalOrigin=r3
	bc		0,2,.L1598	# ne
	.section	.text_vle
.L4233:
#          {
#             uint8 i;
#             uint16 bufSize = (uint16)sizeof(Dem_MaxDataValueType);
	.d2line		8822
.Llo1863:
	diab.li		r26,1		# bufSize=r26
#             retVal = E_OK;
	.d2line		8823
.Llo1902:
	diab.li		r29,0		# retVal=r29
#             for (i = 0x01U; ((i <= 0xefU) && (E_OK == retVal)); i++)
	.d2line		8824
.Llo1868:
	diab.li		r27,1		# RecordNumber=r27
.L1599:
.Llo1864:
	rlwinm		r3,r27,0,24,31		# internalOrigin=r3 i=r27
	cmpli		0,0,r3,239		# internalOrigin=r3
	bc		1,1,.L1595	# gt
	rlwinm		r3,r29,0,24,31		# internalOrigin=r3 retVal=r29
	se_cmpi		r3,0		# internalOrigin=r3
	bc		0,2,.L1595	# ne
	.section	.text_vle
.L4241:
#             {
#                CONST(uint16, AUTOMATIC) origBufSize = (uint16)sizeof(Dem_MaxDataValueType);
#                uint16 tmpBufSize = bufSize;
	.d2line		8827
.Llo1869:
	sth		r26,8(r1)		# bufSize=r26
#                CONST(Dem_ReturnGetExtendedDataRecordByDTCType, AUTOMATIC) updateBuffer = UpdateBufferWithExtendedData(i, internalOrigin, &DestBuffer[origBufSize - tmpBufSize], &tmpBufSize,
	.d2line		8828
	rlwinm		r5,r26,0,16,31		# bufSize=r26
	subfic		r5,r5,1
	se_add		r5,r30		# DestBuffer=r30
	lwz		r8,12(r1)
	diab.addi		r6,r1,8
	mr		r9,r31		# EventId=r9 EventId=r31
	mr		r3,r27		# i=r3 i=r27
	mr		r4,r25		# internalOrigin=r4 internalOrigin=r25
	mr		r7,r28		# intDtc=r7 intDtc=r28
	bl		UpdateBufferWithExtendedData
.Llo1903:
	mr		r3,r3		# updateBuffer=r3 updateBuffer=r3
#                                                   intDtc, pEvMemEntry, EventId);
#                if ((DEM_RECORD_WRONG_NUMBER == updateBuffer) || (DEM_RECORD_OK == updateBuffer))
	.d2line		8830
	rlwinm		r0,r3,0,24,31		# noErrors=r0 updateBuffer=r3
.Llo1886:
	se_cmpi		r0,3		# noErrors=r0
	bc		1,2,.L1609	# eq
.Llo1887:
	rlwinm		r0,r3,0,24,31		# noErrors=r0 updateBuffer=r3
.Llo1888:
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1602	# ne
.L1609:
#                {
#                   retVal = E_OK;
	.d2line		8832
.Llo1889:
	diab.li		r29,0		# retVal=r29
#                   if (DEM_RECORD_OK == updateBuffer)
	.d2line		8833
.Llo1870:
	rlwinm		r3,r3,0,24,31		# updateBuffer=r3 updateBuffer=r3
	se_cmpi		r3,0		# updateBuffer=r3
	bc		0,2,.L1604	# ne
#                   {
#                      bufSize -= tmpBufSize;
	.d2line		8835
.Llo1904:
	lhz		r0,8(r1)		# noErrors=r0
.Llo1890:
	subf		r0,r0,r26		# noErrors=r0 noErrors=r0 bufSize=r26
.Llo1891:
	mr		r26,r0		# bufSize=r26 bufSize=r0
	b		.L1604
.L1602:
#                   }
#                }
#                else
#                {
#                   retVal = E_NOT_OK;
	.d2line		8840
.Llo1871:
	diab.li		r29,1		# retVal=r29
.L1604:
	.section	.text_vle
.L4242:
#                }
#             }
	.d2line		8842
.Llo1872:
	diab.addi		r3,r27,1		# updateBuffer=r3 i=r27
	se_addi		r27,1		# i=r27 i=r27
	b		.L1599
	.section	.text_vle
.L4234:
.L1598:
	.section	.text_vle
.L4249:
#          }
#          else
#          {
#             uint16 bufSize = (uint16)sizeof(Dem_MaxDataValueType);
	.d2line		8846
.Llo1873:
	diab.li		r0,1		# noErrors=r0
.Llo1892:
	sth		r0,10(r1)		# noErrors=r0
#             if (DEM_RECORD_OK == UpdateBufferWithExtendedData(RecordNumber, internalOrigin, DestBuffer, &bufSize,
	.d2line		8847
	lwz		r8,12(r1)
	diab.addi		r6,r1,10
	mr		r9,r31		# EventId=r9 EventId=r31
	mr		r3,r27		# RecordNumber=r3 RecordNumber=r27
	mr		r4,r25		# internalOrigin=r4 internalOrigin=r25
	mr		r5,r30		# DestBuffer=r5 DestBuffer=r30
	mr		r7,r28		# intDtc=r7 intDtc=r28
	bl		UpdateBufferWithExtendedData
.Llo1893:
	rlwinm		r3,r3,0,24,31		# RecordNumber=r3 RecordNumber=r3
	se_cmpi		r3,0		# RecordNumber=r3
	bc		0,2,.L1606	# ne
#                                                               intDtc, pEvMemEntry, EventId))
#             {
#                retVal = E_OK;
	.d2line		8850
.Llo1859:
	diab.li		r29,0		# retVal=r29
.Llo1874:
	b		.L1595
.L1606:
#             }
#             else
#             {
#                retVal = E_NOT_OK;
	.d2line		8854
.Llo1875:
	diab.li		r29,1		# retVal=r29
	.section	.text_vle
.L4250:
	.section	.text_vle
.L4223:
.L1595:
#             }
#          }
#       }
#    }
# 
#    return retVal;
	.d2line		8860
.Llo1860:
	rlwinm		r3,r29,0,24,31		# internalOrigin=r3 retVal=r29
.L1590:
# }
	.d2line		8861
	.d2epilogue_begin
.Llo1861:
	lmw		r25,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	2,10
.Llo1865:
	lwz		r0,52(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1866:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4213:
	.type		Dem_GetEventExtendedDataRecord,@function
	.size		Dem_GetEventExtendedDataRecord,.-Dem_GetEventExtendedDataRecord
# Number of nodes = 264

# Allocations for Dem_GetEventExtendedDataRecord
#	?a4		EventId
#	?a5		RecordNumber
#	?a6		DestBuffer
#	?a7		retVal
#	?a8		noErrors
#	?a9		intDtc
#	?a10		origin
#	?a11		internalOrigin
#	SP,12		pEvMemEntry
#	?a12		i
#	?a13		bufSize
#	not allocated	origBufSize
#	SP,8		tmpBufSize
#	?a14		updateBuffer
#	SP,10		bufSize
# FUNC(Std_ReturnType, Dem_CODE) Dem_GetEventFreezeFrameData(Dem_EventIdType EventId,
	.align		2
	.section	.text_vle
        .d2line         8972,32
#$$ld
.L4256:

#$$bf	Dem_GetEventFreezeFrameData,interprocedural,rasave,nostackparams
	.globl		Dem_GetEventFreezeFrameData
	.d2_cfa_start __cie
Dem_GetEventFreezeFrameData:
.Llo1905:
	stwu		r1,-80(r1)		
	.d2_cfa_def_cfa_offset	80
	mfspr		r0,lr
	stmw		r20,32(r1)		# offset r1+32  0x20
	.d2_cfa_offset_list	20,31,1,1
	stw		r0,84(r1)
	.d2_cfa_offset    108,-1
	mr		r25,r3		# EventId=r25 EventId=r3
.Llo1959:
	mr		r24,r4		# RecordNumber=r24 RecordNumber=r4
	mr		r31,r5		# ReportTotalRecord=r31 ReportTotalRecord=r5
	mr		r30,r6		# DataId=r30 DataId=r6
	mr		r29,r7		# DestBuffer=r29 DestBuffer=r7
	.d2prologue_end
#                                                                 uint8 RecordNumber,
#                                                                 boolean ReportTotalRecord,
#                                                                 uint16 DataId,
#                                                                 P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) DestBuffer)
# {
#    Std_ReturnType retVal = E_NOT_OK;
	.d2line		8978
	diab.li		r28,1		# retVal=r28
#    Std_ReturnType commonRetVal = E_OK;
	.d2line		8979
.Llo1925:
	diab.li		r27,0		# commonRetVal=r27
#    Std_ReturnType specificRetVal = E_OK;
	.d2line		8980
.Llo1926:
	diab.li		r26,0
# 
#    DEM_PRE_ASSERT()
	.d2line		8982
.Llo1927:
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_GETEVENTFREEZEFRAMEDATA, DEM_INIT == Dem_InitState)
	.d2line		8983
.Llo1929:
	lis		r3,Dem_InitState@ha
.Llo1906:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1625	# eq
.Llo1907:
	diab.li		r3,54
.Llo1917:
	diab.li		r4,0
	diab.li		r5,49
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1625:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_GETEVENTFREEZEFRAMEDATA, (EventId <= Dem_LCfg.num_events) && (EventId > 0))
	.d2line		8984
	rlwinm		r4,r25,0,16,31		# EventId=r25
	lis		r3,(Dem_LCfg+136)@ha
	lhz		r3,(Dem_LCfg+136)@l(r3)
	se_cmp		r4,r3
	bc		1,1,.L1644	# gt
	rlwinm		r3,r25,0,16,31		# EventId=r25
	se_cmpi		r3,0
	bc		1,1,.L1626	# gt
.L1644:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,49
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1626:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_GETEVENTFREEZEFRAMEDATA, DestBuffer != NULL_PTR)
	.d2line		8985
	se_cmpi		r29,0		# DestBuffer=r29
	bc		0,2,.L1627	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,49
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1627:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		8986
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1628	# ne
.Llo1930:
	diab.li		r3,1
	b		.L1624
.L1628:
# 
#    if ((DEM_INIT == Dem_InitState) && (NULL_PTR != DestBuffer) && (DEM_INT_DTC_INVALID != Dem_GetEventIntDtc(EventId)))
	.d2line		8988
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo1931:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1629	# ne
.Llo1932:
	se_cmpi		r29,0		# DestBuffer=r29
	bc		1,2,.L1629	# eq
	lis		r3,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,128(r3)
	rlwinm		r4,r25,1,15,30		# EventId=r25
	se_add		r3,r4
	lhz		r0,-2(r3)		# noErrors=r0
.Llo1933:
	cmpli		0,0,r0,65535		# noErrors=r0
	bc		1,2,.L1629	# eq
	.section	.text_vle
.L4272:
#    {
#       /*
#       * [SWS_Dem_01062]
#       * First, find the configured origin for the event.
#       * Second, check if that event is stored in the event memory.
#       */
#       CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(EventId);
#       CONST(uint8, AUTOMATIC) ffRecNumClassIdx = GetDtcFFRecNumClass(intDtc);
#       CONST(uint8, AUTOMATIC) origin = GetDtcMemDest(intDtc);
#       CONST(uint8, AUTOMATIC) internalOrigin = GetInternalDTCOriginIndex(origin);
#       Dem_NvEvMemEntryPtrType pEvMemEntry = NULL_PTR;
	.d2line		8999
.Llo1934:
	diab.li		r0,0		# noErrors=r0
.Llo1935:
	stw		r0,16(r1)		# noErrors=r0
#       uint8 evMemEntryIndex = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		9000
	diab.li		r10,255		# evMemEntryIndex=r10
	.d2line		8995
.Llo1965:
	lis		r3,Dem_pPbCfg@ha
	lwz		r4,Dem_pPbCfg@l(r3)
	lwz		r0,128(r4)		# noErrors=r0
	rlwinm		r25,r25,1,15,30		# EventId=r25 EventId=r25
	se_add		r25,r0		# EventId=r25 EventId=r25 noErrors=r0
	lhz		r11,-2(r25)		# intDtc=r11 EventId=r25
.Llo1951:
	mr		r11,r11		# intDtc=r11 intDtc=r11
	.d2line		8996
	lwz		r4,36(r4)
	lwz		r5,Dem_pPbCfg@l(r3)
	lwz		r5,92(r5)
	rlwinm		r0,r11,0,16,31		# noErrors=r0 intDtc=r11
	lbzux		r6,r5,r0
	lbzx		r25,r4,r6		# EventId=r25
	mr		r25,r25		# ffRecNumClassIdx=r25 ffRecNumClassIdx=r25
	.d2line		8997
	lwz		r4,Dem_pPbCfg@l(r3)
	lwz		r4,20(r4)
	lwz		r3,Dem_pPbCfg@l(r3)
	lwz		r3,92(r3)
	lbzx		r0,r3,r0		# noErrors=r0
.Llo1936:
	lbzx		r3,r4,r0
.Llo1960:
	mr		r3,r3		# origin=r3 origin=r3
	.d2line		8998
	mr		r3,r3		# origin=r3 origin=r3
.Llo1961:
	bl		GetInternalDTCOriginIndex
.Llo1962:
	mr		r12,r3		# internalOrigin=r12 internalOrigin=r3
# 
#       if (DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX != internalOrigin)
	.d2line		9002
	rlwinm		r3,r12,0,24,31		# internalOrigin=r12
.Llo1963:
	cmpi		0,0,r3,255
	bc		1,2,.L1630	# eq
#       {
#          evMemEntryIndex = GetExistingEventMemoryEntry(intDtc, internalOrigin, &pEvMemEntry);
	.d2line		9004
.Llo1964:
	diab.addi		r5,r1,16
	mr		r3,r11		# intDtc=r3 intDtc=r11
	mr		r4,r12		# internalOrigin=r4 internalOrigin=r12
	bl		GetExistingEventMemoryEntry
	mr		r10,r3		# evMemEntryIndex=r10 evMemEntryIndex=r3
.L1630:
#       }
# 
#       if ((DEM_EV_MEM_ENTRY_INVALID != evMemEntryIndex) && (DEM_FF_REC_NUM_CLASS_INVALID != ffRecNumClassIdx))
	.d2line		9007
	rlwinm		r3,r10,0,24,31		# intDtc=r3 evMemEntryIndex=r10
	cmpi		0,0,r3,255		# intDtc=r3
	bc		1,2,.L1629	# eq
	rlwinm		r0,r25,0,24,31		# noErrors=r0 ffRecNumClassIdx=r25
.Llo1937:
	cmpi		0,0,r0,255		# noErrors=r0
	bc		1,2,.L1629	# eq
	.section	.text_vle
.L4287:
#       {
#          Dem_FreezeFrameType ffType;
# 
#          if ((0xffU == RecordNumber) && (0 != pEvMemEntry->num_stored_ff))
	.d2line		9011
.Llo1938:
	rlwinm		r4,r24,0,24,31		# internalOrigin=r4 RecordNumber=r24
	cmpi		0,0,r4,255		# internalOrigin=r4
	bc		0,2,.L1632	# ne
	lwz		r3,16(r1)		# intDtc=r3
	lbz		r0,11(r3)		# noErrors=r0 intDtc=r3
.Llo1939:
	se_cmpi		r0,0		# noErrors=r0
	bc		1,2,.L1632	# eq
#          {
#             /* 
#              * User requested latest stored freeze frame (record number 0xFF).
#              * Set record number to the latest stored standard freeze frame record, if any.
#              */
#             RecordNumber = GetFFRecordClassRecordNumber(ffRecNumClassIdx, pEvMemEntry->num_stored_ff - 1);
	.d2line		9017
.Llo1908:
	lis		r3,(Dem_LCfg+32)@ha		# intDtc=r3
	lwz		r3,(Dem_LCfg+32)@l(r3)		# intDtc=r3 intDtc=r3
.Llo1909:
	rlwinm		r25,r25,3,21,28		# ffRecNumClassIdx=r25 ffRecNumClassIdx=r25
.Llo1910:
	lwzx		r0,r3,r25		# noErrors=r0 intDtc=r3
.Llo1940:
	lwz		r3,16(r1)		# intDtc=r3
	lbz		r3,11(r3)		# intDtc=r3 intDtc=r3
	rlwinm		r3,r3,3,21,28		# intDtc=r3 intDtc=r3
	se_add		r3,r0		# intDtc=r3 intDtc=r3 noErrors=r0
	lbz		r24,-8(r3)		# RecordNumber=r24 intDtc=r3
	mr		r24,r24		# RecordNumber=r24 RecordNumber=r24
.L1632:
#          }
# 
#          if (IsFFRecordNumberValid(intDtc, RecordNumber, &ffType))
	.d2line		9020
.Llo1911:
	diab.addi		r5,r1,12
	mr		r3,r11		# intDtc=r3 intDtc=r11
	mr		r4,r24		# RecordNumber=r4 RecordNumber=r24
	bl		IsFFRecordNumberValid
	rlwinm		r3,r3,0,24,31		# intDtc=r3 intDtc=r3
	se_cmpi		r3,0		# intDtc=r3
	bc		1,2,.L1629	# eq
	.section	.text_vle
.L4292:
#          {
#             P2CONST(Dem_DataStorageType, AUTOMATIC, DEM_APPL_CONST) pFFStorage = NULL_PTR;
	.d2line		9022
.Llo1912:
	diab.li		r9,0		# pFFStorage=r9
#             uint16 ffClass = DEM_FF_CLASS_INVALID;
	.d2line		9023
.Llo1970:
	diab.li		r25,65535		# ffClass=r25
#             uint16 commonFFClass = DEM_FF_CLASS_INVALID;
	.d2line		9024
.Llo1913:
	mr		r20,r25		# commonFFClass=r20 commonFFClass=r25
#             uint16 ffIndex;
#             
#             if (DEM_STANDARD_FREEZE_FRAME == ffType)
	.d2line		9027
	lwz		r0,12(r1)		# noErrors=r0
.Llo1941:
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1634	# ne
#             {
#                pFFStorage = Dem_LCfg.pp_ff_storage[internalOrigin];
	.d2line		9029
.Llo1942:
	lis		r3,(Dem_LCfg+48)@ha		# intDtc=r3
.Llo1952:
	e_add16i		r3,r3,(Dem_LCfg+48)@l		# intDtc=r3 intDtc=r3
	rlwinm		r4,r12,2,22,29		# RecordNumber=r4 internalOrigin=r12
	lwzx		r9,r3,r4		# pFFStorage=r9 intDtc=r3
	mr		r9,r9		# pFFStorage=r9 pFFStorage=r9
#                commonFFClass = GetCommonFFClass();
	.d2line		9030
	lis		r3,Dem_pPbCfg@ha		# intDtc=r3
	lwz		r4,Dem_pPbCfg@l(r3)		# RecordNumber=r4 intDtc=r3
	lwz		r4,112(r4)		# RecordNumber=r4 RecordNumber=r4
	lhz		r20,0(r4)		# ffClass=r20 RecordNumber=r4
	mr		r20,r20		# commonFFClass=r20 commonFFClass=r20
#                ffClass = GetDtcFFClass(intDtc);
	.d2line		9031
	lwz		r3,Dem_pPbCfg@l(r3)		# intDtc=r3 intDtc=r3
	lwz		r3,80(r3)		# intDtc=r3 intDtc=r3
	rlwinm		r11,r11,1,15,30		# intDtc=r11 intDtc=r11
	lhzx		r25,r3,r11		# ffClass=r25 intDtc=r3
	mr		r25,r25		# ffClass=r25 ffClass=r25
	b		.L1635
.L1634:
#             }
#             else if (DEM_DEV_A_FREEZE_FRAME == ffType)
	.d2line		9033
.Llo1953:
	lwz		r0,12(r1)		# noErrors=r0
.Llo1943:
	se_cmpi		r0,1		# noErrors=r0
	bc		0,2,.L1636	# ne
#             {
#                pFFStorage = Dem_LCfg.p_dev_a_ff_storage;
	.d2line		9035
.Llo1944:
	lis		r3,(Dem_LCfg+60)@ha		# intDtc=r3
.Llo1954:
	lwz		r9,(Dem_LCfg+60)@l(r3)		# pFFStorage=r9 intDtc=r3
	mr		r9,r9		# pFFStorage=r9 pFFStorage=r9
#                commonFFClass = GetCommonDevAFFClass();
	.d2line		9036
	lis		r3,Dem_pPbCfg@ha		# intDtc=r3
	lwz		r4,Dem_pPbCfg@l(r3)		# RecordNumber=r4 intDtc=r3
	lwz		r4,116(r4)		# RecordNumber=r4 RecordNumber=r4
	lhz		r20,0(r4)		# ffClass=r20 RecordNumber=r4
	mr		r20,r20		# commonFFClass=r20 commonFFClass=r20
#                ffClass = GetDtcDevAFFClass(intDtc);
	.d2line		9037
	lwz		r3,Dem_pPbCfg@l(r3)		# intDtc=r3 intDtc=r3
	lwz		r3,84(r3)		# intDtc=r3 intDtc=r3
	rlwinm		r11,r11,1,15,30		# intDtc=r11 intDtc=r11
	lhzx		r25,r3,r11		# ffClass=r25 intDtc=r3
	mr		r25,r25		# ffClass=r25 ffClass=r25
	b		.L1635
.L1636:
#             }
#             else if (DEM_DEV_B_FREEZE_FRAME == ffType)
	.d2line		9039
.Llo1955:
	lwz		r0,12(r1)		# noErrors=r0
.Llo1945:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1635	# ne
#             {
#                pFFStorage = Dem_LCfg.p_dev_b_ff_storage;
	.d2line		9041
.Llo1946:
	lis		r3,(Dem_LCfg+68)@ha		# intDtc=r3
.Llo1956:
	lwz		r9,(Dem_LCfg+68)@l(r3)		# pFFStorage=r9 intDtc=r3
	mr		r9,r9		# pFFStorage=r9 pFFStorage=r9
#                commonFFClass = DEM_FF_CLASS_INVALID;
	.d2line		9042
	diab.li		r20,65535		# commonFFClass=r20
#                ffClass = GetDtcDevBFFClass(intDtc);
	.d2line		9043
	lis		r3,Dem_pPbCfg@ha		# intDtc=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# intDtc=r3 intDtc=r3
	lwz		r3,88(r3)		# intDtc=r3 intDtc=r3
	rlwinm		r11,r11,1,15,30		# intDtc=r11 intDtc=r11
	lhzx		r25,r3,r11		# ffClass=r25 intDtc=r3
	mr		r25,r25		# ffClass=r25 ffClass=r25
.L1635:
#             }
#             else
#             {
#                /* DEM_OBD_FREEZE_FRAME */
# #if (DEM_OBD_SUPPORT == STD_ON) && (DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF)
#                pFFStorage = Dem_LCfg.p_obd_ff_storage;
#                ffClass = DEM_FF_CLASS_INVALID;
#                commonFFClass = DEM_FF_CLASS_INVALID;
# #endif /* DEM_OBD_SUPPORT == STD_ON && DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF */
#             }
# 
#             if ((TRUE == GetFFIndexByRecordNumber(evMemEntryIndex, internalOrigin, RecordNumber, ffType, &ffIndex)) &&
	.d2line		9055
.Llo1957:
	lwz		r6,12(r1)
.Llo1958:
	diab.addi		r7,r1,10
	mr		r3,r10		# evMemEntryIndex=r3 evMemEntryIndex=r10
	mr		r5,r24		# RecordNumber=r5 RecordNumber=r24
	mr		r4,r12		# internalOrigin=r4 internalOrigin=r12
	bl		GetFFIndexByRecordNumber
	rlwinm		r3,r3,0,24,31		# evMemEntryIndex=r3 evMemEntryIndex=r3
	se_cmpi		r3,1		# evMemEntryIndex=r3
	bc		0,2,.L1629	# ne
.Llo1918:
	cmpi		0,0,r9,0		# pFFStorage=r9
	bc		1,2,.L1629	# eq
	.section	.text_vle
.L4303:
#                (NULL_PTR != pFFStorage))
#             {
#                CONST(Uint8NvPtrType, AUTOMATIC) pFFData = pFFStorage->p_get_buffer_entry(ffIndex);
#                uint16 bufSize = (uint16)sizeof(Dem_MaxDataValueType);
	.d2line		9059
	diab.li		r23,1		# bufSize=r23
#                uint16 inOutSize = bufSize;
#                uint16 usedSize = 0;
	.d2line		9061
.Llo1972:
	diab.li		r22,0		# usedSize=r22
#                uint16 commonFFSize = 0;
	.d2line		9062
.Llo1973:
	mr		r21,r22		# commonFFSize=r21 commonFFSize=r22
	.d2line		9058
	lwz		r0,0(r9)		# noErrors=r0 pFFStorage=r9
	mtspr		ctr,r0		# noErrors=ctr
	lhz		r3,10(r1)		# evMemEntryIndex=r3
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
.Llo1971:
	mr		r24,r3		# pFFData=r24 pFFData=r3
	.d2line		9060
	sth		r23,8(r1)		# bufSize=r23
# 
# #if (DEM_OBD_SUPPORT == STD_ON) && (DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF)
#                if (DEM_OBD_FREEZE_FRAME == ffType)
#                {
#                   /* Special handling for OBD freeze frame. */
#                   retVal = GetOBDFreezeFrameData(ReportTotalRecord, DataId, pFFData, DestBuffer, &bufSize);
#                }
# #endif /* DEM_OBD_SUPPORT == STD_ON && DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF */
# 
#                /* Check common part of stored freeze frame */
#                if (commonFFClass != DEM_FF_CLASS_INVALID)
	.d2line		9073
	rlwinm		r5,r20,0,16,31		# RecordNumber=r5 commonFFClass=r20
.Llo1919:
	cmpli		0,0,r5,65535		# RecordNumber=r5
	bc		1,2,.L1641	# eq
#                {
#                   commonFFSize = Dem_LCfg.p_ff_length[commonFFClass];
	.d2line		9075
.Llo1920:
	lis		r3,(Dem_LCfg+120)@ha		# evMemEntryIndex=r3
.Llo1966:
	lwz		r3,(Dem_LCfg+120)@l(r3)		# evMemEntryIndex=r3 evMemEntryIndex=r3
	rlwinm		r5,r20,1,15,30		# RecordNumber=r5 commonFFClass=r20
	lhzx		r21,r3,r5		# usedSize=r21 evMemEntryIndex=r3
	mr		r21,r21		# commonFFSize=r21 commonFFSize=r21
#                   commonRetVal = FillBufferWithDidData(ReportTotalRecord, DataId, commonFFClass, pFFData, DestBuffer, &inOutSize);
	.d2line		9076
	diab.addi		r8,r1,8
	mr		r3,r31		# ReportTotalRecord=r3 ReportTotalRecord=r31
.Llo1967:
	mr		r4,r30		# DataId=r4 DataId=r30
	mr		r5,r20		# commonFFClass=r5 commonFFClass=r20
	mr		r6,r24		# pFFData=r6 pFFData=r24
	mr		r7,r29		# DestBuffer=r7 DestBuffer=r29
	bl		FillBufferWithDidData
	mr		r27,r3		# commonRetVal=r27 commonRetVal=r3
#                   usedSize += inOutSize;
	.d2line		9077
	lhz		r0,8(r1)		# noErrors=r0
.Llo1947:
	add		r0,r0,r22		# noErrors=r0 noErrors=r0 usedSize=r22
.Llo1948:
	mr		r22,r0		# usedSize=r22 usedSize=r0
#                   inOutSize = bufSize - usedSize;
	.d2line		9078
	subf		r7,r22,r23		# DestBuffer=r7 usedSize=r22 bufSize=r23
	sth		r7,8(r1)		# DestBuffer=r7
.L1641:
#                }
# 
#                /* Check specific part of stored freeze frame */
#                if (ffClass != DEM_FF_CLASS_INVALID)
	.d2line		9082
	rlwinm		r5,r25,0,16,31		# RecordNumber=r5 ffClass=r25
.Llo1921:
	cmpli		0,0,r5,65535		# RecordNumber=r5
	bc		1,2,.L1642	# eq
#                {
#                   specificRetVal = FillBufferWithDidData(ReportTotalRecord, DataId, ffClass, &pFFData[commonFFSize], &DestBuffer[usedSize], &inOutSize);
	.d2line		9084
.Llo1922:
	rlwinm		r6,r21,0,16,31		# evMemEntryIndex=r6 commonFFSize=r21
.Llo1968:
	se_add		r6,r24		# evMemEntryIndex=r6 evMemEntryIndex=r6 pFFData=r24
.Llo1969:
	rlwinm		r7,r22,0,16,31		# DestBuffer=r7 usedSize=r22
	se_add		r7,r29		# DestBuffer=r7 DestBuffer=r7 DestBuffer=r29
	diab.addi		r8,r1,8
	mr		r3,r31		# ReportTotalRecord=r3 ReportTotalRecord=r31
	mr		r4,r30		# DataId=r4 DataId=r30
	mr		r5,r25		# ffClass=r5 ffClass=r25
	bl		FillBufferWithDidData
	mr		r26,r3		# specificRetVal=r26 specificRetVal=r3
#                   usedSize += inOutSize;
	.d2line		9085
	lhz		r0,8(r1)		# noErrors=r0
.Llo1949:
	add		r0,r0,r22		# noErrors=r0 noErrors=r0 usedSize=r22
.Llo1950:
	mr		r22,r0		# usedSize=r22 usedSize=r0
.L1642:
#                }
# 
#                if ((E_OK == commonRetVal) && (E_OK == specificRetVal) && (usedSize > 0))
	.d2line		9088
	rlwinm		r27,r27,0,24,31		# commonRetVal=r27 commonRetVal=r27
	se_cmpi		r27,0		# commonRetVal=r27
	bc		0,2,.L1629	# ne
.Llo1914:
	rlwinm		r26,r26,0,24,31		# specificRetVal=r26 specificRetVal=r26
	se_cmpi		r26,0		# specificRetVal=r26
	bc		0,2,.L1629	# ne
.Llo1928:
	rlwinm		r22,r22,0,16,31		# usedSize=r22 usedSize=r22
.Llo1975:
	cmpi		0,0,r22,0		# usedSize=r22
	bc		0,1,.L1629	# le
#                {
#                   /* Buffer was large enough and data was filled in */
#                   retVal = E_OK;
	.d2line		9091
.Llo1974:
	diab.li		r28,0		# retVal=r28
	.section	.text_vle
.L4304:
	.section	.text_vle
.L4293:
	.section	.text_vle
.L4288:
	.section	.text_vle
.L4273:
.L1629:
#                }
#             }
#          }
#       }
#    }
# 
#    return retVal;
	.d2line		9098
.Llo1915:
	rlwinm		r3,r28,0,24,31		# intDtc=r3 retVal=r28
.L1624:
# }
	.d2line		9099
	.d2epilogue_begin
.Llo1916:
	lmw		r20,32(r1)		# offset r1+32  0x20
	.d2_cfa_restore_list	2,10
.Llo1923:
	lwz		r0,84(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	diab.addi		r1,r1,80		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1924:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4257:
	.type		Dem_GetEventFreezeFrameData,@function
	.size		Dem_GetEventFreezeFrameData,.-Dem_GetEventFreezeFrameData
# Number of nodes = 470

# Allocations for Dem_GetEventFreezeFrameData
#	?a4		EventId
#	?a5		RecordNumber
#	?a6		ReportTotalRecord
#	?a7		DataId
#	?a8		DestBuffer
#	?a9		retVal
#	?a10		commonRetVal
#	?a11		specificRetVal
#	?a12		noErrors
#	?a13		intDtc
#	?a14		ffRecNumClassIdx
#	?a15		origin
#	?a16		internalOrigin
#	SP,16		pEvMemEntry
#	?a17		evMemEntryIndex
#	SP,12		ffType
#	?a18		pFFStorage
#	?a19		ffClass
#	?a20		commonFFClass
#	SP,10		ffIndex
#	?a21		pFFData
#	?a22		bufSize
#	SP,8		inOutSize
#	?a23		usedSize
#	?a24		commonFFSize
# FUNC(Std_ReturnType, Dem_CODE) Dem_GetEventMemoryOverflow(Dem_DTCOriginType DTCOrigin,
	.align		2
	.section	.text_vle
        .d2line         9220,32
#$$ld
.L4318:

#$$bf	Dem_GetEventMemoryOverflow,interprocedural,rasave,nostackparams
	.globl		Dem_GetEventMemoryOverflow
	.d2_cfa_start __cie
Dem_GetEventMemoryOverflow:
.Llo1976:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTCOrigin=r31 DTCOrigin=r3
	mr		r30,r4		# OverflowIndication=r30 OverflowIndication=r4
	.d2prologue_end
#                                                           P2VAR(boolean, AUTOMATIC, RTE_APPL_DATA) OverflowIndication)
# {
#    Std_ReturnType retVal = E_NOT_OK;
	.d2line		9223
	diab.li		r29,1		# retVal=r29
#    uint8 internalOrigin;
# 
#    DEM_PRE_ASSERT()
	.d2line		9226
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_GETEVENTMEMORYOVERFLOW, DEM_INIT == Dem_InitState)
	.d2line		9227
.Llo1991:
	lis		r3,Dem_InitState@ha
.Llo1977:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1660	# eq
.Llo1978:
	diab.li		r3,54
.Llo1982:
	diab.li		r4,0
	diab.li		r5,50
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1660:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_GETEVENTMEMORYOVERFLOW, (DEM_DTC_ORIGIN_PRIMARY_MEMORY == DTCOrigin) || (DEM_DTC_ORIGIN_SECONDARY_MEMORY == DTCOrigin) || (DEM_DTC_ORIGIN_PERMANENT_MEMORY == DTCOrigin))
	.d2line		9228
	rlwinm		r3,r31,0,24,31		# DTCOrigin=r31
	se_cmpi		r3,1
	bc		1,2,.L1661	# eq
	rlwinm		r3,r31,0,24,31		# DTCOrigin=r31
	se_cmpi		r3,4
	bc		1,2,.L1661	# eq
	rlwinm		r3,r31,0,24,31		# DTCOrigin=r31
	se_cmpi		r3,3
	bc		1,2,.L1661	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,50
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1661:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_GETEVENTMEMORYOVERFLOW, NULL_PTR != OverflowIndication)
	.d2line		9229
	se_cmpi		r30,0		# OverflowIndication=r30
	bc		0,2,.L1662	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,50
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1662:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		9230
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1663	# ne
.Llo1992:
	diab.li		r3,1
	b		.L1659
.L1663:
# 
#    if ((DEM_INIT == Dem_InitState) && (NULL_PTR != OverflowIndication))
	.d2line		9232
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo1993:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1664	# ne
.Llo1994:
	se_cmpi		r30,0		# OverflowIndication=r30
	bc		1,2,.L1664	# eq
#    {
#       if(DEM_DTC_ORIGIN_PERMANENT_MEMORY == DTCOrigin)
	.d2line		9234
	rlwinm		r3,r31,0,24,31		# DTCOrigin=r31
	se_cmpi		r3,3
	bc		1,2,.L1664	# eq
#       {
# #if (STD_ON == DEM_OBD_PERMANENT_SUPPORT)
#          *OverflowIndication = Dem_NvOBDPermanent.overflow_ind;
#          retVal = E_OK;
# #endif /* STD_ON == DEM_OBD_PERMANENT_SUPPORT */
#       }
#       else
#       {
#          internalOrigin = GetInternalDTCOriginIndex(DTCOrigin);
	.d2line		9243
	mr		r3,r31		# DTCOrigin=r3 DTCOrigin=r31
	bl		GetInternalDTCOriginIndex
.Llo1985:
	mr		r0,r3		# internalOrigin=r0 internalOrigin=r3
# 
#          if (internalOrigin != DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX)
	.d2line		9245
	rlwinm		r3,r3,0,24,31		# internalOrigin=r3 internalOrigin=r3
.Llo1986:
	cmpi		0,0,r3,255		# internalOrigin=r3
.Llo1987:
	bc		1,2,.L1664	# eq
#          {
#             *OverflowIndication = Dem_IsSet(Dem_NvAdmin.event_memory_overflow_ind, Dem_OriginMasks[internalOrigin]);
	.d2line		9247
.Llo1979:
	lis		r3,(Dem_NvAdmin+8)@ha		# internalOrigin=r3
.Llo1988:
	lbz		r4,(Dem_NvAdmin+8)@l(r3)		# internalOrigin=r3
	lis		r3,Dem_OriginMasks@ha		# internalOrigin=r3
	e_add16i		r3,r3,Dem_OriginMasks@l		# internalOrigin=r3 internalOrigin=r3
.Llo1989:
	rlwinm		r0,r0,0,24,31		# internalOrigin=r0 internalOrigin=r0
.Llo1990:
	lbzx		r0,r3,r0		# internalOrigin=r0 internalOrigin=r3
	and		r4,r4,r0		# internalOrigin=r0
	addic		r0,r4,-1		# internalOrigin=r0
	subfe		r0,r0,r4		# internalOrigin=r0 internalOrigin=r0
	stb		r0,0(r30)		# OverflowIndication=r30 internalOrigin=r0
#             retVal = E_OK;
	.d2line		9248
	diab.li		r29,0		# retVal=r29
.L1664:
#          }
#       }
#    }
# 
#    return retVal;
	.d2line		9253
.Llo1980:
	rlwinm		r3,r29,0,24,31		# internalOrigin=r3 retVal=r29
.L1659:
# }
	.d2line		9254
	.d2epilogue_begin
.Llo1981:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
.Llo1983:
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo1984:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4319:
	.type		Dem_GetEventMemoryOverflow,@function
	.size		Dem_GetEventMemoryOverflow,.-Dem_GetEventMemoryOverflow
# Number of nodes = 115

# Allocations for Dem_GetEventMemoryOverflow
#	?a4		DTCOrigin
#	?a5		OverflowIndication
#	?a6		retVal
#	?a7		internalOrigin
#	?a8		noErrors
# FUNC(Std_ReturnType, Dem_CODE) Dem_SetDTCSuppression(uint32 DTC,
	.align		2
	.section	.text_vle
        .d2line         9267,32
#$$ld
.L4331:

#$$bf	Dem_SetDTCSuppression,interprocedural,rasave,nostackparams
	.globl		Dem_SetDTCSuppression
	.d2_cfa_start __cie
Dem_SetDTCSuppression:
.Llo1995:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo2012:
	stmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_offset_list	28,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# DTCFormat=r30 DTCFormat=r4
	mr		r29,r5		# SuppressionStatus=r29 SuppressionStatus=r5
	.d2prologue_end
#                                                           Dem_DTCFormatType DTCFormat,
#                                                           boolean SuppressionStatus)
# {
#    Std_ReturnType retVal = E_OK;
	.d2line		9271
	diab.li		r28,0		# retVal=r28
#    uint16 intDtc;
#    boolean found;
# 
#    DEM_PRE_ASSERT()
	.d2line		9275
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_SETDTCSUPPRESSION, DEM_INIT == Dem_InitState)
	.d2line		9276
	lis		r3,Dem_InitState@ha
.Llo1996:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1675	# eq
.Llo1997:
	diab.li		r3,54
.Llo2003:
	diab.li		r4,0
	diab.li		r5,51
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1675:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_SETDTCSUPPRESSION, (DTCFormat == DEM_DTC_FORMAT_OBD) || (DTCFormat == DEM_DTC_FORMAT_UDS))
	.d2line		9277
	rlwinm		r4,r30,0,24,31		# DTCFormat=r30
	se_cmpi		r4,0
	bc		1,2,.L1676	# eq
	rlwinm		r4,r30,0,24,31		# DTCFormat=r30
	se_cmpi		r4,11
	bc		1,2,.L1676	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,51
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1676:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_SETDTCSUPPRESSION, DTC <= DEM_DTC_GROUP_ALL_DTCS)
	.d2line		9278
	diab.li		r3,16777215
	se_cmpl		r31,r3		# DTC=r31
	bc		0,1,.L1677	# le
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,51
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1677:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		9279
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1678	# ne
.Llo2013:
	diab.li		r3,1
	b		.L1674
.L1678:
# 
#    if ((DEM_INIT == Dem_InitState) && (NULL_PTR != Dem_LCfg.p_dtc_suppressed))
	.d2line		9281
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2014:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1679	# ne
.Llo2015:
	lis		r3,(Dem_LCfg+116)@ha
	lwz		r0,(Dem_LCfg+116)@l(r3)		# noErrors=r0
.Llo2016:
	se_cmpi		r0,0		# noErrors=r0
	bc		1,2,.L1679	# eq
#    {
#       if (DEM_DTC_FORMAT_UDS == DTCFormat)
	.d2line		9283
.Llo2017:
	rlwinm		r30,r30,0,24,31		# DTCFormat=r30 DTCFormat=r30
	se_cmpi		r30,11		# DTCFormat=r30
	bc		0,2,.L1680	# ne
#       {
#          intDtc = GetIntDtcByUds(DTC, FALSE);
	.d2line		9285
.Llo2004:
	mr		r3,r31		# DTC=r3 DTC=r31
	diab.li		r4,0
	bl		GetIntDtcByUds
	sth		r3,8(r1)		# DTC=r3
#          if (DEM_INT_DTC_INVALID != intDtc)
	.d2line		9286
	rlwinm		r3,r3,0,16,31		# DTC=r3 DTC=r3
	cmpli		0,0,r3,65535		# DTC=r3
	bc		1,2,.L1681	# eq
#          {
#             retVal = SetDTCSuppression(intDtc, SuppressionStatus);
	.d2line		9288
.Llo1998:
	lhz		r3,8(r1)		# DTC=r3
	mr		r4,r29		# SuppressionStatus=r4 SuppressionStatus=r29
	bl		SetDTCSuppression
.Llo2009:
	mr		r28,r3		# retVal=r28 retVal=r3
	b		.L1688
.L1681:
#          }
#          else
#          {
#             /* No matching DTC was found. */
#             retVal = E_NOT_OK;
	.d2line		9293
.Llo2010:
	diab.li		r28,1		# retVal=r28
.Llo2011:
	b		.L1688
.L1680:
#          }
#       }
#       else
#       {
#          /* DEM_DTC_FORMAT_OBD: There can be several internal DTCs with the same DTC-value */
#          intDtc = 0;
	.d2line		9299
.Llo1999:
	diab.li		r30,0		# DTCFormat=r30
.Llo2005:
	sth		r30,8(r1)		# DTCFormat=r30
#          found = FALSE;
.L1684:
#          while (TRUE == GetIntDtcByObd(DTC, &intDtc))
	.d2line		9301
	diab.addi		r4,r1,8
	mr		r3,r31		# DTC=r3 DTC=r31
	bl		GetIntDtcByObd
	rlwinm		r3,r3,0,24,31		# DTC=r3 DTC=r3
	se_cmpi		r3,1		# DTC=r3
	bc		0,2,.L1685	# ne
#          {
#             found = TRUE;
	.d2line		9303
	diab.li		r30,1		# found=r30
#             if (E_NOT_OK == SetDTCSuppression(intDtc, SuppressionStatus))
	.d2line		9304
	lhz		r3,8(r1)		# DTC=r3
	mr		r4,r29		# SuppressionStatus=r4 SuppressionStatus=r29
	bl		SetDTCSuppression
	rlwinm		r3,r3,0,24,31		# DTC=r3 DTC=r3
	se_cmpi		r3,1		# DTC=r3
#             {
#                retVal = E_NOT_OK;
	.d2line		9306
	diab.li		r3,1		# DTC=r3
	isel		r28,r3,r28,2		# retVal=r28 DTC=r3 retVal=r28
.L1686:
#             }
#             intDtc++;
	.d2line		9308
	lhz		r3,8(r1)		# DTC=r3
	se_addi		r3,1		# DTC=r3 DTC=r3
	sth		r3,8(r1)		# DTC=r3
	b		.L1684
.L1685:
#          }
# 
#          if (FALSE == found)
	.d2line		9311
	rlwinm		r30,r30,0,24,31		# found=r30 found=r30
.Llo2006:
	se_cmpi		r30,0		# found=r30
	bc		0,2,.L1688	# ne
#          {
#             /* No matching DTC was found. */
#             retVal = E_NOT_OK;
	.d2line		9314
.Llo2000:
	diab.li		r28,1		# retVal=r28
	b		.L1688
.L1679:
#          }
#       }
#    }
#    else
#    {  /* DTC suppression not enabled */
#       retVal = E_NOT_OK;
	.d2line		9320
.Llo2001:
	diab.li		r28,1		# retVal=r28
.L1688:
#    }
# 
#    return retVal;
	.d2line		9323
.Llo2002:
	rlwinm		r3,r28,0,24,31		# DTC=r3 retVal=r28
.L1674:
# }
	.d2line		9324
	.d2epilogue_begin
.Llo2007:
	lmw		r28,16(r1)		# offset r1+16  0x10
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2008:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4332:
	.type		Dem_SetDTCSuppression,@function
	.size		Dem_SetDTCSuppression,.-Dem_SetDTCSuppression
# Number of nodes = 156

# Allocations for Dem_SetDTCSuppression
#	?a4		DTC
#	?a5		DTCFormat
#	?a6		SuppressionStatus
#	?a7		retVal
#	SP,8		intDtc
#	?a8		found
#	?a9		noErrors
# FUNC(Dem_ReturnControlDTCSettingType, DEM_CODE) Dem_DcmDisableDTCSetting(uint32 DTCGroup, Dem_DTCKindType DTCKind)
	.align		2
	.section	.text_vle
        .d2line         9327,49
#$$ld
.L4346:

#$$bf	Dem_DcmDisableDTCSetting,interprocedural,rasave,nostackparams
	.globl		Dem_DcmDisableDTCSetting
	.d2_cfa_start __cie
Dem_DcmDisableDTCSetting:
.Llo2018:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo2031:
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTCGroup=r31 DTCGroup=r3
	mr		r30,r4		# DTCKind=r30 DTCKind=r4
	.d2prologue_end
# {
#    uint8 intDtcGroup;
#    Dem_ReturnControlDTCSettingType retVal = DEM_CONTROL_DTC_SETTING_OK;
	.d2line		9330
	diab.li		r29,0		# retVal=r29
# 
#    DEM_PRE_ASSERT()
	.d2line		9332
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_DCMDISABLEDTCSETTING, DEM_INIT == Dem_InitState)
	.d2line		9333
	lis		r3,Dem_InitState@ha
.Llo2019:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1702	# eq
.Llo2020:
	diab.li		r3,54
.Llo2026:
	diab.li		r4,0
	diab.li		r5,36
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1702:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMDISABLEDTCSETTING, DTCGroup <= DEM_DTC_GROUP_ALL_DTCS)
	.d2line		9334
	diab.li		r3,16777215
	se_cmpl		r31,r3		# DTCGroup=r31
	bc		0,1,.L1703	# le
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,36
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1703:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMDISABLEDTCSETTING, (DEM_DTC_KIND_ALL_DTCS == DTCKind) ||
	.d2line		9335
	rlwinm		r4,r30,0,24,31		# DTCKind=r30
	se_cmpi		r4,1
	bc		1,2,.L1704	# eq
	rlwinm		r30,r30,0,24,31		# DTCKind=r30 DTCKind=r30
	se_cmpi		r30,2		# DTCKind=r30
	bc		0,2,.L1710	# ne
.Llo2027:
	se_cmpi		r31,0		# DTCGroup=r31
	bc		1,2,.L1704	# eq
.L1710:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,36
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1704:
#                          ((DEM_DTC_KIND_EMISSION_REL_DTCS == DTCKind) && (DEM_DTC_GROUP_EMISSION_REL_DTCS == DTCGroup)))
#    DEM_POST_ASSERT_RETVAL(DEM_CONTROL_DTC_SETTING_N_OK)
	.d2line		9337
.Llo2028:
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1705	# ne
.Llo2029:
	diab.li		r3,1
	b		.L1701
.L1705:
# 
#    if (DEM_INIT == Dem_InitState)
	.d2line		9339
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2032:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1706	# ne
#    {
#       if (TRUE == ConvertToIntDtcGroupId(DTCGroup, &intDtcGroup))
	.d2line		9341
.Llo2033:
	diab.addi		r4,r1,8
	mr		r3,r31		# DTCGroup=r3 DTCGroup=r31
	bl		ConvertToIntDtcGroupId
	rlwinm		r3,r3,0,24,31		# DTCGroup=r3 DTCGroup=r3
	se_cmpi		r3,1		# DTCGroup=r3
	bc		0,2,.L1707	# ne
#       {
#          /* [SWS_Dem_00079] */
#          Dem_LCfg.p_dtc_storage[intDtcGroup] = FALSE;
	.d2line		9344
.Llo2021:
	diab.li		r0,0		# noErrors=r0
.Llo2034:
	lis		r3,(Dem_LCfg+112)@ha		# DTCGroup=r3
.Llo2022:
	lwz		r3,(Dem_LCfg+112)@l(r3)		# DTCGroup=r3 DTCGroup=r3
	lbz		r4,8(r1)
	stbx		r0,r3,r4		# DTCGroup=r3 noErrors=r0
	b		.L1709
.L1707:
#       }
#       else
#       {
#          retVal = DEM_CONTROL_DTC_WRONG_DTCGROUP;
	.d2line		9348
.Llo2023:
	diab.li		r29,2		# retVal=r29
	b		.L1709
.L1706:
#       }
#    }
#    else
#    {
#       retVal = DEM_CONTROL_DTC_SETTING_N_OK;
	.d2line		9353
.Llo2024:
	diab.li		r29,1		# retVal=r29
.L1709:
#    }
# 
#    return retVal;
	.d2line		9356
.Llo2025:
	rlwinm		r3,r29,0,24,31		# DTCGroup=r3 retVal=r29
.L1701:
# }
	.d2line		9357
	.d2epilogue_begin
.Llo2030:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4347:
	.type		Dem_DcmDisableDTCSetting,@function
	.size		Dem_DcmDisableDTCSetting,.-Dem_DcmDisableDTCSetting
# Number of nodes = 103

# Allocations for Dem_DcmDisableDTCSetting
#	?a4		DTCGroup
#	?a5		DTCKind
#	SP,8		intDtcGroup
#	?a6		retVal
#	?a7		noErrors
# FUNC(Dem_ReturnControlDTCSettingType, DEM_CODE) Dem_DcmEnableDTCSetting(uint32 DTCGroup, Dem_DTCKindType DTCKind)
	.align		2
	.section	.text_vle
        .d2line         9360,49
#$$ld
.L4360:

#$$bf	Dem_DcmEnableDTCSetting,interprocedural,rasave,nostackparams
	.globl		Dem_DcmEnableDTCSetting
	.d2_cfa_start __cie
Dem_DcmEnableDTCSetting:
.Llo2035:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo2048:
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTCGroup=r31 DTCGroup=r3
	mr		r30,r4		# DTCKind=r30 DTCKind=r4
	.d2prologue_end
# {
#    uint8 intDtcGroup;
#    Dem_ReturnControlDTCSettingType retVal = DEM_CONTROL_DTC_SETTING_OK;
	.d2line		9363
	diab.li		r29,0		# retVal=r29
# 
#    DEM_PRE_ASSERT()
	.d2line		9365
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_DCMENABLEDTCSETTING, DEM_INIT == Dem_InitState)
	.d2line		9366
	lis		r3,Dem_InitState@ha
.Llo2036:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1721	# eq
.Llo2037:
	diab.li		r3,54
.Llo2043:
	diab.li		r4,0
	diab.li		r5,37
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1721:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMENABLEDTCSETTING, DTCGroup <= DEM_DTC_GROUP_ALL_DTCS)
	.d2line		9367
	diab.li		r3,16777215
	se_cmpl		r31,r3		# DTCGroup=r31
	bc		0,1,.L1722	# le
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,37
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1722:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMENABLEDTCSETTING, (DEM_DTC_KIND_ALL_DTCS == DTCKind) ||
	.d2line		9368
	rlwinm		r4,r30,0,24,31		# DTCKind=r30
	se_cmpi		r4,1
	bc		1,2,.L1723	# eq
	rlwinm		r30,r30,0,24,31		# DTCKind=r30 DTCKind=r30
	se_cmpi		r30,2		# DTCKind=r30
	bc		0,2,.L1729	# ne
.Llo2044:
	se_cmpi		r31,0		# DTCGroup=r31
	bc		1,2,.L1723	# eq
.L1729:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,37
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1723:
#                          ((DEM_DTC_KIND_EMISSION_REL_DTCS == DTCKind) && (DEM_DTC_GROUP_EMISSION_REL_DTCS == DTCGroup)))
#    DEM_POST_ASSERT_RETVAL(DEM_CONTROL_DTC_SETTING_N_OK)
	.d2line		9370
.Llo2045:
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1724	# ne
.Llo2046:
	diab.li		r3,1
	b		.L1720
.L1724:
# 
#    if(DEM_INIT == Dem_InitState)
	.d2line		9372
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2049:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1725	# ne
#    {
#       if (TRUE == ConvertToIntDtcGroupId(DTCGroup, &intDtcGroup))
	.d2line		9374
.Llo2050:
	diab.addi		r4,r1,8
	mr		r3,r31		# DTCGroup=r3 DTCGroup=r31
	bl		ConvertToIntDtcGroupId
	rlwinm		r3,r3,0,24,31		# DTCGroup=r3 DTCGroup=r3
	se_cmpi		r3,1		# DTCGroup=r3
	bc		0,2,.L1726	# ne
#       {
#          /* [SWS_Dem_00080] */
#          Dem_LCfg.p_dtc_storage[intDtcGroup] = TRUE;
	.d2line		9377
.Llo2038:
	diab.li		r0,1		# noErrors=r0
.Llo2051:
	lis		r3,(Dem_LCfg+112)@ha		# DTCGroup=r3
.Llo2039:
	lwz		r3,(Dem_LCfg+112)@l(r3)		# DTCGroup=r3 DTCGroup=r3
	lbz		r4,8(r1)
	stbx		r0,r3,r4		# DTCGroup=r3 noErrors=r0
	b		.L1728
.L1726:
#       }
#       else
#       {
#          retVal = DEM_CONTROL_DTC_WRONG_DTCGROUP;
	.d2line		9381
.Llo2040:
	diab.li		r29,2		# retVal=r29
	b		.L1728
.L1725:
#       }
#    }
#    else
#    {
#       retVal = DEM_CONTROL_DTC_SETTING_N_OK;
	.d2line		9386
.Llo2041:
	diab.li		r29,1		# retVal=r29
.L1728:
#    }
#    return retVal;
	.d2line		9388
.Llo2042:
	rlwinm		r3,r29,0,24,31		# DTCGroup=r3 retVal=r29
.L1720:
# }
	.d2line		9389
	.d2epilogue_begin
.Llo2047:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4361:
	.type		Dem_DcmEnableDTCSetting,@function
	.size		Dem_DcmEnableDTCSetting,.-Dem_DcmEnableDTCSetting
# Number of nodes = 103

# Allocations for Dem_DcmEnableDTCSetting
#	?a4		DTCGroup
#	?a5		DTCKind
#	SP,8		intDtcGroup
#	?a6		retVal
#	?a7		noErrors
# FUNC(Dem_ReturnGetSeverityOfDTCType, DEM_CODE) Dem_DcmGetSeverityOfDTC(uint32 DTC,
	.align		2
	.section	.text_vle
        .d2line         9392,48
#$$ld
.L4372:

#$$bf	Dem_DcmGetSeverityOfDTC,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetSeverityOfDTC
	.d2_cfa_start __cie
Dem_DcmGetSeverityOfDTC:
.Llo2052:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo2070:
	stmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	30,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# DTCSeverity=r30 DTCSeverity=r4
	.d2prologue_end
#          P2VAR(Dem_DTCSeverityType, AUTOMATIC, DEM_APPL_DATA) DTCSeverity)
# {
#    uint16 intDtc;
#    Dem_ReturnGetSeverityOfDTCType retVal;
# 
#    DEM_PRE_ASSERT()
	.d2line		9398
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETSEVERITYOFDTC, DEM_INIT == Dem_InitState)
	.d2line		9399
	lis		r3,Dem_InitState@ha
.Llo2053:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1740	# eq
.Llo2054:
	diab.li		r3,54
.Llo2058:
	diab.li		r4,0
	diab.li		r5,14
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1740:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMGETSEVERITYOFDTC, DTC <= DEM_DTC_GROUP_ALL_DTCS)
	.d2line		9400
	diab.li		r3,16777215
	se_cmpl		r31,r3		# DTC=r31
	bc		0,1,.L1741	# le
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,14
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1741:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETSEVERITYOFDTC, NULL_PTR != DTCSeverity)
	.d2line		9401
	se_cmpi		r30,0		# DTCSeverity=r30
	bc		0,2,.L1742	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,14
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1742:
#    DEM_POST_ASSERT_RETVAL(DEM_GET_SEVERITYOFDTC_NOSEVERITY)
	.d2line		9402
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1743	# ne
.Llo2071:
	diab.li		r3,2
	b		.L1739
.L1743:
# 
#    if ((DEM_INIT == Dem_InitState) && (NULL_PTR != DTCSeverity))
	.d2line		9404
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2072:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1744	# ne
.Llo2073:
	se_cmpi		r30,0		# DTCSeverity=r30
	bc		1,2,.L1744	# eq
#    {
#       intDtc = GetIntDtcByUds(DTC, TRUE);
	.d2line		9406
	mr		r3,r31		# DTC=r3 DTC=r31
	diab.li		r4,1
	bl		GetIntDtcByUds
.Llo2061:
	mr		r0,r3		# intDtc=r0 intDtc=r3
#       if (DEM_INT_DTC_INVALID != intDtc)
	.d2line		9407
	rlwinm		r3,r3,0,16,31		# intDtc=r3 intDtc=r3
.Llo2062:
	cmpli		0,0,r3,65535		# intDtc=r3
.Llo2063:
	bc		1,2,.L1745	# eq
#       {
#         /* We found a DTC with correct DTCorigin */
#         *DTCSeverity = GetDtcSeverity(intDtc);
	.d2line		9410
.Llo2055:
	lis		r3,Dem_pPbCfg@ha		# intDtc=r3
.Llo2064:
	lwz		r3,Dem_pPbCfg@l(r3)		# intDtc=r3 intDtc=r3
	lwz		r3,68(r3)		# intDtc=r3 intDtc=r3
.Llo2065:
	rlwinm		r0,r0,0,16,31		# intDtc=r0 intDtc=r0
.Llo2066:
	lbzx		r0,r3,r0		# intDtc=r0 intDtc=r3
	stb		r0,0(r30)		# DTCSeverity=r30 intDtc=r0
#         retVal = DEM_GET_SEVERITYOFDTC_OK;
	.d2line		9411
	diab.li		r3,0		# retVal=r3
.Llo2067:
	b		.L1747
.L1745:
#       }
#       else
#       {
#          /* No matching DTC was found. */
#          retVal = DEM_GET_SEVERITYOFDTC_WRONG_DTC;
	.d2line		9416
.Llo2068:
	diab.li		r3,1		# retVal=r3
.Llo2069:
	b		.L1747
.L1744:
#       }
#    }
#    else
#    {
#       retVal = DEM_GET_SEVERITYOFDTC_NOSEVERITY;
	.d2line		9421
.Llo2056:
	diab.li		r3,2		# retVal=r3
.L1747:
#    }
# 
#    return retVal;
	.d2line		9424
.Llo2057:
	rlwinm		r3,r3,0,24,31		# retVal=r3 retVal=r3
.L1739:
# }
	.d2line		9425
	.d2epilogue_begin
.Llo2059:
	lmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2060:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4373:
	.type		Dem_DcmGetSeverityOfDTC,@function
	.size		Dem_DcmGetSeverityOfDTC,.-Dem_DcmGetSeverityOfDTC
# Number of nodes = 100

# Allocations for Dem_DcmGetSeverityOfDTC
#	?a4		DTC
#	?a5		DTCSeverity
#	?a6		intDtc
#	?a7		retVal
#	?a8		noErrors
# FUNC(Dem_ReturnGetFunctionalUnitOfDTCType, DEM_CODE) Dem_DcmGetFunctionalUnitOfDTC(uint32 DTC,
	.align		2
	.section	.text_vle
        .d2line         9428,54
#$$ld
.L4388:

#$$bf	Dem_DcmGetFunctionalUnitOfDTC,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetFunctionalUnitOfDTC
	.d2_cfa_start __cie
Dem_DcmGetFunctionalUnitOfDTC:
.Llo2074:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo2089:
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# DTCFunctionalUnit=r30 DTCFunctionalUnit=r4
	.d2prologue_end
#                                         P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) DTCFunctionalUnit)
# {
#    uint16 intDtc;
#    Dem_ReturnGetFunctionalUnitOfDTCType retVal = DEM_GET_FUNCTIONALUNITOFDTC_OK;
	.d2line		9432
	diab.li		r29,0		# retVal=r29
# 
#    DEM_PRE_ASSERT()
	.d2line		9434
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETFUNCTIONALUNITOFDTC, DEM_INIT == Dem_InitState)
	.d2line		9435
	lis		r3,Dem_InitState@ha
.Llo2075:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1757	# eq
.Llo2076:
	diab.li		r3,54
.Llo2080:
	diab.li		r4,0
	diab.li		r5,52
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1757:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMGETFUNCTIONALUNITOFDTC, DTC <= DEM_DTC_GROUP_ALL_DTCS)
	.d2line		9436
	diab.li		r3,16777215
	se_cmpl		r31,r3		# DTC=r31
	bc		0,1,.L1758	# le
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,52
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1758:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETFUNCTIONALUNITOFDTC, NULL_PTR != DTCFunctionalUnit)
	.d2line		9437
	se_cmpi		r30,0		# DTCFunctionalUnit=r30
	bc		0,2,.L1759	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,52
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1759:
#    DEM_POST_ASSERT_RETVAL(DEM_GET_FUNCTIONALUNITOFDTC_WRONG_DTC)
	.d2line		9438
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1760	# ne
.Llo2090:
	diab.li		r3,1
	b		.L1756
.L1760:
# 
#    if ((DEM_INIT == Dem_InitState) && (NULL_PTR != DTCFunctionalUnit))
	.d2line		9440
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2091:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1761	# ne
.Llo2092:
	se_cmpi		r30,0		# DTCFunctionalUnit=r30
	bc		1,2,.L1761	# eq
#    {   
#       intDtc = GetIntDtcByUds(DTC, TRUE);
	.d2line		9442
	mr		r3,r31		# DTC=r3 DTC=r31
	diab.li		r4,1
	bl		GetIntDtcByUds
.Llo2083:
	mr		r0,r3		# intDtc=r0 intDtc=r3
#       if (DEM_INT_DTC_INVALID != intDtc)
	.d2line		9443
	rlwinm		r3,r3,0,16,31		# intDtc=r3 intDtc=r3
.Llo2084:
	cmpli		0,0,r3,65535		# intDtc=r3
.Llo2085:
	bc		1,2,.L1762	# eq
#       {
#          *DTCFunctionalUnit = GetDtcFunctionalUnit(intDtc);
	.d2line		9445
.Llo2077:
	lis		r3,Dem_pPbCfg@ha		# intDtc=r3
.Llo2086:
	lwz		r3,Dem_pPbCfg@l(r3)		# intDtc=r3 intDtc=r3
	lwz		r3,64(r3)		# intDtc=r3 intDtc=r3
.Llo2087:
	rlwinm		r0,r0,0,16,31		# intDtc=r0 intDtc=r0
.Llo2088:
	lbzx		r0,r3,r0		# intDtc=r0 intDtc=r3
	stb		r0,0(r30)		# DTCFunctionalUnit=r30 intDtc=r0
	b		.L1764
.L1762:
#       }
#       else
#       {
#          /* No matching DTC was found. */
#          retVal = DEM_GET_FUNCTIONALUNITOFDTC_WRONG_DTC;
	.d2line		9450
	diab.li		r29,1		# retVal=r29
	b		.L1764
.L1761:
#       }
#    }
#    else
#    {
#       retVal = DEM_GET_FUNCTIONALUNITOFDTC_WRONG_DTC;
	.d2line		9455
.Llo2078:
	diab.li		r29,1		# retVal=r29
.L1764:
#    }
# 
#    return retVal;
	.d2line		9458
.Llo2079:
	rlwinm		r3,r29,0,24,31		# intDtc=r3 retVal=r29
.L1756:
# }
	.d2line		9459
	.d2epilogue_begin
.Llo2081:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2082:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4389:
	.type		Dem_DcmGetFunctionalUnitOfDTC,@function
	.size		Dem_DcmGetFunctionalUnitOfDTC,.-Dem_DcmGetFunctionalUnitOfDTC
# Number of nodes = 100

# Allocations for Dem_DcmGetFunctionalUnitOfDTC
#	?a4		DTC
#	?a5		DTCFunctionalUnit
#	?a6		intDtc
#	?a7		retVal
#	?a8		noErrors
# FUNC(Dem_DTCTranslationFormatType, DEM_CODE) Dem_DcmGetTranslationType(void)
	.align		2
	.section	.text_vle
        .d2line         9462,46
#$$ld
.L4402:

#$$bf	Dem_DcmGetTranslationType,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetTranslationType
	.d2_cfa_start __cie
Dem_DcmGetTranslationType:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
.Llo2093:
	stw		r0,20(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    DEM_PRE_ASSERT()
	.d2line		9464
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETTRANSLATIONTYPE, DEM_INIT == Dem_InitState)
	.d2line		9465
	lis		r4,Dem_InitState@ha
	lwz		r4,Dem_InitState@l(r4)
	se_cmpi		r4,2
	bc		1,2,.L1774	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,60
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1774:
#    DEM_POST_ASSERT_RETVAL(DEM_TYPE_OF_DTC_SUPPORTED)
	.d2line		9466
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	diab.li		r4,1
	isel		r3,r4,r3,2
.L1775:
# 
#    /* [SWS_Dem_00231] */
#    return DEM_TYPE_OF_DTC_SUPPORTED;
	.d2line		9469
.Llo2094:
	diab.li		r0,1		# noErrors=r0
.Llo2095:
	isel		r3,r3,r0,2		# noErrors=r0
.L1773:
# }
	.d2line		9470
	.d2epilogue_begin
.Llo2096:
	lwz		r0,20(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4403:
	.type		Dem_DcmGetTranslationType,@function
	.size		Dem_DcmGetTranslationType,.-Dem_DcmGetTranslationType
# Number of nodes = 28

# Allocations for Dem_DcmGetTranslationType
#	?a4		noErrors
# FUNC(Std_ReturnType, DEM_CODE) Dem_Internal_GetFaultDetectionCounter(Dem_EventIdType EventId,
	.align		2
	.section	.text_vle
        .d2line         11875,32
#$$ld
.L4410:

#$$bf	Dem_Internal_GetFaultDetectionCounter,interprocedural,rasave,nostackparams
	.globl		Dem_Internal_GetFaultDetectionCounter
	.d2_cfa_start __cie
Dem_Internal_GetFaultDetectionCounter:
.Llo2097:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r3,r3		# EventId=r3 EventId=r3
	mr.		r31,r4		# FaultDetectionCounter=?a5 FaultDetectionCounter=r4
	.d2prologue_end
#       P2VAR(sint8, AUTOMATIC, DEM_APPL_DATA) FaultDetectionCounter)
# {
#    Std_ReturnType retVal = E_NOT_OK;
	.d2line		11878
	diab.li		r4,1		# retVal=r4
# #if ((STD_ON == DEM_DB_TIME_BASED) || (STD_ON == DEM_DB_COUNTER_BASED))
#    sint32 counter;
#    uint16 counterIndex = Dem_LCfg.p_events[EventId - 1U].debounce_counter_idx;
	.d2line		11881
.Llo2109:
	lis		r5,(Dem_LCfg+16)@ha
	.d2line		11884
	lwz		r0,(Dem_LCfg+16)@l(r5)
	rlwinm		r5,r3,0,16,31		# EventId=r3
	e_mulli		r5,r5,20
	se_add		r5,r0
	lhz		r0,-4(r5)
.Llo2122:
	mr		r0,r0		# counterIndex=r0 counterIndex=r0
# #endif /* STD_ON == DEM_DB_TIME_BASED */
# 
#    if (NULL_PTR != FaultDetectionCounter)
	bc		1,2,.L2347	# eq
#    {
#       switch (Dem_LCfg.p_events[EventId - 1U].debounce_alg)
	.d2line		11886
.Llo2110:
	lis		r5,(Dem_LCfg+16)@ha
	lwz		r6,(Dem_LCfg+16)@l(r5)
	rlwinm		r5,r3,0,16,31		# EventId=r3
	e_mulli		r5,r5,20
	se_add		r5,r6
	lbz		r6,-1(r5)
	se_cmpi		r6,0
	bc		1,2,.L2348	# eq
	se_cmpi		r6,2
	bc		1,2,.L2354	# eq
	b		.L2347
.L2348:
#       {
#          case DEM_DB_MONITORINTERNAL:
#          {
#             if (NULL_PTR != Dem_LCfg.p_monitor_db_data[GetEventDbData(EventId)].pGetFDCnt)
	.d2line		11890
.Llo2112:
	lis		r4,(Dem_LCfg+132)@ha		# retVal=r4
.Llo2113:
	lwz		r5,(Dem_LCfg+132)@l(r4)		# retVal=r4
	lis		r4,Dem_pPbCfg@ha		# retVal=r4
	lwz		r4,Dem_pPbCfg@l(r4)		# retVal=r4 retVal=r4
	lwz		r4,100(r4)		# retVal=r4 retVal=r4
	rlwinm		r0,r3,0,16,31		# EventId=r3
	se_add		r4,r0		# retVal=r4 retVal=r4
	lbz		r0,-1(r4)		# retVal=r4
	rlwinm		r0,r0,2,22,29
	lwzx		r0,r5,r0
	se_cmpi		r0,0
	bc		1,2,.L2349	# eq
#             {
#                /* [SWS_Dem_00263] [SWS_Dem_00264] [SWS_Dem_00439]
#                 * Call corresponding function in monitor
#                 */
#                retVal = Dem_LCfg.p_monitor_db_data[GetEventDbData(EventId)].pGetFDCnt(FaultDetectionCounter);
	.d2line		11895
.Llo2098:
	lis		r4,(Dem_LCfg+132)@ha		# retVal=r4
.Llo2114:
	lwz		r5,(Dem_LCfg+132)@l(r4)		# retVal=r4
	lis		r4,Dem_pPbCfg@ha		# retVal=r4
	lwz		r4,Dem_pPbCfg@l(r4)		# retVal=r4 retVal=r4
	lwz		r0,100(r4)		# retVal=r4
.Llo2099:
	rlwinm		r3,r3,0,16,31		# EventId=r3 EventId=r3
	se_add		r3,r0		# EventId=r3 EventId=r3
	lbz		r0,-1(r3)		# EventId=r3
	rlwinm		r0,r0,2,22,29
	lwzx		r0,r5,r0
	mtspr		ctr,r0
	mr		r3,r31		# FaultDetectionCounter=r3 FaultDetectionCounter=r31
.Llo2100:
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 1 u
	bcctrl		20,0
.Llo2115:
	mr		r4,r3		# retVal=r4 retVal=r3
.Llo2116:
	b		.L2350
.L2349:
#             }
#             else
#             {
#                /* [SWS_Dem_00671] */
#                retVal = DEM_E_NO_FDC_AVAILABLE;
	.d2line		11900
.Llo2101:
	diab.li		r4,3		# retVal=r4
.L2350:
#             }
# 
#             if (E_OK != retVal)
	.d2line		11903
.Llo2102:
	rlwinm		r3,r4,0,24,31		# FaultDetectionCounter=r3 retVal=r4
	se_cmpi		r3,0		# FaultDetectionCounter=r3
	bc		1,2,.L2347	# eq
#             {
#                *FaultDetectionCounter = 0;
	.d2line		11905
	diab.li		r0,0
	stb		r0,0(r31)		# FaultDetectionCounter=r31
	b		.L2347
.L2354:
#             }
#             break;
#          }
#          case DEM_DB_TIME:
#          {
# #if (STD_ON == DEM_DB_TIME_BASED)
#             /* ---------- Enter critical section ---------- */
#             SchM_Enter_Dem_EaDebounceTime();
#             counter = Dem_LCfg.p_time_db_counter[counterIndex];
#             SchM_Exit_Dem_EaDebounceTime();
#             /* ---------- Exit critical section ----------- */
#             if (counter > 0)
#             {
#                /* Prefailed case: scale counter to the range 0 to 127 */
#                counter = (counter * (sint32)DEM_SINT8_MAX) / (sint32)GetDbTimeFailedThreshold(EventId);
#             }
#             else
#             {
#                /* Prepassed case: scale counter to the range 0 to -128 */
#                counter = (counter * (sint32)DEM_SINT8_MIN) / (sint32)GetDbTimePassedThreshold(EventId);
#             }
#             *FaultDetectionCounter = (sint8)counter;
#             retVal = E_OK;
# #endif /* STD_ON == DEM_DB_TIME_BASED */
#             break;
#          }
#          case DEM_DB_COUNTER:
#          {
# #if (STD_ON == DEM_DB_COUNTER_BASED)
#             counter = Dem_LCfg.p_counter_db_counter[counterIndex];
	.d2line		11935
.Llo2103:
	lis		r4,(Dem_LCfg+124)@ha		# retVal=r4
.Llo2117:
	lwz		r4,(Dem_LCfg+124)@l(r4)		# retVal=r4 retVal=r4
.Llo2123:
	rlwinm		r0,r0,1,15,30		# counterIndex=r0 counterIndex=r0
	lhax		r0,r4,r0		# counterIndex=r0 retVal=r4
	.d2line		11936
.Llo2121:
	mr.		r0,r0		# counter=?a7 counter=?a12
#             if (counter > 0)
.Llo2124:
	bc		0,1,.L2355	# le
#             {
#                /* Prefailed case: scale counter to the range 0 to 127 */
#                counter = (counter * DEM_SINT8_MAX) / (sint32)GetDbCounterFailedThreshold(EventId);
	.d2line		11939
.Llo2104:
	rlwinm		r4,r0,7,0,24		# retVal=r4 counter=r0
.Llo2118:
	subf		r0,r0,r4		# counter=r0 counter=r0 retVal=r4
	lis		r5,Dem_pPbCfg@ha
	lwz		r4,Dem_pPbCfg@l(r5)		# retVal=r4
	lwz		r6,120(r4)		# retVal=r4
	lwz		r4,100(r4)		# retVal=r4 retVal=r4
.Llo2105:
	rlwinm		r3,r3,0,16,31		# EventId=r3 EventId=r3
	se_add		r3,r4		# EventId=r3 EventId=r3 retVal=r4
	lbz		r3,-1(r3)		# EventId=r3 EventId=r3
	rlwinm		r3,r3,4,20,27		# EventId=r3 EventId=r3
	se_add		r6,r3		# EventId=r3
	lha		r3,4(r6)		# EventId=r3
	divw		r0,r0,r3		# counter=r0 counter=r0 EventId=r3
	mr		r0,r0		# counter=r0 counter=r0
	b		.L2356
.L2355:
#             }
#             else
#             {
#                /* Prepassed case: scale counter to the range 0 to -128 */
#                counter = (counter * DEM_SINT8_MIN) / (sint32)GetDbCounterPassedThreshold(EventId);
	.d2line		11944
.Llo2106:
	e_mulli		r0,r0,-128		# counter=r0 counter=r0
	lis		r5,Dem_pPbCfg@ha
	lwz		r4,Dem_pPbCfg@l(r5)		# retVal=r4
.Llo2119:
	lwz		r6,120(r4)		# retVal=r4
	lwz		r4,100(r4)		# retVal=r4 retVal=r4
.Llo2107:
	rlwinm		r3,r3,0,16,31		# EventId=r3 EventId=r3
	se_add		r3,r4		# EventId=r3 EventId=r3 retVal=r4
	lbz		r3,-1(r3)		# EventId=r3 EventId=r3
	rlwinm		r3,r3,4,20,27		# EventId=r3 EventId=r3
	se_add		r6,r3		# EventId=r3
	lha		r3,6(r6)		# EventId=r3
	divw		r0,r0,r3		# counter=r0 counter=r0 EventId=r3
	mr		r0,r0		# counter=r0 counter=r0
.L2356:
#             }
#             *FaultDetectionCounter = (sint8)counter;
	.d2line		11946
.Llo2108:
	stb		r0,0(r31)		# FaultDetectionCounter=r31 counter=r0
# 
#             retVal = E_OK;
	.d2line		11948
	diab.li		r4,0		# retVal=r4
.L2347:
# #endif /* STD_ON == DEM_DB_COUNTER_BASED */
#             break;
#          }
#          default:
#          {
#             /* The default case shall not be entered */
#             break;
#          }
#       }
#    }
#    return retVal;
	.d2line		11959
.Llo2111:
	rlwinm		r3,r4,0,24,31		# EventId=r3 retVal=r4
# }
	.d2line		11960
	.d2epilogue_begin
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# counter=r0
	mtspr		lr,r0		# counter=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2120:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4411:
	.type		Dem_Internal_GetFaultDetectionCounter,@function
	.size		Dem_Internal_GetFaultDetectionCounter,.-Dem_Internal_GetFaultDetectionCounter
# Number of nodes = 181

# Allocations for Dem_Internal_GetFaultDetectionCounter
#	?a4		EventId
#	?a5		FaultDetectionCounter
#	?a6		retVal
#	?a7		counter
#	?a8		counterIndex
# FUNC(Std_ReturnType, Dem_CODE) Dem_GetFaultDetectionCounter(Dem_EventIdType EventId,
	.align		2
	.section	.text_vle
        .d2line         9483,32
#$$ld
.L4425:

#$$bf	Dem_GetFaultDetectionCounter,interprocedural,rasave,nostackparams
	.globl		Dem_GetFaultDetectionCounter
	.d2_cfa_start __cie
Dem_GetFaultDetectionCounter:
.Llo2125:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
	mr		r30,r4		# FaultDetectionCounter=r30 FaultDetectionCounter=r4
	.d2prologue_end
#       P2VAR(sint8, AUTOMATIC, RTE_APPL_DATA) FaultDetectionCounter)
# {
#    Std_ReturnType retVal = E_NOT_OK;
	.d2line		9486
	diab.li		r29,1		# retVal=r29
# 
#    DEM_PRE_ASSERT()
	.d2line		9488
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_GETFAULTDETECTIONCOUNTER, DEM_INIT == Dem_InitState)
	.d2line		9489
.Llo2130:
	lis		r3,Dem_InitState@ha
.Llo2126:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1780	# eq
.Llo2127:
	diab.li		r3,54
.Llo2129:
	diab.li		r4,0
	diab.li		r5,62
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1780:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_GETFAULTDETECTIONCOUNTER, (EventId <= Dem_LCfg.num_events) && (EventId > 0))
	.d2line		9490
	rlwinm		r4,r31,0,16,31		# EventId=r31
	lis		r3,(Dem_LCfg+136)@ha
	lhz		r3,(Dem_LCfg+136)@l(r3)
	se_cmp		r4,r3
	bc		1,1,.L1785	# gt
	rlwinm		r3,r31,0,16,31		# EventId=r31
	se_cmpi		r3,0
	bc		1,1,.L1781	# gt
.L1785:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,62
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1781:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_GETFAULTDETECTIONCOUNTER, NULL_PTR != FaultDetectionCounter)
	.d2line		9491
	se_cmpi		r30,0		# FaultDetectionCounter=r30
	bc		0,2,.L1782	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,62
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1782:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		9492
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1783	# ne
.Llo2131:
	diab.li		r3,1
	b		.L1779
.L1783:
# 
#    if (DEM_INIT == Dem_InitState)
	.d2line		9494
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2132:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1784	# ne
#    {
#       retVal = Dem_Internal_GetFaultDetectionCounter(EventId, FaultDetectionCounter);
	.d2line		9496
.Llo2133:
	mr		r3,r31		# EventId=r3 EventId=r31
	mr		r4,r30		# FaultDetectionCounter=r4 FaultDetectionCounter=r30
	bl		Dem_Internal_GetFaultDetectionCounter
	mr		r29,r3		# retVal=r29 retVal=r3
.L1784:
#    }
# 
#    return retVal;
	.d2line		9499
	rlwinm		r3,r29,0,24,31		# EventId=r3 retVal=r29
.L1779:
# }
	.d2line		9500
	.d2epilogue_begin
.Llo2128:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4426:
	.type		Dem_GetFaultDetectionCounter,@function
	.size		Dem_GetFaultDetectionCounter,.-Dem_GetFaultDetectionCounter
# Number of nodes = 85

# Allocations for Dem_GetFaultDetectionCounter
#	?a4		EventId
#	?a5		FaultDetectionCounter
#	?a6		retVal
#	?a7		noErrors
# FUNC(Dem_ReturnSetFilterType, DEM_CODE) Dem_DcmSetDTCFilter(Dem_UdsStatusByteType DTCStatusMask, Dem_DTCKindType DTCKind,
	.align		2
	.section	.text_vle
        .d2line         9539,41
#$$ld
.L4436:

#$$bf	Dem_DcmSetDTCFilter,interprocedural,rasave,nostackparams
	.globl		Dem_DcmSetDTCFilter
	.d2_cfa_start __cie
Dem_DcmSetDTCFilter:
.Llo2134:
	stwu		r1,-64(r1)		
	.d2_cfa_def_cfa_offset	64
	mfspr		r0,lr
	stmw		r23,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	23,31,1,1
	stw		r0,68(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTCStatusMask=r31 DTCStatusMask=r3
	mr		r30,r4		# DTCKind=r30 DTCKind=r4
	mr		r29,r5		# DTCFormat=r29 DTCFormat=r5
	mr		r28,r6		# DTCOrigin=r28 DTCOrigin=r6
	mr		r27,r7		# FilterWithSeverity=r27 FilterWithSeverity=r7
	mr		r26,r8		# DTCSeverityMask=r26 DTCSeverityMask=r8
	mr		r25,r9		# FilterForFaultDetectionCounter=r25 FilterForFaultDetectionCounter=r9
	.d2prologue_end
#       Dem_DTCFormatType DTCFormat,
#       Dem_DTCOriginType DTCOrigin, boolean FilterWithSeverity,
#       Dem_DTCSeverityType DTCSeverityMask,
#       boolean FilterForFaultDetectionCounter)
# {
#    Dem_ReturnSetFilterType retVal = DEM_WRONG_FILTER;
	.d2line		9545
	diab.li		r24,1		# retVal=r24
# 
# #if (DEM_DEV_ERROR_DETECT == STD_ON)
#    uint8 internalOrigin = GetInternalDTCOriginIndex(DTCOrigin);
# #endif /* DEM_DEV_ERROR_DETECT == STD_ON */
# 
#    DEM_PRE_ASSERT()
	.d2line		9551
.Llo2144:
	diab.li		r4,1
	.d2line		9548
.Llo2140:
	mr		r3,r28		# DTCOrigin=r3 DTCOrigin=r28
.Llo2135:
	bl		GetInternalDTCOriginIndex
.Llo2145:
	mr		r23,r3		# internalOrigin=r23 internalOrigin=r3
#    DEM_ASSERT_UNINIT(DEM_SID_DCMSETDTCFILTER, DEM_INIT == Dem_InitState)
	.d2line		9552
	lis		r3,Dem_InitState@ha
.Llo2146:
	lwz		r0,Dem_InitState@l(r3)
	se_cmpi		r0,2
	bc		1,2,.L1794	# eq
.Llo2136:
	diab.li		r3,54
.Llo2141:
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,19
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1794:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMSETDTCFILTER, ((Dem_UdsStatusByteType)(DTCStatusMask & DEM_DTC_STATUS_AVAILABILITY_MASK) == DTCStatusMask))
	.d2line		9553
	rlwinm		r3,r31,0,24,31		# DTCStatusMask=r31
.L1795:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMSETDTCFILTER, (DEM_DTC_KIND_ALL_DTCS == DTCKind) || (DEM_DTC_KIND_EMISSION_REL_DTCS == DTCKind))
	.d2line		9554
	rlwinm		r0,r30,0,24,31		# DTCKind=r30
	se_cmpi		r0,1
	bc		1,2,.L1796	# eq
	rlwinm		r0,r30,0,24,31		# DTCKind=r30
	se_cmpi		r0,2
	bc		1,2,.L1796	# eq
	diab.li		r3,54
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,19
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1796:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMSETDTCFILTER, (DTCFormat == DEM_DTC_FORMAT_OBD) || (DTCFormat == DEM_DTC_FORMAT_UDS))
	.d2line		9555
	rlwinm		r5,r29,0,24,31		# DTCFormat=r29
	se_cmpi		r5,0
	bc		1,2,.L1797	# eq
	rlwinm		r5,r29,0,24,31		# DTCFormat=r29
	se_cmpi		r5,11
	bc		1,2,.L1797	# eq
	diab.li		r3,54
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,19
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1797:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMSETDTCFILTER, (DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX != internalOrigin) || (DEM_DTC_ORIGIN_PERMANENT_MEMORY == DTCOrigin))
	.d2line		9556
	rlwinm		r3,r23,0,24,31		# internalOrigin=r23
	cmpi		0,0,r3,255
	bc		0,2,.L1798	# ne
	rlwinm		r3,r28,0,24,31		# DTCOrigin=r28
	se_cmpi		r3,3
	bc		1,2,.L1798	# eq
	diab.li		r3,54
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,19
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1798:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMSETDTCFILTER, (TRUE == FilterWithSeverity) || (FALSE == FilterWithSeverity))
	.d2line		9557
	rlwinm		r7,r27,0,24,31		# FilterWithSeverity=r27
	se_cmpi		r7,1
	bc		1,2,.L1799	# eq
	rlwinm		r7,r27,0,24,31		# FilterWithSeverity=r27
	se_cmpi		r7,0
	bc		1,2,.L1799	# eq
	diab.li		r3,54
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,19
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1799:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMSETDTCFILTER, (Dem_DTCSeverityType)(DTCSeverityMask & DEM_ALLOWED_SEVERETIES) == DTCSeverityMask)
	.d2line		9558
	rlwinm		r8,r26,0,24,26		# DTCSeverityMask=r26
	rlwinm		r0,r26,0,24,31		# DTCSeverityMask=r26
	cmp		0,0,r8,r0
	bc		1,2,.L1800	# eq
	diab.li		r3,54
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,19
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1800:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMSETDTCFILTER, (TRUE == FilterForFaultDetectionCounter) || (FALSE == FilterForFaultDetectionCounter))
	.d2line		9559
	rlwinm		r9,r25,0,24,31		# FilterForFaultDetectionCounter=r25
	cmpi		0,0,r9,1
	bc		1,2,.L1801	# eq
	rlwinm		r9,r25,0,24,31		# FilterForFaultDetectionCounter=r25
	cmpi		0,0,r9,0
	bc		1,2,.L1801	# eq
	diab.li		r3,54
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,19
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1801:
# #if (STD_OFF == DEM_OBD_SUPPORT)
#    DEM_ASSERT_WRONG_CONFIGURATION(DEM_SID_DCMSETDTCFILTER, DEM_DTC_KIND_EMISSION_REL_DTCS != DTCKind); /* [SWS_Dem_01065] */
	.d2line		9561
	rlwinm		r0,r30,0,24,31		# DTCKind=r30
	se_cmpi		r0,2
	bc		0,2,.L1802	# ne
	diab.li		r3,54
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,19
	diab.li		r6,16
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1802:
#    DEM_ASSERT_WRONG_CONFIGURATION(DEM_SID_DCMSETDTCFILTER, DEM_DTC_FORMAT_OBD != DTCFormat); /* [SWS_Dem_01066] */
	.d2line		9562
	rlwinm		r5,r29,0,24,31		# DTCFormat=r29
	se_cmpi		r5,0
	bc		0,2,.L1803	# ne
	diab.li		r3,54
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,19
	diab.li		r6,16
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1803:
#    DEM_ASSERT_WRONG_CONFIGURATION(DEM_SID_DCMSETDTCFILTER, DEM_DTC_ORIGIN_PERMANENT_MEMORY != DTCOrigin); /* [SWS_Dem_01067] */
	.d2line		9563
	rlwinm		r3,r28,0,24,31		# DTCOrigin=r28
	se_cmpi		r3,3
	bc		0,2,.L1804	# ne
	diab.li		r3,54
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,19
	diab.li		r6,16
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1804:
# #endif /* STD_OFF == DEM_OBD_SUPPORT */
#    DEM_ASSERT_WRONG_CONFIGURATION(DEM_SID_DCMSETDTCFILTER, (DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX == internalOrigin) ||
	.d2line		9565
	rlwinm		r3,r23,0,24,31		# internalOrigin=r23
	cmpi		0,0,r3,255
	bc		1,2,.L1805	# eq
.Llo2147:
	lis		r3,(Dem_LCfg+20)@ha
	e_add16i		r3,r3,(Dem_LCfg+20)@l
.Llo2148:
	rlwinm		r23,r23,2,22,29		# internalOrigin=r23 internalOrigin=r23
.Llo2149:
	lwzx		r0,r3,r23
	se_cmpi		r0,0
	bc		0,2,.L1805	# ne
	diab.li		r3,54
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,19
	diab.li		r6,16
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1805:
#       Dem_EvMemExist(internalOrigin)); /* [SWS_Dem_01067] */
#    DEM_POST_ASSERT_RETVAL(DEM_WRONG_FILTER)
	.d2line		9567
.Llo2150:
	rlwinm		r4,r4,0,24,31		# noErrors=r4 noErrors=r4
	se_cmpi		r4,0		# noErrors=r4
	bc		0,2,.L1806	# ne
.Llo2151:
	diab.li		r3,1
	b		.L1793
.L1806:
# 
#    if (DEM_INIT == Dem_InitState)
	.d2line		9569
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)
	se_cmpi		r0,2
	bc		0,2,.L1807	# ne
#    {
#       /* [SWS_Dem_00057], [SWS_Dem_00649] */
#       DTCFilter.filter_active = TRUE;
	.d2line		9572
	diab.li		r0,1
	lis		r3,DTCFilter@ha
	e_add16i		r3,r3,DTCFilter@l
	stb		r0,0(r3)
#       DTCFilter.next_dtc_to_handle = 0;
	.d2line		9573
	diab.li		r0,0
	lis		r3,(DTCFilter+8)@ha
	sth		r0,(DTCFilter+8)@l(r3)
#       DTCFilter.current_ev_mem_entry = DEM_EV_MEM_ENTRY_INVALID;
	.d2line		9574
	diab.li		r0,255
	lis		r3,(DTCFilter+10)@ha
	stb		r0,(DTCFilter+10)@l(r3)
#       DTCFilter.status_mask = (Dem_UdsStatusByteType)(DTCStatusMask & DEM_DTC_STATUS_AVAILABILITY_MASK); /* [SWS_Dem_01058] */
	.d2line		9575
	rlwinm		r3,r31,0,24,31		# DTCStatusMask=r31
	lis		r3,(DTCFilter+1)@ha
	stb		r31,(DTCFilter+1)@l(r3)		# DTCStatusMask=r31
#       DTCFilter.dtc_kind = DTCKind;
	.d2line		9576
	lis		r3,(DTCFilter+2)@ha
	stb		r30,(DTCFilter+2)@l(r3)		# DTCKind=r30
#       DTCFilter.dtc_format = DTCFormat;
	.d2line		9577
	lis		r3,(DTCFilter+3)@ha
	stb		r29,(DTCFilter+3)@l(r3)		# DTCFormat=r29
#       DTCFilter.dtc_origin = DTCOrigin;
	.d2line		9578
	lis		r3,(DTCFilter+4)@ha
	stb		r28,(DTCFilter+4)@l(r3)		# DTCOrigin=r28
#       DTCFilter.dtc_severity_active = FilterWithSeverity;
	.d2line		9579
	lis		r3,(DTCFilter+5)@ha
	stb		r27,(DTCFilter+5)@l(r3)		# FilterWithSeverity=r27
#       DTCFilter.fdc_active = FilterForFaultDetectionCounter;
	.d2line		9580
	lis		r3,(DTCFilter+7)@ha
	stb		r25,(DTCFilter+7)@l(r3)		# FilterForFaultDetectionCounter=r25
# 
#       if (FilterWithSeverity)
	.d2line		9582
	rlwinm		r27,r27,0,24,31		# FilterWithSeverity=r27 FilterWithSeverity=r27
	se_cmpi		r27,0		# FilterWithSeverity=r27
	bc		1,2,.L1808	# eq
#       {
#          DTCFilter.dtc_severity_mask = DTCSeverityMask;
	.d2line		9584
.Llo2137:
	lis		r3,(DTCFilter+6)@ha
.Llo2142:
	stb		r26,(DTCFilter+6)@l(r3)		# DTCSeverityMask=r26
.L1808:
#       }
# 
#       retVal = DEM_FILTER_ACCEPTED;
	.d2line		9587
	diab.li		r24,0		# retVal=r24
.L1807:
#    }
# 
#    return retVal;
	.d2line		9590
.Llo2138:
	rlwinm		r3,r24,0,24,31		# retVal=r24
.L1793:
# }
	.d2line		9591
	.d2epilogue_begin
.Llo2139:
	lmw		r23,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	2,10
	lwz		r0,68(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,64		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2143:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4437:
	.type		Dem_DcmSetDTCFilter,@function
	.size		Dem_DcmSetDTCFilter,.-Dem_DcmSetDTCFilter
# Number of nodes = 343

# Allocations for Dem_DcmSetDTCFilter
#	?a4		DTCStatusMask
#	?a5		DTCKind
#	?a6		DTCFormat
#	?a7		DTCOrigin
#	?a8		FilterWithSeverity
#	?a9		DTCSeverityMask
#	?a10		FilterForFaultDetectionCounter
#	?a11		retVal
#	?a12		internalOrigin
#	?a13		noErrors
# FUNC(Std_ReturnType, DEM_CODE) Dem_DcmGetDTCStatusAvailabilityMask(P2VAR(Dem_UdsStatusByteType, AUTOMATIC, DEM_APPL_DATA)
	.align		2
	.section	.text_vle
        .d2line         9594,32
#$$ld
.L4455:

#$$bf	Dem_DcmGetDTCStatusAvailabilityMask,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetDTCStatusAvailabilityMask
	.d2_cfa_start __cie
Dem_DcmGetDTCStatusAvailabilityMask:
.Llo2152:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo2159:
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTCStatusMask=r31 DTCStatusMask=r3
	.d2prologue_end
#       DTCStatusMask)
# {
#    Std_ReturnType retVal = E_OK;
	.d2line		9597
	diab.li		r0,0		# retVal=r0
# 
#    DEM_PRE_ASSERT()
	.d2line		9599
.Llo2160:
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETDTCSTATUSAVAILABILITYMASK, DEM_INIT == Dem_InitState)
	.d2line		9600
.Llo2161:
	lis		r3,Dem_InitState@ha
.Llo2153:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1826	# eq
.Llo2154:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,22
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1826:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETDTCSTATUSAVAILABILITYMASK, (NULL_PTR != DTCStatusMask))
	.d2line		9601
	se_cmpi		r31,0		# DTCStatusMask=r31
	bc		0,2,.L1827	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,22
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1827:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		9602
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1828	# ne
.Llo2162:
	diab.li		r3,1
	b		.L1825
.L1828:
# 
#    if ((DEM_INIT == Dem_InitState) && (DTCStatusMask != NULL_PTR))
	.d2line		9604
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2163:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1829	# ne
.Llo2164:
	se_cmpi		r31,0		# DTCStatusMask=r31
	bc		1,2,.L1829	# eq
#    {
#       /* [SWS_Dem_00060] */
#       *DTCStatusMask = DEM_DTC_STATUS_AVAILABILITY_MASK;
	.d2line		9607
	diab.li		r0,255		# noErrors=r0
.Llo2165:
	stb		r0,0(r31)		# DTCStatusMask=r31 noErrors=r0
#       retVal = E_OK;
	.d2line		9608
	diab.li		r3,0		# retVal=r3
.Llo2156:
	b		.L1830
.L1829:
#    }
#    else
#    {
#       retVal = E_NOT_OK;
	.d2line		9612
.Llo2157:
	diab.li		r3,1		# retVal=r3
.L1830:
#    }
# 
#    return retVal;
	.d2line		9615
.Llo2155:
	rlwinm		r3,r3,0,24,31		# retVal=r3 retVal=r3
.L1825:
# }
	.d2line		9616
	.d2epilogue_begin
.Llo2158:
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4456:
	.type		Dem_DcmGetDTCStatusAvailabilityMask,@function
	.size		Dem_DcmGetDTCStatusAvailabilityMask,.-Dem_DcmGetDTCStatusAvailabilityMask
# Number of nodes = 64

# Allocations for Dem_DcmGetDTCStatusAvailabilityMask
#	?a4		DTCStatusMask
#	?a5		retVal
#	?a6		noErrors
# FUNC(Dem_ReturnGetNumberOfFilteredDTCType, DEM_CODE) Dem_DcmGetNumberOfFilteredDTC(P2VAR(uint16, AUTOMATIC, DEM_APPL_DATA) NumberOfFilteredDTC)
	.align		2
	.section	.text_vle
        .d2line         9619,54
#$$ld
.L4465:

#$$bf	Dem_DcmGetNumberOfFilteredDTC,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetNumberOfFilteredDTC
	.d2_cfa_start __cie
Dem_DcmGetNumberOfFilteredDTC:
.Llo2166:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	30,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r30,r3		# NumberOfFilteredDTC=r30 NumberOfFilteredDTC=r3
	.d2prologue_end
# {
#    Dem_ReturnGetNumberOfFilteredDTCType retVal = DEM_NUMBER_FAILED;
	.d2line		9621
	diab.li		r31,1		# retVal=r31
#    uint16 i;
# 
#    DEM_PRE_ASSERT()
	.d2line		9624
.Llo2170:
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETNUMBEROFFILTEREDDTC, DEM_INIT == Dem_InitState)
	.d2line		9625
.Llo2175:
	lis		r3,Dem_InitState@ha
.Llo2167:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1838	# eq
.Llo2168:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,23
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1838:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETNUMBEROFFILTEREDDTC, (NULL_PTR != NumberOfFilteredDTC))
	.d2line		9626
	se_cmpi		r30,0		# NumberOfFilteredDTC=r30
	bc		0,2,.L1839	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,23
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1839:
#    DEM_ASSERT_WRONG_CONDITION(DEM_SID_DCMGETNUMBEROFFILTEREDDTC, (TRUE == DTCFilter.filter_active))
	.d2line		9627
	lis		r3,DTCFilter@ha
	lbz		r3,DTCFilter@l(r3)
	se_cmpi		r3,1
	bc		1,2,.L1840	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,23
	diab.li		r6,64
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1840:
#    DEM_POST_ASSERT_RETVAL(DEM_NUMBER_FAILED)
	.d2line		9628
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1841	# ne
.Llo2176:
	diab.li		r3,1
	b		.L1837
.L1841:
# 
#    if ((DEM_INIT == Dem_InitState) &&
	.d2line		9630
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2177:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1842	# ne
.Llo2178:
	se_cmpi		r30,0		# NumberOfFilteredDTC=r30
	bc		1,2,.L1842	# eq
	lis		r3,DTCFilter@ha
	lbz		r0,DTCFilter@l(r3)		# noErrors=r0
.Llo2179:
	se_cmpi		r0,1		# noErrors=r0
	bc		0,2,.L1842	# ne
#        (NumberOfFilteredDTC != NULL_PTR) &&
#        (TRUE == DTCFilter.filter_active))
#    {
#       *NumberOfFilteredDTC = 0;
	.d2line		9634
.Llo2180:
	diab.li		r0,0		# noErrors=r0
.Llo2181:
	sth		r0,0(r30)		# NumberOfFilteredDTC=r30 noErrors=r0
# 
#       if ((0U != (DTCFilter.status_mask & (Dem_UdsStatusByteType)(DEM_UDS_SB_PDTC | DEM_UDS_SB_CDTC))) &&
	.d2line		9636
	lis		r3,(DTCFilter+1)@ha
	lbz		r0,(DTCFilter+1)@l(r3)		# noErrors=r0
	e_andi.		r0,r0,12		# noErrors=r0 noErrors=r0
.Llo2182:
	bc		1,2,.L1843	# eq
.Llo2171:
	lis		r3,(DTCFilter+1)@ha
	lbz		r0,(DTCFilter+1)@l(r3)		# noErrors=r0
.Llo2183:
	e_andi.		r0,r0,243		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1843	# ne
#           (0U == (DTCFilter.status_mask & (Dem_UdsStatusByteType)~(DEM_UDS_SB_PDTC | DEM_UDS_SB_CDTC))))
#       {
#          /* [VSTAR_Dem_00001], [SWS_Dem_00061]
#           * To be consistent with Dem_DcmGetNextFilteredDTC only DTCs stored in memory shall be filtered
#           * when Pending and/or Confirmed bit is set in the filter mask. No other bits are allowed to be set.
#           */
#          *NumberOfFilteredDTC = GetNumberOfFilteredDTCInEventMemory();
	.d2line		9643
.Llo2184:
	bl		GetNumberOfFilteredDTCInEventMemory
	sth		r3,0(r30)		# NumberOfFilteredDTC=r30
	b		.L1844
.L1843:
#       }
#       else
#       {
#          for (i = (uint16)0U; i < GetNumDTCs(); i++)
	.d2line		9647
	diab.li		r31,0		# i=r31
.L1845:
.Llo2173:
	rlwinm		r0,r31,0,16,31		# noErrors=r0 i=r31
.Llo2185:
	lis		r3,Dem_pPbCfg@ha		# i=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# i=r3 i=r3
	lhz		r3,152(r3)		# i=r3 i=r3
	se_cmp		r0,r3		# noErrors=r0 i=r3
	bc		0,0,.L1844	# ge
#          {
#             /* Check if DTC status matches the filter */
#             if (TRUE == DTCFilterMatch(i, NULL_PTR))
	.d2line		9650
.Llo2186:
	mr		r3,r31		# i=r3 i=r31
	diab.li		r4,0
	bl		DTCFilterMatch
	rlwinm		r3,r3,0,24,31		# i=r3 i=r3
	se_cmpi		r3,1		# i=r3
	bc		0,2,.L1848	# ne
#             {
#                /* [SWS_Dem_00061] */
#                (*NumberOfFilteredDTC)++;
	.d2line		9653
	lhz		r3,0(r30)		# i=r3 NumberOfFilteredDTC=r30
	se_addi		r3,1		# i=r3 i=r3
	sth		r3,0(r30)		# NumberOfFilteredDTC=r30 i=r3
.L1848:
#             }
#          }
	.d2line		9655
	diab.addi		r0,r31,1		# noErrors=r0 i=r31
	se_addi		r31,1		# i=r31 i=r31
	b		.L1845
.L1844:
#       }
# 
#       retVal = DEM_NUMBER_OK;
	.d2line		9658
.Llo2174:
	diab.li		r31,0		# retVal=r31
.L1842:
#    }
# 
#    return retVal;
	.d2line		9661
.Llo2172:
	rlwinm		r3,r31,0,24,31		# i=r3 retVal=r31
.L1837:
# }
	.d2line		9662
	.d2epilogue_begin
.Llo2169:
	lmw		r30,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4466:
	.type		Dem_DcmGetNumberOfFilteredDTC,@function
	.size		Dem_DcmGetNumberOfFilteredDTC,.-Dem_DcmGetNumberOfFilteredDTC
# Number of nodes = 138

# Allocations for Dem_DcmGetNumberOfFilteredDTC
#	?a4		NumberOfFilteredDTC
#	?a5		retVal
#	?a6		i
#	?a7		noErrors
# FUNC(Dem_ReturnGetNextFilteredElementType, DEM_CODE) Dem_DcmGetNextFilteredDTC(P2VAR(uint32, AUTOMATIC, DEM_APPL_DATA) DTC,
	.align		2
	.section	.text_vle
        .d2line         9666,54
#$$ld
.L4478:

#$$bf	Dem_DcmGetNextFilteredDTC,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetNextFilteredDTC
	.d2_cfa_start __cie
Dem_DcmGetNextFilteredDTC:
.Llo2187:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	26,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# DTCStatus=r30 DTCStatus=r4
	.d2prologue_end
#       P2VAR(Dem_UdsStatusByteType, AUTOMATIC, DEM_APPL_DATA) DTCStatus)
# {
#    boolean dtcFound = FALSE;
	.d2line		9669
	diab.li		r29,0		# dtcFound=r29
#    uint16 i;
#    Dem_ReturnGetNextFilteredElementType retVal = DEM_FILTERED_NO_MATCHING_ELEMENT;
	.d2line		9671
.Llo2194:
	diab.li		r26,1		# retVal=r26
#    uint16 intDtcIdx;
#    Dem_EventIdType currentEventId;
#    boolean eventFound = TRUE;
	.d2line		9674
	diab.li		r27,1
# 
#    DEM_PRE_ASSERT()
	.d2line		9676
.Llo2210:
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETNEXTFILTEREDDTC, DEM_INIT == Dem_InitState)
	.d2line		9677
.Llo2221:
	lis		r3,Dem_InitState@ha
.Llo2188:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1860	# eq
.Llo2189:
	diab.li		r3,54
.Llo2191:
	diab.li		r4,0
	diab.li		r5,24
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1860:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETNEXTFILTEREDDTC, (NULL_PTR != DTC))
	.d2line		9678
	se_cmpi		r31,0		# DTC=r31
	bc		0,2,.L1861	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,24
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1861:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETNEXTFILTEREDDTC, (NULL_PTR != DTCStatus))
	.d2line		9679
	se_cmpi		r30,0		# DTCStatus=r30
	bc		0,2,.L1862	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,24
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1862:
#    DEM_POST_ASSERT_RETVAL(DEM_FILTERED_NO_MATCHING_ELEMENT)
	.d2line		9680
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1863	# ne
.Llo2222:
	diab.li		r3,1
	b		.L1859
.L1863:
# 
#    if ((DEM_INIT == Dem_InitState) &&
	.d2line		9682
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2223:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1864	# ne
.Llo2224:
	se_cmpi		r31,0		# DTC=r31
	bc		1,2,.L1864	# eq
	se_cmpi		r30,0		# DTCStatus=r30
	bc		1,2,.L1864	# eq
#        (NULL_PTR != DTC) &&
#        (NULL_PTR != DTCStatus))
#    {
#       if ((0U != (DTCFilter.status_mask & (Dem_UdsStatusByteType)(DEM_UDS_SB_PDTC | DEM_UDS_SB_CDTC))) &&
	.d2line		9686
	lis		r3,(DTCFilter+1)@ha
	lbz		r0,(DTCFilter+1)@l(r3)		# noErrors=r0
.Llo2225:
	e_andi.		r0,r0,12		# noErrors=r0 noErrors=r0
.Llo2226:
	bc		1,2,.L1865	# eq
	lis		r3,(DTCFilter+1)@ha
	lbz		r0,(DTCFilter+1)@l(r3)		# noErrors=r0
.Llo2227:
	e_andi.		r0,r0,243		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1865	# ne
.L1866:
#           (0U == (DTCFilter.status_mask & (Dem_UdsStatusByteType)~(DEM_UDS_SB_PDTC | DEM_UDS_SB_CDTC))))
#       {
#          /* DTCs shall be reported in chronological order when Pending and/or Confirmed bit is
#             set in the filter mask. No other bits are allowed to be set. */
# 
#          while ((FALSE == dtcFound) &&
	.d2line		9692
.Llo2200:
	rlwinm		r0,r29,0,24,31		# noErrors=r0 dtcFound=r29
.Llo2228:
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1864	# ne
.Llo2201:
	lis		r3,DTCFilter@ha		# eventFound=r3
	lbz		r0,DTCFilter@l(r3)		# noErrors=r0 eventFound=r3
.Llo2229:
	se_cmpi		r0,1		# noErrors=r0
	bc		0,2,.L1864	# ne
.Llo2230:
	rlwinm		r27,r27,0,24,31		# eventFound=r27 eventFound=r27
	se_cmpi		r27,1		# eventFound=r27
	bc		0,2,.L1864	# ne
	.section	.text_vle
.L4498:
#                 (TRUE == DTCFilter.filter_active) &&
#                 (TRUE == eventFound))
#          {
#             uint8 internalOrigin = GetInternalDTCOriginIndex(DTCFilter.dtc_origin);
	.d2line		9696
.Llo2211:
	lis		r3,(DTCFilter+4)@ha		# eventFound=r3
.Llo2212:
	lbz		r3,(DTCFilter+4)@l(r3)		# eventFound=r3 eventFound=r3
.Llo2213:
	bl		GetInternalDTCOriginIndex
.Llo2243:
	mr		r7,r3		# internalOrigin=r7 internalOrigin=r3
#             eventFound = GetPreviousFromChronologicalList(&DTCFilter.current_ev_mem_entry, DTCFilter.dtc_origin);
	.d2line		9697
	lis		r3,(DTCFilter+4)@ha		# eventFound=r3
.Llo2214:
	lbz		r4,(DTCFilter+4)@l(r3)		# eventFound=r3
	lis		r3,(DTCFilter+10)@ha		# eventFound=r3
	e_add16i		r3,r3,(DTCFilter+10)@l		# eventFound=r3 eventFound=r3
.Llo2215:
	bl		GetPreviousFromChronologicalList
.Llo2216:
	mr		r27,r3		# eventFound=r27 eventFound=r3
#             if ((TRUE == eventFound) && (DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX != internalOrigin))
	.d2line		9698
	rlwinm		r3,r3,0,24,31		# eventFound=r3 eventFound=r3
	se_cmpi		r3,1		# eventFound=r3
	bc		0,2,.L1866	# ne
.Llo2217:
	rlwinm		r3,r7,0,24,31		# eventFound=r3 internalOrigin=r7
.Llo2218:
	cmpi		0,0,r3,255		# eventFound=r3
	bc		1,2,.L1866	# eq
	.section	.text_vle
.L4504:
#             {
#                P2CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC, DEM_APPL_CONST) pEvMemEntries = Dem_GetEvMemEntriesPtr(internalOrigin);
	.d2line		9700
.Llo2244:
	lis		r3,(Dem_LCfg+20)@ha		# eventFound=r3
	e_add16i		r3,r3,(Dem_LCfg+20)@l		# eventFound=r3 eventFound=r3
.Llo2245:
	rlwinm		r7,r7,2,22,29		# internalOrigin=r7 internalOrigin=r7
.Llo2246:
	lwzx		r3,r3,r7		# eventFound=r3 eventFound=r3
	lwz		r0,0(r3)		# noErrors=r0 eventFound=r3
.Llo2247:
	mr		r0,r0		# pEvMemEntries=r0 pEvMemEntries=r0
#                currentEventId = pEvMemEntries[DTCFilter.current_ev_mem_entry]->event_id;
	.d2line		9701
	lis		r3,(DTCFilter+10)@ha		# eventFound=r3
	lbz		r3,(DTCFilter+10)@l(r3)		# eventFound=r3 eventFound=r3
	rlwinm		r3,r3,2,22,29		# eventFound=r3 eventFound=r3
	lwzx		r3,r3,r0		# eventFound=r3 eventFound=r3 pEvMemEntries=r0
	lhz		r0,0(r3)		# noErrors=r0 eventFound=r3
.Llo2203:
	mr		r0,r0		# currentEventId=r0 currentEventId=r0
# 
#                /* Get the internal DTC connected to the event */
#                intDtcIdx = Dem_GetEventIntDtc(currentEventId);
	.d2line		9704
	lis		r3,Dem_pPbCfg@ha		# eventFound=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# eventFound=r3 eventFound=r3
	lwz		r3,128(r3)		# eventFound=r3 eventFound=r3
	rlwinm		r0,r0,1,15,30		# currentEventId=r0 currentEventId=r0
	se_add		r3,r0		# eventFound=r3 eventFound=r3 currentEventId=r0
	lhz		r28,-2(r3)		# intDtcIdx=r28 eventFound=r3
.Llo2202:
	mr		r28,r28		# intDtcIdx=r28 intDtcIdx=r28
# 
#                if (DEM_INT_DTC_INVALID != intDtcIdx)
	.d2line		9706
	rlwinm		r3,r28,0,16,31		# eventFound=r3 intDtcIdx=r28
	cmpli		0,0,r3,65535		# eventFound=r3
	bc		1,2,.L1866	# eq
#                {
#                   if (TRUE == DTCFilterMatch(intDtcIdx, NULL_PTR))
	.d2line		9708
.Llo2204:
	mr		r3,r28		# intDtcIdx=r3 intDtcIdx=r28
	diab.li		r4,0
	bl		DTCFilterMatch
	rlwinm		r3,r3,0,24,31		# intDtcIdx=r3 intDtcIdx=r3
	se_cmpi		r3,1		# intDtcIdx=r3
	bc		0,2,.L1866	# ne
#                   {
#                      dtcFound = TRUE;
	.d2line		9710
	diab.li		r29,1		# dtcFound=r29
# 
#                      /* [SWS_Dem_00277] */
#                      if (DEM_DTC_FORMAT_UDS == DTCFilter.dtc_format)
	.d2line		9713
	lis		r3,(DTCFilter+3)@ha		# intDtcIdx=r3
	lbz		r0,(DTCFilter+3)@l(r3)		# currentEventId=r0 intDtcIdx=r3
.Llo2205:
	se_cmpi		r0,11		# currentEventId=r0
	bc		0,2,.L1871	# ne
#                      {
#                         *DTC = GetUdsDtc(intDtcIdx);
	.d2line		9715
.Llo2196:
	lis		r3,Dem_pPbCfg@ha		# intDtcIdx=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# intDtcIdx=r3 intDtcIdx=r3
	lwz		r3,76(r3)		# intDtcIdx=r3 intDtcIdx=r3
	rlwinm		r0,r28,2,14,29		# currentEventId=r0 intDtcIdx=r28
.Llo2206:
	lwzx		r0,r3,r0		# currentEventId=r0 intDtcIdx=r3
	stw		r0,0(r31)		# DTC=r31 currentEventId=r0
	b		.L1872
.L1871:
#                      }
#                      else
#                      {
#                         *DTC = (uint32)GetObdDtc(intDtcIdx) << 8;
	.d2line		9719
.Llo2207:
	lis		r3,Dem_pPbCfg@ha		# intDtcIdx=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# intDtcIdx=r3 intDtcIdx=r3
	lwz		r3,72(r3)		# intDtcIdx=r3 intDtcIdx=r3
	rlwinm		r0,r28,1,15,30		# currentEventId=r0 intDtcIdx=r28
.Llo2208:
	lhzx		r0,r3,r0		# currentEventId=r0 intDtcIdx=r3
	rlwinm		r0,r0,8,8,23		# currentEventId=r0 currentEventId=r0
	stw		r0,0(r31)		# DTC=r31 currentEventId=r0
.L1872:
#                      }
# 
#                      /* [SWS_Dem_00657], [SWS_Dem_01049] */
#                      *DTCStatus = (Dem_UdsStatusByteType)(Dem_GetUdsStatusByIntDtc(intDtcIdx) & DEM_DTC_STATUS_AVAILABILITY_MASK);
	.d2line		9723
.Llo2209:
	rlwinm		r3,r28,0,16,31		# intDtcIdx=r3 intDtcIdx=r28
	bl		Dem_GetUdsStatusByIntDtc
	rlwinm		r0,r3,0,24,31		# currentEventId=r0 intDtcIdx=r3
	stb		r3,0(r30)		# DTCStatus=r30 intDtcIdx=r3
#                      retVal = DEM_FILTERED_OK;
	.d2line		9724
	diab.li		r26,0		# retVal=r26
	.section	.text_vle
.L4505:
	.section	.text_vle
.L4499:
.Llo2197:
	b		.L1866
.L1865:
#                   }
#                }
#             }
#          }
#       }
#       else
#       {
#          for (i=DTCFilter.next_dtc_to_handle; (i < GetNumDTCs()) && (TRUE == DTCFilter.filter_active) && (FALSE == dtcFound); i++)
	.d2line		9732
	lis		r3,(DTCFilter+8)@ha
	lhz		r28,(DTCFilter+8)@l(r3)
.Llo2195:
	mr		r28,r28		# i=r28 i=r28
.L1874:
.Llo2219:
	rlwinm		r0,r28,0,16,31		# noErrors=r0 i=r28
.Llo2231:
	lis		r3,Dem_pPbCfg@ha		# i=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# i=r3 i=r3
	lhz		r3,152(r3)		# i=r3 i=r3
	se_cmp		r0,r3		# noErrors=r0 i=r3
	bc		0,0,.L1864	# ge
.Llo2232:
	lis		r3,DTCFilter@ha		# i=r3
	lbz		r0,DTCFilter@l(r3)		# noErrors=r0 i=r3
.Llo2233:
	se_cmpi		r0,1		# noErrors=r0
	bc		0,2,.L1864	# ne
.Llo2234:
	rlwinm		r0,r29,0,24,31		# noErrors=r0 dtcFound=r29
.Llo2235:
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1864	# ne
#          {
#             /* [SWS_Dem_00216] */
#             if (TRUE == DTCFilterMatch(i, NULL_PTR))
	.d2line		9735
.Llo2236:
	mr		r3,r28		# i=r3 i=r28
	diab.li		r4,0
	bl		DTCFilterMatch
	rlwinm		r3,r3,0,24,31		# i=r3 i=r3
	se_cmpi		r3,1		# i=r3
	bc		0,2,.L1877	# ne
#             {
#                dtcFound = TRUE;
	.d2line		9737
	diab.li		r29,1		# dtcFound=r29
# 
#                /* [SWS_Dem_00277] */
#                if (DEM_DTC_FORMAT_UDS == DTCFilter.dtc_format)
	.d2line		9740
	lis		r3,(DTCFilter+3)@ha		# i=r3
	lbz		r0,(DTCFilter+3)@l(r3)		# noErrors=r0 i=r3
.Llo2237:
	se_cmpi		r0,11		# noErrors=r0
	bc		0,2,.L1878	# ne
#                {
#                   *DTC = GetUdsDtc(i);
	.d2line		9742
.Llo2198:
	lis		r3,Dem_pPbCfg@ha		# i=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# i=r3 i=r3
	lwz		r3,76(r3)		# i=r3 i=r3
	rlwinm		r0,r28,2,14,29		# noErrors=r0 i=r28
.Llo2238:
	lwzx		r0,r3,r0		# noErrors=r0 i=r3
	stw		r0,0(r31)		# DTC=r31 noErrors=r0
	b		.L1879
.L1878:
#                }
#                else
#                {
#                   *DTC = (uint32)GetObdDtc(i) << 8;
	.d2line		9746
.Llo2239:
	lis		r3,Dem_pPbCfg@ha		# i=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# i=r3 i=r3
	lwz		r3,72(r3)		# i=r3 i=r3
	rlwinm		r0,r28,1,15,30		# noErrors=r0 i=r28
.Llo2240:
	lhzx		r0,r3,r0		# noErrors=r0 i=r3
	rlwinm		r0,r0,8,8,23		# noErrors=r0 noErrors=r0
	stw		r0,0(r31)		# DTC=r31 noErrors=r0
.L1879:
#                }
# 
#                /* [SWS_Dem_00657], [SWS_Dem_01049] */
#                *DTCStatus = (Dem_UdsStatusByteType)(Dem_GetUdsStatusByIntDtc(i) & DEM_DTC_STATUS_AVAILABILITY_MASK);
	.d2line		9750
.Llo2241:
	rlwinm		r3,r28,0,16,31		# i=r3 i=r28
	bl		Dem_GetUdsStatusByIntDtc
	rlwinm		r0,r3,0,24,31		# noErrors=r0 i=r3
	stb		r3,0(r30)		# DTCStatus=r30 i=r3
#                DTCFilter.next_dtc_to_handle = i + 1U;
	.d2line		9751
	diab.addi		r0,r28,1		# noErrors=r0 i=r28
.Llo2242:
	lis		r3,(DTCFilter+8)@ha		# i=r3
	sth		r0,(DTCFilter+8)@l(r3)		# i=r3 noErrors=r0
#                retVal = DEM_FILTERED_OK;
	.d2line		9752
	diab.li		r26,0		# retVal=r26
.L1877:
#             }
#          }
	.d2line		9754
.Llo2199:
	diab.addi		r0,r28,1		# noErrors=r0 i=r28
	se_addi		r28,1		# i=r28 i=r28
	b		.L1874
.L1864:
#       }
#    }
# 
#    return retVal;
	.d2line		9758
.Llo2220:
	rlwinm		r3,r26,0,24,31		# eventFound=r3 retVal=r26
.L1859:
# }
	.d2line		9759
	.d2epilogue_begin
.Llo2190:
	lmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	2,10
.Llo2192:
	lwz		r0,52(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2193:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4479:
	.type		Dem_DcmGetNextFilteredDTC,@function
	.size		Dem_DcmGetNextFilteredDTC,.-Dem_DcmGetNextFilteredDTC
# Number of nodes = 358

# Allocations for Dem_DcmGetNextFilteredDTC
#	?a4		DTC
#	?a5		DTCStatus
#	?a6		dtcFound
#	?a7		i
#	?a8		retVal
#	?a9		intDtcIdx
#	?a10		currentEventId
#	?a11		eventFound
#	?a12		noErrors
#	?a13		internalOrigin
#	?a14		pEvMemEntries
# FUNC(Dem_ReturnGetDTCByOccurrenceTimeType, DEM_CODE) Dem_DcmGetDTCByOccurrenceTime(Dem_DTCRequestType DTCRequest,
	.align		2
	.section	.text_vle
        .d2line         9762,54
#$$ld
.L4512:

#$$bf	Dem_DcmGetDTCByOccurrenceTime,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetDTCByOccurrenceTime
	.d2_cfa_start __cie
Dem_DcmGetDTCByOccurrenceTime:
.Llo2248:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
.Llo2273:
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTCRequest=r31 DTCRequest=r3
	mr		r30,r4		# DTC=r30 DTC=r4
	.d2prologue_end
#       P2VAR(uint32, AUTOMATIC, DEM_APPL_DATA) DTC)
# {
#    Dem_ReturnGetDTCByOccurrenceTimeType retVal = DEM_OCCURR_OK;
	.d2line		9765
	diab.li		r29,0		# retVal=r29
#    Dem_EventIdType eventId;
# 
#    DEM_PRE_ASSERT()
	.d2line		9768
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETDTCBYOCCURENCETIME, DEM_INIT == Dem_InitState)
	.d2line		9769
	lis		r3,Dem_InitState@ha
.Llo2249:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1895	# eq
.Llo2250:
	diab.li		r3,54
.Llo2254:
	diab.li		r4,0
	diab.li		r5,25
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1895:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMGETDTCBYOCCURENCETIME, (DEM_FIRST_FAILED_DTC == DTCRequest) ||
	.d2line		9770
	rlwinm		r3,r31,0,24,31		# DTCRequest=r31
	se_cmpi		r3,1
	bc		1,2,.L1896	# eq
	rlwinm		r3,r31,0,24,31		# DTCRequest=r31
	se_cmpi		r3,2
	bc		1,2,.L1896	# eq
	rlwinm		r3,r31,0,24,31		# DTCRequest=r31
	se_cmpi		r3,3
	bc		1,2,.L1896	# eq
	rlwinm		r3,r31,0,24,31		# DTCRequest=r31
	se_cmpi		r3,4
	bc		1,2,.L1896	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,25
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1896:
#                          (DEM_MOST_RECENT_FAILED_DTC == DTCRequest) ||
#                          (DEM_FIRST_DET_CONFIRMED_DTC == DTCRequest) ||
#                          (DEM_MOST_REC_DET_CONFIRMED_DTC == DTCRequest))
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETDTCBYOCCURENCETIME, DTC != NULL_PTR)
	.d2line		9774
	se_cmpi		r30,0		# DTC=r30
	bc		0,2,.L1897	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,25
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1897:
#    DEM_POST_ASSERT_RETVAL(DEM_OCCURR_NOT_AVAILABLE)
	.d2line		9775
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1898	# ne
.Llo2274:
	diab.li		r3,1
	b		.L1894
.L1898:
# 
#    if ((DEM_INIT == Dem_InitState) && (NULL_PTR != DTC))
	.d2line		9777
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2275:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1899	# ne
.Llo2276:
	se_cmpi		r30,0		# DTC=r30
	bc		1,2,.L1899	# eq
#    {
#       /* [SWS_Dem_00219] */
#       switch (DTCRequest)
	.d2line		9780
	rlwinm		r6,r31,0,24,31		# DTCRequest=r31
	se_cmpi		r6,1
	bc		1,2,.L1900	# eq
.Llo2251:
	se_cmpi		r6,2
	bc		1,2,.L1902	# eq
	se_cmpi		r6,3
	bc		1,2,.L1903	# eq
	se_cmpi		r6,4
	bc		1,2,.L1904	# eq
	b		.L1905
.L1900:
#       {
#          case DEM_FIRST_FAILED_DTC:
#             eventId = Dem_NvAdmin.event_occurrence_info.first_failed_event;
	.d2line		9783
	lis		r3,(Dem_NvAdmin+4)@ha
	lhz		r0,(Dem_NvAdmin+4)@l(r3)		# noErrors=r0
.Llo2260:
	mr		r0,r0		# eventId=r0 eventId=r0
	b		.L1901
.L1902:
#             break;
#          case DEM_MOST_RECENT_FAILED_DTC:
#             eventId = Dem_NvAdmin.event_occurrence_info.most_recent_failed_event;
	.d2line		9786
.Llo2261:
	lis		r3,Dem_NvAdmin@ha
	lhz		r0,Dem_NvAdmin@l(r3)		# noErrors=r0
.Llo2262:
	mr		r0,r0		# eventId=r0 eventId=r0
	b		.L1901
.L1903:
#             break;
#          case DEM_FIRST_DET_CONFIRMED_DTC:
#             eventId = Dem_NvAdmin.event_occurrence_info.first_confirmed_event;
	.d2line		9789
.Llo2263:
	lis		r3,(Dem_NvAdmin+6)@ha
	lhz		r0,(Dem_NvAdmin+6)@l(r3)		# noErrors=r0
.Llo2264:
	mr		r0,r0		# eventId=r0 eventId=r0
	b		.L1901
.L1904:
#             break;
#          case DEM_MOST_REC_DET_CONFIRMED_DTC:
#             eventId = Dem_NvAdmin.event_occurrence_info.most_recent_confirmed_event;
	.d2line		9792
.Llo2265:
	lis		r3,(Dem_NvAdmin+2)@ha
	lhz		r0,(Dem_NvAdmin+2)@l(r3)		# noErrors=r0
.Llo2266:
	mr		r0,r0		# eventId=r0 eventId=r0
	b		.L1901
.L1905:
#             break;
#          default:
#             /* Illegal DTCRequest */
#             eventId = 0;
	.d2line		9796
.Llo2258:
	diab.li		r0,0		# eventId=r0
#             retVal = DEM_OCCURR_NOT_AVAILABLE;
	.d2line		9797
.Llo2267:
	diab.li		r29,1		# retVal=r29
.L1901:
#             break;
#       }
# 
#       if (0 == eventId)
	.d2line		9801
.Llo2259:
	rlwinm		r3,r0,0,16,31		# eventId=r0
	se_cmpi		r3,0
	bc		0,2,.L1906	# ne
#       {
#          /* No DTC matches the request, [SWS_Dem_00221] */
#          *DTC = 0;
	.d2line		9804
.Llo2268:
	diab.li		r0,0		# eventId=r0
.Llo2269:
	stw		r0,0(r30)		# DTC=r30 eventId=r0
#          retVal = DEM_OCCURR_NOT_AVAILABLE;
	.d2line		9805
	diab.li		r29,1		# retVal=r29
	b		.L1908
.L1906:
	.section	.text_vle
.L4525:
#       }
#       else
#       {
#          uint16 intDtcIdx = Dem_GetEventIntDtc(eventId);
	.d2line		9809
.Llo2270:
	lis		r4,Dem_pPbCfg@ha
	lwz		r3,Dem_pPbCfg@l(r4)
	lwz		r3,128(r3)
.Llo2271:
	rlwinm		r0,r0,1,15,30		# eventId=r0 eventId=r0
	se_add		r3,r0		# eventId=r0
	lhz		r0,-2(r3)		# eventId=r0
.Llo2272:
	mr		r0,r0		# intDtcIdx=r0 intDtcIdx=r0
# 
#          /* UDS format only, [SWS_Dem_00277] */
#          *DTC = GetUdsDtc(intDtcIdx);
	.d2line		9812
	lwz		r3,Dem_pPbCfg@l(r4)
	lwz		r3,76(r3)
	rlwinm		r0,r0,2,14,29		# intDtcIdx=r0 intDtcIdx=r0
	lwzx		r0,r3,r0		# intDtcIdx=r0
	stw		r0,0(r30)		# DTC=r30 intDtcIdx=r0
	.section	.text_vle
.L4526:
.Llo2255:
	b		.L1908
.L1899:
#       }
#    }
#    else
#    {
#       retVal = DEM_OCCURR_NOT_AVAILABLE;
	.d2line		9817
.Llo2252:
	diab.li		r29,1		# retVal=r29
.L1908:
#    }
#    return retVal;
	.d2line		9819
.Llo2253:
	rlwinm		r3,r29,0,24,31		# retVal=r29
.L1894:
# }
	.d2line		9820
	.d2epilogue_begin
.Llo2256:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2257:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4513:
	.type		Dem_DcmGetDTCByOccurrenceTime,@function
	.size		Dem_DcmGetDTCByOccurrenceTime,.-Dem_DcmGetDTCByOccurrenceTime
# Number of nodes = 164

# Allocations for Dem_DcmGetDTCByOccurrenceTime
#	?a4		DTCRequest
#	?a5		DTC
#	?a6		retVal
#	?a7		eventId
#	?a8		noErrors
#	?a9		intDtcIdx
# FUNC(Dem_ReturnGetFreezeFrameDataByDTCType, DEM_CODE) Dem_DcmGetFreezeFrameDataByDTC(uint32 DTC,
	.align		2
	.section	.text_vle
        .d2line         9823,55
#$$ld
.L4533:

#$$bf	Dem_DcmGetFreezeFrameDataByDTC,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetFreezeFrameDataByDTC
	.d2_cfa_start __cie
Dem_DcmGetFreezeFrameDataByDTC:
.Llo2277:
	stwu		r1,-80(r1)		
	.d2_cfa_def_cfa_offset	80
	mfspr		r0,lr
	stmw		r20,32(r1)		# offset r1+32  0x20
	.d2_cfa_offset_list	20,31,1,1
	stw		r0,84(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# DTCOrigin=r30 DTCOrigin=r4
.Llo2283:
	mr		r29,r5		# RecordNumber=r29 RecordNumber=r5
.Llo2284:
	mr		r28,r6		# DestBuffer=r28 DestBuffer=r6
	mr		r27,r7		# BufSize=r27 BufSize=r7
	.d2prologue_end
#          Dem_DTCOriginType DTCOrigin,
#          uint8 RecordNumber,
#          P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) DestBuffer,
#          P2VAR(uint16, AUTOMATIC, DEM_APPL_DATA) BufSize)
# {
#    Dem_ReturnGetFreezeFrameDataByDTCType retVal = DEM_GET_FFDATABYDTC_OK;
	.d2line		9829
	diab.li		r26,0		# retVal=r26
#    Dem_NvEvMemEntryPtrType pEvMemEntry;
#    uint16 intDtc;
#    uint16 ffIndex;
#    P2CONST(Dem_DataStorageType, AUTOMATIC, DEM_APPL_CONST) pFFStorage = NULL_PTR;
	.d2line		9833
.Llo2302:
	diab.li		r25,0
#    Uint8NvPtrType pFFData;
#    uint16 ffClass = DEM_FF_CLASS_INVALID;
	.d2line		9835
.Llo2319:
	diab.li		r24,65535		# ffClass=r24
#    uint16 commonFFClass = DEM_FF_CLASS_INVALID;
	.d2line		9836
.Llo2323:
	mr		r23,r24		# commonFFClass=r23 commonFFClass=r24
#    Dem_FreezeFrameType ffType;
#    uint16 inOutSize;
#    uint16 usedSize = 0;
	.d2line		9839
	mr		r22,r25		# usedSize=r22 usedSize=r25
#    uint8 internalOrigin = GetInternalDTCOriginIndex(DTCOrigin);
#    uint16 commonFFSize = 0;
	.d2line		9841
.Llo2330:
	mr		r20,r22		# commonFFSize=r20 commonFFSize=r22
#    uint8 evMemEntryIndex;
# 
#    DEM_PRE_ASSERT()
	.d2line		9844
	diab.li		r4,1		# noErrors=r4
	.d2line		9840
.Llo2344:
	mr		r3,r30		# DTCOrigin=r3 DTCOrigin=r30
.Llo2278:
	bl		GetInternalDTCOriginIndex
.Llo2326:
	mr		r21,r3		# internalOrigin=r21 internalOrigin=r3
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETFREEZEFRAMEDATABYDTC, DEM_INIT == Dem_InitState)
	.d2line		9845
	lis		r3,Dem_InitState@ha		# noErrors=r3
.Llo2327:
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r3
	se_cmpi		r0,2
	bc		1,2,.L1924	# eq
.Llo2279:
	diab.li		r3,54		# noErrors=r3
.Llo2294:
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,29
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1924:
#    DEM_POST_ASSERT_RETVAL(DEM_GET_FFDATABYDTC_WRONG_DTC)
	.d2line		9846
	rlwinm		r0,r4,0,24,31		# noErrors=r4
	se_cmpi		r0,0
	bc		0,2,.L1925	# ne
	diab.li		r3,1		# noErrors=r3
	b		.L1923
.L1925:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMGETFREEZEFRAMEDATABYDTC, (DEM_DTC_ORIGIN_PRIMARY_MEMORY == DTCOrigin) || (DEM_DTC_ORIGIN_SECONDARY_MEMORY == DTCOrigin))
	.d2line		9847
	rlwinm		r3,r30,0,24,31		# noErrors=r3 DTCOrigin=r30
	se_cmpi		r3,1		# noErrors=r3
	bc		1,2,.L1926	# eq
	rlwinm		r3,r30,0,24,31		# noErrors=r3 DTCOrigin=r30
	se_cmpi		r3,4		# noErrors=r3
	bc		1,2,.L1926	# eq
	diab.li		r3,54		# noErrors=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,29
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1926:
#    DEM_POST_ASSERT_RETVAL(DEM_GET_FFDATABYDTC_WRONG_DTCORIGIN)
	.d2line		9848
	rlwinm		r0,r4,0,24,31		# noErrors=r4
	se_cmpi		r0,0
	bc		0,2,.L1927	# ne
	diab.li		r3,2		# noErrors=r3
	b		.L1923
.L1927:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETFREEZEFRAMEDATABYDTC, DestBuffer != NULL_PTR)
	.d2line		9849
	se_cmpi		r28,0		# DestBuffer=r28
	bc		0,2,.L1928	# ne
	diab.li		r3,54		# noErrors=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,29
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1928:
#    DEM_POST_ASSERT_RETVAL(DEM_GET_FFDATABYDTC_WRONG_DTC)
	.d2line		9850
	rlwinm		r0,r4,0,24,31		# noErrors=r4
	se_cmpi		r0,0
	bc		0,2,.L1929	# ne
	diab.li		r3,1		# noErrors=r3
	b		.L1923
.L1929:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETFREEZEFRAMEDATABYDTC, BufSize != NULL_PTR)
	.d2line		9851
	se_cmpi		r27,0		# BufSize=r27
	bc		0,2,.L1930	# ne
	diab.li		r3,54		# noErrors=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,29
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L1930:
#    DEM_POST_ASSERT_RETVAL(DEM_GET_FFDATABYDTC_WRONG_DTC)
	.d2line		9852
	rlwinm		r4,r4,0,24,31		# noErrors=r4 noErrors=r4
	se_cmpi		r4,0		# noErrors=r4
	bc		0,2,.L1931	# ne
.Llo2345:
	diab.li		r3,1		# noErrors=r3
	b		.L1923
.L1931:
# 
#    if ((DEM_INIT == Dem_InitState) &&
	.d2line		9854
	lis		r3,Dem_InitState@ha		# noErrors=r3
.Llo2346:
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r3
	se_cmpi		r0,2
	bc		0,2,.L1932	# ne
.Llo2347:
	se_cmpi		r28,0		# DestBuffer=r28
	bc		1,2,.L1932	# eq
	se_cmpi		r27,0		# BufSize=r27
	bc		1,2,.L1932	# eq
	lhz		r0,0(r27)		# BufSize=r27
	se_cmpi		r0,0
	bc		1,2,.L1932	# eq
#        (NULL_PTR != DestBuffer) &&
#        (NULL_PTR != BufSize) &&
#        (0 != *BufSize))
#    {
#       /* Find the internal dtc index */
#       intDtc = GetIntDtcByUds(DTC, TRUE);
	.d2line		9860
	mr		r3,r31		# DTC=r3 DTC=r31
	diab.li		r4,1		# noErrors=r4
	bl		GetIntDtcByUds
.Llo2303:
	mr		r31,r3		# intDtc=r31 intDtc=r3
# 
#       if (DEM_INT_DTC_INVALID != intDtc)
	.d2line		9862
.Llo2280:
	rlwinm		r3,r3,0,16,31		# intDtc=r3 intDtc=r3
	cmpli		0,0,r3,65535		# intDtc=r3
	bc		1,2,.L1933	# eq
#       {
#          if (DEM_OK !=  CheckOrigin(intDtc, DTCOrigin))
	.d2line		9864
.Llo2304:
	mr		r3,r31		# intDtc=r3 intDtc=r31
.Llo2305:
	mr		r4,r30		# DTCOrigin=r4 DTCOrigin=r30
	bl		CheckOrigin
	rlwinm		r3,r3,0,24,31		# intDtc=r3 intDtc=r3
	se_cmpi		r3,0		# intDtc=r3
	bc		1,2,.L1934	# eq
#          {
#             /* Wrong DTC origin */
#             retVal = DEM_GET_FFDATABYDTC_WRONG_DTCORIGIN;
	.d2line		9867
.Llo2285:
	diab.li		r26,2		# retVal=r26
	b		.L1954
.L1934:
#          }
#          else if (FALSE == IsFFRecordNumberValid(intDtc, RecordNumber, &ffType))
	.d2line		9869
	diab.addi		r5,r1,12
	mr		r3,r31		# intDtc=r3 intDtc=r31
	mr		r4,r29		# RecordNumber=r4 RecordNumber=r29
	bl		IsFFRecordNumberValid
	rlwinm		r3,r3,0,24,31		# intDtc=r3 intDtc=r3
	se_cmpi		r3,0		# intDtc=r3
	bc		0,2,.L1936	# ne
#          {
#             /* Wrong record number */
#             retVal = DEM_GET_FFDATABYDTC_WRONG_RECORDNUMBER;
	.d2line		9872
	diab.li		r26,3		# retVal=r26
	b		.L1954
.L1936:
#          }
#          else
#          {
#             evMemEntryIndex = GetExistingEventMemoryEntry(intDtc, internalOrigin, &pEvMemEntry);
	.d2line		9876
	diab.addi		r5,r1,16
	mr		r3,r31		# intDtc=r3 intDtc=r31
	mr		r4,r21		# internalOrigin=r4 internalOrigin=r21
	bl		GetExistingEventMemoryEntry
.Llo2331:
	mr		r3,r3		# evMemEntryIndex=r3 evMemEntryIndex=r3
#             if (DEM_EV_MEM_ENTRY_INVALID != evMemEntryIndex)
	.d2line		9877
	rlwinm		r0,r3,0,24,31		# evMemEntryIndex=r3
	cmpi		0,0,r0,255
	bc		1,2,.L1938	# eq
#             {
#                if (DEM_STANDARD_FREEZE_FRAME == ffType)
	.d2line		9879
	lwz		r0,12(r1)
	se_cmpi		r0,0
	bc		0,2,.L1939	# ne
#                {
#                   pFFStorage = Dem_LCfg.pp_ff_storage[internalOrigin];
	.d2line		9881
.Llo2306:
	lis		r4,(Dem_LCfg+48)@ha		# DTCOrigin=r4
.Llo2286:
	e_add16i		r4,r4,(Dem_LCfg+48)@l		# DTCOrigin=r4 DTCOrigin=r4
	rlwinm		r0,r21,2,22,29		# internalOrigin=r21
	lwzx		r25,r4,r0		# DTCOrigin=r4
	mr		r25,r25		# pFFStorage=r25 pFFStorage=r25
#                   ffClass = GetDtcFFClass(intDtc);
	.d2line		9882
	lis		r4,Dem_pPbCfg@ha		# DTCOrigin=r4
	lwz		r5,Dem_pPbCfg@l(r4)		# DTCOrigin=r4
	lwz		r5,80(r5)
.Llo2307:
	rlwinm		r31,r31,1,15,30		# intDtc=r31 intDtc=r31
.Llo2308:
	lhzx		r24,r5,r31		# ffClass=r24
	mr		r24,r24		# ffClass=r24 ffClass=r24
#                   commonFFClass = GetCommonFFClass();
	.d2line		9883
	lwz		r4,Dem_pPbCfg@l(r4)		# DTCOrigin=r4 DTCOrigin=r4
	lwz		r4,112(r4)		# DTCOrigin=r4 DTCOrigin=r4
	lhz		r23,0(r4)		# ffClass=r23 DTCOrigin=r4
	mr		r23,r23		# commonFFClass=r23 commonFFClass=r23
	b		.L1940
.L1939:
#                }
#                else if (DEM_DEV_A_FREEZE_FRAME == ffType)
	.d2line		9885
.Llo2287:
	lwz		r0,12(r1)
	se_cmpi		r0,1
	bc		0,2,.L1941	# ne
#                {
#                   pFFStorage = Dem_LCfg.p_dev_a_ff_storage;
	.d2line		9887
.Llo2309:
	lis		r4,(Dem_LCfg+60)@ha		# DTCOrigin=r4
.Llo2288:
	lwz		r25,(Dem_LCfg+60)@l(r4)		# DTCOrigin=r4
	mr		r25,r25		# pFFStorage=r25 pFFStorage=r25
#                   ffClass = GetDtcDevAFFClass(intDtc);
	.d2line		9888
	lis		r4,Dem_pPbCfg@ha		# DTCOrigin=r4
	lwz		r5,Dem_pPbCfg@l(r4)		# DTCOrigin=r4
	lwz		r5,84(r5)
.Llo2310:
	rlwinm		r31,r31,1,15,30		# intDtc=r31 intDtc=r31
.Llo2311:
	lhzx		r24,r5,r31		# ffClass=r24
	mr		r24,r24		# ffClass=r24 ffClass=r24
#                   commonFFClass = GetCommonDevAFFClass();
	.d2line		9889
	lwz		r4,Dem_pPbCfg@l(r4)		# DTCOrigin=r4 DTCOrigin=r4
	lwz		r4,116(r4)		# DTCOrigin=r4 DTCOrigin=r4
	lhz		r23,0(r4)		# ffClass=r23 DTCOrigin=r4
	mr		r23,r23		# commonFFClass=r23 commonFFClass=r23
	b		.L1940
.L1941:
#                }
#                else if (DEM_DEV_B_FREEZE_FRAME == ffType)
	.d2line		9891
.Llo2289:
	lwz		r0,12(r1)
	se_cmpi		r0,2
	bc		0,2,.L1940	# ne
#                {
#                   pFFStorage = Dem_LCfg.p_dev_b_ff_storage;
	.d2line		9893
.Llo2312:
	lis		r4,(Dem_LCfg+68)@ha		# DTCOrigin=r4
.Llo2290:
	lwz		r25,(Dem_LCfg+68)@l(r4)		# DTCOrigin=r4
	mr		r25,r25		# pFFStorage=r25 pFFStorage=r25
#                   ffClass = GetDtcDevBFFClass(intDtc);
	.d2line		9894
	lis		r4,Dem_pPbCfg@ha		# DTCOrigin=r4
	lwz		r4,Dem_pPbCfg@l(r4)		# DTCOrigin=r4 DTCOrigin=r4
	lwz		r4,88(r4)		# DTCOrigin=r4 DTCOrigin=r4
.Llo2313:
	rlwinm		r31,r31,1,15,30		# intDtc=r31 intDtc=r31
.Llo2314:
	lhzx		r24,r4,r31		# ffClass=r24 DTCOrigin=r4
	mr		r24,r24		# ffClass=r24 ffClass=r24
#                   commonFFClass = DEM_FF_CLASS_INVALID;
	.d2line		9895
	diab.li		r23,65535		# commonFFClass=r23
.L1940:
#                }
#                else
#                {
#                   /* DEM_OBD_FREEZE_FRAME */
# #if (DEM_OBD_SUPPORT == STD_ON) && (DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF)
#                   pFFStorage = Dem_LCfg.p_obd_ff_storage;
#                   ffClass = DEM_FF_CLASS_INVALID;
#                   commonFFClass = DEM_FF_CLASS_INVALID;
# #endif /* DEM_OBD_SUPPORT == STD_ON && DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF */
#                }
# 
#                if ((TRUE == GetFFIndexByRecordNumber(evMemEntryIndex, internalOrigin, RecordNumber, ffType, &ffIndex)) &&
	.d2line		9907
.Llo2291:
	lwz		r6,12(r1)
	diab.addi		r7,r1,10
.Llo2332:
	mr		r3,r3		# evMemEntryIndex=r3 evMemEntryIndex=r3
.Llo2333:
	mr		r4,r21		# internalOrigin=r4 internalOrigin=r21
	mr		r5,r29		# RecordNumber=r5 RecordNumber=r29
	bl		GetFFIndexByRecordNumber
.Llo2334:
	rlwinm		r3,r3,0,24,31		# evMemEntryIndex=r3 evMemEntryIndex=r3
	se_cmpi		r3,1		# evMemEntryIndex=r3
	bc		0,2,.L1945	# ne
.Llo2315:
	se_cmpi		r25,0		# pFFStorage=r25
	bc		1,2,.L1945	# eq
#                   (NULL_PTR != pFFStorage))
#                {
#                   pFFData = pFFStorage->p_get_buffer_entry(ffIndex);
	.d2line		9910
	lwz		r0,0(r25)		# pFFStorage=r25
	mtspr		ctr,r0
	lhz		r3,10(r1)		# evMemEntryIndex=r3
#$$fn 0x1ff9 0x0 0x0 0x1
#$$tl 0x8 0x0 0x0 0x1
#$$rs 4 s
	bcctrl		20,0
.Llo2320:
	mr		r31,r3		# pFFData=r31 pFFData=r3
#                   if (2 > *BufSize)
	.d2line		9911
.Llo2324:
	lhz		r0,0(r27)		# BufSize=r27
	se_cmpi		r0,2
	bc		0,0,.L1946	# ge
#                   {
#                      retVal = DEM_GET_FFDATABYDTC_WRONG_BUFFERSIZE;
	.d2line		9913
.Llo2321:
	diab.li		r26,4		# retVal=r26
.Llo2322:
	b		.L1947
.L1946:
#                   }
# #if (DEM_OBD_SUPPORT == STD_ON) && (DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF)
#                   else if (DEM_OBD_FREEZE_FRAME == ffType)
#                   {
#                      /* Special handling for OBD freeze frame. */
#                      /* Add record number header */
#                      DestBuffer[0] = (uint8)0U;
#                      usedSize = (uint16)1U;
#                      inOutSize = *BufSize - usedSize;
# 
#                      if (E_NOT_OK == GetAllOBDFreezeFrameData(pFFData, &DestBuffer[1], &inOutSize))
#                      {
#                         /* Provided buffer is too small */
#                         retVal = DEM_GET_FFDATABYDTC_WRONG_BUFFERSIZE;
#                      }
#                      usedSize += inOutSize;
#                   }
# #endif /* DEM_OBD_SUPPORT == STD_ON && DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF */
#                   else
#                   {
#                      /*
#                       * Initialize number of Dids to 0. Will be increased in
#                       * UpdateBufferWithFreezeFrameData() for each calibrated DID.
#                       */
#                      /* Record number */
#                      DestBuffer[0] = RecordNumber;
	.d2line		9939
	stb		r29,0(r28)		# DestBuffer=r28 RecordNumber=r29
#                      /* Number of DIDs */
#                      DestBuffer[1] = (uint8)0U;
	.d2line		9941
	diab.li		r0,0
	stb		r0,1(r28)		# DestBuffer=r28
#                      usedSize = (uint16)2U;
	.d2line		9942
	diab.li		r22,2		# usedSize=r22
#                      inOutSize = *BufSize - usedSize;
	.d2line		9943
	lhz		r0,0(r27)		# BufSize=r27
	diab.li		r3,65534		# evMemEntryIndex=r3
.Llo2335:
	se_add		r0,r3		# evMemEntryIndex=r3
	sth		r0,8(r1)
.L1947:
#                   }
# 
#                   /* Read out common part of stored freeze frame */
#                   if ((commonFFClass != DEM_FF_CLASS_INVALID) && (DEM_GET_FFDATABYDTC_OK == retVal))
	.d2line		9947
.Llo2295:
	rlwinm		r0,r23,0,16,31		# commonFFClass=r23
	cmpli		0,0,r0,65535
	bc		1,2,.L1948	# eq
	rlwinm		r3,r26,0,24,31		# evMemEntryIndex=r3 retVal=r26
.Llo2336:
	se_cmpi		r3,0		# evMemEntryIndex=r3
	bc		0,2,.L1948	# ne
#                   {
#                      commonFFSize = Dem_LCfg.p_ff_length[commonFFClass];
	.d2line		9949
.Llo2337:
	lis		r3,(Dem_LCfg+120)@ha		# evMemEntryIndex=r3
.Llo2338:
	lwz		r3,(Dem_LCfg+120)@l(r3)		# evMemEntryIndex=r3 evMemEntryIndex=r3
	rlwinm		r0,r23,1,15,30		# commonFFClass=r23
	lhzx		r20,r3,r0		# evMemEntryIndex=r3
	mr		r20,r20		# commonFFSize=r20 commonFFSize=r20
#                      if (DEM_GET_FFDATABYDTC_OK != UpdateBufferWithFreezeFrameData(commonFFClass, pFFData,
	.d2line		9950
	rlwinm		r6,r22,0,16,31		# usedSize=r22
	se_add		r6,r28		# DestBuffer=r28
	diab.addi		r5,r28,1		# DestBuffer=r28
	diab.addi		r7,r1,8
	mr		r3,r23		# commonFFClass=r3 commonFFClass=r23
.Llo2339:
	mr		r4,r31		# pFFData=r4 pFFData=r31
	diab.li		r8,1
	bl		UpdateBufferWithFreezeFrameData
	rlwinm		r3,r3,0,24,31		# commonFFClass=r3 commonFFClass=r3
	se_cmpi		r3,0		# commonFFClass=r3
#                         &DestBuffer[1], &DestBuffer[usedSize], &inOutSize, TRUE))
#                      {
#                         retVal = DEM_GET_FFDATABYDTC_WRONG_BUFFERSIZE;
	.d2line		9953
	diab.li		r0,4
	isel		r26,r26,r0,2		# retVal=r26 retVal=r26
.L1949:
#                      }
#                      usedSize += inOutSize;
	.d2line		9955
	lhz		r0,8(r1)
	add		r0,r0,r22		# usedSize=r22
	mr		r22,r0		# usedSize=r22 usedSize=r0
#                      inOutSize = *BufSize - usedSize;
	.d2line		9956
	lhz		r0,0(r27)		# BufSize=r27
	subf		r6,r22,r0		# usedSize=r22
	sth		r6,8(r1)
.L1948:
#                   }
# 
#                   /* Read out specific part of stored freeze frame */
#                   if ((ffClass != DEM_FF_CLASS_INVALID) && (DEM_GET_FFDATABYDTC_OK == retVal))
	.d2line		9960
	rlwinm		r3,r24,0,16,31		# evMemEntryIndex=r3 ffClass=r24
.Llo2340:
	cmpli		0,0,r3,65535		# evMemEntryIndex=r3
	bc		1,2,.L1950	# eq
.Llo2341:
	rlwinm		r3,r26,0,24,31		# evMemEntryIndex=r3 retVal=r26
.Llo2342:
	se_cmpi		r3,0		# evMemEntryIndex=r3
	bc		0,2,.L1950	# ne
#                   {
#                      if (DEM_GET_FFDATABYDTC_OK != UpdateBufferWithFreezeFrameData(ffClass, &pFFData[commonFFSize],
	.d2line		9962
.Llo2343:
	rlwinm		r4,r20,0,16,31		# internalOrigin=r4 commonFFSize=r20
.Llo2328:
	se_add		r4,r31		# internalOrigin=r4 internalOrigin=r4 pFFData=r31
.Llo2329:
	rlwinm		r6,r22,0,16,31		# usedSize=r22
	se_add		r6,r28		# DestBuffer=r28
	diab.addi		r5,r28,1		# DestBuffer=r28
	diab.addi		r7,r1,8
	mr		r3,r24		# ffClass=r3 ffClass=r24
	diab.li		r8,1
	bl		UpdateBufferWithFreezeFrameData
	rlwinm		r3,r3,0,24,31		# ffClass=r3 ffClass=r3
	se_cmpi		r3,0		# ffClass=r3
#                         &DestBuffer[1], &DestBuffer[usedSize], &inOutSize, TRUE))
#                      {
#                         retVal = DEM_GET_FFDATABYDTC_WRONG_BUFFERSIZE;
	.d2line		9965
	diab.li		r0,4
	isel		r26,r26,r0,2		# retVal=r26 retVal=r26
.L1951:
#                      }
#                      usedSize += inOutSize;
	.d2line		9967
.Llo2299:
	lhz		r0,8(r1)
	add		r0,r0,r22		# usedSize=r22
	mr		r22,r0		# usedSize=r22 usedSize=r0
.L1950:
#                   }
# 
#                   *BufSize = usedSize;
	.d2line		9970
.Llo2300:
	sth		r22,0(r27)		# BufSize=r27 usedSize=r22
	b		.L1954
.L1945:
#                }
#                else
#                {
#                   /* No FF saved or configured for that event. */
#                   *BufSize = (uint16)0U;
	.d2line		9975
.Llo2296:
	diab.li		r0,0
.Llo2325:
	sth		r0,0(r27)		# BufSize=r27
	b		.L1954
.L1938:
#                }
#             }
#             else
#             {
#                /* No event memory entry found for this DTC or no FF saved for that event. */
#                *BufSize = (uint16)0U;
	.d2line		9981
.Llo2316:
	diab.li		r0,0
	sth		r0,0(r27)		# BufSize=r27
	b		.L1954
.L1933:
#             }
#          }
#       }
#       else
#       {
#          /* No matching DTC was found. */
#          DEM_ASSERT_PARAM_DATA_NO_RET(DEM_SID_DCMGETFREEZEFRAMEDATABYDTC, FALSE)
	.d2line		9988
.Llo2292:
	diab.li		r3,54		# intDtc=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,29
	diab.li		r6,18
	bl		Det_ReportError
#          retVal = DEM_GET_FFDATABYDTC_WRONG_DTC;
	.d2line		9989
	diab.li		r26,1		# retVal=r26
.L1954:
#       }
# 
#       if (retVal != DEM_GET_FFDATABYDTC_OK)
	.d2line		9992
.Llo2293:
	rlwinm		r3,r26,0,24,31		# intDtc=r3 retVal=r26
.Llo2317:
	se_cmpi		r3,0		# intDtc=r3
	bc		1,2,.L1957	# eq
#       {
#          *BufSize = (uint16)0U;
	.d2line		9994
.Llo2318:
	diab.li		r0,0
	sth		r0,0(r27)		# BufSize=r27
	b		.L1957
.L1932:
#       }
#    }
#    else
#    {
#       retVal = DEM_GET_FFDATABYDTC_WRONG_BUFFERSIZE;
	.d2line		9999
.Llo2281:
	diab.li		r26,4		# retVal=r26
.L1957:
#    }
#    return retVal;
	.d2line		10001
.Llo2282:
	rlwinm		r3,r26,0,24,31		# intDtc=r3 retVal=r26
.L1923:
# }
	.d2line		10002
	.d2epilogue_begin
.Llo2297:
	lmw		r20,32(r1)		# offset r1+32  0x20
	.d2_cfa_restore_list	2,10
.Llo2301:
	lwz		r0,84(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,80		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2298:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4534:
	.type		Dem_DcmGetFreezeFrameDataByDTC,@function
	.size		Dem_DcmGetFreezeFrameDataByDTC,.-Dem_DcmGetFreezeFrameDataByDTC
# Number of nodes = 490

# Allocations for Dem_DcmGetFreezeFrameDataByDTC
#	?a4		DTC
#	?a5		DTCOrigin
#	?a6		RecordNumber
#	?a7		DestBuffer
#	?a8		BufSize
#	?a9		retVal
#	SP,16		pEvMemEntry
#	?a10		intDtc
#	SP,10		ffIndex
#	?a11		pFFStorage
#	?a12		pFFData
#	?a13		ffClass
#	?a14		commonFFClass
#	SP,12		ffType
#	SP,8		inOutSize
#	?a15		usedSize
#	?a16		internalOrigin
#	?a17		commonFFSize
#	?a18		evMemEntryIndex
#	?a19		noErrors
# FUNC(Dem_ReturnSetFilterType, DEM_CODE) Dem_DcmSetFreezeFrameRecordFilter(Dem_DTCFormatType DTCFormat,
	.align		2
	.section	.text_vle
        .d2line         10005,41
#$$ld
.L4569:

#$$bf	Dem_DcmSetFreezeFrameRecordFilter,interprocedural,rasave,nostackparams
	.globl		Dem_DcmSetFreezeFrameRecordFilter
	.d2_cfa_start __cie
Dem_DcmSetFreezeFrameRecordFilter:
.Llo2348:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTCFormat=r31 DTCFormat=r3
	mr		r29,r4		# NumberOfFilteredRecords=r29 NumberOfFilteredRecords=r4
	.d2prologue_end
#          P2VAR(uint16, AUTOMATIC, DEM_APPL_DATA) NumberOfFilteredRecords)
# {
#    Dem_ReturnSetFilterType retVal = DEM_WRONG_FILTER;
	.d2line		10008
	diab.li		r30,1		# retVal=r30
# 
#    DEM_PRE_ASSERT()
	.d2line		10010
.Llo2356:
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_DCMSETFREEZEFRAMERECORDFILTER, DEM_INIT == Dem_InitState)
	.d2line		10011
.Llo2359:
	lis		r3,Dem_InitState@ha
.Llo2349:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L1985	# eq
.Llo2350:
	diab.li		r3,54
.Llo2352:
	diab.li		r4,0
	diab.li		r5,63
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1985:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMSETFREEZEFRAMERECORDFILTER, (DTCFormat == DEM_DTC_FORMAT_OBD) || (DTCFormat == DEM_DTC_FORMAT_UDS))
	.d2line		10012
	rlwinm		r3,r31,0,24,31		# DTCFormat=r31
	se_cmpi		r3,0
	bc		1,2,.L1986	# eq
	rlwinm		r3,r31,0,24,31		# DTCFormat=r31
	se_cmpi		r3,11
	bc		1,2,.L1986	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,63
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1986:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMSETFREEZEFRAMERECORDFILTER, (NULL_PTR != NumberOfFilteredRecords))
	.d2line		10013
	se_cmpi		r29,0		# NumberOfFilteredRecords=r29
	bc		0,2,.L1987	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,63
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L1987:
#    DEM_POST_ASSERT_RETVAL(DEM_WRONG_FILTER)
	.d2line		10014
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L1988	# ne
.Llo2360:
	diab.li		r3,1
	b		.L1984
.L1988:
# 
#    /* [SWS_Dem_00595] [SWS_Dem_00650]
#     * Reset variables used in Dem_DcmGetNextFilteredRecord
#     */
#    DTCRecordFilter.next_ev_mem_entry_index = 0;
	.d2line		10019
	diab.li		r0,0		# noErrors=r0
.Llo2361:
	lis		r3,DTCRecordFilter@ha
	e_add16i		r3,r3,DTCRecordFilter@l
	stb		r0,0(r3)		# noErrors=r0
#    DTCRecordFilter.next_ev_mem_entry_ff_index = 0;
	.d2line		10020
	lis		r3,(DTCRecordFilter+1)@ha
	stb		r0,(DTCRecordFilter+1)@l(r3)		# noErrors=r0
#    DTCRecordFilter.has_checked_dev_a_ff = FALSE;
	.d2line		10021
	lis		r3,(DTCRecordFilter+2)@ha
	stb		r0,(DTCRecordFilter+2)@l(r3)		# noErrors=r0
#    DTCRecordFilter.has_checked_dev_b_ff = FALSE;
	.d2line		10022
	lis		r3,(DTCRecordFilter+3)@ha
	stb		r0,(DTCRecordFilter+3)@l(r3)		# noErrors=r0
#    DTCRecordFilter.dtc_format = DTCFormat;
	.d2line		10023
	lis		r3,(DTCRecordFilter+4)@ha
	stb		r31,(DTCRecordFilter+4)@l(r3)		# DTCFormat=r31
# #if (DEM_OBD_SUPPORT == STD_ON) && (DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF)
#    DTCRecordFilter.has_checked_obd_ff = FALSE;
# #endif /* DEM_OBD_SUPPORT == STD_ON && DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF */
# 
#    if ((DEM_INIT == Dem_InitState) && (NULL_PTR != NumberOfFilteredRecords))
	.d2line		10028
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L1989	# ne
.Llo2351:
	se_cmpi		r29,0		# NumberOfFilteredRecords=r29
	bc		1,2,.L1989	# eq
	.section	.text_vle
.L4578:
#    {
#       /* Count how many freeze-frames there are in the primary memory */
#       CONSTP2CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC, DEM_APPL_CONST) pEntries = 
	.d2line		10031
.Llo2357:
	lis		r3,(Dem_LCfg+20)@ha
	lwz		r3,(Dem_LCfg+20)@l(r3)
	lwz		r0,0(r3)		# noErrors=r0
.Llo2362:
	mr		r0,r0		# pEntries=r0 pEntries=r0
#          Dem_GetEvMemEntriesPtr(DEM_DTC_ORIGIN_PRIMARY_MEMORY_INTERNAL_INDEX);
#       uint8 i;
#       *NumberOfFilteredRecords = 0;
	.d2line		10034
.Llo2363:
	diab.li		r3,0
.Llo2364:
	sth		r3,0(r29)		# NumberOfFilteredRecords=r29
# 
#       /* [SWS_Dem_00210] */
#       for (i = 0; i < (uint8)DEM_MAX_NUMBER_EVENT_ENTRY_PRM; i++)
.L1990:
	.d2line		10037
	rlwinm		r5,r3,0,24,31		# intDtc=r5 i=r3
.Llo2365:
	se_cmpi		r5,10		# intDtc=r5
	bc		0,0,.L1992	# ge
#       {
#          if (DEM_EVENTID_INVALID != pEntries[i]->event_id)
	.d2line		10039
.Llo2366:
	rlwinm		r5,r3,2,22,29		# intDtc=r5 i=r3
.Llo2367:
	lwzux		r4,r5,r0		# intDtc=r5
	lhz		r4,0(r4)
	se_cmpi		r4,0
	bc		1,2,.L1993	# eq
	.section	.text_vle
.L4586:
#          {
#             /* Each DTC is reported as a separate record. */
#             CONST(uint16, AUTOMATIC) intDtc = Dem_GetEventIntDtc(pEntries[i]->event_id);
	.d2line		10042
.Llo2368:
	lis		r4,Dem_pPbCfg@ha
	lwz		r4,Dem_pPbCfg@l(r4)
	lwz		r6,128(r4)
	rlwinm		r5,r3,2,22,29		# intDtc=r5 i=r3
.Llo2369:
	lwzux		r4,r5,r0		# intDtc=r5
	lhz		r4,0(r4)
	rlwinm		r4,r4,1,15,30
	se_add		r4,r6
	lhz		r5,-2(r4)		# intDtc=r5
	mr		r5,r5		# intDtc=r5 intDtc=r5
#             if ((DEM_INT_DTC_INVALID != intDtc) && (Dem_IsObdDtc(intDtc) || IsUdsDtc(intDtc)))
	.d2line		10043
	rlwinm		r6,r5,0,16,31		# intDtc=r5
	cmpli		0,0,r6,65535
	bc		1,2,.L1993	# eq
	lis		r4,Dem_pPbCfg@ha
	lwz		r4,Dem_pPbCfg@l(r4)
	lwz		r4,72(r4)
	rlwinm		r6,r5,1,15,30		# intDtc=r5
	lhzx		r4,r4,r6
	se_cmpi		r4,0
	bc		0,2,.L1997	# ne
.Llo2370:
	lis		r4,Dem_pPbCfg@ha
	lwz		r4,Dem_pPbCfg@l(r4)
	lwz		r4,76(r4)
.Llo2371:
	rlwinm		r5,r5,2,14,29		# intDtc=r5 intDtc=r5
.Llo2372:
	lwzx		r4,r4,r5
	se_cmpi		r4,0
	bc		1,2,.L1993	# eq
.L1997:
#             {
#                /* Event had a DTC */
#                *NumberOfFilteredRecords += (uint16)pEntries[i]->num_stored_ff;
	.d2line		10046
	lhz		r6,0(r29)		# NumberOfFilteredRecords=r29
	rlwinm		r5,r3,2,22,29		# intDtc=r5 i=r3
.Llo2373:
	lwzux		r4,r5,r0		# intDtc=r5
	lbz		r4,11(r4)
	se_add		r4,r6
	sth		r4,0(r29)		# NumberOfFilteredRecords=r29
#                if (pEntries[i]->dev_a_ff_index != DEM_FF_BUFFER_INVALID)
	.d2line		10047
	rlwinm		r5,r3,2,22,29		# intDtc=r5 i=r3
	lwzux		r4,r5,r0		# intDtc=r5
	lhz		r4,4(r4)
	cmpli		0,0,r4,65535
	bc		1,2,.L1995	# eq
#                {
#                   *NumberOfFilteredRecords += (uint16)1U;
	.d2line		10049
.Llo2374:
	lhz		r4,0(r29)		# NumberOfFilteredRecords=r29
	se_addi		r4,1
	sth		r4,0(r29)		# NumberOfFilteredRecords=r29
.L1995:
#                }
#                if (pEntries[i]->dev_b_ff_index != DEM_FF_BUFFER_INVALID)
	.d2line		10051
	rlwinm		r5,r3,2,22,29		# intDtc=r5 i=r3
.Llo2375:
	lwzux		r4,r5,r0		# intDtc=r5
	lhz		r4,6(r4)
	cmpli		0,0,r4,65535
	bc		1,2,.L1993	# eq
#                {
#                   *NumberOfFilteredRecords += (uint16)1U;
	.d2line		10053
.Llo2376:
	lhz		r4,0(r29)		# NumberOfFilteredRecords=r29
	se_addi		r4,1
	sth		r4,0(r29)		# NumberOfFilteredRecords=r29
	.section	.text_vle
.L4587:
.L1993:
#                }
# #if (DEM_OBD_SUPPORT == STD_ON) && (DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF)
#                if (pEntries[i]->obd_ff_index != DEM_FF_BUFFER_INVALID)
#                {
#                   *NumberOfFilteredRecords += (uint16)1U;
#                }
# #endif /* DEM_OBD_SUPPORT == STD_ON && DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF */
#             }
#          }
#       }
	.d2line		10063
	diab.addi		r5,r3,1		# intDtc=r5 i=r3
	se_addi		r3,1		# i=r3 i=r3
	b		.L1990
.L1992:
# 
#       retVal = DEM_FILTER_ACCEPTED;
	.d2line		10065
	diab.li		r30,0		# retVal=r30
	.section	.text_vle
.L4579:
.L1989:
#    }
# 
#    return retVal;
	.d2line		10068
.Llo2358:
	rlwinm		r3,r30,0,24,31		# i=r3 retVal=r30
.L1984:
# }
	.d2line		10069
	.d2epilogue_begin
.Llo2353:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
.Llo2354:
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2355:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4570:
	.type		Dem_DcmSetFreezeFrameRecordFilter,@function
	.size		Dem_DcmSetFreezeFrameRecordFilter,.-Dem_DcmSetFreezeFrameRecordFilter
# Number of nodes = 241

# Allocations for Dem_DcmSetFreezeFrameRecordFilter
#	?a4		DTCFormat
#	?a5		NumberOfFilteredRecords
#	?a6		retVal
#	?a7		noErrors
#	?a8		pEntries
#	?a9		i
#	?a10		intDtc
# FUNC(Dem_ReturnGetNextFilteredElementType, DEM_CODE) Dem_DcmGetNextFilteredRecord(P2VAR(uint32, AUTOMATIC, DEM_APPL_DATA) DTC,
	.align		2
	.section	.text_vle
        .d2line         10073,54
#$$ld
.L4594:

#$$bf	Dem_DcmGetNextFilteredRecord,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetNextFilteredRecord
	.d2_cfa_start __cie
Dem_DcmGetNextFilteredRecord:
.Llo2377:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# RecordNumber=r30 RecordNumber=r4
	.d2prologue_end
#       P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) RecordNumber)
# {
#    Dem_ReturnGetNextFilteredElementType retVal = DEM_FILTERED_NO_MATCHING_ELEMENT;
	.d2line		10076
	diab.li		r29,1		# retVal=r29
# 
#    DEM_PRE_ASSERT()
	.d2line		10078
	diab.li		r4,1
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETNEXTFILTEREDRECORD, DEM_INIT == Dem_InitState)
	.d2line		10079
.Llo2383:
	lis		r3,Dem_InitState@ha
.Llo2378:
	lwz		r0,Dem_InitState@l(r3)
	se_cmpi		r0,2
	bc		1,2,.L2010	# eq
.Llo2379:
	diab.li		r3,54
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,58
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L2010:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETNEXTFILTEREDRECORD, (NULL_PTR != DTC))
	.d2line		10080
	se_cmpi		r31,0		# DTC=r31
	bc		0,2,.L2011	# ne
	diab.li		r3,54
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,58
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L2011:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETNEXTFILTEREDRECORD, (NULL_PTR != RecordNumber))
	.d2line		10081
	se_cmpi		r30,0		# RecordNumber=r30
	bc		0,2,.L2012	# ne
	diab.li		r3,54
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,58
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L2012:
#    DEM_POST_ASSERT_RETVAL(DEM_FILTERED_NO_MATCHING_ELEMENT)
	.d2line		10082
	rlwinm		r4,r4,0,24,31		# noErrors=r4 noErrors=r4
	se_cmpi		r4,0		# noErrors=r4
	bc		0,2,.L2013	# ne
.Llo2386:
	diab.li		r3,1
	b		.L2009
.L2013:
# 
#    if ((DEM_INIT == Dem_InitState) &&
	.d2line		10084
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)
	se_cmpi		r0,2
	bc		0,2,.L2014	# ne
	se_cmpi		r31,0		# DTC=r31
	bc		1,2,.L2014	# eq
	se_cmpi		r30,0		# RecordNumber=r30
	bc		1,2,.L2014	# eq
#        (NULL_PTR != DTC) &&
#        (NULL_PTR != RecordNumber))
#    {
#       if (DEM_FILTERED_NO_MATCHING_ELEMENT == retVal)
	.d2line		10088
	rlwinm		r3,r29,0,24,31		# retVal=r29
	se_cmpi		r3,1
	bc		0,2,.L2015	# ne
	.section	.text_vle
.L4603:
#       {
#          CONSTP2CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC, DEM_APPL_CONST) pEntries = 
	.d2line		10090
	lis		r3,(Dem_LCfg+20)@ha
	lwz		r3,(Dem_LCfg+20)@l(r3)
	lwz		r0,0(r3)
.Llo2418:
	mr		r0,r0		# pEntries=r0 pEntries=r0
#             Dem_GetEvMemEntriesPtr(DEM_DTC_ORIGIN_PRIMARY_MEMORY_INTERNAL_INDEX);
#          uint8 i;
#          for (i = DTCRecordFilter.next_ev_mem_entry_index; (i < (uint8)DEM_MAX_NUMBER_EVENT_ENTRY_PRM) && (DEM_FILTERED_NO_MATCHING_ELEMENT == retVal); i++)
	.d2line		10093
.Llo2419:
	lis		r3,DTCRecordFilter@ha
	lbz		r3,DTCRecordFilter@l(r3)
.Llo2420:
	mr		r3,r3		# i=r3 i=r3
.L2016:
	rlwinm		r4,r3,0,24,31		# noErrors=r4 i=r3
.Llo2387:
	se_cmpi		r4,10		# noErrors=r4
	bc		0,0,.L2015	# ge
.Llo2388:
	rlwinm		r4,r29,0,24,31		# noErrors=r4 retVal=r29
.Llo2389:
	se_cmpi		r4,1		# noErrors=r4
	bc		0,2,.L2015	# ne
	.section	.text_vle
.L4611:
#          {
#             CONST(Dem_EventIdType, AUTOMATIC) eventId = pEntries[i]->event_id;
	.d2line		10095
.Llo2390:
	rlwinm		r4,r3,2,22,29		# noErrors=r4 i=r3
.Llo2391:
	lwzux		r5,r4,r0		# eventId=r5 noErrors=r4
.Llo2424:
	lhz		r5,0(r5)		# eventId=r5 eventId=r5
	mr		r5,r5		# eventId=r5 eventId=r5
#             if (DEM_EVENTID_INVALID != eventId)
	.d2line		10096
	rlwinm		r4,r5,0,16,31		# noErrors=r4 eventId=r5
	se_cmpi		r4,0		# noErrors=r4
	bc		1,2,.L2019	# eq
	.section	.text_vle
.L4617:
#             {
#                /* Non-empty entry */
#                CONST(uint16, AUTOMATIC) internalDtc = Dem_GetEventIntDtc(eventId);
	.d2line		10099
.Llo2392:
	lis		r4,Dem_pPbCfg@ha		# noErrors=r4
.Llo2393:
	lwz		r4,Dem_pPbCfg@l(r4)		# noErrors=r4 noErrors=r4
	lwz		r4,128(r4)		# noErrors=r4 noErrors=r4
.Llo2425:
	rlwinm		r5,r5,1,15,30		# eventId=r5 eventId=r5
	se_add		r5,r4		# eventId=r5 eventId=r5 noErrors=r4
	lhz		r6,-2(r5)		# internalDtc=r6 eventId=r5
.Llo2435:
	mr		r6,r6		# internalDtc=r6 internalDtc=r6
# 
#                /* [SWS_Dem_00277] */
#                if (DEM_DTC_FORMAT_UDS == DTCRecordFilter.dtc_format)
	.d2line		10102
	lis		r4,(DTCRecordFilter+4)@ha		# noErrors=r4
	lbz		r4,(DTCRecordFilter+4)@l(r4)		# noErrors=r4 noErrors=r4
	se_cmpi		r4,11		# noErrors=r4
	bc		0,2,.L2020	# ne
#                {
#                   *DTC = GetUdsDtc(internalDtc);
	.d2line		10104
.Llo2394:
	lis		r4,Dem_pPbCfg@ha		# noErrors=r4
.Llo2395:
	lwz		r4,Dem_pPbCfg@l(r4)		# noErrors=r4 noErrors=r4
	lwz		r4,76(r4)		# noErrors=r4 noErrors=r4
	rlwinm		r5,r6,2,14,29		# eventId=r5 internalDtc=r6
	lwzx		r4,r4,r5		# noErrors=r4 noErrors=r4
	stw		r4,0(r31)		# DTC=r31 noErrors=r4
	b		.L2021
.L2020:
#                }
#                else
#                {
#                   /* DEM_DTC_FORMAT_OBD */
#                   *DTC = (uint32)GetObdDtc(internalDtc) << 8;
	.d2line		10109
.Llo2396:
	lis		r4,Dem_pPbCfg@ha		# noErrors=r4
.Llo2397:
	lwz		r4,Dem_pPbCfg@l(r4)		# noErrors=r4 noErrors=r4
	lwz		r4,72(r4)		# noErrors=r4 noErrors=r4
	rlwinm		r5,r6,1,15,30		# eventId=r5 internalDtc=r6
	lhzx		r4,r4,r5		# noErrors=r4 noErrors=r4
	rlwinm		r4,r4,8,8,23		# noErrors=r4 noErrors=r4
	stw		r4,0(r31)		# DTC=r31 noErrors=r4
.L2021:
#                }
# 
#                if (0 != *DTC)
	.d2line		10112
.Llo2398:
	lwz		r4,0(r31)		# noErrors=r4 DTC=r31
.Llo2399:
	se_cmpi		r4,0		# noErrors=r4
	bc		1,2,.L2019	# eq
#                {
#                   /* DTCFormat matches */
#                   if (DTCRecordFilter.next_ev_mem_entry_ff_index < pEntries[i]->num_stored_ff)
	.d2line		10115
.Llo2400:
	lis		r4,(DTCRecordFilter+1)@ha		# noErrors=r4
.Llo2401:
	lbz		r7,(DTCRecordFilter+1)@l(r4)		# noErrors=r4
	rlwinm		r4,r3,2,22,29		# noErrors=r4 i=r3
	lwzux		r5,r4,r0		# eventId=r5 noErrors=r4
.Llo2426:
	lbz		r4,11(r5)		# noErrors=r4 eventId=r5
	se_cmp		r7,r4		# noErrors=r4
	bc		0,0,.L2023	# ge
	.section	.text_vle
.L4623:
#                   {
#                      /* Still standard ff-records left to report for this entry */
#                      CONST(uint8, AUTOMATIC) ffRecNumClass = GetDtcFFRecNumClass(internalDtc);
	.d2line		10118
.Llo2384:
	lis		r5,Dem_pPbCfg@ha		# eventId=r5
.Llo2427:
	lwz		r4,Dem_pPbCfg@l(r5)		# noErrors=r4 eventId=r5
.Llo2402:
	lwz		r4,36(r4)		# noErrors=r4 noErrors=r4
	lwz		r5,Dem_pPbCfg@l(r5)		# eventId=r5 eventId=r5
	lwz		r5,92(r5)		# eventId=r5 eventId=r5
.Llo2436:
	rlwinm		r6,r6,0,16,31		# internalDtc=r6 internalDtc=r6
.Llo2437:
	lbzx		r5,r5,r6		# eventId=r5 eventId=r5
	lbzx		r5,r4,r5		# eventId=r5 noErrors=r4
.Llo2428:
	mr		r5,r5		# ffRecNumClass=r5 ffRecNumClass=r5
#                      *RecordNumber = GetFFRecordClassRecordNumber(ffRecNumClass, DTCRecordFilter.next_ev_mem_entry_ff_index);
	.d2line		10119
	lis		r4,(Dem_LCfg+32)@ha		# noErrors=r4
	lwz		r4,(Dem_LCfg+32)@l(r4)		# noErrors=r4 noErrors=r4
	rlwinm		r5,r5,3,21,28		# ffRecNumClass=r5 ffRecNumClass=r5
.Llo2445:
	lwzx		r4,r4,r5		# noErrors=r4 noErrors=r4
	lis		r5,(DTCRecordFilter+1)@ha		# ffRecNumClass=r5
.Llo2446:
	lbz		r6,(DTCRecordFilter+1)@l(r5)		# internalDtc=r6 ffRecNumClass=r5
.Llo2438:
	rlwinm		r6,r6,3,21,28		# internalDtc=r6 internalDtc=r6
.Llo2439:
	lbzx		r4,r4,r6		# noErrors=r4 noErrors=r4
	stb		r4,0(r30)		# RecordNumber=r30 noErrors=r4
#                      retVal = DEM_FILTERED_OK;
	.d2line		10120
	diab.li		r29,0		# retVal=r29
# 
#                      /* Update variables for next call to this function */
#                      DTCRecordFilter.next_ev_mem_entry_index = i;
	.d2line		10123
.Llo2385:
	lis		r4,DTCRecordFilter@ha		# noErrors=r4
	e_add16i		r4,r4,DTCRecordFilter@l		# noErrors=r4 noErrors=r4
	stb		r3,0(r4)		# noErrors=r4 i=r3
#                      DTCRecordFilter.next_ev_mem_entry_ff_index++;
	.d2line		10124
	lbz		r4,(DTCRecordFilter+1)@l(r5)		# noErrors=r4 ffRecNumClass=r5
	se_addi		r4,1		# noErrors=r4 noErrors=r4
	stb		r4,(DTCRecordFilter+1)@l(r5)		# ffRecNumClass=r5 noErrors=r4
	.section	.text_vle
.L4624:
.Llo2403:
	b		.L2019
.L2023:
#                   }
#                   else
#                   {
#                      /* No more standard records to report for this event memory entry, check development */
#                      if ((FALSE == DTCRecordFilter.has_checked_dev_a_ff) && (pEntries[i]->dev_a_ff_index != DEM_FF_BUFFER_INVALID))
	.d2line		10129
.Llo2440:
	lis		r4,(DTCRecordFilter+2)@ha		# noErrors=r4
.Llo2404:
	lbz		r4,(DTCRecordFilter+2)@l(r4)		# noErrors=r4 noErrors=r4
	se_cmpi		r4,0		# noErrors=r4
	bc		0,2,.L2025	# ne
.Llo2405:
	rlwinm		r4,r3,2,22,29		# noErrors=r4 i=r3
.Llo2406:
	lwzux		r5,r4,r0		# eventId=r5 noErrors=r4
.Llo2429:
	lhz		r4,4(r5)		# noErrors=r4 eventId=r5
	cmpli		0,0,r4,65535		# noErrors=r4
	bc		1,2,.L2025	# eq
#                      {
#                         /* Return development freeze frame A */
#                         DTCRecordFilter.has_checked_dev_a_ff = TRUE;
	.d2line		10132
.Llo2407:
	diab.li		r5,1		# eventId=r5
.Llo2430:
	lis		r4,(DTCRecordFilter+2)@ha		# noErrors=r4
.Llo2408:
	stb		r5,(DTCRecordFilter+2)@l(r4)		# noErrors=r4 eventId=r5
#                         *RecordNumber = GetDtcDevAFFRecNum(internalDtc);
	.d2line		10133
	lis		r5,Dem_pPbCfg@ha		# eventId=r5
	lwz		r4,Dem_pPbCfg@l(r5)		# noErrors=r4 eventId=r5
	lwz		r4,40(r4)		# noErrors=r4 noErrors=r4
	lwz		r5,Dem_pPbCfg@l(r5)		# eventId=r5 eventId=r5
	lwz		r5,92(r5)		# eventId=r5 eventId=r5
.Llo2441:
	rlwinm		r6,r6,0,16,31		# internalDtc=r6 internalDtc=r6
.Llo2442:
	lbzx		r5,r5,r6		# eventId=r5 eventId=r5
.Llo2431:
	lbzx		r4,r4,r5		# noErrors=r4 noErrors=r4
	stb		r4,0(r30)		# RecordNumber=r30 noErrors=r4
#                         retVal = DEM_FILTERED_OK;
	.d2line		10134
	diab.li		r29,0		# retVal=r29
	b		.L2019
.L2025:
#                      }
#                      else if ((FALSE == DTCRecordFilter.has_checked_dev_b_ff) && (pEntries[i]->dev_b_ff_index != DEM_FF_BUFFER_INVALID))
	.d2line		10136
.Llo2409:
	lis		r4,(DTCRecordFilter+3)@ha		# noErrors=r4
.Llo2410:
	lbz		r4,(DTCRecordFilter+3)@l(r4)		# noErrors=r4 noErrors=r4
	se_cmpi		r4,0		# noErrors=r4
	bc		0,2,.L2027	# ne
.Llo2411:
	rlwinm		r4,r3,2,22,29		# noErrors=r4 i=r3
.Llo2412:
	lwzux		r5,r4,r0		# eventId=r5 noErrors=r4
.Llo2432:
	lhz		r4,6(r5)		# noErrors=r4 eventId=r5
	cmpli		0,0,r4,65535		# noErrors=r4
	bc		1,2,.L2027	# eq
#                      {
#                         /* Return development freeze frame B */
#                         DTCRecordFilter.has_checked_dev_a_ff = TRUE;
	.d2line		10139
.Llo2413:
	diab.li		r5,1		# eventId=r5
.Llo2433:
	lis		r4,(DTCRecordFilter+2)@ha		# noErrors=r4
.Llo2414:
	stb		r5,(DTCRecordFilter+2)@l(r4)		# noErrors=r4 eventId=r5
#                         DTCRecordFilter.has_checked_dev_b_ff = TRUE;
	.d2line		10140
	lis		r4,(DTCRecordFilter+3)@ha		# noErrors=r4
	stb		r5,(DTCRecordFilter+3)@l(r4)		# noErrors=r4 eventId=r5
#                         *RecordNumber = GetDtcDevBFFRecNum(internalDtc);
	.d2line		10141
	lis		r4,Dem_pPbCfg@ha		# noErrors=r4
	lwz		r5,Dem_pPbCfg@l(r4)		# eventId=r5 noErrors=r4
	lwz		r5,44(r5)		# eventId=r5 eventId=r5
	lwz		r4,Dem_pPbCfg@l(r4)		# noErrors=r4 noErrors=r4
	lwz		r4,92(r4)		# noErrors=r4 noErrors=r4
.Llo2443:
	rlwinm		r6,r6,0,16,31		# internalDtc=r6 internalDtc=r6
.Llo2444:
	lbzx		r4,r4,r6		# noErrors=r4 noErrors=r4
	lbzx		r4,r5,r4		# noErrors=r4 eventId=r5
	stb		r4,0(r30)		# RecordNumber=r30 noErrors=r4
#                         retVal = DEM_FILTERED_OK;
	.d2line		10142
	diab.li		r29,0		# retVal=r29
	b		.L2019
.L2027:
#                      }
# #if (DEM_OBD_SUPPORT == STD_ON) && (DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF)
#                      else if ((FALSE == DTCRecordFilter.has_checked_obd_ff) && (pEntries[i]->obd_ff_index != DEM_FF_BUFFER_INVALID))
#                      {
#                         /* Return OBD freeze frame */
#                         DTCRecordFilter.has_checked_dev_a_ff = TRUE;
#                         DTCRecordFilter.has_checked_dev_b_ff = TRUE;
#                         DTCRecordFilter.has_checked_obd_ff = TRUE;
#                         *RecordNumber = (uint8)0U;
#                         retVal = DEM_FILTERED_OK;
#                      }
# #endif /* DEM_OBD_SUPPORT == STD_ON && DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF */
#                      else
#                      {
#                         /* No more records to report for this event memory entry, try the next */
#                         DTCRecordFilter.next_ev_mem_entry_ff_index = (uint8)0U;
	.d2line		10158
.Llo2415:
	diab.li		r5,0		# eventId=r5
.Llo2434:
	lis		r4,(DTCRecordFilter+1)@ha		# noErrors=r4
.Llo2416:
	stb		r5,(DTCRecordFilter+1)@l(r4)		# noErrors=r4 eventId=r5
#                         DTCRecordFilter.has_checked_dev_a_ff = FALSE;
	.d2line		10159
	lis		r4,(DTCRecordFilter+2)@ha		# noErrors=r4
	stb		r5,(DTCRecordFilter+2)@l(r4)		# noErrors=r4 eventId=r5
#                         DTCRecordFilter.has_checked_dev_b_ff = FALSE;
	.d2line		10160
	lis		r4,(DTCRecordFilter+3)@ha		# noErrors=r4
	stb		r5,(DTCRecordFilter+3)@l(r4)		# noErrors=r4 eventId=r5
	.section	.text_vle
.L4618:
.L2019:
	.section	.text_vle
.L4612:
# #if (DEM_OBD_SUPPORT == STD_ON) && (DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF)
#                         DTCRecordFilter.has_checked_obd_ff = FALSE;
# #endif /* DEM_OBD_SUPPORT == STD_ON && DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF */
#                      }
#                   }
#                }
#             }
#          }
	.d2line		10168
.Llo2417:
	diab.addi		r4,r3,1		# noErrors=r4 i=r3
	se_addi		r3,1		# i=r3 i=r3
	b		.L2016
	.section	.text_vle
.L4604:
.L2015:
#       }
# 
#       if (DEM_FILTERED_NO_MATCHING_ELEMENT == retVal)
	.d2line		10171
.Llo2421:
	rlwinm		r3,r29,0,24,31		# i=r3 retVal=r29
.Llo2422:
	se_cmpi		r3,1		# i=r3
	bc		0,2,.L2014	# ne
#       {
#          /* No more records to report */
#          DTCRecordFilter.next_ev_mem_entry_index = 0xff;
	.d2line		10174
.Llo2380:
	diab.li		r0,255
	lis		r3,DTCRecordFilter@ha		# i=r3
.Llo2423:
	e_add16i		r3,r3,DTCRecordFilter@l		# i=r3 i=r3
	stb		r0,0(r3)		# i=r3
.L2014:
#       }
#    }
# 
#    return retVal;
	.d2line		10178
.Llo2381:
	rlwinm		r3,r29,0,24,31		# i=r3 retVal=r29
.L2009:
# }
	.d2line		10179
	.d2epilogue_begin
.Llo2382:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)
	mtspr		lr,r0
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4595:
	.type		Dem_DcmGetNextFilteredRecord,@function
	.size		Dem_DcmGetNextFilteredRecord,.-Dem_DcmGetNextFilteredRecord
# Number of nodes = 381

# Allocations for Dem_DcmGetNextFilteredRecord
#	?a4		DTC
#	?a5		RecordNumber
#	?a6		retVal
#	?a7		noErrors
#	?a8		pEntries
#	?a9		i
#	?a10		eventId
#	?a11		internalDtc
#	?a12		ffRecNumClass
# FUNC(Dem_ReturnGetNextFilteredElementType, DEM_CODE) Dem_DcmGetNextFilteredDTCAndFDC(P2VAR(uint32, AUTOMATIC, DEM_APPL_DATA) DTC,
	.align		2
	.section	.text_vle
        .d2line         10277,54
#$$ld
.L4631:

#$$bf	Dem_DcmGetNextFilteredDTCAndFDC,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetNextFilteredDTCAndFDC
	.d2_cfa_start __cie
Dem_DcmGetNextFilteredDTCAndFDC:
.Llo2447:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	27,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# DTCFaultDetectionCounter=r30 DTCFaultDetectionCounter=r4
	.d2prologue_end
#          P2VAR(sint8, AUTOMATIC, DEM_APPL_DATA) DTCFaultDetectionCounter)
# {
#    boolean dtcFound = FALSE;
	.d2line		10280
	diab.li		r29,0		# dtcFound=r29
#    uint16 i;
#    Dem_ReturnGetNextFilteredElementType retVal = DEM_FILTERED_NO_MATCHING_ELEMENT;
	.d2line		10282
.Llo2454:
	diab.li		r27,1		# retVal=r27
# 
#    DEM_PRE_ASSERT()
	.d2line		10284
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETNEXTFILTEREDDTCANDFDC, DEM_INIT == Dem_InitState)
	.d2line		10285
.Llo2461:
	lis		r3,Dem_InitState@ha
.Llo2448:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L2045	# eq
.Llo2449:
	diab.li		r3,54
.Llo2451:
	diab.li		r4,0
	diab.li		r5,59
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2045:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETNEXTFILTEREDDTCANDFDC, (NULL_PTR != DTC))
	.d2line		10286
	se_cmpi		r31,0		# DTC=r31
	bc		0,2,.L2046	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,59
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2046:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETNEXTFILTEREDDTCANDFDC, (NULL_PTR != DTCFaultDetectionCounter))
	.d2line		10287
	se_cmpi		r30,0		# DTCFaultDetectionCounter=r30
	bc		0,2,.L2047	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,59
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2047:
#    DEM_ASSERT_WRONG_CONDITION(DEM_SID_DCMGETNEXTFILTEREDDTCANDFDC, (TRUE == DTCFilter.filter_active))
	.d2line		10288
	lis		r3,DTCFilter@ha
	lbz		r3,DTCFilter@l(r3)
	se_cmpi		r3,1
	bc		1,2,.L2048	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,59
	diab.li		r6,64
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2048:
#    DEM_ASSERT_WRONG_CONDITION(DEM_SID_DCMGETNEXTFILTEREDDTCANDFDC, (TRUE == DTCFilter.fdc_active))
	.d2line		10289
	lis		r3,(DTCFilter+7)@ha
	lbz		r3,(DTCFilter+7)@l(r3)
	se_cmpi		r3,1
	bc		1,2,.L2049	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,59
	diab.li		r6,64
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2049:
#    DEM_POST_ASSERT_RETVAL(DEM_FILTERED_NO_MATCHING_ELEMENT)
	.d2line		10290
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L2050	# ne
.Llo2462:
	diab.li		r3,1
	b		.L2044
.L2050:
# 
#    if ((DEM_INIT == Dem_InitState) && (NULL_PTR != DTC) && (NULL_PTR != DTCFaultDetectionCounter))
	.d2line		10292
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2463:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L2051	# ne
.Llo2464:
	se_cmpi		r31,0		# DTC=r31
	bc		1,2,.L2051	# eq
	se_cmpi		r30,0		# DTCFaultDetectionCounter=r30
	bc		1,2,.L2051	# eq
#    {
#       for (i=DTCFilter.next_dtc_to_handle; (i < GetNumDTCs()) && (TRUE == DTCFilter.filter_active) && (FALSE == dtcFound); i++)
	.d2line		10294
	lis		r3,(DTCFilter+8)@ha
	lhz		r28,(DTCFilter+8)@l(r3)
.Llo2459:
	mr		r28,r28		# i=r28 i=r28
.L2052:
	rlwinm		r0,r28,0,16,31		# noErrors=r0 i=r28
.Llo2465:
	lis		r3,Dem_pPbCfg@ha		# i=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# i=r3 i=r3
	lhz		r3,152(r3)		# i=r3 i=r3
	se_cmp		r0,r3		# noErrors=r0 i=r3
	bc		0,0,.L2054	# ge
.Llo2466:
	lis		r3,DTCFilter@ha		# i=r3
	lbz		r0,DTCFilter@l(r3)		# noErrors=r0 i=r3
.Llo2467:
	se_cmpi		r0,1		# noErrors=r0
	bc		0,2,.L2054	# ne
.Llo2468:
	rlwinm		r0,r29,0,24,31		# noErrors=r0 dtcFound=r29
.Llo2469:
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L2054	# ne
#       {
#          /* [SWS_Dem_00228] */
#          if (TRUE == DTCFilterMatch(i, DTCFaultDetectionCounter))
	.d2line		10297
.Llo2470:
	mr		r3,r28		# i=r3 i=r28
	mr		r4,r30		# DTCFaultDetectionCounter=r4 DTCFaultDetectionCounter=r30
	bl		DTCFilterMatch
	rlwinm		r3,r3,0,24,31		# i=r3 i=r3
	se_cmpi		r3,1		# i=r3
	bc		0,2,.L2055	# ne
#          {
#             /* [SWS_Dem_00277] */
#             if (DEM_DTC_FORMAT_UDS == DTCFilter.dtc_format)
	.d2line		10300
	lis		r3,(DTCFilter+3)@ha		# i=r3
	lbz		r0,(DTCFilter+3)@l(r3)		# noErrors=r0 i=r3
.Llo2471:
	se_cmpi		r0,11		# noErrors=r0
	bc		0,2,.L2056	# ne
#             {
#                *DTC = GetUdsDtc(i);
	.d2line		10302
.Llo2455:
	lis		r3,Dem_pPbCfg@ha		# i=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# i=r3 i=r3
	lwz		r3,76(r3)		# i=r3 i=r3
	rlwinm		r0,r28,2,14,29		# noErrors=r0 i=r28
.Llo2472:
	lwzx		r0,r3,r0		# noErrors=r0 i=r3
	stw		r0,0(r31)		# DTC=r31 noErrors=r0
	b		.L2057
.L2056:
#             }
#             else
#             {
#                *DTC = (uint32)GetObdDtc(i) << 8;
	.d2line		10306
.Llo2473:
	lis		r3,Dem_pPbCfg@ha		# i=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# i=r3 i=r3
	lwz		r3,72(r3)		# i=r3 i=r3
	rlwinm		r0,r28,1,15,30		# noErrors=r0 i=r28
.Llo2474:
	lhzx		r0,r3,r0		# noErrors=r0 i=r3
	rlwinm		r0,r0,8,8,23		# noErrors=r0 noErrors=r0
	stw		r0,0(r31)		# DTC=r31 noErrors=r0
.L2057:
#             }
# 
#             DTCFilter.next_dtc_to_handle = i + 1U;
	.d2line		10309
.Llo2475:
	diab.addi		r0,r28,1		# noErrors=r0 i=r28
.Llo2476:
	lis		r3,(DTCFilter+8)@ha		# i=r3
	sth		r0,(DTCFilter+8)@l(r3)		# i=r3 noErrors=r0
#             dtcFound = TRUE;
	.d2line		10310
	diab.li		r29,1		# dtcFound=r29
#             retVal = DEM_FILTERED_OK;
	.d2line		10311
.Llo2456:
	diab.li		r27,0		# retVal=r27
.L2055:
#          }
#       }
	.d2line		10313
.Llo2460:
	diab.addi		r0,r28,1		# noErrors=r0 i=r28
	se_addi		r28,1		# i=r28 i=r28
	b		.L2052
.L2054:
# 
#       if (DEM_FILTERED_OK != retVal)
	.d2line		10315
	rlwinm		r0,r27,0,24,31		# noErrors=r0 retVal=r27
.Llo2477:
	se_cmpi		r0,0		# noErrors=r0
	bc		1,2,.L2051	# eq
#       {
#          *DTC = 0;
	.d2line		10317
.Llo2457:
	diab.li		r0,0		# noErrors=r0
.Llo2478:
	stw		r0,0(r31)		# DTC=r31 noErrors=r0
#          *DTCFaultDetectionCounter = 0;
	.d2line		10318
	stb		r0,0(r30)		# DTCFaultDetectionCounter=r30 noErrors=r0
.L2051:
#       }
#    }
# 
#    return retVal;
	.d2line		10322
.Llo2458:
	rlwinm		r3,r27,0,24,31		# i=r3 retVal=r27
.L2044:
# }
	.d2line		10323
	.d2epilogue_begin
.Llo2450:
	lmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
.Llo2452:
	lwz		r0,52(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2453:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4632:
	.type		Dem_DcmGetNextFilteredDTCAndFDC,@function
	.size		Dem_DcmGetNextFilteredDTCAndFDC,.-Dem_DcmGetNextFilteredDTCAndFDC
# Number of nodes = 218

# Allocations for Dem_DcmGetNextFilteredDTCAndFDC
#	?a4		DTC
#	?a5		DTCFaultDetectionCounter
#	?a6		dtcFound
#	?a7		i
#	?a8		retVal
#	?a9		noErrors
# FUNC(Dem_ReturnGetNextFilteredElementType, DEM_CODE) Dem_DcmGetNextFilteredDTCAndSeverity(
	.align		2
	.section	.text_vle
        .d2line         10326,54
#$$ld
.L4646:

#$$bf	Dem_DcmGetNextFilteredDTCAndSeverity,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetNextFilteredDTCAndSeverity
	.d2_cfa_start __cie
Dem_DcmGetNextFilteredDTCAndSeverity:
.Llo2479:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r25,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	25,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# DTCStatus=r30 DTCStatus=r4
	mr		r29,r5		# DTCSeverity=r29 DTCSeverity=r5
	mr		r28,r6		# DTCFunctionalUnit=r28 DTCFunctionalUnit=r6
	.d2prologue_end
#          P2VAR(uint32, AUTOMATIC, DEM_APPL_DATA) DTC,
#          P2VAR(Dem_UdsStatusByteType, AUTOMATIC, DEM_APPL_DATA) DTCStatus,
#          P2VAR(Dem_DTCSeverityType, AUTOMATIC, DEM_APPL_DATA) DTCSeverity,
#          P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) DTCFunctionalUnit)
# {
#    boolean dtcFound = FALSE;
	.d2line		10332
	diab.li		r27,0		# dtcFound=r27
#    uint16 i;
#    Dem_ReturnGetNextFilteredElementType retVal = DEM_FILTERED_NO_MATCHING_ELEMENT;
	.d2line		10334
.Llo2486:
	diab.li		r25,1		# retVal=r25
# 
#    DEM_PRE_ASSERT()
	.d2line		10336
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETNEXTFILTEREDDTCANDSEVERITY, DEM_INIT == Dem_InitState)
	.d2line		10337
.Llo2492:
	lis		r3,Dem_InitState@ha
.Llo2480:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L2073	# eq
.Llo2481:
	diab.li		r3,54
.Llo2483:
	diab.li		r4,0
	diab.li		r5,61
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2073:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETNEXTFILTEREDDTCANDSEVERITY, (NULL_PTR != DTC))
	.d2line		10338
	se_cmpi		r31,0		# DTC=r31
	bc		0,2,.L2074	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,61
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2074:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETNEXTFILTEREDDTCANDSEVERITY, (NULL_PTR != DTCStatus))
	.d2line		10339
	se_cmpi		r30,0		# DTCStatus=r30
	bc		0,2,.L2075	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,61
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2075:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETNEXTFILTEREDDTCANDSEVERITY, (NULL_PTR != DTCSeverity))
	.d2line		10340
	se_cmpi		r29,0		# DTCSeverity=r29
	bc		0,2,.L2076	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,61
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2076:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETNEXTFILTEREDDTCANDSEVERITY, (NULL_PTR != DTCFunctionalUnit))
	.d2line		10341
	se_cmpi		r28,0		# DTCFunctionalUnit=r28
	bc		0,2,.L2077	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,61
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2077:
#    DEM_ASSERT_WRONG_CONDITION(DEM_SID_DCMGETNEXTFILTEREDDTCANDSEVERITY, (TRUE == DTCFilter.filter_active))
	.d2line		10342
	lis		r3,DTCFilter@ha
	lbz		r3,DTCFilter@l(r3)
	se_cmpi		r3,1
	bc		1,2,.L2078	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,61
	diab.li		r6,64
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2078:
#    DEM_POST_ASSERT_RETVAL(DEM_FILTERED_NO_MATCHING_ELEMENT)
	.d2line		10343
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L2079	# ne
.Llo2493:
	diab.li		r3,1
	b		.L2072
.L2079:
# 
#    if (DEM_INIT == Dem_InitState)
	.d2line		10345
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2494:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L2080	# ne
#    {
#       for (i=DTCFilter.next_dtc_to_handle; (i < GetNumDTCs()) && (TRUE == DTCFilter.filter_active) && (FALSE == dtcFound); i++)
	.d2line		10347
.Llo2495:
	lis		r3,(DTCFilter+8)@ha
	lhz		r26,(DTCFilter+8)@l(r3)
.Llo2487:
	mr		r26,r26		# i=r26 i=r26
.L2081:
	rlwinm		r0,r26,0,16,31		# noErrors=r0 i=r26
.Llo2496:
	lis		r3,Dem_pPbCfg@ha		# i=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# i=r3 i=r3
	lhz		r3,152(r3)		# i=r3 i=r3
	se_cmp		r0,r3		# noErrors=r0 i=r3
	bc		0,0,.L2080	# ge
.Llo2497:
	lis		r3,DTCFilter@ha		# i=r3
	lbz		r0,DTCFilter@l(r3)		# noErrors=r0 i=r3
.Llo2498:
	se_cmpi		r0,1		# noErrors=r0
	bc		0,2,.L2080	# ne
.Llo2499:
	rlwinm		r0,r27,0,24,31		# noErrors=r0 dtcFound=r27
.Llo2500:
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L2080	# ne
#       {
#          /* [SWS_Dem_00287] */
#          if (TRUE == DTCFilterMatch(i, NULL_PTR))
	.d2line		10350
.Llo2501:
	mr		r3,r26		# i=r3 i=r26
	diab.li		r4,0
	bl		DTCFilterMatch
	rlwinm		r3,r3,0,24,31		# i=r3 i=r3
	se_cmpi		r3,1		# i=r3
	bc		0,2,.L2084	# ne
#          {
#             dtcFound = TRUE;
	.d2line		10352
	diab.li		r27,1		# dtcFound=r27
#             if ((NULL_PTR != DTC) &&
	.d2line		10353
	se_cmpi		r31,0		# DTC=r31
	bc		1,2,.L2085	# eq
.Llo2488:
	se_cmpi		r30,0		# DTCStatus=r30
	bc		1,2,.L2085	# eq
	se_cmpi		r29,0		# DTCSeverity=r29
	bc		1,2,.L2085	# eq
	se_cmpi		r28,0		# DTCFunctionalUnit=r28
	bc		1,2,.L2085	# eq
#                 (NULL_PTR != DTCStatus) &&
#                 (NULL_PTR != DTCSeverity) &&
#                 (NULL_PTR != DTCFunctionalUnit))
#             {
#                /* [SWS_Dem_00277] */
#                if (DEM_DTC_FORMAT_UDS == DTCFilter.dtc_format)
	.d2line		10359
	lis		r3,(DTCFilter+3)@ha		# i=r3
	lbz		r0,(DTCFilter+3)@l(r3)		# noErrors=r0 i=r3
.Llo2502:
	se_cmpi		r0,11		# noErrors=r0
	bc		0,2,.L2086	# ne
#                {
#                   *DTC = GetUdsDtc(i);
	.d2line		10361
.Llo2503:
	lis		r3,Dem_pPbCfg@ha		# i=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# i=r3 i=r3
	lwz		r3,76(r3)		# i=r3 i=r3
	rlwinm		r0,r26,2,14,29		# noErrors=r0 i=r26
.Llo2504:
	lwzx		r0,r3,r0		# noErrors=r0 i=r3
	stw		r0,0(r31)		# DTC=r31 noErrors=r0
	b		.L2087
.L2086:
#                }
#                else
#                {
#                   *DTC = (uint32)GetObdDtc(i) << 8;
	.d2line		10365
.Llo2505:
	lis		r3,Dem_pPbCfg@ha		# i=r3
	lwz		r3,Dem_pPbCfg@l(r3)		# i=r3 i=r3
	lwz		r3,72(r3)		# i=r3 i=r3
	rlwinm		r0,r26,1,15,30		# noErrors=r0 i=r26
.Llo2506:
	lhzx		r0,r3,r0		# noErrors=r0 i=r3
	rlwinm		r0,r0,8,8,23		# noErrors=r0 noErrors=r0
	stw		r0,0(r31)		# DTC=r31 noErrors=r0
.L2087:
#                }
# 
#                /* [SWS_Dem_00657], [SWS_Dem_01049] */
#                *DTCStatus = (Dem_UdsStatusByteType)(Dem_GetUdsStatusByIntDtc(i) & DEM_DTC_STATUS_AVAILABILITY_MASK);
	.d2line		10369
.Llo2507:
	rlwinm		r3,r26,0,16,31		# i=r3 i=r26
	bl		Dem_GetUdsStatusByIntDtc
	rlwinm		r0,r3,0,24,31		# noErrors=r0 i=r3
	stb		r3,0(r30)		# DTCStatus=r30 i=r3
#                *DTCSeverity = GetDtcSeverity(i);
	.d2line		10370
	lis		r3,Dem_pPbCfg@ha		# i=r3
	lwz		r4,Dem_pPbCfg@l(r3)		# i=r3
	lwz		r4,68(r4)
	rlwinm		r5,r26,0,16,31		# i=r26
	lbzux		r0,r4,r5		# noErrors=r0
.Llo2508:
	stb		r0,0(r29)		# DTCSeverity=r29 noErrors=r0
#                *DTCFunctionalUnit = GetDtcFunctionalUnit(i);
	.d2line		10371
	lwz		r3,Dem_pPbCfg@l(r3)		# i=r3 i=r3
	lwz		r3,64(r3)		# i=r3 i=r3
	lbzx		r0,r3,r5		# noErrors=r0 i=r3
	stb		r0,0(r28)		# DTCFunctionalUnit=r28 noErrors=r0
# 
#                DTCFilter.next_dtc_to_handle = i + 1U;
	.d2line		10373
	diab.addi		r0,r26,1		# noErrors=r0 i=r26
	lis		r3,(DTCFilter+8)@ha		# i=r3
	sth		r0,(DTCFilter+8)@l(r3)		# i=r3 noErrors=r0
#                retVal = DEM_FILTERED_OK;
	.d2line		10374
	diab.li		r25,0		# retVal=r25
.Llo2489:
	b		.L2084
.L2085:
#             }
#             else
#             {
#                retVal = DEM_FILTERED_NO_MATCHING_ELEMENT;
	.d2line		10378
.Llo2490:
	diab.li		r25,1		# retVal=r25
.L2084:
#             }
#          }
#       }
	.d2line		10381
.Llo2491:
	diab.addi		r0,r26,1		# noErrors=r0 i=r26
	se_addi		r26,1		# i=r26 i=r26
	b		.L2081
.L2080:
#    }
#    return retVal;
	.d2line		10383
	rlwinm		r3,r25,0,24,31		# i=r3 retVal=r25
.L2072:
# }
	.d2line		10384
	.d2epilogue_begin
.Llo2482:
	lmw		r25,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	2,10
.Llo2484:
	lwz		r0,52(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2485:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4647:
	.type		Dem_DcmGetNextFilteredDTCAndSeverity,@function
	.size		Dem_DcmGetNextFilteredDTCAndSeverity,.-Dem_DcmGetNextFilteredDTCAndSeverity
# Number of nodes = 259

# Allocations for Dem_DcmGetNextFilteredDTCAndSeverity
#	?a4		DTC
#	?a5		DTCStatus
#	?a6		DTCSeverity
#	?a7		DTCFunctionalUnit
#	?a8		dtcFound
#	?a9		i
#	?a10		retVal
#	?a11		noErrors
# FUNC(Dem_ReturnDisableDTCRecordUpdateType, DEM_CODE) Dem_DcmDisableDTCRecordUpdate(uint32 DTC, Dem_DTCOriginType DTCOrigin)
	.align		2
	.section	.text_vle
        .d2line         10387,54
#$$ld
.L4663:

#$$bf	Dem_DcmDisableDTCRecordUpdate,interprocedural,rasave,nostackparams
	.globl		Dem_DcmDisableDTCRecordUpdate
	.d2_cfa_start __cie
Dem_DcmDisableDTCRecordUpdate:
.Llo2509:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# DTCOrigin=r30 DTCOrigin=r4
	.d2prologue_end
# {
#    uint16 intDtc;
#    Dem_ReturnDisableDTCRecordUpdateType retVal = DEM_DISABLE_DTCRECUP_WRONG_DTC;
	.d2line		10390
	diab.li		r29,1		# retVal=r29
# 
#    DEM_PRE_ASSERT()
	.d2line		10392
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_DCMDISABLEDTCRECORDUPDATE, DEM_INIT == Dem_InitState)
	.d2line		10393
.Llo2524:
	lis		r3,Dem_InitState@ha
.Llo2510:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L2104	# eq
.Llo2511:
	diab.li		r3,54
.Llo2513:
	diab.li		r4,0
	diab.li		r5,26
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2104:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMDISABLEDTCRECORDUPDATE, DTC <= DEM_DTC_GROUP_ALL_DTCS)
	.d2line		10394
	diab.li		r3,16777215
	se_cmpl		r31,r3		# DTC=r31
	bc		0,1,.L2105	# le
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,26
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2105:
#    DEM_ASSERT_WRONG_CONDITION(DEM_SID_DCMDISABLEDTCRECORDUPDATE, (0 == DTCRecordUpdateDisabled) || (DTC == DTCRecordUpdateDisabled))
	.d2line		10395
	lis		r3,DTCRecordUpdateDisabled@ha
	lwz		r3,DTCRecordUpdateDisabled@l(r3)
	se_cmpi		r3,0
	bc		1,2,.L2106	# eq
	lis		r3,DTCRecordUpdateDisabled@ha
	lwz		r3,DTCRecordUpdateDisabled@l(r3)
	se_cmpl		r3,r31		# DTC=r31
	bc		1,2,.L2106	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,26
	diab.li		r6,64
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2106:
#    DEM_POST_ASSERT_RETVAL(DEM_DISABLE_DTCRECUP_WRONG_DTC)
	.d2line		10396
	rlwinm		r3,r0,0,24,31		# noErrors=r0
	se_cmpi		r3,0
	bc		0,2,.L2107	# ne
	diab.li		r3,1
	b		.L2103
.L2107:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMDISABLEDTCRECORDUPDATE, (DEM_DTC_ORIGIN_PRIMARY_MEMORY == DTCOrigin) || (DEM_DTC_ORIGIN_SECONDARY_MEMORY == DTCOrigin))
	.d2line		10397
	rlwinm		r4,r30,0,24,31		# DTCOrigin=r30
	se_cmpi		r4,1
	bc		1,2,.L2108	# eq
	rlwinm		r4,r30,0,24,31		# DTCOrigin=r30
	se_cmpi		r4,4
	bc		1,2,.L2108	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,26
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2108:
#    DEM_POST_ASSERT_RETVAL(DEM_DISABLE_DTCRECUP_WRONG_DTCORIGIN)
	.d2line		10398
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L2109	# ne
.Llo2525:
	diab.li		r3,2
	b		.L2103
.L2109:
# 
#    if (DEM_INIT == Dem_InitState)
	.d2line		10400
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2526:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L2110	# ne
#    {
#       intDtc = GetIntDtcByUds(DTC, TRUE);
	.d2line		10402
.Llo2527:
	mr		r3,r31		# DTC=r3 DTC=r31
	diab.li		r4,1
	bl		GetIntDtcByUds
.Llo2518:
	mr		r3,r3		# intDtc=r3 intDtc=r3
#       if (DEM_INT_DTC_INVALID != intDtc)
	.d2line		10403
	rlwinm		r0,r3,0,16,31		# noErrors=r0 intDtc=r3
.Llo2528:
	cmpli		0,0,r0,65535		# noErrors=r0
	bc		1,2,.L2110	# eq
#       {
#          if (DEM_OK !=  CheckOrigin(intDtc, DTCOrigin))
	.d2line		10405
.Llo2529:
	mr		r3,r3		# intDtc=r3 intDtc=r3
.Llo2519:
	mr		r4,r30		# DTCOrigin=r4 DTCOrigin=r30
	bl		CheckOrigin
.Llo2520:
	rlwinm		r3,r3,0,24,31		# intDtc=r3 intDtc=r3
	se_cmpi		r3,0		# intDtc=r3
	bc		1,2,.L2112	# eq
#          {
#             /* Wrong DTC origin */
#             retVal = DEM_DISABLE_DTCRECUP_WRONG_DTCORIGIN;
	.d2line		10408
.Llo2514:
	diab.li		r29,2		# retVal=r29
.Llo2522:
	b		.L2110
.L2112:
#          }
#          else
#          {
#             DTCRecordUpdateDisabled = DTC;
	.d2line		10412
.Llo2523:
	lis		r3,DTCRecordUpdateDisabled@ha		# intDtc=r3
.Llo2521:
	e_add16i		r3,r3,DTCRecordUpdateDisabled@l		# intDtc=r3 intDtc=r3
	stw		r31,0(r3)		# intDtc=r3 DTC=r31
#             retVal = DEM_DISABLE_DTCRECUP_OK;
	.d2line		10413
	diab.li		r29,0		# retVal=r29
.L2110:
#          }
#       }
#    }
# 
#    return retVal;
	.d2line		10418
.Llo2515:
	rlwinm		r3,r29,0,24,31		# intDtc=r3 retVal=r29
.L2103:
# }
	.d2line		10419
	.d2epilogue_begin
.Llo2512:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
.Llo2516:
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2517:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4664:
	.type		Dem_DcmDisableDTCRecordUpdate,@function
	.size		Dem_DcmDisableDTCRecordUpdate,.-Dem_DcmDisableDTCRecordUpdate
# Number of nodes = 130

# Allocations for Dem_DcmDisableDTCRecordUpdate
#	?a4		DTC
#	?a5		DTCOrigin
#	?a6		intDtc
#	?a7		retVal
#	?a8		noErrors
# FUNC(Std_ReturnType, DEM_CODE) Dem_DcmEnableDTCRecordUpdate(void)
	.align		2
	.section	.text_vle
        .d2line         10422,32
#$$ld
.L4677:

#$$bf	Dem_DcmEnableDTCRecordUpdate,interprocedural,rasave,nostackparams
	.globl		Dem_DcmEnableDTCRecordUpdate
	.d2_cfa_start __cie
Dem_DcmEnableDTCRecordUpdate:
.Llo2530:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    Std_ReturnType retVal = E_NOT_OK;
	.d2line		10424
	diab.li		r31,1		# retVal=r31
# 
#    DEM_PRE_ASSERT()
	.d2line		10426
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_DCMENABLEDTCRECORDUPDATE, DEM_INIT == Dem_InitState)
	.d2line		10427
.Llo2532:
	lis		r3,Dem_InitState@ha
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L2124	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,27
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2124:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		10428
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L2125	# ne
.Llo2533:
	diab.li		r3,1
	b		.L2123
.L2125:
# 
#    if (DEM_INIT == Dem_InitState)
	.d2line		10430
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2534:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L2126	# ne
#    {
#       DTCRecordUpdateDisabled = 0;
	.d2line		10432
.Llo2535:
	diab.li		r31,0		# retVal=r31
	lis		r3,DTCRecordUpdateDisabled@ha
	e_add16i		r3,r3,DTCRecordUpdateDisabled@l
	stw		r31,0(r3)		# retVal=r31
#       retVal = E_OK;
.L2126:
#    }
# 
#    return retVal;
	.d2line		10436
	rlwinm		r3,r31,0,24,31		# retVal=r31
.L2123:
# }
	.d2line		10437
	.d2epilogue_begin
.Llo2531:
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4678:
	.type		Dem_DcmEnableDTCRecordUpdate,@function
	.size		Dem_DcmEnableDTCRecordUpdate,.-Dem_DcmEnableDTCRecordUpdate
# Number of nodes = 40

# Allocations for Dem_DcmEnableDTCRecordUpdate
#	?a4		retVal
#	?a5		noErrors
# FUNC(Std_ReturnType, DEM_CODE) Dem_DcmGetOBDFreezeFrameData(
	.align		2
	.section	.text_vle
        .d2line         10440,32
#$$ld
.L4686:

#$$bf	Dem_DcmGetOBDFreezeFrameData,interprocedural,nostackparams

# Regs written: r0,r1,r3
	.globl		Dem_DcmGetOBDFreezeFrameData
	.d2_cfa_start __cie
Dem_DcmGetOBDFreezeFrameData:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
#          P2VAR(uint32, AUTOMATIC, DEM_APPL_DATA) DTC,
#          P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) DestBuffer,
#          P2VAR(uint16, AUTOMATIC, DEM_APPL_DATA) BufSize)
# {
#    Std_ReturnType retVal = E_NOT_OK;
	.d2line		10445
.Llo2536:
	diab.li		r3,1		# retVal=r3
# 
#    /* Dcm requires this API to be available even when OBD is not supported. */
# #if (DEM_OBD_SUPPORT == STD_ON)
#    uint16 intDtc;
#    Dem_EventIdType eventId;
#    uint16 ffIndex;
#    Uint8NvPtrType pFFData;
# 
#    DEM_PRE_ASSERT()
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETOBDFREEZEFRAMEDATA, DEM_INIT == Dem_InitState)
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETOBDFREEZEFRAMEDATA, DTC != NULL_PTR)
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETOBDFREEZEFRAMEDATA, DestBuffer != NULL_PTR)
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETOBDFREEZEFRAMEDATA, BufSize != NULL_PTR)
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
# 
#    if ((DEM_INIT == Dem_InitState) &&
#        (NULL_PTR != DTC) &&
#        (NULL_PTR != DestBuffer) &&
#        (NULL_PTR != BufSize))
#    {
#       *DTC = 0;
# 
#       if (TRUE == SelectOBDFreezeFrame(&eventId, &ffIndex))
#       {
#          pFFData = Dem_LCfg.p_obd_ff_storage->p_get_buffer_entry(ffIndex);
#          if (E_OK == GetAllOBDFreezeFrameData(pFFData, DestBuffer, BufSize))
#          {
#             intDtc = Dem_GetEventIntDtc(eventId);
#             if (IsUdsDtc(intDtc))
#             {
#                /* OBD Freeze frame stored, return DTC that caused storage, [SWS_Dem_00277] */
#                *DTC = GetUdsDtc(intDtc);
#                retVal = E_OK;
#             }
#          }
#       }
# 
#       if (retVal != E_OK)
#       {
#          *BufSize = (uint16)0U;
#       }
#    }
# #endif /* DEM_OBD_SUPPORT == STD_ON */
# 
#    return retVal;
# }
	.d2line		10494
	.d2epilogue_begin
.Llo2537:
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4687:
	.type		Dem_DcmGetOBDFreezeFrameData,@function
	.size		Dem_DcmGetOBDFreezeFrameData,.-Dem_DcmGetOBDFreezeFrameData
# Number of nodes = 5

# Allocations for Dem_DcmGetOBDFreezeFrameData
#	not allocated	DTC
#	not allocated	DestBuffer
#	not allocated	BufSize
#	?a4		retVal
# FUNC(Dem_ReturnGetSizeOfDataByDTCType, DEM_CODE) Dem_DcmGetSizeOfFreezeFrameByDTC(uint32 DTC,
	.align		2
	.section	.text_vle
        .d2line         10497,50
#$$ld
.L4693:

#$$bf	Dem_DcmGetSizeOfFreezeFrameByDTC,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetSizeOfFreezeFrameByDTC
	.d2_cfa_start __cie
Dem_DcmGetSizeOfFreezeFrameByDTC:
.Llo2538:
	stwu		r1,-64(r1)		
	.d2_cfa_def_cfa_offset	64
	mfspr		r0,lr
	stmw		r24,32(r1)		# offset r1+32  0x20
	.d2_cfa_offset_list	24,31,1,1
	stw		r0,68(r1)
	.d2_cfa_offset    108,-1
	mr		r26,r3		# DTC=r26 DTC=r3
	mr		r28,r4		# DTCOrigin=r28 DTCOrigin=r4
.Llo2544:
	mr		r31,r5		# RecordNumber=r31 RecordNumber=r5
.Llo2545:
	mr		r30,r6		# SizeOfFreezeFrame=r30 SizeOfFreezeFrame=r6
	.d2prologue_end
#          Dem_DTCOriginType DTCOrigin,
#          uint8 RecordNumber,
#          P2VAR(uint16, AUTOMATIC, DEM_APPL_DATA) SizeOfFreezeFrame)
# {
#    Dem_ReturnGetSizeOfDataByDTCType retVal = DEM_GETSIZEBYDTC_OK;
	.d2line		10502
	diab.li		r29,0		# retVal=r29
#    Dem_NvEvMemEntryPtrType pEvMemEntry;
#    uint8 evMemEntryIndex;
#    uint16 intDtc;
#    uint8 i;
#    uint16 ffSize;
#    Dem_FreezeFrameType ffType;
#    uint16 ffClass;
#    uint16 commonFFClass;
# #if (DEM_OBD_SUPPORT == STD_ON) && (DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF)
#    uint16 obdFreezeFrameSize = 0;
#    uint16 pidIndex;
#    uint8 pidSize;
# #endif
#    uint8 internalOrigin = GetInternalDTCOriginIndex(DTCOrigin);
#    P2CONST(Dem_DataStorageType, AUTOMATIC, DEM_APPL_CONST) pFFStorage;
# 
#    DEM_PRE_ASSERT()
	.d2line		10519
.Llo2556:
	diab.li		r4,1		# noErrors=r4
	.d2line		10516
.Llo2629:
	mr		r3,r28		# DTCOrigin=r3 DTCOrigin=r28
.Llo2539:
	bl		GetInternalDTCOriginIndex
.Llo2606:
	mr		r27,r3		# internalOrigin=r27 internalOrigin=r3
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETSIZEOFFREEZEFRAMEBYDTC, DEM_INIT == Dem_InitState)
	.d2line		10520
	lis		r3,Dem_InitState@ha		# noErrors=r3
.Llo2607:
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r3
	se_cmpi		r0,2
	bc		1,2,.L2133	# eq
.Llo2540:
	diab.li		r3,54		# noErrors=r3
.Llo2549:
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,31
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L2133:
#    DEM_POST_ASSERT_RETVAL(DEM_GETSIZEBYDTC_WRONG_DTC)
	.d2line		10521
	rlwinm		r0,r4,0,24,31		# noErrors=r4
	se_cmpi		r0,0
	bc		0,2,.L2134	# ne
	diab.li		r3,1		# noErrors=r3
	b		.L2132
.L2134:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMGETSIZEOFFREEZEFRAMEBYDTC, (DEM_DTC_ORIGIN_PRIMARY_MEMORY == DTCOrigin) || (DEM_DTC_ORIGIN_SECONDARY_MEMORY == DTCOrigin))
	.d2line		10522
	rlwinm		r3,r28,0,24,31		# noErrors=r3 DTCOrigin=r28
	se_cmpi		r3,1		# noErrors=r3
	bc		1,2,.L2135	# eq
	rlwinm		r3,r28,0,24,31		# noErrors=r3 DTCOrigin=r28
	se_cmpi		r3,4		# noErrors=r3
	bc		1,2,.L2135	# eq
	diab.li		r3,54		# noErrors=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,31
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L2135:
#    DEM_POST_ASSERT_RETVAL(DEM_GETSIZEBYDTC_WRONG_DTCORIGIN)
	.d2line		10523
	rlwinm		r0,r4,0,24,31		# noErrors=r4
	se_cmpi		r0,0
	bc		0,2,.L2136	# ne
	diab.li		r3,2		# noErrors=r3
	b		.L2132
.L2136:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETSIZEOFFREEZEFRAMEBYDTC, SizeOfFreezeFrame != NULL_PTR)
	.d2line		10524
	se_cmpi		r30,0		# SizeOfFreezeFrame=r30
	bc		0,2,.L2137	# ne
	diab.li		r3,54		# noErrors=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,31
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L2137:
#    DEM_POST_ASSERT_RETVAL(DEM_GETSIZEBYDTC_WRONG_DTC)
	.d2line		10525
	rlwinm		r4,r4,0,24,31		# noErrors=r4 noErrors=r4
	se_cmpi		r4,0		# noErrors=r4
	bc		0,2,.L2138	# ne
.Llo2630:
	diab.li		r3,1		# noErrors=r3
	b		.L2132
.L2138:
# 
#    if ((DEM_INIT == Dem_InitState) &&
	.d2line		10527
	lis		r3,Dem_InitState@ha		# noErrors=r3
.Llo2631:
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r3
	se_cmpi		r0,2
	bc		0,2,.L2139	# ne
.Llo2632:
	se_cmpi		r30,0		# SizeOfFreezeFrame=r30
	bc		1,2,.L2139	# eq
	rlwinm		r3,r27,0,24,31		# noErrors=r3 internalOrigin=r27
.Llo2633:
	cmpi		0,0,r3,255		# noErrors=r3
	bc		1,2,.L2139	# eq
#        (NULL_PTR != SizeOfFreezeFrame) &&
#        (internalOrigin != DEM_DTC_ORIGIN_INVALID_INTERNAL_INDEX))
#    {
#       *SizeOfFreezeFrame = (uint16)0U;
	.d2line		10531
.Llo2634:
	diab.li		r0,0
	sth		r0,0(r30)		# SizeOfFreezeFrame=r30
# 
#       pFFStorage = Dem_LCfg.pp_ff_storage[internalOrigin];
	.d2line		10533
	lis		r3,(Dem_LCfg+48)@ha		# intDtc=r3
.Llo2586:
	e_add16i		r3,r3,(Dem_LCfg+48)@l		# intDtc=r3 intDtc=r3
	rlwinm		r4,r27,2,22,29		# noErrors=r4 internalOrigin=r27
	lwzx		r24,r3,r4		# intDtc=r3
.Llo2627:
	mr		r24,r24		# pFFStorage=r24 pFFStorage=r24
# 
#       /* Find the internal dtc index */
#       intDtc = GetIntDtcByUds(DTC, TRUE);
	.d2line		10536
	mr		r3,r26		# DTC=r3 DTC=r26
.Llo2587:
	diab.li		r4,1		# noErrors=r4
	bl		GetIntDtcByUds
.Llo2588:
	mr		r25,r3		# intDtc=r25 intDtc=r3
# 
#       if (DEM_INT_DTC_INVALID == intDtc)
	.d2line		10538
	rlwinm		r3,r3,0,16,31		# intDtc=r3 intDtc=r3
	cmpli		0,0,r3,65535		# intDtc=r3
	bc		0,2,.L2140	# ne
#       {
#          /* No matching DTC was found. */
#          DEM_ASSERT_PARAM_DATA_NO_RET(DEM_SID_DCMGETSIZEOFFREEZEFRAMEBYDTC, FALSE)
	.d2line		10541
.Llo2541:
	diab.li		r3,54		# intDtc=r3
.Llo2589:
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,31
	diab.li		r6,18
	bl		Det_ReportError
#          retVal = DEM_GETSIZEBYDTC_WRONG_DTC;
	.d2line		10542
	diab.li		r29,1		# retVal=r29
	b		.L2142
.L2140:
#       }
#       else if (DEM_OK != CheckOrigin(intDtc, DTCOrigin))
	.d2line		10544
	mr		r3,r25		# intDtc=r3 intDtc=r25
	mr		r4,r28		# DTCOrigin=r4 DTCOrigin=r28
	bl		CheckOrigin
	rlwinm		r3,r3,0,24,31		# intDtc=r3 intDtc=r3
	se_cmpi		r3,0		# intDtc=r3
	bc		1,2,.L2143	# eq
#       {
#          /* Wrong DTC origin */
#          retVal = DEM_GETSIZEBYDTC_WRONG_DTCORIGIN;
	.d2line		10547
.Llo2546:
	diab.li		r29,2		# retVal=r29
	b		.L2142
.L2143:
#       }
#       else
#       {
#          if ((TRUE == IsFFRecordNumberValid(intDtc, RecordNumber, &ffType)) || (0xffU == RecordNumber))
	.d2line		10551
	diab.addi		r5,r1,16
	mr		r3,r25		# intDtc=r3 intDtc=r25
	mr		r4,r31		# RecordNumber=r4 RecordNumber=r31
	bl		IsFFRecordNumberValid
	rlwinm		r3,r3,0,24,31		# intDtc=r3 intDtc=r3
	se_cmpi		r3,1		# intDtc=r3
	bc		1,2,.L2161	# eq
	rlwinm		r4,r31,0,24,31		# DTCOrigin=r4 RecordNumber=r31
.Llo2547:
	cmpi		0,0,r4,255		# DTCOrigin=r4
	bc		0,2,.L2145	# ne
.L2161:
#          {
#             /*
#                * RecordNumber = 0xFF: User requested all stored freeze frames (SWS_Dem_00074).
#                * Return total size of all stored freeze frame record.
#                */
#             evMemEntryIndex = GetExistingEventMemoryEntry(intDtc, internalOrigin, &pEvMemEntry);
	.d2line		10557
.Llo2548:
	diab.addi		r5,r1,12
	mr		r3,r25		# intDtc=r3 intDtc=r25
	mr		r4,r27		# internalOrigin=r4 internalOrigin=r27
	bl		GetExistingEventMemoryEntry
.Llo2557:
	mr		r3,r3		# evMemEntryIndex=r3 evMemEntryIndex=r3
# 
#             /* Standard freeze frame */
#             if (DEM_EV_MEM_ENTRY_INVALID != evMemEntryIndex)
	.d2line		10560
	rlwinm		r3,r3,0,24,31		# evMemEntryIndex=r3 evMemEntryIndex=r3
	cmpi		0,0,r3,255		# evMemEntryIndex=r3
	bc		1,2,.L2142	# eq
#             {
# 
#                if ((pFFStorage != NULL_PTR) &&
	.d2line		10563
.Llo2558:
	se_cmpi		r24,0		# pFFStorage=r24
	bc		1,2,.L2147	# eq
.Llo2628:
	rlwinm		r4,r31,0,24,31		# internalOrigin=r4 RecordNumber=r31
.Llo2608:
	cmpi		0,0,r4,255		# internalOrigin=r4
	bc		1,2,.L2162	# eq
.Llo2609:
	lwz		r0,16(r1)
	se_cmpi		r0,0
	bc		0,2,.L2147	# ne
.L2162:
#                   ((0xffU == RecordNumber) || (DEM_STANDARD_FREEZE_FRAME == ffType)))
#                {
#                   ffClass = GetDtcFFClass(intDtc);
	.d2line		10566
	lis		r3,Dem_pPbCfg@ha		# evMemEntryIndex=r3
.Llo2559:
	lwz		r4,Dem_pPbCfg@l(r3)		# internalOrigin=r4 evMemEntryIndex=r3
.Llo2610:
	lwz		r4,80(r4)		# internalOrigin=r4 internalOrigin=r4
	rlwinm		r0,r25,1,15,30		# intDtc=r25
	lhzx		r27,r4,r0		# internalOrigin=r27 internalOrigin=r4
.Llo2593:
	mr		r27,r27		# ffClass=r27 ffClass=r27
#                   commonFFClass = GetCommonFFClass();
	.d2line		10567
	lwz		r3,Dem_pPbCfg@l(r3)		# evMemEntryIndex=r3 evMemEntryIndex=r3
	lwz		r3,112(r3)		# evMemEntryIndex=r3 evMemEntryIndex=r3
	lhz		r26,0(r3)		# noErrors=r26 evMemEntryIndex=r3
.Llo2597:
	mr		r26,r26		# commonFFClass=r26 commonFFClass=r26
#                   for (i = (uint8)0U; i < pEvMemEntry->num_stored_ff; i++)
	.d2line		10568
	diab.li		r28,0		# i=r28
.L2148:
.Llo2560:
	rlwinm		r0,r28,0,24,31		# i=r28
	lwz		r3,12(r1)		# evMemEntryIndex=r3
.Llo2561:
	lbz		r3,11(r3)		# evMemEntryIndex=r3 evMemEntryIndex=r3
	se_cmp		r0,r3		# evMemEntryIndex=r3
	bc		0,0,.L2147	# ge
#                   {
#                      if (((0xffU == RecordNumber) || (RecordNumber == pEvMemEntry->record_numbers[i])) &&
	.d2line		10570
.Llo2562:
	rlwinm		r4,r31,0,24,31		# internalOrigin=r4 RecordNumber=r31
.Llo2611:
	cmpi		0,0,r4,255		# internalOrigin=r4
	bc		1,2,.L2163	# eq
.Llo2612:
	rlwinm		r4,r31,0,24,31		# internalOrigin=r4 RecordNumber=r31
.Llo2613:
	lwz		r3,12(r1)		# evMemEntryIndex=r3
.Llo2563:
	rlwinm		r0,r28,0,24,31		# i=r28
	se_add		r3,r0		# evMemEntryIndex=r3 evMemEntryIndex=r3
	lbz		r0,10(r3)		# evMemEntryIndex=r3
	se_cmp		r4,r0		# internalOrigin=r4
	bc		0,2,.L2151	# ne
.L2163:
.Llo2564:
	lwz		r3,12(r1)		# evMemEntryIndex=r3
.Llo2565:
	rlwinm		r0,r28,1,23,30		# i=r28
	se_add		r3,r0		# evMemEntryIndex=r3 evMemEntryIndex=r3
	lhz		r0,8(r3)		# evMemEntryIndex=r3
	cmpli		0,0,r0,65535
	bc		1,2,.L2151	# eq
#                         (DEM_FF_BUFFER_INVALID != pEvMemEntry->ff_index[i]))
#                      {
#                         if (commonFFClass != DEM_FF_CLASS_INVALID)
	.d2line		10573
.Llo2566:
	rlwinm		r3,r26,0,16,31		# evMemEntryIndex=r3 commonFFClass=r26
.Llo2567:
	cmpli		0,0,r3,65535		# evMemEntryIndex=r3
	bc		1,2,.L2152	# eq
#                         {
#                            ffSize = (uint16)0U;
	.d2line		10575
.Llo2568:
	diab.li		r4,0		# internalOrigin=r4
.Llo2614:
	sth		r4,8(r1)		# internalOrigin=r4
#                            /*
#                             * MISRA-C:2004 RULE 16.10 VIOLATION:
#                             * If a function returns error information, then that error information shall be tested.
#                             * In this case pDestBuffer is NULL_PTR, which mean the return value is not needed.
#                             */
#                            (void)UpdateBufferWithFreezeFrameData(commonFFClass, NULL_PTR, NULL_PTR, NULL_PTR, &ffSize, FALSE);
	.d2line		10581
	diab.addi		r7,r1,8
	mr		r3,r26		# commonFFClass=r3 commonFFClass=r26
	diab.li		r5,0
	diab.li		r6,0
	mr		r8,r4		# internalOrigin=r8
	bl		UpdateBufferWithFreezeFrameData
#                            *SizeOfFreezeFrame += ffSize;
	.d2line		10582
.Llo2615:
	lhz		r0,0(r30)		# SizeOfFreezeFrame=r30
	lhz		r3,8(r1)		# commonFFClass=r3
	se_add		r0,r3		# commonFFClass=r3
	sth		r0,0(r30)		# SizeOfFreezeFrame=r30
.L2152:
#                         }
#                         if (ffClass != DEM_FF_CLASS_INVALID)
	.d2line		10584
	rlwinm		r3,r27,0,16,31		# evMemEntryIndex=r3 ffClass=r27
.Llo2569:
	cmpli		0,0,r3,65535		# evMemEntryIndex=r3
	bc		1,2,.L2153	# eq
#                         {
#                            ffSize = (uint16)0U;
	.d2line		10586
.Llo2570:
	diab.li		r4,0		# internalOrigin=r4
.Llo2616:
	sth		r4,8(r1)		# internalOrigin=r4
#                            /*
#                             * MISRA-C:2004 RULE 16.10 VIOLATION:
#                             * If a function returns error information, then that error information shall be tested.
#                             * In this case pDestBuffer is NULL_PTR, which mean the return value is not needed.
#                             */
#                            (void)UpdateBufferWithFreezeFrameData(ffClass, NULL_PTR, NULL_PTR, NULL_PTR, &ffSize, FALSE);
	.d2line		10592
	diab.addi		r7,r1,8
	mr		r3,r27		# ffClass=r3 ffClass=r27
	diab.li		r5,0
	diab.li		r6,0
	mr		r8,r4		# internalOrigin=r8
	bl		UpdateBufferWithFreezeFrameData
#                            *SizeOfFreezeFrame += ffSize;
	.d2line		10593
.Llo2617:
	lhz		r0,0(r30)		# SizeOfFreezeFrame=r30
	lhz		r3,8(r1)		# ffClass=r3
	se_add		r0,r3		# ffClass=r3
	sth		r0,0(r30)		# SizeOfFreezeFrame=r30
.L2153:
#                         }
#                         /* Add two byte for Record number and number of DIDs */
#                         *SizeOfFreezeFrame += 2U;
	.d2line		10596
	lhz		r3,0(r30)		# evMemEntryIndex=r3 SizeOfFreezeFrame=r30
.Llo2571:
	se_addi		r3,2		# evMemEntryIndex=r3 evMemEntryIndex=r3
	sth		r3,0(r30)		# SizeOfFreezeFrame=r30 evMemEntryIndex=r3
.L2151:
#                      }
#                   }
	.d2line		10598
.Llo2572:
	diab.addi		r0,r28,1		# i=r28
	se_addi		r28,1		# i=r28 i=r28
	b		.L2148
.L2147:
#                }
# 
#                /* Development freeze frame A */
#                if (((0xffU == RecordNumber) || (DEM_DEV_A_FREEZE_FRAME == ffType)) &&
	.d2line		10602
	rlwinm		r4,r31,0,24,31		# internalOrigin=r4 RecordNumber=r31
.Llo2618:
	cmpi		0,0,r4,255		# internalOrigin=r4
	bc		1,2,.L2164	# eq
.Llo2592:
	lwz		r0,16(r1)
	se_cmpi		r0,1
	bc		0,2,.L2154	# ne
.L2164:
	lis		r3,(Dem_LCfg+60)@ha		# evMemEntryIndex=r3
.Llo2573:
	lwz		r0,(Dem_LCfg+60)@l(r3)		# evMemEntryIndex=r3
	se_cmpi		r0,0
	bc		1,2,.L2154	# eq
.Llo2574:
	lwz		r3,12(r1)		# evMemEntryIndex=r3
.Llo2575:
	lhz		r0,4(r3)		# evMemEntryIndex=r3
	cmpli		0,0,r0,65535
	bc		1,2,.L2154	# eq
#                    (Dem_LCfg.p_dev_a_ff_storage != NULL_PTR) &&
#                    (pEvMemEntry->dev_a_ff_index != DEM_FF_BUFFER_INVALID))
#                {
#                   ffClass = GetDtcDevAFFClass(intDtc);
	.d2line		10606
.Llo2576:
	lis		r3,Dem_pPbCfg@ha		# evMemEntryIndex=r3
.Llo2577:
	lwz		r4,Dem_pPbCfg@l(r3)		# internalOrigin=r4 evMemEntryIndex=r3
.Llo2619:
	lwz		r4,84(r4)		# internalOrigin=r4 internalOrigin=r4
	rlwinm		r0,r25,1,15,30		# intDtc=r25
	lhzx		r28,r4,r0		# DTCOrigin=r28 internalOrigin=r4
.Llo2594:
	mr		r28,r28		# ffClass=r28 ffClass=r28
#                   commonFFClass = GetCommonDevAFFClass();
	.d2line		10607
	lwz		r3,Dem_pPbCfg@l(r3)		# evMemEntryIndex=r3 evMemEntryIndex=r3
	lwz		r3,116(r3)		# evMemEntryIndex=r3 evMemEntryIndex=r3
	lhz		r3,0(r3)		# evMemEntryIndex=r3 evMemEntryIndex=r3
.Llo2578:
	mr		r3,r3		# commonFFClass=r3 commonFFClass=r3
#                   if (commonFFClass != DEM_FF_CLASS_INVALID)
	.d2line		10608
	rlwinm		r0,r3,0,16,31		# commonFFClass=r3
	cmpli		0,0,r0,65535
	bc		1,2,.L2155	# eq
#                   {
#                      ffSize = (uint16)0U;
	.d2line		10610
.Llo2598:
	diab.li		r4,0		# internalOrigin=r4
.Llo2620:
	sth		r4,8(r1)		# internalOrigin=r4
#                      /*
#                       * MISRA-C:2004 RULE 16.10 VIOLATION:
#                       * If a function returns error information, then that error information shall be tested.
#                       * In this case pDestBuffer is NULL_PTR, which mean the return value is not needed.
#                       */
#                      (void)UpdateBufferWithFreezeFrameData(commonFFClass, NULL_PTR, NULL_PTR, NULL_PTR, &ffSize, FALSE);
	.d2line		10616
	diab.addi		r7,r1,8
.Llo2599:
	mr		r3,r3		# commonFFClass=r3 commonFFClass=r3
.Llo2600:
	diab.li		r5,0
	diab.li		r6,0
	mr		r8,r4		# internalOrigin=r8
	bl		UpdateBufferWithFreezeFrameData
#                      *SizeOfFreezeFrame += ffSize;
	.d2line		10617
.Llo2621:
	lhz		r0,0(r30)		# SizeOfFreezeFrame=r30
	lhz		r3,8(r1)		# commonFFClass=r3
.Llo2601:
	se_add		r0,r3		# commonFFClass=r3
	sth		r0,0(r30)		# SizeOfFreezeFrame=r30
.L2155:
#                   }
#                   if (ffClass != DEM_FF_CLASS_INVALID)
	.d2line		10619
.Llo2602:
	rlwinm		r3,r28,0,16,31		# commonFFClass=r3 ffClass=r28
.Llo2603:
	cmpli		0,0,r3,65535		# commonFFClass=r3
	bc		1,2,.L2156	# eq
#                   {
#                      ffSize = (uint16)0U;
	.d2line		10621
.Llo2604:
	diab.li		r4,0		# internalOrigin=r4
.Llo2622:
	sth		r4,8(r1)		# internalOrigin=r4
#                      /*
#                       * MISRA-C:2004 RULE 16.10 VIOLATION:
#                       * If a function returns error information, then that error information shall be tested.
#                       * In this case pDestBuffer is NULL_PTR, which mean the return value is not needed.
#                       */
#                      (void)UpdateBufferWithFreezeFrameData(ffClass, NULL_PTR, NULL_PTR, NULL_PTR, &ffSize, FALSE);
	.d2line		10627
	diab.addi		r7,r1,8
	mr		r3,r28		# ffClass=r3 ffClass=r28
	diab.li		r5,0
	diab.li		r6,0
	mr		r8,r4		# internalOrigin=r8
	bl		UpdateBufferWithFreezeFrameData
#                      *SizeOfFreezeFrame += ffSize;
	.d2line		10628
.Llo2623:
	lhz		r0,0(r30)		# SizeOfFreezeFrame=r30
	lhz		r3,8(r1)		# ffClass=r3
	se_add		r0,r3		# ffClass=r3
	sth		r0,0(r30)		# SizeOfFreezeFrame=r30
.L2156:
#                   }
#                   /* Add two byte for Record number and number of DIDs */
#                   *SizeOfFreezeFrame += 2U;
	.d2line		10631
	lhz		r3,0(r30)		# commonFFClass=r3 SizeOfFreezeFrame=r30
.Llo2605:
	se_addi		r3,2		# commonFFClass=r3 commonFFClass=r3
	sth		r3,0(r30)		# SizeOfFreezeFrame=r30 commonFFClass=r3
.L2154:
#                }
# 
#                /* Development freeze frame B */
#                if (((0xffU == RecordNumber) || (DEM_DEV_B_FREEZE_FRAME == ffType)) &&
	.d2line		10635
.Llo2595:
	rlwinm		r31,r31,0,24,31		# RecordNumber=r31 RecordNumber=r31
	cmpi		0,0,r31,255		# RecordNumber=r31
	bc		1,2,.L2165	# eq
.Llo2550:
	lwz		r0,16(r1)
	se_cmpi		r0,2
	bc		0,2,.L2142	# ne
.L2165:
	lis		r3,(Dem_LCfg+68)@ha		# evMemEntryIndex=r3
.Llo2579:
	lwz		r0,(Dem_LCfg+68)@l(r3)		# evMemEntryIndex=r3
	se_cmpi		r0,0
	bc		1,2,.L2142	# eq
.Llo2580:
	lwz		r3,12(r1)		# evMemEntryIndex=r3
.Llo2581:
	lhz		r0,6(r3)		# evMemEntryIndex=r3
	cmpli		0,0,r0,65535
	bc		1,2,.L2142	# eq
#                   (Dem_LCfg.p_dev_b_ff_storage != NULL_PTR) &&
#                   (pEvMemEntry->dev_b_ff_index != DEM_FF_BUFFER_INVALID))
#                {
#                   ffClass = GetDtcDevBFFClass(intDtc);
	.d2line		10639
.Llo2582:
	lis		r3,Dem_pPbCfg@ha		# evMemEntryIndex=r3
.Llo2583:
	lwz		r3,Dem_pPbCfg@l(r3)		# evMemEntryIndex=r3 evMemEntryIndex=r3
	lwz		r3,88(r3)		# evMemEntryIndex=r3 evMemEntryIndex=r3
.Llo2590:
	rlwinm		r25,r25,1,15,30		# intDtc=r25 intDtc=r25
.Llo2591:
	lhzx		r3,r3,r25		# evMemEntryIndex=r3 evMemEntryIndex=r3
.Llo2584:
	mr		r3,r3		# ffClass=r3 ffClass=r3
#                   ffSize = (uint16)0U;
	.d2line		10640
	diab.li		r4,0		# internalOrigin=r4
.Llo2624:
	sth		r4,8(r1)		# internalOrigin=r4
#                   /*
#                    * MISRA-C:2004 RULE 16.10 VIOLATION:
#                    * If a function returns error information, then that error information shall be tested.
#                    * In this case pDestBuffer is NULL_PTR, which mean the return value is not needed.
#                    */
#                   (void)UpdateBufferWithFreezeFrameData(ffClass, NULL_PTR, NULL_PTR, NULL_PTR, &ffSize, FALSE);
	.d2line		10646
	diab.addi		r7,r1,8
	mr		r3,r3		# ffClass=r3 ffClass=r3
.Llo2596:
	diab.li		r5,0
	diab.li		r6,0
	mr		r8,r4		# internalOrigin=r8
	bl		UpdateBufferWithFreezeFrameData
#                   *SizeOfFreezeFrame += (uint16)(ffSize + 2U);
	.d2line		10647
.Llo2625:
	lhz		r0,0(r30)		# SizeOfFreezeFrame=r30
	lhz		r3,8(r1)		# evMemEntryIndex=r3
.Llo2585:
	se_add		r3,r0		# evMemEntryIndex=r3 evMemEntryIndex=r3
	se_addi		r3,2		# evMemEntryIndex=r3 evMemEntryIndex=r3
	sth		r3,0(r30)		# SizeOfFreezeFrame=r30 evMemEntryIndex=r3
	b		.L2142
.L2145:
#                }
# 
# #if (DEM_OBD_SUPPORT == STD_ON) && (DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF)
#                /* OBD freeze frame */
#                if (((0xffU == RecordNumber) || (DEM_OBD_FREEZE_FRAME == ffType)) &&
#                    (Dem_LCfg.p_obd_ff_storage != NULL_PTR) &&
#                    (pEvMemEntry->obd_ff_index != DEM_FF_BUFFER_INVALID))
#                {
#                   P2CONST(uint8, DEM_CONST, DEM_PBCFG_CALIB) pPids = GetOBDFFPids();
#                   uint8 numOBDFFPids = GetNumObdFFPids();
#                   for (i = (uint8)0U; i < numOBDFFPids; i++)
#                   {
#                      if (DEM_PID_INVALID != pPids[i])
#                      {
#                         /* PID not disabled by calibration */
#                         pidIndex = GetPidDataElement(i);
#                         pidSize = GetDataElementSize(pidIndex);
#                         obdFreezeFrameSize += (uint16)((uint16)pidSize + 2U);
#                      }
#                   }
#                   /* Add two for header info record number and number of PIDs */
#                   *SizeOfFreezeFrame = obdFreezeFrameSize + 2U;
#                }
# #endif /* DEM_OBD_SUPPORT == STD_ON && DEM_DISABLE_RECORD_0_FOR_UDS_SERVICES == STD_OFF */
#             }
#          }
#          else
#          {
#             /* Wrong record number */
#             retVal = DEM_GETSIZEBYDTC_WRONG_RECNUM;
	.d2line		10677
.Llo2551:
	diab.li		r29,3		# retVal=r29
.L2142:
#          }
#       }
# 
#       if (retVal != DEM_GETSIZEBYDTC_OK)
	.d2line		10681
.Llo2626:
	rlwinm		r3,r29,0,24,31		# intDtc=r3 retVal=r29
	se_cmpi		r3,0		# intDtc=r3
	bc		1,2,.L2160	# eq
#       {
#          *SizeOfFreezeFrame = (uint16)0U;
	.d2line		10683
.Llo2552:
	diab.li		r0,0
	sth		r0,0(r30)		# SizeOfFreezeFrame=r30
	b		.L2160
.L2139:
#       }
#    }
#    else
#    {
#       retVal = DEM_GETSIZEBYDTC_WRONG_DTC;
	.d2line		10688
.Llo2542:
	diab.li		r29,1		# retVal=r29
.L2160:
#    }
#    return retVal;
	.d2line		10690
.Llo2543:
	rlwinm		r3,r29,0,24,31		# intDtc=r3 retVal=r29
.L2132:
# }
	.d2line		10691
	.d2epilogue_begin
.Llo2553:
	lmw		r24,32(r1)		# offset r1+32  0x20
	.d2_cfa_restore_list	2,10
.Llo2555:
	lwz		r0,68(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,64		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2554:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4694:
	.type		Dem_DcmGetSizeOfFreezeFrameByDTC,@function
	.size		Dem_DcmGetSizeOfFreezeFrameByDTC,.-Dem_DcmGetSizeOfFreezeFrameByDTC
# Number of nodes = 491

# Allocations for Dem_DcmGetSizeOfFreezeFrameByDTC
#	?a4		DTC
#	?a5		DTCOrigin
#	?a6		RecordNumber
#	?a7		SizeOfFreezeFrame
#	?a8		retVal
#	SP,12		pEvMemEntry
#	?a9		evMemEntryIndex
#	?a10		intDtc
#	?a11		i
#	SP,8		ffSize
#	SP,16		ffType
#	?a12		ffClass
#	?a13		commonFFClass
#	?a14		internalOrigin
#	?a15		pFFStorage
#	?a16		noErrors
# FUNC(Dem_ReturnGetStatusIndicatorsOfDTCType, DEM_CODE) Dem_GetStatusIndicatorsOfDTC(uint32 DTC,
	.align		2
	.section	.text_vle
        .d2line         10694,56
#$$ld
.L4724:

#$$bf	Dem_GetStatusIndicatorsOfDTC,interprocedural,rasave,nostackparams
	.globl		Dem_GetStatusIndicatorsOfDTC
	.d2_cfa_start __cie
Dem_GetStatusIndicatorsOfDTC:
.Llo2635:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	27,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# DTCOrigin=r30 DTCOrigin=r4
.Llo2641:
	mr		r29,r5		# DTCStatus=r29 DTCStatus=r5
	.d2prologue_end
#          Dem_DTCOriginType DTCOrigin,
#          P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) DTCStatus)
# {
#    Dem_ReturnGetStatusIndicatorsOfDTCType retVal = DEM_STATUS_INDICATORS_FAILED;
	.d2line		10698
.Llo2642:
	diab.li		r28,3		# retVal=r28
#    Dem_NvEvMemEntryPtrType pEvMemEntry;
#    uint16 intDtc;
#    uint8 internalOrigin = GetInternalDTCOriginIndex(DTCOrigin);
# 
#    DEM_PRE_ASSERT()
	.d2line		10703
.Llo2648:
	diab.li		r4,1		# noErrors=r4
	.d2line		10701
	mr		r3,r30		# DTCOrigin=r3 DTCOrigin=r30
.Llo2636:
	bl		GetInternalDTCOriginIndex
.Llo2657:
	mr		r27,r3		# internalOrigin=r27 internalOrigin=r3
#    DEM_ASSERT_PARAM_DATA(DEM_SID_GETSTATUSINDICATORSOFDTC, (DEM_DTC_ORIGIN_PRIMARY_MEMORY == DTCOrigin) || (DEM_DTC_ORIGIN_SECONDARY_MEMORY == DTCOrigin))
	.d2line		10704
.Llo2660:
	rlwinm		r3,r30,0,24,31		# noErrors=r3 DTCOrigin=r30
.Llo2658:
	se_cmpi		r3,1		# noErrors=r3
	bc		1,2,.L2193	# eq
.Llo2637:
	rlwinm		r3,r30,0,24,31		# noErrors=r3 DTCOrigin=r30
.Llo2645:
	se_cmpi		r3,4		# noErrors=r3
	bc		1,2,.L2193	# eq
	diab.li		r3,54		# DTCOrigin=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,204
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L2193:
#    DEM_POST_ASSERT_RETVAL(DEM_RECORD_WRONG_DTCORIGIN)
	.d2line		10705
	rlwinm		r0,r4,0,24,31		# noErrors=r4
	se_cmpi		r0,0
	bc		0,2,.L2194	# ne
	diab.li		r3,2		# DTCOrigin=r3
	b		.L2192
.L2194:
#    DEM_ASSERT_UNINIT(DEM_SID_GETSTATUSINDICATORSOFDTC, DEM_INIT == Dem_InitState)
	.d2line		10706
	lis		r3,Dem_InitState@ha		# DTCOrigin=r3
	lwz		r0,Dem_InitState@l(r3)		# DTCOrigin=r3
	se_cmpi		r0,2
	bc		1,2,.L2195	# eq
	diab.li		r3,54		# DTCOrigin=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,204
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L2195:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_GETSTATUSINDICATORSOFDTC, DTCStatus != NULL_PTR)
	.d2line		10707
	se_cmpi		r29,0		# DTCStatus=r29
	bc		0,2,.L2196	# ne
	diab.li		r3,54		# DTCOrigin=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,204
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L2196:
#    DEM_POST_ASSERT_RETVAL(DEM_STATUS_INDICATORS_FAILED)
	.d2line		10708
	rlwinm		r4,r4,0,24,31		# noErrors=r4 noErrors=r4
	se_cmpi		r4,0		# noErrors=r4
	bc		0,2,.L2197	# ne
.Llo2661:
	diab.li		r3,3		# DTCOrigin=r3
	b		.L2192
.L2197:
# 
#    if (DEM_INIT == Dem_InitState)
	.d2line		10710
	lis		r3,Dem_InitState@ha		# DTCOrigin=r3
	lwz		r0,Dem_InitState@l(r3)		# DTCOrigin=r3
	se_cmpi		r0,2
	bc		0,2,.L2198	# ne
#    {
#       /* Find the internal dtc index */
#       intDtc = GetIntDtcByUds(DTC, TRUE);
	.d2line		10713
	mr		r3,r31		# DTC=r3 DTC=r31
	diab.li		r4,1		# noErrors=r4
	bl		GetIntDtcByUds
.Llo2655:
	mr		r31,r3		# intDtc=r31 intDtc=r3
# 
#       if (DEM_INT_DTC_INVALID != intDtc)
	.d2line		10715
.Llo2638:
	rlwinm		r3,r3,0,16,31		# intDtc=r3 intDtc=r3
	cmpli		0,0,r3,65535		# intDtc=r3
	bc		1,2,.L2199	# eq
#       {
#          if (DEM_OK == CheckOrigin(intDtc, DTCOrigin))
	.d2line		10717
.Llo2649:
	mr		r3,r31		# intDtc=r3 intDtc=r31
.Llo2656:
	mr		r4,r30		# DTCOrigin=r4 DTCOrigin=r30
	bl		CheckOrigin
	rlwinm		r3,r3,0,24,31		# intDtc=r3 intDtc=r3
	se_cmpi		r3,0		# intDtc=r3
	bc		0,2,.L2200	# ne
#          {
#             /*
#              * MISRA-C:2004 RULE 16.10 VIOLATION:
#              * If a function returns error information, then that error information shall be tested.
#              * This function returns the index of and a pointer to (out parameter ppEvMemEntry) the event memory entry.
#              * In this case the index is not needed.
#              */
#             (void)GetExistingEventMemoryEntry(intDtc, internalOrigin, &pEvMemEntry);
	.d2line		10725
.Llo2643:
	diab.addi		r5,r1,8
	mr		r3,r31		# intDtc=r3 intDtc=r31
	mr		r4,r27		# internalOrigin=r4 internalOrigin=r27
	bl		GetExistingEventMemoryEntry
# 
#             if (NULL_PTR != pEvMemEntry)
	.d2line		10727
	lwz		r0,8(r1)
	se_cmpi		r0,0
	bc		1,2,.L2201	# eq
#             {
#                *DTCStatus = Dem_GetSiStatusByIntDtc(intDtc);
	.d2line		10729
.Llo2659:
	rlwinm		r3,r31,0,16,31		# DTCOrigin=r3 intDtc=r31
	bl		Dem_GetSiStatusByIntDtc
	stb		r3,0(r29)		# DTCStatus=r29 intDtc=r3
# 
#                retVal = DEM_STATUS_INDICATORS_OK;
	.d2line		10731
	diab.li		r28,0		# retVal=r28
.Llo2650:
	b		.L2198
.L2201:
#             }
#             else
#             {
#                *DTCStatus = (uint8)0x00U;
	.d2line		10735
.Llo2651:
	diab.li		r0,0
	stb		r0,0(r29)		# DTCStatus=r29
# 
#                retVal = DEM_STATUS_INDICATORS_NO_DATA;
	.d2line		10737
	diab.li		r28,4		# retVal=r28
.Llo2652:
	b		.L2198
.L2200:
#             }
#          }
#          else
#          {
#             retVal = DEM_STATUS_INDICATORS_WRONG_DTCORIGIN;
	.d2line		10742
.Llo2653:
	diab.li		r28,2		# retVal=r28
.Llo2654:
	b		.L2198
.L2199:
#          }
#       }
#       else
#       {
#          retVal = DEM_STATUS_INDICATORS_WRONG_DTC;
	.d2line		10747
.Llo2644:
	diab.li		r28,1		# retVal=r28
.L2198:
#       }
#    }
# 
#    return retVal;
	.d2line		10751
.Llo2639:
	rlwinm		r3,r28,0,24,31		# DTCOrigin=r3 retVal=r28
.L2192:
# }
	.d2line		10752
	.d2epilogue_begin
.Llo2640:
	lmw		r27,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
.Llo2646:
	lwz		r0,52(r1)
	mtspr		lr,r0
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2647:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4725:
	.type		Dem_GetStatusIndicatorsOfDTC,@function
	.size		Dem_GetStatusIndicatorsOfDTC,.-Dem_GetStatusIndicatorsOfDTC
# Number of nodes = 149

# Allocations for Dem_GetStatusIndicatorsOfDTC
#	?a4		DTC
#	?a5		DTCOrigin
#	?a6		DTCStatus
#	?a7		retVal
#	SP,8		pEvMemEntry
#	?a8		intDtc
#	?a9		internalOrigin
#	?a10		noErrors
# FUNC(Dem_ReturnGetExtendedDataRecordByDTCType, DEM_CODE) Dem_DcmGetExtendedDataRecordByDTC(uint32 DTC,
	.align		2
	.section	.text_vle
        .d2line         10755,58
#$$ld
.L4742:

#$$bf	Dem_DcmGetExtendedDataRecordByDTC,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetExtendedDataRecordByDTC
	.d2_cfa_start __cie
Dem_DcmGetExtendedDataRecordByDTC:
.Llo2662:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r25,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	25,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# DTCOrigin=r30 DTCOrigin=r4
.Llo2668:
	mr		r29,r5		# ExtendedDataNumber=r29 ExtendedDataNumber=r5
.Llo2669:
	mr		r28,r6		# DestBuffer=r28 DestBuffer=r6
	mr		r27,r7		# BufSize=r27 BufSize=r7
	.d2prologue_end
#          Dem_DTCOriginType DTCOrigin,
#          uint8 ExtendedDataNumber,
#          P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) DestBuffer,
#          P2VAR(uint16, AUTOMATIC, DEM_APPL_DATA) BufSize)
# {
#    Dem_ReturnGetExtendedDataRecordByDTCType retVal = DEM_RECORD_OK;
	.d2line		10761
	diab.li		r26,0		# retVal=r26
#    Dem_NvEvMemEntryPtrType pEvMemEntry;
#    uint8 internalOrigin = GetInternalDTCOriginIndex(DTCOrigin);
# 
#    DEM_PRE_ASSERT()
	.d2line		10765
.Llo2679:
	diab.li		r4,1		# noErrors=r4
	.d2line		10763
	mr		r3,r30		# DTCOrigin=r3 DTCOrigin=r30
.Llo2663:
	bl		GetInternalDTCOriginIndex
.Llo2684:
	mr		r25,r3		# internalOrigin=r25 internalOrigin=r3
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMGETEXTENDEDDATARECORDBYDTC, (DEM_DTC_ORIGIN_PRIMARY_MEMORY == DTCOrigin) || (DEM_DTC_ORIGIN_SECONDARY_MEMORY == DTCOrigin))
	.d2line		10766
.Llo2686:
	rlwinm		r3,r30,0,24,31		# noErrors=r3 DTCOrigin=r30
.Llo2685:
	se_cmpi		r3,1		# noErrors=r3
	bc		1,2,.L2216	# eq
.Llo2664:
	rlwinm		r3,r30,0,24,31		# noErrors=r3 DTCOrigin=r30
.Llo2672:
	se_cmpi		r3,4		# noErrors=r3
	bc		1,2,.L2216	# eq
	diab.li		r3,54		# DTCOrigin=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,32
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L2216:
#    DEM_POST_ASSERT_RETVAL(DEM_RECORD_WRONG_DTCORIGIN)
	.d2line		10767
	rlwinm		r0,r4,0,24,31		# noErrors=r4
	se_cmpi		r0,0
	bc		0,2,.L2217	# ne
	diab.li		r3,2		# DTCOrigin=r3
	b		.L2215
.L2217:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETEXTENDEDDATARECORDBYDTC, BufSize != NULL_PTR)
	.d2line		10768
	se_cmpi		r27,0		# BufSize=r27
	bc		0,2,.L2218	# ne
	diab.li		r3,54		# DTCOrigin=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,32
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L2218:
#    DEM_POST_ASSERT_RETVAL(DEM_RECORD_WRONG_BUFFERSIZE)
	.d2line		10769
	rlwinm		r0,r4,0,24,31		# noErrors=r4
	se_cmpi		r0,0
	bc		0,2,.L2219	# ne
	diab.li		r3,4		# DTCOrigin=r3
	b		.L2215
.L2219:
# 
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETEXTENDEDDATARECORDBYDTC, DestBuffer != NULL_PTR)
	.d2line		10771
	se_cmpi		r28,0		# DestBuffer=r28
	bc		0,2,.L2220	# ne
	diab.li		r3,54		# DTCOrigin=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,32
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L2220:
#    DEM_POST_ASSERT_RETVAL(DEM_RECORD_WRONG_BUFFERSIZE)
	.d2line		10772
	rlwinm		r4,r4,0,24,31		# noErrors=r4 noErrors=r4
	se_cmpi		r4,0		# noErrors=r4
	bc		0,2,.L2221	# ne
.Llo2687:
	diab.li		r3,4		# DTCOrigin=r3
	b		.L2215
.L2221:
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETEXTENDEDDATARECORDBYDTC, DEM_INIT == Dem_InitState)
	.d2line		10773
	lis		r3,Dem_InitState@ha		# DTCOrigin=r3
	lwz		r0,Dem_InitState@l(r3)		# DTCOrigin=r3
	se_cmpi		r0,2
	bc		1,2,.L2222	# eq
	diab.li		r3,54		# DTCOrigin=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,32
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2222:
# 
#    if ((DEM_INIT == Dem_InitState) && (NULL_PTR != DestBuffer) && (NULL_PTR != BufSize))
	.d2line		10775
	lis		r3,Dem_InitState@ha		# DTCOrigin=r3
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0 DTCOrigin=r3
.Llo2688:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L2223	# ne
.Llo2689:
	se_cmpi		r28,0		# DestBuffer=r28
	bc		1,2,.L2223	# eq
	se_cmpi		r27,0		# BufSize=r27
	bc		1,2,.L2223	# eq
	.section	.text_vle
.L4757:
#    {
#       /* Find the internal dtc index */
#       CONST(uint16, AUTOMATIC) intDtc = GetIntDtcByUds(DTC, TRUE);
	.d2line		10778
.Llo2680:
	mr		r3,r31		# DTC=r3 DTC=r31
	diab.li		r4,1		# noErrors=r4
	bl		GetIntDtcByUds
.Llo2695:
	mr		r31,r3		# intDtc=r31 intDtc=r3
# 
#       if (DEM_INT_DTC_INVALID != intDtc)
	.d2line		10780
.Llo2665:
	rlwinm		r3,r3,0,16,31		# intDtc=r3 intDtc=r3
	cmpli		0,0,r3,65535		# intDtc=r3
	bc		1,2,.L2224	# eq
#       {
#          if (DEM_OK == CheckOrigin(intDtc, DTCOrigin))
	.d2line		10782
.Llo2696:
	mr		r3,r31		# intDtc=r3 intDtc=r31
.Llo2697:
	mr		r4,r30		# DTCOrigin=r4 DTCOrigin=r30
	bl		CheckOrigin
	rlwinm		r3,r3,0,24,31		# intDtc=r3 intDtc=r3
	se_cmpi		r3,0		# intDtc=r3
	bc		0,2,.L2225	# ne
#          {
#             /*
#              * MISRA-C:2004 RULE 16.10 VIOLATION:
#              * If a function returns error information, then that error information shall be tested.
#              * This function returns the index of and a pointer to (out parameter ppEvMemEntry) the event memory entry.
#              * In this case the index is not needed.
#              */
#             (void)GetExistingEventMemoryEntry(intDtc, internalOrigin, &pEvMemEntry);
	.d2line		10790
.Llo2670:
	diab.addi		r5,r1,8		# DestBuffer=r5
	mr		r3,r31		# intDtc=r3 intDtc=r31
	mr		r4,r25		# internalOrigin=r4 internalOrigin=r25
	bl		GetExistingEventMemoryEntry
# 
#             retVal = UpdateBufferWithExtendedData(ExtendedDataNumber, internalOrigin, DestBuffer, BufSize,
	.d2line		10792
	lwz		r8,8(r1)
	mr		r3,r29		# ExtendedDataNumber=r3 ExtendedDataNumber=r29
	mr		r4,r25		# internalOrigin=r4 internalOrigin=r25
	mr		r5,r28		# DestBuffer=r5 DestBuffer=r28
	mr		r6,r27		# BufSize=r6 BufSize=r27
	mr		r7,r31		# intDtc=r7 intDtc=r31
	diab.li		r9,0
	bl		UpdateBufferWithExtendedData
.Llo2681:
	mr		r26,r3		# retVal=r26 retVal=r3
#                                                      intDtc, pEvMemEntry, DEM_EVENTID_INVALID);
#             if ((DEM_RECORD_WRONG_BUFFERSIZE == retVal) || (DEM_RECORD_WRONG_NUMBER == retVal))
	.d2line		10794
	rlwinm		r3,r3,0,24,31		# retVal=r3 retVal=r3
	se_cmpi		r3,4		# retVal=r3
	bc		1,2,.L2233	# eq
.Llo2673:
	rlwinm		r3,r26,0,24,31		# retVal=r3 retVal=r26
.Llo2682:
	se_cmpi		r3,3		# retVal=r3
	bc		0,2,.L2223	# ne
.L2233:
#             {
#                DEM_ASSERT_PARAM_DATA(DEM_SID_DCMGETEXTENDEDDATARECORDBYDTC, FALSE)
	.d2line		10796
	diab.li		r3,54		# intDtc=r3
	diab.li		r4,0		# DTCOrigin=r4
	diab.li		r5,32		# DestBuffer=r5
	diab.li		r6,18		# BufSize=r6
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
	b		.L2223
.L2225:
#             }
#          }
#          else
#          {
#             /* Wrong DTC origin */
#             retVal = DEM_RECORD_WRONG_DTCORIGIN;
	.d2line		10802
.Llo2674:
	diab.li		r26,2		# retVal=r26
.Llo2683:
	b		.L2223
.L2224:
#          }
#       }
#       else
#       {
#          /* No matching DTC was found. */
#          DEM_ASSERT_PARAM_DATA(DEM_SID_DCMGETEXTENDEDDATARECORDBYDTC, FALSE)
	.d2line		10808
.Llo2671:
	diab.li		r3,54		# DTCOrigin=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,32
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
#          retVal = DEM_RECORD_WRONG_DTC;
	.d2line		10809
	diab.li		r26,1		# retVal=r26
	.section	.text_vle
.L4758:
.L2223:
#       }
#    }
# 
#    if (DEM_INIT != Dem_InitState)
	.d2line		10813
.Llo2666:
	lis		r3,Dem_InitState@ha		# DTCOrigin=r3
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0 DTCOrigin=r3
.Llo2690:
	se_cmpi		r0,2		# noErrors=r0
#    {
#       retVal = DEM_RECORD_WRONG_DTC;
	.d2line		10815
	diab.li		r0,1		# noErrors=r0
	isel		r3,r26,r0,2		# retVal=r3 retVal=r26 noErrors=r0
.L2231:
#    }
# 
#    if ((NULL_PTR != BufSize) && (retVal != DEM_RECORD_OK))
	.d2line		10818
.Llo2667:
	se_cmpi		r27,0		# BufSize=r27
.Llo2675:
	bc		1,2,.L2232	# eq
	rlwinm		r0,r3,0,24,31		# noErrors=r0 retVal=r3
.Llo2691:
	se_cmpi		r0,0		# noErrors=r0
	bc		1,2,.L2232	# eq
#    {
#       *BufSize = 0;
	.d2line		10820
.Llo2692:
	diab.li		r0,0		# noErrors=r0
.Llo2693:
	sth		r0,0(r27)		# BufSize=r27 noErrors=r0
.L2232:
#    }
# 
#    return retVal;
	.d2line		10823
.Llo2694:
	rlwinm		r3,r3,0,24,31		# retVal=r3 retVal=r3
.L2215:
# }
	.d2line		10824
	.d2epilogue_begin
.Llo2677:
	lmw		r25,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	2,10
.Llo2678:
	lwz		r0,52(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2676:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4743:
	.type		Dem_DcmGetExtendedDataRecordByDTC,@function
	.size		Dem_DcmGetExtendedDataRecordByDTC,.-Dem_DcmGetExtendedDataRecordByDTC
# Number of nodes = 228

# Allocations for Dem_DcmGetExtendedDataRecordByDTC
#	?a4		DTC
#	?a5		DTCOrigin
#	?a6		ExtendedDataNumber
#	?a7		DestBuffer
#	?a8		BufSize
#	?a9		retVal
#	SP,8		pEvMemEntry
#	?a10		internalOrigin
#	?a11		noErrors
#	?a12		intDtc
# FUNC(Dem_ReturnGetSizeOfDataByDTCType, DEM_CODE) Dem_DcmGetSizeOfExtendedDataRecordByDTC(uint32 DTC,
	.align		2
	.section	.text_vle
        .d2line         10827,50
#$$ld
.L4765:

#$$bf	Dem_DcmGetSizeOfExtendedDataRecordByDTC,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetSizeOfExtendedDataRecordByDTC
	.d2_cfa_start __cie
Dem_DcmGetSizeOfExtendedDataRecordByDTC:
.Llo2698:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r25,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	25,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# DTCOrigin=r30 DTCOrigin=r4
.Llo2702:
	mr		r29,r5		# ExtendedDataNumber=r29 ExtendedDataNumber=r5
.Llo2703:
	mr		r28,r6		# SizeOfExtendedDataRecord=r28 SizeOfExtendedDataRecord=r6
	.d2prologue_end
#          Dem_DTCOriginType DTCOrigin,
#          uint8 ExtendedDataNumber,
#          P2VAR(uint16, AUTOMATIC, DEM_APPL_DATA) SizeOfExtendedDataRecord)
# {
#    Dem_ReturnGetSizeOfDataByDTCType retVal = DEM_GETSIZEBYDTC_OK;
	.d2line		10832
	diab.li		r27,0		# retVal=r27
#    uint8 originRetVal;
#    Dem_NvEvMemEntryPtrType pEvMemEntry;
#    uint16 intDtc;
#    uint8 i;
#    uint8 internalOrigin = GetInternalDTCOriginIndex(DTCOrigin);
#    uint8 startRange;
#    uint16 tmpBufSize;
# 
#    DEM_PRE_ASSERT()
	.d2line		10841
.Llo2719:
	diab.li		r4,1		# noErrors=r4
	.d2line		10837
	mr		r3,r30		# DTCOrigin=r3 DTCOrigin=r30
.Llo2699:
	bl		GetInternalDTCOriginIndex
.Llo2727:
	mr		r25,r3		# internalOrigin=r25 internalOrigin=r3
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETSIZEOFEXTENDEDDATARECORDBYDTC, DEM_INIT == Dem_InitState)
	.d2line		10842
.Llo2735:
	lis		r3,Dem_InitState@ha		# noErrors=r3
.Llo2728:
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r3
	se_cmpi		r0,2
	bc		1,2,.L2249	# eq
.Llo2700:
	diab.li		r3,54		# noErrors=r3
.Llo2707:
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,33
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L2249:
#    DEM_POST_ASSERT_RETVAL(DEM_GETSIZEBYDTC_WRONG_DTC)
	.d2line		10843
	rlwinm		r0,r4,0,24,31		# noErrors=r4
	se_cmpi		r0,0
	bc		0,2,.L2250	# ne
	diab.li		r3,1		# noErrors=r3
	b		.L2248
.L2250:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_DCMGETSIZEOFEXTENDEDDATARECORDBYDTC, (DEM_DTC_ORIGIN_PRIMARY_MEMORY == DTCOrigin) || (DEM_DTC_ORIGIN_SECONDARY_MEMORY == DTCOrigin))
	.d2line		10844
	rlwinm		r3,r30,0,24,31		# noErrors=r3 DTCOrigin=r30
	se_cmpi		r3,1		# noErrors=r3
	bc		1,2,.L2251	# eq
	rlwinm		r3,r30,0,24,31		# noErrors=r3 DTCOrigin=r30
	se_cmpi		r3,4		# noErrors=r3
	bc		1,2,.L2251	# eq
	diab.li		r3,54		# noErrors=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,33
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L2251:
#    DEM_POST_ASSERT_RETVAL(DEM_GETSIZEBYDTC_WRONG_DTCORIGIN)
	.d2line		10845
	rlwinm		r0,r4,0,24,31		# noErrors=r4
	se_cmpi		r0,0
	bc		0,2,.L2252	# ne
	diab.li		r3,2		# noErrors=r3
	b		.L2248
.L2252:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETSIZEOFEXTENDEDDATARECORDBYDTC, SizeOfExtendedDataRecord != NULL_PTR)
	.d2line		10846
	se_cmpi		r28,0		# SizeOfExtendedDataRecord=r28
	bc		0,2,.L2253	# ne
	diab.li		r3,54		# noErrors=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,33
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r4,0		# noErrors=r4
.L2253:
#    DEM_POST_ASSERT_RETVAL(DEM_GETSIZEBYDTC_WRONG_DTC)
	.d2line		10847
	rlwinm		r4,r4,0,24,31		# noErrors=r4 noErrors=r4
	se_cmpi		r4,0		# noErrors=r4
	bc		0,2,.L2254	# ne
.Llo2736:
	diab.li		r3,1		# noErrors=r3
	b		.L2248
.L2254:
# 
#    if (DEM_INIT == Dem_InitState)
	.d2line		10849
	lis		r3,Dem_InitState@ha		# noErrors=r3
.Llo2737:
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r3
	se_cmpi		r0,2
	bc		0,2,.L2255	# ne
#    {
#       /* Find the internal dtc index */
#       intDtc = GetIntDtcByUds(DTC, TRUE);
	.d2line		10852
.Llo2738:
	mr		r3,r31		# DTC=r3 DTC=r31
	diab.li		r4,1		# noErrors=r4
	bl		GetIntDtcByUds
.Llo2721:
	mr		r26,r3		# intDtc=r26 intDtc=r3
.L2255:
#    }
# 
#    if ((DEM_INIT == Dem_InitState) &&
	.d2line		10855
.Llo2722:
	lis		r3,Dem_InitState@ha		# noErrors=r3
.Llo2723:
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r3
	se_cmpi		r0,2
	bc		0,2,.L2256	# ne
.Llo2701:
	se_cmpi		r28,0		# SizeOfExtendedDataRecord=r28
	bc		1,2,.L2256	# eq
	rlwinm		r3,r26,0,16,31		# noErrors=r3 intDtc=r26
.Llo2739:
	cmpli		0,0,r3,65535		# noErrors=r3
	bc		1,2,.L2256	# eq
#        (NULL_PTR != SizeOfExtendedDataRecord) &&
#        (DEM_INT_DTC_INVALID != intDtc))
#    {
#       *SizeOfExtendedDataRecord = 0;
	.d2line		10859
.Llo2740:
	diab.li		r0,0
	sth		r0,0(r28)		# SizeOfExtendedDataRecord=r28
#       originRetVal = CheckOrigin(intDtc, DTCOrigin);
	.d2line		10860
	mr		r3,r26		# intDtc=r3 intDtc=r26
	mr		r4,r30		# DTCOrigin=r4 DTCOrigin=r30
	bl		CheckOrigin
.Llo2720:
	mr		r3,r3		# originRetVal=r3 originRetVal=r3
#       if (DEM_OK == originRetVal)
	.d2line		10861
	rlwinm		r3,r3,0,24,31		# originRetVal=r3 originRetVal=r3
	se_cmpi		r3,0		# originRetVal=r3
	bc		0,2,.L2257	# ne
#       {
#          /*
#           * MISRA-C:2004 RULE 16.10 VIOLATION:
#           * If a function returns error information, then that error information shall be tested.
#           * This function returns the index of and a pointer to (out parameter ppEvMemEntry) the event memory entry.
#           * In this case the index is not needed.
#           */
#          (void)GetExistingEventMemoryEntry(intDtc, internalOrigin, &pEvMemEntry);
	.d2line		10869
.Llo2704:
	diab.addi		r5,r1,12
	mr		r3,r26		# intDtc=r3 intDtc=r26
	mr		r4,r25		# internalOrigin=r4 internalOrigin=r25
	bl		GetExistingEventMemoryEntry
#          if ((0xfeU == ExtendedDataNumber) || (0xffU == ExtendedDataNumber))
	.d2line		10870
	rlwinm		r3,r29,0,24,31		# intDtc=r3 ExtendedDataNumber=r29
	cmpi		0,0,r3,254		# intDtc=r3
	bc		1,2,.L2273	# eq
	rlwinm		r3,r29,0,24,31		# intDtc=r3 ExtendedDataNumber=r29
	cmpi		0,0,r3,255		# intDtc=r3
	bc		0,2,.L2258	# ne
.L2273:
#          {
#             /* SWS_Dem_00076 require special handling for Data number 0xFE and 0xFF */
#             startRange = 0x90U;
	.d2line		10873
.Llo2708:
	diab.li		r0,144		# startRange=r0
# 
#             if (0xffU == ExtendedDataNumber)
	.d2line		10875
.Llo2709:
	rlwinm		r29,r29,0,24,31		# ExtendedDataNumber=r29 ExtendedDataNumber=r29
	cmpi		0,0,r29,255		# ExtendedDataNumber=r29
#             {
#                startRange = 0x01U;
	.d2line		10877
	diab.li		r31,1		# startRange=r31
	isel		r31,r31,r0,2		# startRange=r31 startRange=r31 startRange=r0
.L2259:
#             }
#             for (i = startRange; i <= 0xefU; i++)
	.d2line		10879
.Llo2710:
	mr		r31,r31		# i=r31 i=r31
.L2260:
	rlwinm		r3,r31,0,24,31		# intDtc=r3 i=r31
	cmpli		0,0,r3,239		# intDtc=r3
	bc		1,1,.L2270	# gt
#             {
#                tmpBufSize = 0;
	.d2line		10881
	diab.li		r5,0
	sth		r5,8(r1)
#                if (DEM_RECORD_WRONG_BUFFERSIZE == UpdateBufferWithExtendedData(i, internalOrigin, NULL_PTR, &tmpBufSize,
	.d2line		10882
	lwz		r8,12(r1)
	diab.addi		r6,r1,8
	mr		r3,r31		# i=r3 i=r31
	mr		r4,r25		# internalOrigin=r4 internalOrigin=r25
	mr		r7,r26		# intDtc=r7 intDtc=r26
	mr		r9,r5
	bl		UpdateBufferWithExtendedData
	rlwinm		r3,r3,0,24,31		# i=r3 i=r3
	se_cmpi		r3,4		# i=r3
	bc		0,2,.L2263	# ne
#                                                    intDtc, pEvMemEntry, DEM_EVENTID_INVALID))
#                {
#                   DEM_ASSERT_PARAM_DATA(DEM_SID_DCMGETSIZEOFEXTENDEDDATARECORDBYDTC, FALSE)
	.d2line		10885
	diab.li		r3,54		# i=r3
	diab.li		r4,0		# DTCOrigin=r4
	diab.li		r5,33
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2263:
#                }
#                
#                if (tmpBufSize > 0)
	.d2line		10888
	lhz		r0,8(r1)		# startRange=r0
.Llo2729:
	se_cmpi		r0,0		# startRange=r0
	bc		0,1,.L2265	# le
#                {
#                   /* Add an extra byte for the record number */
#                   *SizeOfExtendedDataRecord += (uint16)(tmpBufSize + 1U);
	.d2line		10891
.Llo2730:
	lhz		r0,0(r28)		# startRange=r0 SizeOfExtendedDataRecord=r28
.Llo2731:
	lhz		r3,8(r1)		# i=r3
	se_add		r3,r0		# i=r3 i=r3 startRange=r0
	se_addi		r3,1		# i=r3 i=r3
	sth		r3,0(r28)		# SizeOfExtendedDataRecord=r28 i=r3
.L2265:
#                }
#             }
	.d2line		10893
.Llo2732:
	diab.addi		r3,r31,1		# i=r3 i=r31
	se_addi		r31,1		# i=r31 i=r31
	b		.L2260
.L2258:
#          }
#          else
#          {
#             if (DEM_RECORD_OK != UpdateBufferWithExtendedData(ExtendedDataNumber, internalOrigin, NULL_PTR, SizeOfExtendedDataRecord,
	.d2line		10897
.Llo2711:
	lwz		r8,12(r1)
	mr		r3,r29		# ExtendedDataNumber=r3 ExtendedDataNumber=r29
	mr		r4,r25		# internalOrigin=r4 internalOrigin=r25
	diab.li		r5,0
	mr		r6,r28		# SizeOfExtendedDataRecord=r6 SizeOfExtendedDataRecord=r28
	mr		r7,r26		# intDtc=r7 intDtc=r26
	mr		r9,r5
	bl		UpdateBufferWithExtendedData
	rlwinm		r3,r3,0,24,31		# ExtendedDataNumber=r3 ExtendedDataNumber=r3
	se_cmpi		r3,0		# ExtendedDataNumber=r3
#                intDtc, pEvMemEntry, DEM_EVENTID_INVALID))
#             {
#                /* If extended data cannot be found that record number cannot be found */
# 
#                /* No call of Det_ReportError for invalid record number.
#                   Since the Dcm will loop the complete range of record numbers and
#                   for every record number that is not configured a report of Det-error would otherwise be made.
#                   See Picea Bugzilla #8739. */
# 
#                retVal = DEM_GETSIZEBYDTC_WRONG_RECNUM;
	.d2line		10907
	diab.li		r0,3
	isel		r27,r27,r0,2		# retVal=r27 retVal=r27
.L2267:
#             }
# 
#             if (*SizeOfExtendedDataRecord > 0)
	.d2line		10910
.Llo2712:
	lhz		r0,0(r28)		# SizeOfExtendedDataRecord=r28
	se_cmpi		r0,0
	bc		0,1,.L2270	# le
#             {
#                /* [SWS_Dem_00076] Add an extra byte for the record number */
#                *SizeOfExtendedDataRecord += 1U;
	.d2line		10913
	lhz		r3,0(r28)		# ExtendedDataNumber=r3 SizeOfExtendedDataRecord=r28
.Llo2713:
	se_addi		r3,1		# ExtendedDataNumber=r3 ExtendedDataNumber=r3
	sth		r3,0(r28)		# SizeOfExtendedDataRecord=r28 ExtendedDataNumber=r3
	b		.L2270
.L2257:
#             }
#          }
#       }
#       else
#       {
#          /* Wrong DTC origin */
#          retVal = DEM_GETSIZEBYDTC_WRONG_DTCORIGIN;
	.d2line		10920
.Llo2714:
	diab.li		r27,2		# retVal=r27
.Llo2715:
	b		.L2270
.L2256:
#       }
#    }
#    else
#    {
#       /* No matching DTC was found. */
#       DEM_ASSERT_PARAM_DATA(DEM_SID_DCMGETSIZEOFEXTENDEDDATARECORDBYDTC, FALSE)
	.d2line		10926
.Llo2705:
	diab.li		r3,54		# noErrors=r3
	diab.li		r4,0		# noErrors=r4
	diab.li		r5,33
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
#       retVal = DEM_GETSIZEBYDTC_WRONG_DTC;
	.d2line		10927
	diab.li		r27,1		# retVal=r27
.L2270:
#    }
# 
#    if ((NULL_PTR != SizeOfExtendedDataRecord) && (retVal != DEM_GETSIZEBYDTC_OK))
	.d2line		10930
.Llo2706:
	se_cmpi		r28,0		# SizeOfExtendedDataRecord=r28
	bc		1,2,.L2272	# eq
.Llo2724:
	rlwinm		r3,r27,0,24,31		# intDtc=r3 retVal=r27
.Llo2725:
	se_cmpi		r3,0		# intDtc=r3
	bc		1,2,.L2272	# eq
#    {
#       *SizeOfExtendedDataRecord = 0;
	.d2line		10932
.Llo2726:
	diab.li		r0,0		# startRange=r0
.Llo2733:
	sth		r0,0(r28)		# SizeOfExtendedDataRecord=r28 startRange=r0
.L2272:
#    }
# 
#    return retVal;
	.d2line		10935
.Llo2734:
	rlwinm		r3,r27,0,24,31		# intDtc=r3 retVal=r27
.L2248:
# }
	.d2line		10936
	.d2epilogue_begin
.Llo2716:
	lmw		r25,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	2,10
.Llo2718:
	lwz		r0,52(r1)		# startRange=r0
	mtspr		lr,r0		# startRange=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2717:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4766:
	.type		Dem_DcmGetSizeOfExtendedDataRecordByDTC,@function
	.size		Dem_DcmGetSizeOfExtendedDataRecordByDTC,.-Dem_DcmGetSizeOfExtendedDataRecordByDTC
# Number of nodes = 282

# Allocations for Dem_DcmGetSizeOfExtendedDataRecordByDTC
#	?a4		DTC
#	?a5		DTCOrigin
#	?a6		ExtendedDataNumber
#	?a7		SizeOfExtendedDataRecord
#	?a8		retVal
#	?a9		originRetVal
#	SP,12		pEvMemEntry
#	?a10		intDtc
#	?a11		i
#	?a12		internalOrigin
#	?a13		startRange
#	SP,8		tmpBufSize
#	?a14		noErrors
# FUNC(Std_ReturnType, DEM_CODE) Dem_GetSIStatus(Dem_EventIdType EventId,
	.align		2
	.section	.text_vle
        .d2line         11039,32
#$$ld
.L4790:

#$$bf	Dem_GetSIStatus,interprocedural,rasave,nostackparams
	.globl		Dem_GetSIStatus
	.d2_cfa_start __cie
Dem_GetSIStatus:
.Llo2741:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_offset_list	29,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# EventId=r31 EventId=r3
	mr		r30,r4		# Status=r30 Status=r4
	.d2prologue_end
#      P2VAR(uint8, AUTOMATIC, DEM_APPL_DATA) Status)
# {
#    Std_ReturnType retVal = E_NOT_OK;
	.d2line		11042
	diab.li		r29,1		# retVal=r29
# 
#    DEM_PRE_ASSERT()
	.d2line		11044
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_GETSISTATUS, DEM_INIT == Dem_InitState)
	.d2line		11045
.Llo2746:
	lis		r3,Dem_InitState@ha
.Llo2742:
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L2294	# eq
.Llo2743:
	diab.li		r3,54
.Llo2745:
	diab.li		r4,0
	diab.li		r5,200
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2294:
#    DEM_ASSERT_PARAM_DATA(DEM_SID_GETSISTATUS, (EventId <= Dem_LCfg.num_events) && (EventId > 0))
	.d2line		11046
	rlwinm		r4,r31,0,16,31		# EventId=r31
	lis		r3,(Dem_LCfg+136)@ha
	lhz		r3,(Dem_LCfg+136)@l(r3)
	se_cmp		r4,r3
	bc		1,1,.L2299	# gt
	rlwinm		r3,r31,0,16,31		# EventId=r31
	se_cmpi		r3,0
	bc		1,1,.L2295	# gt
.L2299:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,200
	diab.li		r6,18
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2295:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_GETSISTATUS, Status != NULL_PTR)
	.d2line		11047
	se_cmpi		r30,0		# Status=r30
	bc		0,2,.L2296	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,200
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2296:
#    DEM_POST_ASSERT_RETVAL(E_NOT_OK)
	.d2line		11048
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L2297	# ne
.Llo2747:
	diab.li		r3,1
	b		.L2293
.L2297:
# 
#    if ((DEM_INIT == Dem_InitState) && (Status != NULL_PTR))
	.d2line		11050
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2748:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L2298	# ne
.Llo2749:
	se_cmpi		r30,0		# Status=r30
	bc		1,2,.L2298	# eq
#    {
#       *Status = Dem_BuildSiByte(EventId);
	.d2line		11052
	mr		r3,r31		# EventId=r3 EventId=r31
	bl		Dem_BuildSiByte
	stb		r3,0(r30)		# Status=r30 EventId=r3
#       retVal = E_OK;
	.d2line		11053
	diab.li		r29,0		# retVal=r29
.L2298:
#    }
# 
#    return retVal;
	.d2line		11056
	rlwinm		r3,r29,0,24,31		# EventId=r3 retVal=r29
.L2293:
# }
	.d2line		11057
	.d2epilogue_begin
.Llo2744:
	lmw		r29,20(r1)		# offset r1+20  0x14
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4791:
	.type		Dem_GetSIStatus,@function
	.size		Dem_GetSIStatus,.-Dem_GetSIStatus
# Number of nodes = 90

# Allocations for Dem_GetSIStatus
#	?a4		EventId
#	?a5		Status
#	?a6		retVal
#	?a7		noErrors
# FUNC(Dem_ReturnSetFilterType, DEM_CODE) Dem_DcmSetEvMemDTCFilter(void)
	.align		2
	.section	.text_vle
        .d2line         11779,41
#$$ld
.L4801:

#$$bf	Dem_DcmSetEvMemDTCFilter,interprocedural,rasave,nostackparams
	.globl		Dem_DcmSetEvMemDTCFilter
	.d2_cfa_start __cie
Dem_DcmSetEvMemDTCFilter:
.Llo2750:
	stwu		r1,-32(r1)		
	.d2_cfa_def_cfa_offset	32
	mfspr		r0,lr
	stw		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_offset_list	31,31,1,1
	stw		r0,36(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    Dem_ReturnSetFilterType retVal = DEM_WRONG_FILTER;
	.d2line		11781
	diab.li		r31,1		# retVal=r31
# 
#    DEM_PRE_ASSERT()
	.d2line		11783
	diab.li		r0,1
#    DEM_ASSERT_UNINIT(DEM_SID_DCMSETEVMEMDTCFILTER, DEM_INIT == Dem_InitState)
	.d2line		11784
.Llo2752:
	lis		r3,Dem_InitState@ha
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L2313	# eq
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,208
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2313:
#    DEM_POST_ASSERT_RETVAL(DEM_WRONG_FILTER)
	.d2line		11785
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L2314	# ne
.Llo2753:
	diab.li		r3,1
	b		.L2312
.L2314:
# 
#    if (DEM_INIT == Dem_InitState)
	.d2line		11787
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2754:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L2315	# ne
#    {
#       EvMemDTCFilter.filter_active = TRUE;
	.d2line		11789
.Llo2755:
	diab.li		r0,1		# noErrors=r0
.Llo2756:
	lis		r3,EvMemDTCFilter@ha
	e_add16i		r3,r3,EvMemDTCFilter@l
	stb		r0,0(r3)		# noErrors=r0
#       EvMemDTCFilter.next_entry_to_handle = 0;
	.d2line		11790
	diab.li		r31,0		# retVal=r31
	lis		r3,(EvMemDTCFilter+1)@ha
	stb		r31,(EvMemDTCFilter+1)@l(r3)		# retVal=r31
# 
#       retVal = DEM_FILTER_ACCEPTED;
.L2315:
#    }
# 
#    return retVal;
	.d2line		11795
.Llo2757:
	rlwinm		r3,r31,0,24,31		# retVal=r31
.L2312:
# }
	.d2line		11796
	.d2epilogue_begin
.Llo2751:
	lwz		r31,28(r1)		# offset r1+28  0x1c
	.d2_cfa_restore_list	3,10
	lwz		r0,36(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,32		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4802:
	.type		Dem_DcmSetEvMemDTCFilter,@function
	.size		Dem_DcmSetEvMemDTCFilter,.-Dem_DcmSetEvMemDTCFilter
# Number of nodes = 49

# Allocations for Dem_DcmSetEvMemDTCFilter
#	?a4		retVal
#	?a5		noErrors
# FUNC(Dem_ReturnGetNextFilteredElementType, DEM_CODE) Dem_DcmGetNextFilteredEvMemDTC(
	.align		2
	.section	.text_vle
        .d2line         11800,54
#$$ld
.L4810:

#$$bf	Dem_DcmGetNextFilteredEvMemDTC,interprocedural,rasave,nostackparams
	.globl		Dem_DcmGetNextFilteredEvMemDTC
	.d2_cfa_start __cie
Dem_DcmGetNextFilteredEvMemDTC:
.Llo2758:
	stwu		r1,-48(r1)		
	.d2_cfa_def_cfa_offset	48
	mfspr		r0,lr
	stmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_offset_list	26,31,1,1
	stw		r0,52(r1)
	.d2_cfa_offset    108,-1
	mr		r31,r3		# DTC=r31 DTC=r3
	mr		r30,r4		# DTCStatus=r30 DTCStatus=r4
	.d2prologue_end
#          P2VAR(uint32, AUTOMATIC, DEM_APPL_DATA) DTC,
#          P2VAR(Dem_UdsStatusByteType, AUTOMATIC, DEM_APPL_DATA) DTCStatus)
# {
#    Dem_ReturnGetNextFilteredElementType retVal = DEM_FILTERED_NO_MATCHING_ELEMENT;
	.d2line		11804
	diab.li		r29,1		# retVal=r29
#    boolean dtcFound = FALSE;
	.d2line		11805
.Llo2765:
	diab.li		r28,0		# dtcFound=r28
#    uint8 i;
#    Dem_EventIdType evId;
#    uint32 udsDtcValue;
#    uint16 intDtcIdx;
#    P2CONST(Dem_NvEvMemEntryPtrType, AUTOMATIC, DEM_APPL_CONST) pEvMemEntries =
#       Dem_GetEvMemEntriesPtr(DEM_DTC_ORIGIN_PRIMARY_MEMORY_INTERNAL_INDEX);
#    uint8 numEvMemEntries = Dem_MaxNumEvMemEntries[DEM_DTC_ORIGIN_PRIMARY_MEMORY_INTERNAL_INDEX];
# 
#    DEM_PRE_ASSERT()
	.d2line		11814
.Llo2766:
	diab.li		r0,1
	.d2line		11810
.Llo2789:
	lis		r3,(Dem_LCfg+20)@ha
.Llo2759:
	lwz		r3,(Dem_LCfg+20)@l(r3)
	lwz		r27,0(r3)
.Llo2787:
	mr		r27,r27		# pEvMemEntries=r27 pEvMemEntries=r27
	.d2line		11812
.Llo2788:
	diab.li		r26,10		# numEvMemEntries=r26
#    DEM_ASSERT_UNINIT(DEM_SID_DCMGETNEXTFILTEREDEVMEMDTC, DEM_INIT == Dem_InitState)
	.d2line		11815
	lis		r3,Dem_InitState@ha
	lwz		r3,Dem_InitState@l(r3)
	se_cmpi		r3,2
	bc		1,2,.L2321	# eq
.Llo2760:
	diab.li		r3,54
.Llo2762:
	diab.li		r4,0
	diab.li		r5,207
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2321:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETNEXTFILTEREDEVMEMDTC, DTC != NULL_PTR)
	.d2line		11816
	se_cmpi		r31,0		# DTC=r31
	bc		0,2,.L2322	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,207
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2322:
#    DEM_ASSERT_PARAM_ADDRESS(DEM_SID_DCMGETNEXTFILTEREDEVMEMDTC, DTCStatus != NULL_PTR)
	.d2line		11817
	se_cmpi		r30,0		# DTCStatus=r30
	bc		0,2,.L2323	# ne
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,207
	diab.li		r6,17
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2323:
#    DEM_POST_ASSERT_RETVAL(DEM_FILTERED_NO_MATCHING_ELEMENT)
	.d2line		11818
	rlwinm		r0,r0,0,24,31		# noErrors=r0 noErrors=r0
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L2324	# ne
.Llo2790:
	diab.li		r3,1
	b		.L2320
.L2324:
# 
#    if ((DEM_INIT == Dem_InitState) &&
	.d2line		11820
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2791:
	se_cmpi		r0,2		# noErrors=r0
	bc		0,2,.L2325	# ne
.Llo2792:
	se_cmpi		r31,0		# DTC=r31
	bc		1,2,.L2325	# eq
	se_cmpi		r30,0		# DTCStatus=r30
	bc		1,2,.L2325	# eq
#        (NULL_PTR != DTC) &&
#        (NULL_PTR != DTCStatus))
#    {
#       for (i=EvMemDTCFilter.next_entry_to_handle; (i < numEvMemEntries) && (TRUE == EvMemDTCFilter.filter_active) && (FALSE == dtcFound); i++)
	.d2line		11824
	lis		r3,(EvMemDTCFilter+1)@ha
	lbz		r3,(EvMemDTCFilter+1)@l(r3)
.Llo2767:
	mr		r3,r3		# i=r3 i=r3
.L2326:
	rlwinm		r4,r3,0,24,31		# udsDtcValue=r4 i=r3
.Llo2772:
	rlwinm		r0,r26,0,24,31		# noErrors=r0 numEvMemEntries=r26
.Llo2793:
	se_cmp		r4,r0		# udsDtcValue=r4 noErrors=r0
	bc		0,0,.L2325	# ge
.Llo2773:
	lis		r4,EvMemDTCFilter@ha		# udsDtcValue=r4
.Llo2774:
	lbz		r0,EvMemDTCFilter@l(r4)		# noErrors=r0 udsDtcValue=r4
.Llo2794:
	se_cmpi		r0,1		# noErrors=r0
	bc		0,2,.L2325	# ne
.Llo2775:
	rlwinm		r0,r28,0,24,31		# noErrors=r0 dtcFound=r28
.Llo2795:
	se_cmpi		r0,0		# noErrors=r0
	bc		0,2,.L2325	# ne
#       {
#          evId = pEvMemEntries[i]->event_id;
	.d2line		11826
.Llo2796:
	rlwinm		r4,r3,2,22,29		# udsDtcValue=r4 i=r3
.Llo2776:
	lwzux		r5,r4,r27		# intDtcIdx=r5 udsDtcValue=r4
.Llo2782:
	lhz		r0,0(r5)		# noErrors=r0 intDtcIdx=r5
.Llo2769:
	mr		r0,r0		# evId=r0 evId=r0
#          if (DEM_EVENTID_INVALID != evId)
	.d2line		11827
	rlwinm		r5,r0,0,16,31		# intDtcIdx=r5 evId=r0
	se_cmpi		r5,0		# intDtcIdx=r5
	bc		1,2,.L2329	# eq
#          {
#             intDtcIdx = Dem_GetEventIntDtc(evId);
	.d2line		11829
.Llo2777:
	lis		r4,Dem_pPbCfg@ha		# udsDtcValue=r4
.Llo2778:
	lwz		r4,Dem_pPbCfg@l(r4)		# udsDtcValue=r4 udsDtcValue=r4
	lwz		r4,128(r4)		# udsDtcValue=r4 udsDtcValue=r4
	rlwinm		r5,r0,1,15,30		# intDtcIdx=r5 evId=r0
.Llo2783:
	se_add		r4,r5		# udsDtcValue=r4 udsDtcValue=r4 intDtcIdx=r5
	lhz		r5,-2(r4)		# intDtcIdx=r5 udsDtcValue=r4
	mr		r5,r5		# intDtcIdx=r5 intDtcIdx=r5
#             if (DEM_INT_DTC_INVALID != intDtcIdx)
	.d2line		11830
	rlwinm		r4,r5,0,16,31		# udsDtcValue=r4 intDtcIdx=r5
	cmpli		0,0,r4,65535		# udsDtcValue=r4
	bc		1,2,.L2329	# eq
#             {
#                udsDtcValue = GetUdsDtc(intDtcIdx);
	.d2line		11832
.Llo2779:
	lis		r4,Dem_pPbCfg@ha		# udsDtcValue=r4
.Llo2780:
	lwz		r4,Dem_pPbCfg@l(r4)		# udsDtcValue=r4 udsDtcValue=r4
	lwz		r4,76(r4)		# udsDtcValue=r4 udsDtcValue=r4
.Llo2784:
	rlwinm		r5,r5,2,14,29		# intDtcIdx=r5 intDtcIdx=r5
.Llo2785:
	lwzx		r4,r4,r5		# udsDtcValue=r4 udsDtcValue=r4
	.d2line		11833
	mr.		r4,r4		# udsDtcValue=?a10 udsDtcValue=?a18
#                if (0 != udsDtcValue)
	bc		1,2,.L2329	# eq
#                {
#                   dtcFound = TRUE;
	.d2line		11835
.Llo2770:
	diab.li		r28,1		# dtcFound=r28
#                   *DTC = udsDtcValue; /* [SWS_Dem_00277] */
	.d2line		11836
	stw		r4,0(r31)		# DTC=r31 udsDtcValue=r4
#                   EvMemDTCFilter.next_entry_to_handle = i + 1U;
	.d2line		11837
	diab.addi		r5,r3,1		# intDtcIdx=r5 i=r3
.Llo2786:
	lis		r4,(EvMemDTCFilter+1)@ha		# udsDtcValue=r4
	stb		r5,(EvMemDTCFilter+1)@l(r4)		# udsDtcValue=r4 intDtcIdx=r5
# 
#                   /* [SWS_Dem_00657] */
#                   *DTCStatus = (Dem_UdsStatusByteType)(Dem_GetUdsStatus(evId) & DEM_DTC_STATUS_AVAILABILITY_MASK);
	.d2line		11840
	lis		r4,(Dem_NvUdsStatus-1)@ha		# udsDtcValue=r4
	e_add16i		r4,r4,(Dem_NvUdsStatus-1)@l		# udsDtcValue=r4 udsDtcValue=r4
.Llo2771:
	rlwinm		r0,r0,0,16,31		# evId=r0 evId=r0
	lbzx		r0,r4,r0		# evId=r0 udsDtcValue=r4
	stb		r0,0(r30)		# DTCStatus=r30 evId=r0
#                   retVal = DEM_FILTERED_OK;
	.d2line		11841
	diab.li		r29,0		# retVal=r29
.L2329:
#                }
#             }
#          }
#       }
	.d2line		11845
.Llo2781:
	diab.addi		r4,r3,1		# udsDtcValue=r4 i=r3
	se_addi		r3,1		# i=r3 i=r3
	b		.L2326
.L2325:
#    }
# 
#    return retVal;
	.d2line		11848
.Llo2768:
	rlwinm		r3,r29,0,24,31		# i=r3 retVal=r29
.L2320:
# }
	.d2line		11849
	.d2epilogue_begin
.Llo2761:
	lmw		r26,24(r1)		# offset r1+24  0x18
	.d2_cfa_restore_list	2,10
.Llo2763:
	lwz		r0,52(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	diab.addi		r1,r1,48		
	.d2_cfa_def_cfa_offset	0
	blr
.Llo2764:
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4811:
	.type		Dem_DcmGetNextFilteredEvMemDTC,@function
	.size		Dem_DcmGetNextFilteredEvMemDTC,.-Dem_DcmGetNextFilteredEvMemDTC
# Number of nodes = 192

# Allocations for Dem_DcmGetNextFilteredEvMemDTC
#	?a4		DTC
#	?a5		DTCStatus
#	?a6		retVal
#	?a7		dtcFound
#	?a8		i
#	?a9		evId
#	?a10		udsDtcValue
#	?a11		intDtcIdx
#	?a12		pEvMemEntries
#	?a13		numEvMemEntries
#	?a14		noErrors
# FUNC(void, DEM_CODE) Dem_DcmControlDTCStatusChangedNotification(boolean TriggerNotification)
	.align		2
	.section	.text_vle
        .d2line         11852,22
#$$ld
.L4835:

#$$bf	Dem_DcmControlDTCStatusChangedNotification,interprocedural,rasave,nostackparams
	.globl		Dem_DcmControlDTCStatusChangedNotification
	.d2_cfa_start __cie
Dem_DcmControlDTCStatusChangedNotification:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
.Llo2797:
	stw		r0,20(r1)		# noErrors=r0
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    DEM_PRE_ASSERT()
	.d2line		11854
	diab.li		r0,1		# noErrors=r0
#    DEM_ASSERT_UNINIT(DEM_SID_DCMCONTROLDTCSTATUSCHANGEDNOTIFICATION, DEM_INIT == Dem_InitState)
	.d2line		11855
.Llo2798:
	lis		r3,Dem_InitState@ha
	lwz		r0,Dem_InitState@l(r3)		# noErrors=r0
.Llo2799:
	se_cmpi		r0,2		# noErrors=r0
	bc		1,2,.L2341	# eq
.Llo2800:
	diab.li		r3,54
	diab.li		r4,0
	diab.li		r5,176
	diab.li		r6,32
	bl		Det_ReportError
	diab.li		r0,0		# noErrors=r0
.L2341:
#    DEM_POST_ASSERT_VOID()
# 
# #if (DEM_TRIGGER_DCM == STD_ON)
#    if (DEM_INIT == Dem_InitState)
#    {
#       Dem_DcmDTCStatusChangedNotification = TriggerNotification;
#    }
# #endif /* DEM_TRIGGER_DCM == STD_ON */
# }
	.d2line		11864
	.d2epilogue_begin
	lwz		r0,20(r1)		# noErrors=r0
	mtspr		lr,r0		# noErrors=lr
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4836:
	.type		Dem_DcmControlDTCStatusChangedNotification,@function
	.size		Dem_DcmControlDTCStatusChangedNotification,.-Dem_DcmControlDTCStatusChangedNotification
# Number of nodes = 23

# Allocations for Dem_DcmControlDTCStatusChangedNotification
#	not allocated	TriggerNotification
#	?a4		noErrors
# FUNC(Std_ReturnType, DEM_CODE) Dem_GetComponentFailed(Dem_ComponentIdType ComponentId, P2VAR(boolean, AUTOMATIC, DEM_APPL_DATA) ComponentFailed)
	.align		2
	.section	.text_vle
        .d2line         11867,32
#$$ld
.L4842:

#$$bf	Dem_GetComponentFailed,interprocedural,nostackparams

# Regs written: r0,r1,r3
	.globl		Dem_GetComponentFailed
	.d2_cfa_start __cie
Dem_GetComponentFailed:
	stwu		r1,-16(r1)		
	.d2_cfa_def_cfa_offset	16
	mfspr		r0,lr
	stw		r0,20(r1)
	.d2_cfa_offset    108,-1
	.d2prologue_end
# {
#    Std_ReturnType retVal = E_NOT_OK;
	.d2line		11869
.Llo2801:
	diab.li		r3,1		# retVal=r3
# 
#    /* Service is currently not supported! */
#    return retVal;
# }
	.d2line		11873
	.d2epilogue_begin
.Llo2802:
	se_addi		r1,16		
	.d2_cfa_def_cfa_offset	0
	blr
#$$ef
	.d2_cfa_end 2
	.section	.text_vle
#$$ld
.L4843:
	.type		Dem_GetComponentFailed,@function
	.size		Dem_GetComponentFailed,.-Dem_GetComponentFailed
# Number of nodes = 5

# Allocations for Dem_GetComponentFailed
#	not allocated	ComponentId
#	not allocated	ComponentFailed
#	?a4		retVal

# Allocations for module
	.section	.text_vle
	.0byte		.L4848
	.section	.text_vle
	.type		Dem_OriginMasks,@object
	.size		Dem_OriginMasks,2
	.align		2
	.globl		Dem_OriginMasks
Dem_OriginMasks:
	.byte		1
	.byte		4
	.section	.text_vle
	.type		Dem_MaxNumEvMemEntries,@object
	.size		Dem_MaxNumEvMemEntries,2
	.align		2
	.globl		Dem_MaxNumEvMemEntries
Dem_MaxNumEvMemEntries:
	.byte		10
	.byte		0
	.section	.text_vle
	.type		.L3039,@object
	.size		.L3039,5
	.align		2
#	static		__switch_array1
.L3039:
	.byte		255
	.byte		0
	.byte		255
	.byte		255
	.byte		1
	.section	.text_vle
#$$ld
.L5:
.L5033:	.d2filenum "C:\\WINDRI~1\\COMPIL~1\\DIAB-5~1.4\\include\\diab/lpragma.h"
.L5014:	.d2filenum "..\\..\\BuildSystem\\..\\TTs\\AUTOSAR\\ar422\\ComStack_Types.h"
.L4922:	.d2filenum "d:\\VSB_Demo\\VSTAR_MPC5746R_Diab_PR_4.2.2_g_3.0_10\\VSTAR\\BSWs\\DIAG\\Dem\\ssc\\make\\..\\inc\\Dem_Int.h"
.L4866:	.d2filenum "gen\\MPC5746R_ECU\\WindRiver\\Dem_Lcfg.h"
.L4863:	.d2filenum "d:\\VSB_Demo\\VSTAR_MPC5746R_Diab_PR_4.2.2_g_3.0_10\\VSTAR\\BSWs\\DIAG\\Dem\\ssc\\make\\..\\inc\\Dem_Nv.h"
.L4853:	.d2filenum "gen\\MPC5746R_ECU\\WindRiver\\Dem_NvM.h"
.L4849:	.d2filenum "d:\\VSB_Demo\\VSTAR_MPC5746R_Diab_PR_4.2.2_g_3.0_10\\VSTAR\\BSWs\\DIAG\\Dem\\ssc\\make\\..\\inc\\Dem.h"
.L2369:	.d2filenum "d:\\VSB_Demo\\VSTAR_MPC5746R_Diab_PR_4.2.2_g_3.0_10\\VSTAR\\BSWs\\DIAG\\Dem\\ssc\\make\\..\\src\\Dem.c"
	.d2_line_end


	.section	.debug_abbrev,,n
.L9:
	.section	.debug_abbrev,,n
	.uleb128	1
	.uleb128	17
	.byte		0x1
	.uleb128	1
	.uleb128	19
	.uleb128	3
	.uleb128	8
	.uleb128	37
	.uleb128	8
	.uleb128	27
	.uleb128	8
	.uleb128	19
	.uleb128	15
	.uleb128	17
	.uleb128	1
	.uleb128	18
	.uleb128	1
	.uleb128	16
	.uleb128	6
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	2
	.uleb128	46
	.byte		0x1
	.uleb128	1
	.uleb128	19
	.uleb128	3
	.uleb128	8
	.uleb128	58
	.uleb128	6
	.uleb128	59
	.uleb128	15
	.uleb128	57
	.uleb128	15
	.uleb128	63
	.uleb128	12
	.uleb128	39
	.uleb128	12
	.uleb128	17
	.uleb128	1
	.uleb128	18
	.uleb128	1
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	3
	.uleb128	5
	.byte		0x0
	.uleb128	58
	.uleb128	6
	.uleb128	59
	.uleb128	15
	.uleb128	57
	.uleb128	15
	.uleb128	3
	.uleb128	8
	.uleb128	73
	.uleb128	16
	.uleb128	2
	.uleb128	6
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	4
	.uleb128	52
	.byte		0x0
	.uleb128	58
	.uleb128	6
	.uleb128	59
	.uleb128	15
	.uleb128	57
	.uleb128	15
	.uleb128	3
	.uleb128	8
	.uleb128	73
	.uleb128	16
	.uleb128	2
	.uleb128	6
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	5
	.uleb128	46
	.byte		0x1
	.uleb128	1
	.uleb128	19
	.uleb128	3
	.uleb128	8
	.uleb128	58
	.uleb128	6
	.uleb128	59
	.uleb128	15
	.uleb128	57
	.uleb128	15
	.uleb128	73
	.uleb128	16
	.uleb128	39
	.uleb128	12
	.uleb128	17
	.uleb128	1
	.uleb128	18
	.uleb128	1
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	6
	.uleb128	52
	.byte		0x0
	.uleb128	58
	.uleb128	6
	.uleb128	59
	.uleb128	15
	.uleb128	57
	.uleb128	15
	.uleb128	3
	.uleb128	8
	.uleb128	73
	.uleb128	16
	.uleb128	2
	.uleb128	9
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	7
	.uleb128	46
	.byte		0x1
	.uleb128	1
	.uleb128	19
	.uleb128	3
	.uleb128	8
	.uleb128	58
	.uleb128	6
	.uleb128	59
	.uleb128	15
	.uleb128	57
	.uleb128	15
	.uleb128	39
	.uleb128	12
	.uleb128	17
	.uleb128	1
	.uleb128	18
	.uleb128	1
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	8
	.uleb128	11
	.byte		0x1
	.uleb128	1
	.uleb128	16
	.uleb128	17
	.uleb128	1
	.uleb128	18
	.uleb128	1
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	9
	.uleb128	5
	.byte		0x0
	.uleb128	58
	.uleb128	6
	.uleb128	59
	.uleb128	15
	.uleb128	57
	.uleb128	15
	.uleb128	3
	.uleb128	8
	.uleb128	73
	.uleb128	16
	.uleb128	2
	.uleb128	9
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	10
	.uleb128	46
	.byte		0x1
	.uleb128	1
	.uleb128	19
	.uleb128	3
	.uleb128	8
	.uleb128	58
	.uleb128	6
	.uleb128	59
	.uleb128	15
	.uleb128	57
	.uleb128	15
	.uleb128	73
	.uleb128	16
	.uleb128	63
	.uleb128	12
	.uleb128	39
	.uleb128	12
	.uleb128	17
	.uleb128	1
	.uleb128	18
	.uleb128	1
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	11
	.uleb128	52
	.byte		0x0
	.uleb128	63
	.uleb128	12
	.uleb128	60
	.uleb128	12
	.uleb128	58
	.uleb128	6
	.uleb128	59
	.uleb128	15
	.uleb128	57
	.uleb128	15
	.uleb128	3
	.uleb128	8
	.uleb128	73
	.uleb128	16
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	12
	.uleb128	52
	.byte		0x0
	.uleb128	63
	.uleb128	12
	.uleb128	58
	.uleb128	6
	.uleb128	59
	.uleb128	15
	.uleb128	57
	.uleb128	15
	.uleb128	3
	.uleb128	8
	.uleb128	73
	.uleb128	16
	.uleb128	2
	.uleb128	9
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	13
	.uleb128	19
	.byte		0x1
	.uleb128	58
	.uleb128	6
	.uleb128	59
	.uleb128	15
	.uleb128	57
	.uleb128	15
	.uleb128	1
	.uleb128	19
	.uleb128	3
	.uleb128	8
	.uleb128	11
	.uleb128	15
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	14
	.uleb128	13
	.byte		0x0
	.uleb128	3
	.uleb128	8
	.uleb128	73
	.uleb128	16
	.uleb128	56
	.uleb128	9
	.uleb128	50
	.uleb128	11
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	15
	.uleb128	19
	.byte		0x1
	.uleb128	58
	.uleb128	6
	.uleb128	59
	.uleb128	15
	.uleb128	57
	.uleb128	15
	.uleb128	1
	.uleb128	19
	.uleb128	11
	.uleb128	15
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	16
	.uleb128	4
	.byte		0x1
	.uleb128	58
	.uleb128	6
	.uleb128	59
	.uleb128	15
	.uleb128	57
	.uleb128	15
	.uleb128	1
	.uleb128	19
	.uleb128	3
	.uleb128	8
	.uleb128	11
	.uleb128	15
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	17
	.uleb128	40
	.byte		0x0
	.uleb128	3
	.uleb128	8
	.uleb128	28
	.uleb128	13
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	18
	.uleb128	36
	.byte		0x0
	.uleb128	3
	.uleb128	8
	.uleb128	62
	.uleb128	11
	.uleb128	11
	.uleb128	11
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	19
	.uleb128	22
	.byte		0x0
	.uleb128	3
	.uleb128	8
	.uleb128	73
	.uleb128	16
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	20
	.uleb128	15
	.byte		0x0
	.uleb128	73
	.uleb128	16
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	21
	.uleb128	38
	.byte		0x0
	.uleb128	73
	.uleb128	16
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	22
	.uleb128	36
	.byte		0x0
	.uleb128	3
	.uleb128	8
	.uleb128	11
	.uleb128	11
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	23
	.uleb128	21
	.byte		0x1
	.uleb128	1
	.uleb128	19
	.uleb128	73
	.uleb128	16
	.uleb128	39
	.uleb128	12
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	24
	.uleb128	5
	.byte		0x0
	.uleb128	73
	.uleb128	16
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	25
	.uleb128	1
	.byte		0x1
	.uleb128	1
	.uleb128	19
	.uleb128	73
	.uleb128	16
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.uleb128	26
	.uleb128	33
	.byte		0x0
	.uleb128	47
	.uleb128	15
	.uleb128	0
	.uleb128	0
	.section	.debug_abbrev,,n
	.sleb128	0


	.section	.debug_info,,n
.L2:
	.4byte		.L3-.L1
.L1:
	.2byte		0x2
	.4byte		.L9
	.byte		0x4
	.section	.debug_info,,n
	.sleb128	1
	.4byte		.L7-.L2
	.byte		"d:\\VSB_Demo\\VSTAR_MPC5746R_Diab_PR_4.2.2_g_3.0_10\\VSTAR\\BSWs\\DIAG\\Dem\\ssc\\make\\..\\src\\Dem.c"
	.byte		0
	.byte		"Diab Data, Inc:dcc Rel 5.9.6.4:PPCE200Z4204N3V"
	.byte		0
	.byte		"D:\\VSB_Demo\\VSTAR_MPC5746R_Diab_PR_4.2.2_g_3.0_10\\VSTAR\\Application\\MetaWares"
	.byte		0
	.uleb128	12
	.4byte		.L4
	.4byte		.L5
	.4byte		.L8
	.section	.debug_info,,n
.L2370:
	.sleb128	2
	.4byte		.L2366-.L2
	.byte		"Dem_EnterInChronologicalList"
	.byte		0
	.4byte		.L2369
	.uleb128	7693
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L2367
	.4byte		.L2368
	.section	.debug_info,,n
	.sleb128	3
	.4byte		.L2369
	.uleb128	7693
	.uleb128	22
	.byte		"InternalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L2373
	.sleb128	3
	.4byte		.L2369
	.uleb128	7693
	.uleb128	22
	.byte		"EntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L2374
	.section	.debug_info,,n
.L2375:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7695
	.uleb128	19
	.byte		"pFirst"
	.byte		0
	.4byte		.L2376
	.4byte		.L2378
.L2379:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7696
	.uleb128	19
	.byte		"pLast"
	.byte		0
	.4byte		.L2376
	.4byte		.L2380
.L2381:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7697
	.uleb128	19
	.byte		"pNext"
	.byte		0
	.4byte		.L2376
	.4byte		.L2382
.L2383:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7698
	.uleb128	19
	.byte		"pPrev"
	.byte		0
	.4byte		.L2376
	.4byte		.L2384
	.section	.debug_info,,n
	.sleb128	0
.L2366:
	.section	.debug_info,,n
.L2389:
	.sleb128	5
	.4byte		.L2386-.L2
	.byte		"AllocateEventMemoryEntry"
	.byte		0
	.4byte		.L2369
	.uleb128	2692
	.uleb128	30
	.4byte		.L2371
	.byte		0x1
	.4byte		.L2387
	.4byte		.L2388
	.sleb128	3
	.4byte		.L2369
	.uleb128	2692
	.uleb128	30
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L2393
	.sleb128	3
	.4byte		.L2369
	.uleb128	2692
	.uleb128	30
	.byte		"origin"
	.byte		0
	.4byte		.L2371
	.4byte		.L2394
	.sleb128	3
	.4byte		.L2369
	.uleb128	2692
	.uleb128	30
	.byte		"ppEvMemEntry"
	.byte		0
	.4byte		.L2395
	.4byte		.L2400
.L2401:
	.sleb128	4
	.4byte		.L2369
	.uleb128	2696
	.uleb128	10
	.byte		"evMemEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L2402
.L2403:
	.sleb128	4
	.4byte		.L2369
	.uleb128	2697
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L2404
.L2405:
	.sleb128	4
	.4byte		.L2369
	.uleb128	2698
	.uleb128	64
	.byte		"pEvMemEntries"
	.byte		0
	.4byte		.L2406
	.4byte		.L2408
.L2409:
	.sleb128	4
	.4byte		.L2369
	.uleb128	2699
	.uleb128	28
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L2410
.L2411:
	.sleb128	4
	.4byte		.L2369
	.uleb128	2700
	.uleb128	10
	.byte		"numEvMemEntries"
	.byte		0
	.4byte		.L2371
	.4byte		.L2412
	.section	.debug_info,,n
	.sleb128	0
.L2386:
	.section	.debug_info,,n
.L2418:
	.sleb128	5
	.4byte		.L2414-.L2
	.byte		"ConvertToIntDtcGroupId"
	.byte		0
	.4byte		.L2369
	.uleb128	4657
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L2415
	.4byte		.L2416
	.sleb128	3
	.4byte		.L2369
	.uleb128	4657
	.uleb128	32
	.byte		"DTCGroup"
	.byte		0
	.4byte		.L2419
	.4byte		.L2421
	.sleb128	3
	.4byte		.L2369
	.uleb128	4657
	.uleb128	32
	.byte		"pIntDtcGroup"
	.byte		0
	.4byte		.L2377
	.4byte		.L2422
.L2423:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4660
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L2424
.L2425:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4661
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L2426
	.section	.debug_info,,n
	.sleb128	0
.L2414:
	.section	.debug_info,,n
.L2431:
	.sleb128	5
	.4byte		.L2428-.L2
	.byte		"GetIntDtcGroupId"
	.byte		0
	.4byte		.L2369
	.uleb128	4675
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L2429
	.4byte		.L2430
	.sleb128	3
	.4byte		.L2369
	.uleb128	4675
	.uleb128	32
	.byte		"dtc"
	.byte		0
	.4byte		.L2419
	.4byte		.L2432
	.sleb128	3
	.4byte		.L2369
	.uleb128	4675
	.uleb128	32
	.byte		"pIntDtcGroup"
	.byte		0
	.4byte		.L2377
	.4byte		.L2433
.L2434:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4677
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L2435
.L2436:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4678
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L2437
	.section	.debug_info,,n
	.sleb128	0
.L2428:
	.section	.debug_info,,n
.L2442:
	.sleb128	5
	.4byte		.L2439-.L2
	.byte		"IsEvMemStorageEnabled"
	.byte		0
	.4byte		.L2369
	.uleb128	2913
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L2440
	.4byte		.L2441
	.sleb128	3
	.4byte		.L2369
	.uleb128	2913
	.uleb128	32
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L2443
	.section	.debug_info,,n
.L2444:
	.sleb128	6
	.4byte		.L2369
	.uleb128	2915
	.uleb128	10
	.byte		"intDtcGroup"
	.byte		0
	.4byte		.L2371
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L2445:
	.sleb128	4
	.4byte		.L2369
	.uleb128	2916
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L2446
.L2447:
	.sleb128	4
	.4byte		.L2369
	.uleb128	2917
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L2448
	.section	.debug_info,,n
	.sleb128	0
.L2439:
	.section	.debug_info,,n
.L2453:
	.sleb128	5
	.4byte		.L2450-.L2
	.byte		"DtcRecordUpdateEnabled"
	.byte		0
	.4byte		.L2369
	.uleb128	2958
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L2451
	.4byte		.L2452
	.sleb128	3
	.4byte		.L2369
	.uleb128	2958
	.uleb128	32
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L2454
.L2455:
	.sleb128	4
	.4byte		.L2369
	.uleb128	2960
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L2456
.L2457:
	.sleb128	4
	.4byte		.L2369
	.uleb128	2961
	.uleb128	11
	.byte		"udsDtc"
	.byte		0
	.4byte		.L2419
	.4byte		.L2458
.L2459:
	.sleb128	4
	.4byte		.L2369
	.uleb128	2962
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L2460
	.section	.debug_info,,n
	.sleb128	0
.L2450:
	.section	.debug_info,,n
.L2465:
	.sleb128	7
	.4byte		.L2462-.L2
	.byte		"ClearFreezeFrameData"
	.byte		0
	.4byte		.L2369
	.uleb128	4857
	.uleb128	29
	.byte		0x1
	.4byte		.L2463
	.4byte		.L2464
	.sleb128	3
	.4byte		.L2369
	.uleb128	4857
	.uleb128	29
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L2466
	.sleb128	3
	.4byte		.L2369
	.uleb128	4857
	.uleb128	29
	.byte		"pFFStorage"
	.byte		0
	.4byte		.L2467
	.4byte		.L2471
.L2472:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4860
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L2473
.L2474:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4861
	.uleb128	11
	.byte		"ffIndex"
	.byte		0
	.4byte		.L2391
	.4byte		.L2475
	.section	.debug_info,,n
	.sleb128	0
.L2462:
	.section	.debug_info,,n
.L2480:
	.sleb128	7
	.4byte		.L2477-.L2
	.byte		"ClearDevFreezeFrameData"
	.byte		0
	.4byte		.L2369
	.uleb128	4927
	.uleb128	29
	.byte		0x1
	.4byte		.L2478
	.4byte		.L2479
	.sleb128	3
	.4byte		.L2369
	.uleb128	4927
	.uleb128	29
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L2481
.L2482:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4929
	.uleb128	11
	.byte		"ffIndex"
	.byte		0
	.4byte		.L2391
	.4byte		.L2483
	.section	.debug_info,,n
	.sleb128	0
.L2477:
	.section	.debug_info,,n
.L2488:
	.sleb128	7
	.4byte		.L2485-.L2
	.byte		"ClearExtendedData"
	.byte		0
	.4byte		.L2369
	.uleb128	4972
	.uleb128	29
	.byte		0x1
	.4byte		.L2486
	.4byte		.L2487
	.sleb128	3
	.4byte		.L2369
	.uleb128	4972
	.uleb128	29
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L2489
	.sleb128	3
	.4byte		.L2369
	.uleb128	4972
	.uleb128	29
	.byte		"pEDStorage"
	.byte		0
	.4byte		.L2467
	.4byte		.L2490
.L2491:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4975
	.uleb128	11
	.byte		"index"
	.byte		0
	.4byte		.L2391
	.4byte		.L2492
	.section	.debug_info,,n
	.sleb128	0
.L2485:
	.section	.debug_info,,n
.L2497:
	.sleb128	2
	.4byte		.L2494-.L2
	.byte		"Dem_RemoveFromChronologicalList"
	.byte		0
	.4byte		.L2369
	.uleb128	7751
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L2495
	.4byte		.L2496
	.sleb128	3
	.4byte		.L2369
	.uleb128	7751
	.uleb128	22
	.byte		"InternalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L2498
	.sleb128	3
	.4byte		.L2369
	.uleb128	7751
	.uleb128	22
	.byte		"EntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L2499
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L2503
	.4byte		.L2500
	.4byte		.L2501
.L2504:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7755
	.uleb128	22
	.byte		"pFirst"
	.byte		0
	.4byte		.L2376
	.4byte		.L2505
.L2506:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7756
	.uleb128	22
	.byte		"pLast"
	.byte		0
	.4byte		.L2376
	.4byte		.L2507
.L2508:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7757
	.uleb128	22
	.byte		"pNext"
	.byte		0
	.4byte		.L2376
	.4byte		.L2509
.L2510:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7758
	.uleb128	22
	.byte		"pPrev"
	.byte		0
	.4byte		.L2376
	.4byte		.L2511
	.section	.debug_info,,n
	.sleb128	0
.L2503:
	.section	.debug_info,,n
	.sleb128	0
.L2494:
	.section	.debug_info,,n
.L2516:
	.sleb128	7
	.4byte		.L2513-.L2
	.byte		"ClearEntry"
	.byte		0
	.4byte		.L2369
	.uleb128	4423
	.uleb128	29
	.byte		0x1
	.4byte		.L2514
	.4byte		.L2515
	.sleb128	3
	.4byte		.L2369
	.uleb128	4423
	.uleb128	29
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2407
	.4byte		.L2517
	.sleb128	3
	.4byte		.L2369
	.uleb128	4423
	.uleb128	29
	.byte		"eventEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L2518
	.sleb128	3
	.4byte		.L2369
	.uleb128	4423
	.uleb128	29
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L2519
	.section	.debug_info,,n
	.sleb128	0
.L2513:
	.section	.debug_info,,n
.L2524:
	.sleb128	2
	.4byte		.L2521-.L2
	.byte		"Dem_UpdateIndicators"
	.byte		0
	.4byte		.L2369
	.uleb128	7953
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L2522
	.4byte		.L2523
	.section	.debug_info,,n
	.sleb128	0
.L2521:
	.section	.debug_info,,n
.L2529:
	.sleb128	7
	.4byte		.L2526-.L2
	.byte		"PerformAgingDisplacement"
	.byte		0
	.4byte		.L2369
	.uleb128	3069
	.uleb128	29
	.byte		0x1
	.4byte		.L2527
	.4byte		.L2528
	.sleb128	3
	.4byte		.L2369
	.uleb128	3069
	.uleb128	29
	.byte		"evMemEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L2530
	.sleb128	3
	.4byte		.L2369
	.uleb128	3069
	.uleb128	29
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L2531
.L2532:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3071
	.uleb128	46
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2407
	.4byte		.L2533
.L2534:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3072
	.uleb128	38
	.byte		"eventId"
	.byte		0
	.4byte		.L2535
	.4byte		.L2536
	.section	.debug_info,,n
	.sleb128	0
.L2526:
	.section	.debug_info,,n
.L2541:
	.sleb128	5
	.4byte		.L2538-.L2
	.byte		"GetExistingEventMemoryEntry"
	.byte		0
	.4byte		.L2369
	.uleb128	5082
	.uleb128	30
	.4byte		.L2371
	.byte		0x1
	.4byte		.L2539
	.4byte		.L2540
	.sleb128	3
	.4byte		.L2369
	.uleb128	5082
	.uleb128	30
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L2542
	.sleb128	3
	.4byte		.L2369
	.uleb128	5082
	.uleb128	30
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L2543
	.sleb128	3
	.4byte		.L2369
	.uleb128	5082
	.uleb128	30
	.byte		"ppEvMemEntry"
	.byte		0
	.4byte		.L2395
	.4byte		.L2544
.L2545:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5086
	.uleb128	64
	.byte		"pEvMemEntries"
	.byte		0
	.4byte		.L2406
	.4byte		.L2546
.L2547:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5087
	.uleb128	28
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L2548
.L2549:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5088
	.uleb128	10
	.byte		"eventEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L2550
.L2551:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5089
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L2552
	.section	.debug_info,,n
	.sleb128	0
.L2538:
	.section	.debug_info,,n
.L2557:
	.sleb128	2
	.4byte		.L2554-.L2
	.byte		"Dem_ClearPrestoredFF"
	.byte		0
	.4byte		.L2369
	.uleb128	7616
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L2555
	.4byte		.L2556
	.section	.debug_info,,n
	.sleb128	9
	.4byte		.L2369
	.uleb128	7616
	.uleb128	22
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.sleb128	2
	.byte		0x90
	.uleb128	3
	.section	.debug_info,,n
	.sleb128	0
.L2554:
	.section	.debug_info,,n
.L2562:
	.sleb128	2
	.4byte		.L2559-.L2
	.byte		"Dem_ClrUdsBits"
	.byte		0
	.4byte		.L2369
	.uleb128	7626
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L2560
	.4byte		.L2561
	.sleb128	3
	.4byte		.L2369
	.uleb128	7626
	.uleb128	22
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L2563
	.sleb128	3
	.4byte		.L2369
	.uleb128	7626
	.uleb128	22
	.byte		"BitMask"
	.byte		0
	.4byte		.L2371
	.4byte		.L2564
.L2565:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7628
	.uleb128	57
	.byte		"pEventStatusExtended"
	.byte		0
	.4byte		.L2566
	.4byte		.L2568
	.section	.debug_info,,n
	.sleb128	0
.L2559:
	.section	.debug_info,,n
.L2573:
	.sleb128	7
	.4byte		.L2570-.L2
	.byte		"HandleEventStatePassed"
	.byte		0
	.4byte		.L2369
	.uleb128	2976
	.uleb128	29
	.byte		0x1
	.4byte		.L2571
	.4byte		.L2572
	.sleb128	3
	.4byte		.L2369
	.uleb128	2976
	.uleb128	29
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L2574
.L2575:
	.sleb128	6
	.4byte		.L2369
	.uleb128	2978
	.uleb128	28
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L2576:
	.sleb128	4
	.4byte		.L2369
	.uleb128	2979
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L2577
.L2578:
	.sleb128	4
	.4byte		.L2369
	.uleb128	2980
	.uleb128	22
	.byte		"eventDest"
	.byte		0
	.4byte		.L2579
	.4byte		.L2580
.L2581:
	.sleb128	4
	.4byte		.L2369
	.uleb128	2981
	.uleb128	10
	.byte		"origin"
	.byte		0
	.4byte		.L2371
	.4byte		.L2582
.L2583:
	.sleb128	4
	.4byte		.L2369
	.uleb128	2982
	.uleb128	10
	.byte		"evMemEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L2584
	.section	.debug_info,,n
	.sleb128	0
.L2570:
	.section	.debug_info,,n
.L2589:
	.sleb128	7
	.4byte		.L2586-.L2
	.byte		"StoreOccurrenceInformation"
	.byte		0
	.4byte		.L2369
	.uleb128	3391
	.uleb128	29
	.byte		0x1
	.4byte		.L2587
	.4byte		.L2588
	.sleb128	3
	.4byte		.L2369
	.uleb128	3391
	.uleb128	29
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L2590
.L2591:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3393
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L2592
	.section	.debug_info,,n
	.sleb128	0
.L2586:
	.section	.debug_info,,n
.L2597:
	.sleb128	5
	.4byte		.L2594-.L2
	.byte		"CheckExtendedDataCaptureTrigger"
	.byte		0
	.4byte		.L2369
	.uleb128	3773
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L2595
	.4byte		.L2596
	.sleb128	3
	.4byte		.L2369
	.uleb128	3773
	.uleb128	32
	.byte		"isFailed"
	.byte		0
	.4byte		.L2417
	.4byte		.L2598
	.sleb128	3
	.4byte		.L2369
	.uleb128	3773
	.uleb128	32
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2599
	.4byte		.L2601
.L2602:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3776
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L2603
	.section	.debug_info,,n
	.sleb128	0
.L2594:
	.section	.debug_info,,n
.L2608:
	.sleb128	5
	.4byte		.L2605-.L2
	.byte		"FindFreeExtendedDataEntry"
	.byte		0
	.4byte		.L2369
	.uleb128	5370
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L2606
	.4byte		.L2607
	.sleb128	3
	.4byte		.L2369
	.uleb128	5370
	.uleb128	32
	.byte		"pEDStorage"
	.byte		0
	.4byte		.L2467
	.4byte		.L2609
	.sleb128	3
	.4byte		.L2369
	.uleb128	5370
	.uleb128	32
	.byte		"pEDEntry"
	.byte		0
	.4byte		.L2610
	.4byte		.L2611
.L2612:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5373
	.uleb128	12
	.byte		"entryFound"
	.byte		0
	.4byte		.L2417
	.4byte		.L2613
.L2614:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5374
	.uleb128	11
	.byte		"edEntry"
	.byte		0
	.4byte		.L2391
	.4byte		.L2615
	.section	.debug_info,,n
	.sleb128	0
.L2605:
	.section	.debug_info,,n
.L2620:
	.sleb128	2
	.4byte		.L2617-.L2
	.byte		"Dem_MemSet"
	.byte		0
	.4byte		.L2369
	.uleb128	7740
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L2618
	.4byte		.L2619
	.sleb128	3
	.4byte		.L2369
	.uleb128	7740
	.uleb128	22
	.byte		"pDest"
	.byte		0
	.4byte		.L2621
	.4byte		.L2623
	.sleb128	3
	.4byte		.L2369
	.uleb128	7740
	.uleb128	22
	.byte		"pattern"
	.byte		0
	.4byte		.L2371
	.4byte		.L2624
	.sleb128	3
	.4byte		.L2369
	.uleb128	7740
	.uleb128	22
	.byte		"count"
	.byte		0
	.4byte		.L2391
	.4byte		.L2625
.L2626:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7742
	.uleb128	43
	.byte		"pD"
	.byte		0
	.4byte		.L2377
	.4byte		.L2627
.L2628:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7743
	.uleb128	11
	.byte		"i"
	.byte		0
	.4byte		.L2391
	.4byte		.L2629
	.section	.debug_info,,n
	.sleb128	0
.L2617:
	.section	.debug_info,,n
.L2634:
	.sleb128	7
	.4byte		.L2631-.L2
	.byte		"StoreExternalExtendedData"
	.byte		0
	.4byte		.L2369
	.uleb128	5389
	.uleb128	29
	.byte		0x1
	.4byte		.L2632
	.4byte		.L2633
	.sleb128	3
	.4byte		.L2369
	.uleb128	5389
	.uleb128	29
	.byte		"pEvEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L2635
	.sleb128	3
	.4byte		.L2369
	.uleb128	5389
	.uleb128	29
	.byte		"edEntry"
	.byte		0
	.4byte		.L2391
	.4byte		.L2636
	.sleb128	3
	.4byte		.L2369
	.uleb128	5389
	.uleb128	29
	.byte		"edClassIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L2637
	.sleb128	3
	.4byte		.L2369
	.uleb128	5389
	.uleb128	29
	.byte		"pEDStorage"
	.byte		0
	.4byte		.L2467
	.4byte		.L2638
	.sleb128	3
	.4byte		.L2369
	.uleb128	5389
	.uleb128	29
	.byte		"firstTime"
	.byte		0
	.4byte		.L2417
	.4byte		.L2639
.L2640:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5395
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L2641
.L2642:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5396
	.uleb128	10
	.byte		"numRecords"
	.byte		0
	.4byte		.L2371
	.4byte		.L2643
.L2644:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5397
	.uleb128	11
	.byte		"recOffset"
	.byte		0
	.4byte		.L2391
	.4byte		.L2645
.L2646:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5398
	.uleb128	19
	.byte		"pEDData"
	.byte		0
	.4byte		.L2376
	.4byte		.L2647
.L2648:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5399
	.uleb128	64
	.byte		"pRecConfig"
	.byte		0
	.4byte		.L2649
	.4byte		.L2653
.L2654:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5400
	.uleb128	46
	.byte		"pRecConfigIndex"
	.byte		0
	.4byte		.L2655
	.4byte		.L2657
	.section	.debug_info,,n
	.sleb128	0
.L2631:
	.section	.debug_info,,n
.L2662:
	.sleb128	5
	.4byte		.L2659-.L2
	.byte		"HandleExtExtendedDataStorage"
	.byte		0
	.4byte		.L2369
	.uleb128	3522
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L2660
	.4byte		.L2661
	.sleb128	3
	.4byte		.L2369
	.uleb128	3522
	.uleb128	32
	.byte		"isFailed"
	.byte		0
	.4byte		.L2417
	.4byte		.L2663
	.sleb128	3
	.4byte		.L2369
	.uleb128	3522
	.uleb128	32
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L2664
	.sleb128	3
	.4byte		.L2369
	.uleb128	3522
	.uleb128	32
	.byte		"eventMemoryEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L2665
	.sleb128	3
	.4byte		.L2369
	.uleb128	3522
	.uleb128	32
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L2666
.L2667:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3525
	.uleb128	12
	.byte		"dataStored"
	.byte		0
	.4byte		.L2417
	.4byte		.L2668
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L2672
	.4byte		.L2669
	.4byte		.L2670
.L2673:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3529
	.uleb128	32
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L2675
.L2676:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3530
	.uleb128	31
	.byte		"edClass"
	.byte		0
	.4byte		.L2656
	.4byte		.L2677
.L2678:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3531
	.uleb128	68
	.byte		"pEDStorage"
	.byte		0
	.4byte		.L2679
	.4byte		.L2680
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L2684
	.4byte		.L2681
	.4byte		.L2682
.L2685:
	.sleb128	6
	.4byte		.L2369
	.uleb128	3542
	.uleb128	17
	.byte		"edEntry"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
	.section	.debug_info,,n
	.sleb128	0
.L2684:
	.section	.debug_info,,n
	.sleb128	0
.L2672:
	.section	.debug_info,,n
	.sleb128	0
.L2659:
	.section	.debug_info,,n
.L2690:
	.sleb128	7
	.4byte		.L2687-.L2
	.byte		"StoreConfirmedOccurrenceInformation"
	.byte		0
	.4byte		.L2369
	.uleb128	3409
	.uleb128	29
	.byte		0x1
	.4byte		.L2688
	.4byte		.L2689
	.sleb128	3
	.4byte		.L2369
	.uleb128	3409
	.uleb128	29
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L2691
.L2692:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3411
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L2693
	.section	.debug_info,,n
	.sleb128	0
.L2687:
	.section	.debug_info,,n
.L2698:
	.sleb128	5
	.4byte		.L2695-.L2
	.byte		"ActivateIndicators"
	.byte		0
	.4byte		.L2369
	.uleb128	6047
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L2696
	.4byte		.L2697
	.sleb128	3
	.4byte		.L2369
	.uleb128	6047
	.uleb128	32
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L2699
	.sleb128	3
	.4byte		.L2369
	.uleb128	6047
	.uleb128	32
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L2700
.L2701:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6049
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L2702
.L2703:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6053
	.uleb128	28
	.byte		"indAttr"
	.byte		0
	.4byte		.L2656
	.4byte		.L2704
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L2708
	.4byte		.L2705
	.4byte		.L2706
.L2709:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6058
	.uleb128	13
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L2710
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L2714
	.4byte		.L2711
	.4byte		.L2712
.L2715:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6070
	.uleb128	37
	.byte		"indicatorBehaviour"
	.byte		0
	.4byte		.L2656
	.4byte		.L2716
	.section	.debug_info,,n
	.sleb128	0
.L2714:
	.section	.debug_info,,n
	.sleb128	0
.L2708:
	.section	.debug_info,,n
	.sleb128	0
.L2695:
	.section	.debug_info,,n
.L2721:
	.sleb128	2
	.4byte		.L2718-.L2
	.byte		"Dem_SetUdsBits"
	.byte		0
	.4byte		.L2369
	.uleb128	7958
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L2719
	.4byte		.L2720
	.sleb128	3
	.4byte		.L2369
	.uleb128	7958
	.uleb128	22
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L2722
	.sleb128	3
	.4byte		.L2369
	.uleb128	7958
	.uleb128	22
	.byte		"bitMask"
	.byte		0
	.4byte		.L2371
	.4byte		.L2723
.L2724:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7960
	.uleb128	57
	.byte		"pUdsStatus"
	.byte		0
	.4byte		.L2566
	.4byte		.L2725
	.section	.debug_info,,n
	.sleb128	0
.L2718:
	.section	.debug_info,,n
.L2730:
	.sleb128	7
	.4byte		.L2727-.L2
	.byte		"HandleFaultConfirmation"
	.byte		0
	.4byte		.L2369
	.uleb128	3335
	.uleb128	29
	.byte		0x1
	.4byte		.L2728
	.4byte		.L2729
	.sleb128	3
	.4byte		.L2369
	.uleb128	3335
	.uleb128	29
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L2731
	.sleb128	3
	.4byte		.L2369
	.uleb128	3335
	.uleb128	29
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2407
	.4byte		.L2732
	.section	.debug_info,,n
	.sleb128	0
.L2727:
	.section	.debug_info,,n
.L2737:
	.sleb128	7
	.4byte		.L2734-.L2
	.byte		"HandleOccurrenceCounter"
	.byte		0
	.4byte		.L2369
	.uleb128	3561
	.uleb128	29
	.byte		0x1
	.4byte		.L2735
	.4byte		.L2736
	.sleb128	3
	.4byte		.L2369
	.uleb128	3561
	.uleb128	29
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2407
	.4byte		.L2738
	.section	.debug_info,,n
	.sleb128	0
.L2734:
	.section	.debug_info,,n
.L2743:
	.sleb128	7
	.4byte		.L2740-.L2
	.byte		"HandleOffBoardCycleCounters"
	.byte		0
	.4byte		.L2369
	.uleb128	3584
	.uleb128	29
	.byte		0x1
	.4byte		.L2741
	.4byte		.L2742
	.sleb128	3
	.4byte		.L2369
	.uleb128	3584
	.uleb128	29
	.byte		"isFailed"
	.byte		0
	.4byte		.L2417
	.4byte		.L2744
	.sleb128	3
	.4byte		.L2369
	.uleb128	3584
	.uleb128	29
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L2745
	.section	.debug_info,,n
	.sleb128	0
.L2740:
	.section	.debug_info,,n
.L2750:
	.sleb128	7
	.4byte		.L2747-.L2
	.byte		"HandleIntExtendedDataStorage"
	.byte		0
	.4byte		.L2369
	.uleb128	3593
	.uleb128	29
	.byte		0x1
	.4byte		.L2748
	.4byte		.L2749
	.sleb128	3
	.4byte		.L2369
	.uleb128	3593
	.uleb128	29
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L2751
	.sleb128	3
	.4byte		.L2369
	.uleb128	3593
	.uleb128	29
	.byte		"isFailed"
	.byte		0
	.4byte		.L2417
	.4byte		.L2752
	.sleb128	3
	.4byte		.L2369
	.uleb128	3593
	.uleb128	29
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L2753
	.section	.debug_info,,n
	.sleb128	0
.L2747:
	.section	.debug_info,,n
.L2758:
	.sleb128	5
	.4byte		.L2755-.L2
	.byte		"IsAllFreezeFrameInstancesSaved"
	.byte		0
	.4byte		.L2369
	.uleb128	6622
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L2756
	.4byte		.L2757
	.sleb128	3
	.4byte		.L2369
	.uleb128	6622
	.uleb128	32
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L2759
	.sleb128	3
	.4byte		.L2369
	.uleb128	6622
	.uleb128	32
	.byte		"numStoredFF"
	.byte		0
	.4byte		.L2371
	.4byte		.L2760
.L2761:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6624
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L2762
.L2763:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6625
	.uleb128	10
	.byte		"ffRecNumClassIdx"
	.byte		0
	.4byte		.L2371
	.4byte		.L2764
	.section	.debug_info,,n
	.sleb128	0
.L2755:
	.section	.debug_info,,n
.L2769:
	.sleb128	5
	.4byte		.L2766-.L2
	.byte		"CheckFreezeFrameCaptureTrigger"
	.byte		0
	.4byte		.L2369
	.uleb128	3725
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L2767
	.4byte		.L2768
	.sleb128	3
	.4byte		.L2369
	.uleb128	3725
	.uleb128	32
	.byte		"isFailed"
	.byte		0
	.4byte		.L2417
	.4byte		.L2770
	.sleb128	3
	.4byte		.L2369
	.uleb128	3725
	.uleb128	32
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2599
	.4byte		.L2771
.L2772:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3728
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L2773
.L2774:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3730
	.uleb128	29
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L2775
.L2776:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3731
	.uleb128	28
	.byte		"ffRecNumClassIdx"
	.byte		0
	.4byte		.L2656
	.4byte		.L2777
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L2781
	.4byte		.L2778
	.4byte		.L2779
.L2782:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3735
	.uleb128	33
	.byte		"allFreezeFrameInstancesSaved"
	.byte		0
	.4byte		.L2783
	.4byte		.L2784
.L2785:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3736
	.uleb128	31
	.byte		"ffRec"
	.byte		0
	.4byte		.L2656
	.4byte		.L2786
.L2787:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3737
	.uleb128	47
	.byte		"trigger"
	.byte		0
	.4byte		.L2788
	.4byte		.L2791
	.section	.debug_info,,n
	.sleb128	0
.L2781:
	.section	.debug_info,,n
	.sleb128	0
.L2766:
	.section	.debug_info,,n
.L2796:
	.sleb128	5
	.4byte		.L2793-.L2
	.byte		"FindFreeFreezeFrameEntry"
	.byte		0
	.4byte		.L2369
	.uleb128	5237
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L2794
	.4byte		.L2795
	.sleb128	3
	.4byte		.L2369
	.uleb128	5237
	.uleb128	32
	.byte		"pFFStorage"
	.byte		0
	.4byte		.L2467
	.4byte		.L2797
	.sleb128	3
	.4byte		.L2369
	.uleb128	5237
	.uleb128	32
	.byte		"numFFEntries"
	.byte		0
	.4byte		.L2391
	.4byte		.L2798
	.sleb128	3
	.4byte		.L2369
	.uleb128	5237
	.uleb128	32
	.byte		"pFFEntry"
	.byte		0
	.4byte		.L2610
	.4byte		.L2799
.L2800:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5241
	.uleb128	12
	.byte		"entryFound"
	.byte		0
	.4byte		.L2417
	.4byte		.L2801
.L2802:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5242
	.uleb128	11
	.byte		"ffEntry"
	.byte		0
	.4byte		.L2391
	.4byte		.L2803
	.section	.debug_info,,n
	.sleb128	0
.L2793:
	.section	.debug_info,,n
.L2808:
	.sleb128	5
	.4byte		.L2805-.L2
	.byte		"StoreFreezeFrameData"
	.byte		0
	.4byte		.L2369
	.uleb128	5331
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L2806
	.4byte		.L2807
	.sleb128	3
	.4byte		.L2369
	.uleb128	5331
	.uleb128	32
	.byte		"pFFData"
	.byte		0
	.4byte		.L2377
	.4byte		.L2809
	.sleb128	3
	.4byte		.L2369
	.uleb128	5331
	.uleb128	32
	.byte		"ffClass"
	.byte		0
	.4byte		.L2391
	.4byte		.L2810
.L2811:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5334
	.uleb128	60
	.byte		"pDidConfig"
	.byte		0
	.4byte		.L2812
	.4byte		.L2816
.L2817:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5335
	.uleb128	48
	.byte		"pFFDidIdx"
	.byte		0
	.4byte		.L2818
	.4byte		.L2819
.L2820:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5336
	.uleb128	10
	.byte		"numFFDids"
	.byte		0
	.4byte		.L2371
	.4byte		.L2821
.L2822:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5337
	.uleb128	11
	.byte		"didIdx"
	.byte		0
	.4byte		.L2391
	.4byte		.L2823
.L2824:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5338
	.uleb128	11
	.byte		"didOffset"
	.byte		0
	.4byte		.L2391
	.4byte		.L2825
.L2826:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5339
	.uleb128	11
	.byte		"didSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L2827
.L2828:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5340
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L2829
.L2830:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5341
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L2831
.L2832:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5342
	.uleb128	20
	.byte		"pFuncReadData"
	.byte		0
	.4byte		.L2833
	.4byte		.L2838
	.section	.debug_info,,n
	.sleb128	0
.L2805:
	.section	.debug_info,,n
.L2843:
	.sleb128	7
	.4byte		.L2840-.L2
	.byte		"StoreStandardFreezeFrame"
	.byte		0
	.4byte		.L2369
	.uleb128	3922
	.uleb128	29
	.byte		0x1
	.4byte		.L2841
	.4byte		.L2842
	.sleb128	3
	.4byte		.L2369
	.uleb128	3922
	.uleb128	29
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L2844
	.sleb128	3
	.4byte		.L2369
	.uleb128	3922
	.uleb128	29
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L2845
	.sleb128	3
	.4byte		.L2369
	.uleb128	3922
	.uleb128	29
	.byte		"pInData"
	.byte		0
	.4byte		.L2846
	.4byte		.L2850
.L2851:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3925
	.uleb128	29
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L2852
.L2853:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3926
	.uleb128	28
	.byte		"ffRecNumClassIdx"
	.byte		0
	.4byte		.L2656
	.4byte		.L2854
.L2855:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3928
	.uleb128	28
	.byte		"numStoredFF"
	.byte		0
	.4byte		.L2656
	.4byte		.L2856
.L2857:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3929
	.uleb128	47
	.byte		"pFFEntry"
	.byte		0
	.4byte		.L2858
	.4byte		.L2859
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L2863
	.4byte		.L2860
	.4byte		.L2861
.L2864:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3936
	.uleb128	32
	.byte		"ffClass"
	.byte		0
	.4byte		.L2674
	.4byte		.L2865
.L2866:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3937
	.uleb128	14
	.byte		"specificFFSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L2867
.L2868:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3938
	.uleb128	32
	.byte		"commonFFClass"
	.byte		0
	.4byte		.L2674
	.4byte		.L2869
.L2870:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3939
	.uleb128	14
	.byte		"commonFFSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L2871
.L2872:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3940
	.uleb128	14
	.byte		"totFFSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L2873
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L2877
	.4byte		.L2874
	.4byte		.L2875
.L2878:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3954
	.uleb128	18
	.byte		"ffAllocated"
	.byte		0
	.4byte		.L2417
	.4byte		.L2879
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L2883
	.4byte		.L2880
	.4byte		.L2881
.L2884:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3976
	.uleb128	28
	.byte		"pFFData"
	.byte		0
	.4byte		.L2376
	.4byte		.L2885
	.section	.debug_info,,n
	.sleb128	0
.L2883:
	.section	.debug_info,,n
	.sleb128	0
.L2877:
	.section	.debug_info,,n
	.sleb128	0
.L2863:
	.section	.debug_info,,n
	.sleb128	0
.L2840:
	.section	.debug_info,,n
.L2890:
	.sleb128	7
	.4byte		.L2887-.L2
	.byte		"UpdateFreezeFrame"
	.byte		0
	.4byte		.L2369
	.uleb128	5257
	.uleb128	29
	.byte		0x1
	.4byte		.L2888
	.4byte		.L2889
	.sleb128	3
	.4byte		.L2369
	.uleb128	5257
	.uleb128	29
	.byte		"pEvEntry"
	.byte		0
	.4byte		.L2599
	.4byte		.L2891
	.sleb128	3
	.4byte		.L2369
	.uleb128	5257
	.uleb128	29
	.byte		"ffClass"
	.byte		0
	.4byte		.L2391
	.4byte		.L2892
	.sleb128	3
	.4byte		.L2369
	.uleb128	5257
	.uleb128	29
	.byte		"pFFStorage"
	.byte		0
	.4byte		.L2467
	.4byte		.L2893
.L2894:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5261
	.uleb128	19
	.byte		"pFFData"
	.byte		0
	.4byte		.L2376
	.4byte		.L2895
.L2896:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5262
	.uleb128	11
	.byte		"ffIndex"
	.byte		0
	.4byte		.L2391
	.4byte		.L2897
.L2898:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5263
	.uleb128	11
	.byte		"specificFFSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L2899
.L2900:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5264
	.uleb128	11
	.byte		"commonFFSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L2901
.L2902:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5265
	.uleb128	11
	.byte		"commonFFClass"
	.byte		0
	.4byte		.L2391
	.4byte		.L2903
	.section	.debug_info,,n
	.sleb128	0
.L2887:
	.section	.debug_info,,n
.L2908:
	.sleb128	5
	.4byte		.L2905-.L2
	.byte		"HandleFreezeFrameStorage"
	.byte		0
	.4byte		.L2369
	.uleb128	3614
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L2906
	.4byte		.L2907
	.sleb128	3
	.4byte		.L2369
	.uleb128	3614
	.uleb128	32
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L2909
	.sleb128	3
	.4byte		.L2369
	.uleb128	3614
	.uleb128	32
	.byte		"isFailed"
	.byte		0
	.4byte		.L2417
	.4byte		.L2910
	.sleb128	3
	.4byte		.L2369
	.uleb128	3614
	.uleb128	32
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L2911
	.sleb128	3
	.4byte		.L2369
	.uleb128	3614
	.uleb128	32
	.byte		"eventMemoryEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L2912
	.sleb128	3
	.4byte		.L2369
	.uleb128	3614
	.uleb128	32
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L2913
.L2914:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3617
	.uleb128	12
	.byte		"dataStored"
	.byte		0
	.4byte		.L2417
	.4byte		.L2915
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L2919
	.4byte		.L2916
	.4byte		.L2917
.L2920:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3625
	.uleb128	32
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L2921
.L2922:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3626
	.uleb128	68
	.byte		"pFFStorage"
	.byte		0
	.4byte		.L2679
	.4byte		.L2923
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L2927
	.4byte		.L2924
	.4byte		.L2925
.L2928:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3633
	.uleb128	34
	.byte		"ffRecNum"
	.byte		0
	.4byte		.L2656
	.4byte		.L2929
.L2930:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3634
	.uleb128	34
	.byte		"numFF"
	.byte		0
	.4byte		.L2656
	.4byte		.L2931
	.section	.debug_info,,n
	.sleb128	0
.L2927:
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L2935
	.4byte		.L2932
	.4byte		.L2933
.L2936:
	.sleb128	6
	.4byte		.L2369
	.uleb128	3661
	.uleb128	31
	.byte		"storeFFInData"
	.byte		0
	.4byte		.L2848
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
	.section	.debug_info,,n
	.sleb128	0
.L2935:
	.section	.debug_info,,n
	.sleb128	0
.L2919:
	.section	.debug_info,,n
	.sleb128	0
.L2905:
	.section	.debug_info,,n
.L2941:
	.sleb128	7
	.4byte		.L2938-.L2
	.byte		"StoreDevAFreezeFrame"
	.byte		0
	.4byte		.L2369
	.uleb128	4014
	.uleb128	29
	.byte		0x1
	.4byte		.L2939
	.4byte		.L2940
	.sleb128	3
	.4byte		.L2369
	.uleb128	4014
	.uleb128	29
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L2942
	.sleb128	3
	.4byte		.L2369
	.uleb128	4014
	.uleb128	29
	.byte		"pInData"
	.byte		0
	.4byte		.L2846
	.4byte		.L2943
.L2944:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4017
	.uleb128	19
	.byte		"pFFData"
	.byte		0
	.4byte		.L2376
	.4byte		.L2945
.L2946:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4018
	.uleb128	12
	.byte		"ffAllocated"
	.byte		0
	.4byte		.L2417
	.4byte		.L2947
.L2948:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4019
	.uleb128	11
	.byte		"ffClass"
	.byte		0
	.4byte		.L2391
	.4byte		.L2949
.L2950:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4020
	.uleb128	11
	.byte		"commonFFClass"
	.byte		0
	.4byte		.L2391
	.4byte		.L2951
.L2952:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4021
	.uleb128	42
	.byte		"pFFEntry"
	.byte		0
	.4byte		.L2610
	.4byte		.L2953
.L2954:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4022
	.uleb128	20
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L2955
.L2956:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4023
	.uleb128	11
	.byte		"specificFFSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L2957
.L2958:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4024
	.uleb128	11
	.byte		"commonFFSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L2959
.L2960:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4025
	.uleb128	11
	.byte		"totFFSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L2961
.L2962:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4026
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L2963
	.section	.debug_info,,n
	.sleb128	0
.L2938:
	.section	.debug_info,,n
.L2968:
	.sleb128	7
	.4byte		.L2965-.L2
	.byte		"StoreDevBFreezeFrame"
	.byte		0
	.4byte		.L2369
	.uleb128	4098
	.uleb128	29
	.byte		0x1
	.4byte		.L2966
	.4byte		.L2967
	.sleb128	3
	.4byte		.L2369
	.uleb128	4098
	.uleb128	29
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L2969
	.sleb128	3
	.4byte		.L2369
	.uleb128	4098
	.uleb128	29
	.byte		"pInData"
	.byte		0
	.4byte		.L2846
	.4byte		.L2970
.L2971:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4101
	.uleb128	19
	.byte		"pFFData"
	.byte		0
	.4byte		.L2376
	.4byte		.L2972
.L2973:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4102
	.uleb128	12
	.byte		"ffAllocated"
	.byte		0
	.4byte		.L2417
	.4byte		.L2974
.L2975:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4103
	.uleb128	11
	.byte		"ffClass"
	.byte		0
	.4byte		.L2391
	.4byte		.L2976
.L2977:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4104
	.uleb128	42
	.byte		"pFFEntry"
	.byte		0
	.4byte		.L2610
	.4byte		.L2978
.L2979:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4105
	.uleb128	20
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L2980
.L2981:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4106
	.uleb128	11
	.byte		"specificFFSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L2982
.L2983:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4107
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L2984
	.section	.debug_info,,n
	.sleb128	0
.L2965:
	.section	.debug_info,,n
.L2989:
	.sleb128	7
	.4byte		.L2986-.L2
	.byte		"HandleDevFreezeFrameStorage"
	.byte		0
	.4byte		.L2369
	.uleb128	3675
	.uleb128	29
	.byte		0x1
	.4byte		.L2987
	.4byte		.L2988
	.sleb128	3
	.4byte		.L2369
	.uleb128	3675
	.uleb128	29
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L2990
	.sleb128	3
	.4byte		.L2369
	.uleb128	3675
	.uleb128	29
	.byte		"eventMemoryEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L2991
	.sleb128	3
	.4byte		.L2369
	.uleb128	3675
	.uleb128	29
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L2992
	.sleb128	3
	.4byte		.L2369
	.uleb128	3675
	.uleb128	29
	.byte		"numStoredStandardFFOld"
	.byte		0
	.4byte		.L2371
	.4byte		.L2993
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L2997
	.4byte		.L2994
	.4byte		.L2995
.L2998:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3683
	.uleb128	32
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L2999
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3003
	.4byte		.L3000
	.4byte		.L3001
.L3004:
	.sleb128	6
	.4byte		.L2369
	.uleb128	3688
	.uleb128	31
	.byte		"storeFFInData"
	.byte		0
	.4byte		.L2848
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
	.section	.debug_info,,n
	.sleb128	0
.L3003:
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3008
	.4byte		.L3005
	.4byte		.L3006
.L3009:
	.sleb128	6
	.4byte		.L2369
	.uleb128	3699
	.uleb128	31
	.byte		"storeFFInData"
	.byte		0
	.4byte		.L2848
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	20
	.section	.debug_info,,n
	.sleb128	0
.L3008:
	.section	.debug_info,,n
	.sleb128	0
.L2997:
	.section	.debug_info,,n
	.sleb128	0
.L2986:
	.section	.debug_info,,n
.L3014:
	.sleb128	7
	.4byte		.L3011-.L2
	.byte		"ClearInternalExtendedData"
	.byte		0
	.4byte		.L2369
	.uleb128	4986
	.uleb128	29
	.byte		0x1
	.4byte		.L3012
	.4byte		.L3013
	.sleb128	3
	.4byte		.L2369
	.uleb128	4986
	.uleb128	29
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L3015
	.section	.debug_info,,n
	.sleb128	0
.L3011:
	.section	.debug_info,,n
.L3020:
	.sleb128	5
	.4byte		.L3017-.L2
	.byte		"GetEventMemoryEntry"
	.byte		0
	.4byte		.L2369
	.uleb128	5001
	.uleb128	30
	.4byte		.L2371
	.byte		0x1
	.4byte		.L3018
	.4byte		.L3019
	.sleb128	3
	.4byte		.L2369
	.uleb128	5001
	.uleb128	30
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3021
	.sleb128	3
	.4byte		.L2369
	.uleb128	5001
	.uleb128	30
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L3022
	.sleb128	3
	.4byte		.L2369
	.uleb128	5001
	.uleb128	30
	.byte		"ppEvMemEntry"
	.byte		0
	.4byte		.L2395
	.4byte		.L3023
.L3024:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5005
	.uleb128	10
	.byte		"eventMemoryEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L3025
	.section	.debug_info,,n
	.sleb128	0
.L3017:
	.section	.debug_info,,n
.L3030:
	.sleb128	7
	.4byte		.L3027-.L2
	.byte		"EventDataChangedCallouts"
	.byte		0
	.4byte		.L2369
	.uleb128	5746
	.uleb128	29
	.byte		0x1
	.4byte		.L3028
	.4byte		.L3029
	.sleb128	3
	.4byte		.L2369
	.uleb128	5746
	.uleb128	29
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3031
.L3032:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5748
	.uleb128	20
	.byte		"pEventDataChanged"
	.byte		0
	.4byte		.L3033
	.4byte		.L3037
	.section	.debug_info,,n
	.sleb128	0
.L3027:
	.section	.debug_info,,n
.L3044:
	.sleb128	5
	.4byte		.L3041-.L2
	.byte		"GetInternalDTCOriginIndex"
	.byte		0
	.4byte		.L2369
	.uleb128	6470
	.uleb128	30
	.4byte		.L2371
	.byte		0x1
	.4byte		.L3042
	.4byte		.L3043
	.sleb128	3
	.4byte		.L2369
	.uleb128	6470
	.uleb128	30
	.byte		"DTCOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L3045
.L3046:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6472
	.uleb128	10
	.byte		"retVal"
	.byte		0
	.4byte		.L2371
	.4byte		.L3047
	.section	.debug_info,,n
	.sleb128	0
.L3041:
	.section	.debug_info,,n
.L3052:
	.sleb128	7
	.4byte		.L3049-.L2
	.byte		"StoreEventInMemory"
	.byte		0
	.4byte		.L2369
	.uleb128	3802
	.uleb128	29
	.byte		0x1
	.4byte		.L3050
	.4byte		.L3051
	.sleb128	3
	.4byte		.L2369
	.uleb128	3802
	.uleb128	29
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3053
	.sleb128	3
	.4byte		.L2369
	.uleb128	3802
	.uleb128	29
	.byte		"isFailed"
	.byte		0
	.4byte		.L2417
	.4byte		.L3054
.L3055:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3804
	.uleb128	29
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L3056
.L3057:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3805
	.uleb128	28
	.byte		"memoryDest"
	.byte		0
	.4byte		.L2656
	.4byte		.L3058
.L3059:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3806
	.uleb128	28
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2656
	.4byte		.L3060
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3064
	.4byte		.L3061
	.4byte		.L3062
.L3065:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3812
	.uleb128	15
	.byte		"ffDataModified"
	.byte		0
	.4byte		.L2417
	.4byte		.L3066
.L3067:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3813
	.uleb128	15
	.byte		"extDataModified"
	.byte		0
	.4byte		.L2417
	.4byte		.L3068
.L3069:
	.sleb128	6
	.4byte		.L2369
	.uleb128	3814
	.uleb128	31
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L3070:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3815
	.uleb128	13
	.byte		"eventMemoryEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L3071
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3075
	.4byte		.L3072
	.4byte		.L3073
.L3076:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3819
	.uleb128	34
	.byte		"numStoredStandardFFOld"
	.byte		0
	.4byte		.L2656
	.4byte		.L3077
	.section	.debug_info,,n
	.sleb128	0
.L3075:
	.section	.debug_info,,n
	.sleb128	0
.L3064:
	.section	.debug_info,,n
	.sleb128	0
.L3049:
	.section	.debug_info,,n
.L3082:
	.sleb128	7
	.4byte		.L3079-.L2
	.byte		"HandleEventStateFailed"
	.byte		0
	.4byte		.L2369
	.uleb128	3017
	.uleb128	29
	.byte		0x1
	.4byte		.L3080
	.4byte		.L3081
	.sleb128	3
	.4byte		.L2369
	.uleb128	3017
	.uleb128	29
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3083
	.section	.debug_info,,n
	.sleb128	0
.L3079:
	.section	.debug_info,,n
.L3088:
	.sleb128	7
	.4byte		.L3085-.L2
	.byte		"HandleEventStateFDCTR"
	.byte		0
	.4byte		.L2369
	.uleb128	3026
	.uleb128	29
	.byte		0x1
	.4byte		.L3086
	.4byte		.L3087
	.sleb128	3
	.4byte		.L2369
	.uleb128	3026
	.uleb128	29
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3089
	.section	.debug_info,,n
	.sleb128	0
.L3085:
	.section	.debug_info,,n
.L3094:
	.sleb128	7
	.4byte		.L3091-.L2
	.byte		"HandleAging"
	.byte		0
	.4byte		.L2369
	.uleb128	3032
	.uleb128	29
	.byte		0x1
	.4byte		.L3092
	.4byte		.L3093
	.sleb128	3
	.4byte		.L2369
	.uleb128	3032
	.uleb128	29
	.byte		"evMemEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L3095
	.sleb128	3
	.4byte		.L2369
	.uleb128	3032
	.uleb128	29
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L3096
	.sleb128	3
	.4byte		.L2369
	.uleb128	3032
	.uleb128	29
	.byte		"opCycleId"
	.byte		0
	.4byte		.L2371
	.4byte		.L3097
.L3098:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3034
	.uleb128	28
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L3099
.L3100:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3035
	.uleb128	29
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L3101
.L3102:
	.sleb128	4
	.4byte		.L2369
	.uleb128	3040
	.uleb128	26
	.byte		"udsStatus"
	.byte		0
	.4byte		.L2567
	.4byte		.L3103
	.section	.debug_info,,n
	.sleb128	0
.L3091:
	.section	.debug_info,,n
.L3108:
	.sleb128	2
	.4byte		.L3105-.L2
	.byte		"Dem_TriggerOnEventStatus"
	.byte		0
	.4byte		.L2369
	.uleb128	7866
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L3106
	.4byte		.L3107
	.sleb128	3
	.4byte		.L2369
	.uleb128	7866
	.uleb128	22
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3109
	.sleb128	3
	.4byte		.L2369
	.uleb128	7866
	.uleb128	22
	.byte		"udsStatusOld"
	.byte		0
	.4byte		.L2567
	.4byte		.L3110
.L3111:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7868
	.uleb128	44
	.byte		"udsStatusNew"
	.byte		0
	.4byte		.L3112
	.4byte		.L3113
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3117
	.4byte		.L3114
	.4byte		.L3115
.L3118:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7872
	.uleb128	13
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L3119
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3123
	.4byte		.L3120
	.4byte		.L3121
.L3124:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7875
	.uleb128	42
	.byte		"pEventStatusChanged"
	.byte		0
	.4byte		.L3125
	.4byte		.L3130
	.section	.debug_info,,n
	.sleb128	0
.L3123:
	.section	.debug_info,,n
	.sleb128	0
.L3117:
	.section	.debug_info,,n
	.sleb128	0
.L3105:
	.section	.debug_info,,n
.L3135:
	.sleb128	2
	.4byte		.L3132-.L2
	.byte		"Dem_TriggerOnDTCStatus"
	.byte		0
	.4byte		.L2369
	.uleb128	7911
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L3133
	.4byte		.L3134
	.sleb128	3
	.4byte		.L2369
	.uleb128	7911
	.uleb128	22
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L3136
	.sleb128	3
	.4byte		.L2369
	.uleb128	7911
	.uleb128	22
	.byte		"udsStatusOld"
	.byte		0
	.4byte		.L2567
	.4byte		.L3137
	.sleb128	9
	.4byte		.L2369
	.uleb128	7911
	.uleb128	22
	.byte		"clearEvent"
	.byte		0
	.4byte		.L2417
	.sleb128	2
	.byte		0x90
	.uleb128	5
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3141
	.4byte		.L3138
	.4byte		.L3139
.L3142:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7915
	.uleb128	47
	.byte		"udsStatusNew"
	.byte		0
	.4byte		.L3112
	.4byte		.L3143
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3147
	.4byte		.L3144
	.4byte		.L3145
.L3148:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7921
	.uleb128	19
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L3149
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3153
	.4byte		.L3150
	.4byte		.L3151
.L3154:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7924
	.uleb128	49
	.byte		"pDtcStatusChanged"
	.byte		0
	.4byte		.L3155
	.4byte		.L3160
	.section	.debug_info,,n
	.sleb128	0
.L3153:
	.section	.debug_info,,n
	.sleb128	0
.L3147:
	.section	.debug_info,,n
	.sleb128	0
.L3141:
	.section	.debug_info,,n
	.sleb128	0
.L3132:
	.section	.debug_info,,n
.L3165:
	.sleb128	7
	.4byte		.L3162-.L2
	.byte		"UpdateEventStatus"
	.byte		0
	.4byte		.L2369
	.uleb128	4239
	.uleb128	29
	.byte		0x1
	.4byte		.L3163
	.4byte		.L3164
	.sleb128	3
	.4byte		.L2369
	.uleb128	4239
	.uleb128	29
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3166
	.sleb128	3
	.4byte		.L2369
	.uleb128	4239
	.uleb128	29
	.byte		"eventState"
	.byte		0
	.4byte		.L3167
	.4byte		.L3168
.L3169:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4241
	.uleb128	44
	.byte		"eventUdsStatusOld"
	.byte		0
	.4byte		.L3112
	.4byte		.L3170
.L3171:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4242
	.uleb128	29
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L3172
.L3173:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4243
	.uleb128	44
	.byte		"dtcUdsStatusOld"
	.byte		0
	.4byte		.L3112
	.4byte		.L3174
.L3175:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4244
	.uleb128	12
	.byte		"setToCompleted"
	.byte		0
	.4byte		.L2417
	.4byte		.L3176
	.section	.debug_info,,n
	.sleb128	0
.L3162:
	.section	.debug_info,,n
.L3181:
	.sleb128	5
	.4byte		.L3178-.L2
	.byte		"GetEventStateInBuffer"
	.byte		0
	.4byte		.L2369
	.uleb128	5846
	.uleb128	43
	.4byte		.L3167
	.byte		0x1
	.4byte		.L3179
	.4byte		.L3180
	.sleb128	3
	.4byte		.L2369
	.uleb128	5846
	.uleb128	43
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3182
.L3183:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5848
	.uleb128	11
	.byte		"evStateArrayIndex"
	.byte		0
	.4byte		.L2391
	.4byte		.L3184
.L3185:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5849
	.uleb128	10
	.byte		"shift"
	.byte		0
	.4byte		.L2371
	.4byte		.L3186
	.section	.debug_info,,n
	.sleb128	0
.L3178:
	.section	.debug_info,,n
.L3191:
	.sleb128	5
	.4byte		.L3188-.L2
	.byte		"DebouncingCounter"
	.byte		0
	.4byte		.L2369
	.uleb128	5580
	.uleb128	43
	.4byte		.L3167
	.byte		0x1
	.4byte		.L3189
	.4byte		.L3190
	.sleb128	3
	.4byte		.L2369
	.uleb128	5580
	.uleb128	43
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3192
	.sleb128	3
	.4byte		.L2369
	.uleb128	5580
	.uleb128	43
	.byte		"EventStatus"
	.byte		0
	.4byte		.L3193
	.4byte		.L3194
.L3195:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5582
	.uleb128	49
	.byte		"pDBCounter"
	.byte		0
	.4byte		.L3196
	.4byte		.L3200
.L3201:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5583
	.uleb128	72
	.byte		"pDbData"
	.byte		0
	.4byte		.L3202
	.4byte		.L3207
.L3208:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5584
	.uleb128	23
	.byte		"retVal"
	.byte		0
	.4byte		.L3167
	.4byte		.L3209
.L3210:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5585
	.uleb128	29
	.byte		"pre_pDBCounter"
	.byte		0
	.4byte		.L3211
	.4byte		.L3212
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3216
	.4byte		.L3213
	.4byte		.L3214
.L3217:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5663
	.uleb128	47
	.byte		"oldEventState"
	.byte		0
	.4byte		.L3218
	.4byte		.L3219
	.section	.debug_info,,n
	.sleb128	0
.L3216:
	.section	.debug_info,,n
	.sleb128	0
.L3188:
	.section	.debug_info,,n
.L3224:
	.sleb128	7
	.4byte		.L3221-.L2
	.byte		"Debouncing"
	.byte		0
	.4byte		.L2369
	.uleb128	5522
	.uleb128	29
	.byte		0x1
	.4byte		.L3222
	.4byte		.L3223
	.sleb128	3
	.4byte		.L2369
	.uleb128	5522
	.uleb128	29
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3225
	.sleb128	3
	.4byte		.L2369
	.uleb128	5522
	.uleb128	29
	.byte		"EventStatus"
	.byte		0
	.4byte		.L3193
	.4byte		.L3226
	.sleb128	3
	.4byte		.L2369
	.uleb128	5522
	.uleb128	29
	.byte		"pEventState"
	.byte		0
	.4byte		.L3227
	.4byte		.L3228
	.section	.debug_info,,n
	.sleb128	0
.L3221:
	.section	.debug_info,,n
.L3233:
	.sleb128	7
	.4byte		.L3230-.L2
	.byte		"SetEventStateInBuffer"
	.byte		0
	.4byte		.L2369
	.uleb128	5854
	.uleb128	29
	.byte		0x1
	.4byte		.L3231
	.4byte		.L3232
	.sleb128	3
	.4byte		.L2369
	.uleb128	5854
	.uleb128	29
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3234
	.sleb128	3
	.4byte		.L2369
	.uleb128	5854
	.uleb128	29
	.byte		"eventState"
	.byte		0
	.4byte		.L3167
	.4byte		.L3235
.L3236:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5856
	.uleb128	11
	.byte		"evStateArrayIndex"
	.byte		0
	.4byte		.L2391
	.4byte		.L3237
.L3238:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5857
	.uleb128	10
	.byte		"shift"
	.byte		0
	.4byte		.L2371
	.4byte		.L3239
	.section	.debug_info,,n
	.sleb128	0
.L3230:
	.section	.debug_info,,n
.L3244:
	.sleb128	2
	.4byte		.L3241-.L2
	.byte		"Dem_SetDebouncingCounter"
	.byte		0
	.4byte		.L2369
	.uleb128	7794
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L3242
	.4byte		.L3243
	.sleb128	3
	.4byte		.L2369
	.uleb128	7794
	.uleb128	22
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3245
	.sleb128	3
	.4byte		.L2369
	.uleb128	7794
	.uleb128	22
	.byte		"action"
	.byte		0
	.4byte		.L3246
	.4byte		.L3248
.L3249:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7797
	.uleb128	11
	.byte		"counterIndex"
	.byte		0
	.4byte		.L2391
	.4byte		.L3250
	.section	.debug_info,,n
	.sleb128	0
.L3241:
	.section	.debug_info,,n
.L3256:
	.sleb128	7
	.4byte		.L3253-.L2
	.byte		"UpdateEventState"
	.byte		0
	.4byte		.L2369
	.uleb128	4157
	.uleb128	29
	.byte		0x1
	.4byte		.L3254
	.4byte		.L3255
	.sleb128	3
	.4byte		.L2369
	.uleb128	4157
	.uleb128	29
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3257
	.sleb128	3
	.4byte		.L2369
	.uleb128	4157
	.uleb128	29
	.byte		"EventStatus"
	.byte		0
	.4byte		.L3193
	.4byte		.L3258
.L3259:
	.sleb128	6
	.4byte		.L2369
	.uleb128	4159
	.uleb128	23
	.byte		"eventState"
	.byte		0
	.4byte		.L3167
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L3260:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4160
	.uleb128	23
	.byte		"oldEventState"
	.byte		0
	.4byte		.L3167
	.4byte		.L3261
.L3262:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4161
	.uleb128	12
	.byte		"eventStateUpdate"
	.byte		0
	.4byte		.L2417
	.4byte		.L3263
	.section	.debug_info,,n
	.sleb128	0
.L3253:
	.section	.debug_info,,n
.L3269:
	.sleb128	7
	.4byte		.L3266-.L2
	.byte		"HandleEventState"
	.byte		0
	.4byte		.L2369
	.uleb128	4310
	.uleb128	29
	.byte		0x1
	.4byte		.L3267
	.4byte		.L3268
	.sleb128	3
	.4byte		.L2369
	.uleb128	4310
	.uleb128	29
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3270
	.sleb128	3
	.4byte		.L2369
	.uleb128	4310
	.uleb128	29
	.byte		"EventState"
	.byte		0
	.4byte		.L3167
	.4byte		.L3271
.L3272:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4312
	.uleb128	44
	.byte		"eventUdsStatusOld"
	.byte		0
	.4byte		.L3112
	.4byte		.L3273
.L3274:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4313
	.uleb128	29
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L3275
.L3276:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4314
	.uleb128	44
	.byte		"dtcUdsStatusOld"
	.byte		0
	.4byte		.L3112
	.4byte		.L3277
.L3278:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4315
	.uleb128	12
	.byte		"eventStateHandled"
	.byte		0
	.4byte		.L2417
	.4byte		.L3279
.L3280:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4316
	.uleb128	12
	.byte		"setToCompleted"
	.byte		0
	.4byte		.L2417
	.4byte		.L3281
	.section	.debug_info,,n
	.sleb128	0
.L3266:
	.section	.debug_info,,n
.L3286:
	.sleb128	7
	.4byte		.L3283-.L2
	.byte		"ClearEventStatus"
	.byte		0
	.4byte		.L2369
	.uleb128	4400
	.uleb128	29
	.byte		0x1
	.4byte		.L3284
	.4byte		.L3285
	.sleb128	3
	.4byte		.L2369
	.uleb128	4400
	.uleb128	29
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3287
.L3288:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4402
	.uleb128	57
	.byte		"pEvStatusExt"
	.byte		0
	.4byte		.L2566
	.4byte		.L3289
	.section	.debug_info,,n
	.sleb128	0
.L3283:
	.section	.debug_info,,n
.L3294:
	.sleb128	7
	.4byte		.L3291-.L2
	.byte		"ClearSi"
	.byte		0
	.4byte		.L2369
	.uleb128	4417
	.uleb128	29
	.byte		0x1
	.4byte		.L3292
	.4byte		.L3293
	.sleb128	3
	.4byte		.L2369
	.uleb128	4417
	.uleb128	29
	.byte		"evId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3295
	.section	.debug_info,,n
	.sleb128	0
.L3291:
	.section	.debug_info,,n
.L3300:
	.sleb128	5
	.4byte		.L3297-.L2
	.byte		"CheckOrigin"
	.byte		0
	.4byte		.L2369
	.uleb128	4447
	.uleb128	30
	.4byte		.L2371
	.byte		0x1
	.4byte		.L3298
	.4byte		.L3299
	.sleb128	3
	.4byte		.L2369
	.uleb128	4447
	.uleb128	30
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L3301
	.sleb128	3
	.4byte		.L2369
	.uleb128	4447
	.uleb128	30
	.byte		"dtcOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L3302
.L3303:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4449
	.uleb128	10
	.byte		"retVal"
	.byte		0
	.4byte		.L2371
	.4byte		.L3304
.L3305:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4450
	.uleb128	10
	.byte		"eventDest"
	.byte		0
	.4byte		.L2371
	.4byte		.L3306
.L3307:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4451
	.uleb128	28
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2656
	.4byte		.L3308
	.section	.debug_info,,n
	.sleb128	0
.L3297:
	.section	.debug_info,,n
.L3314:
	.sleb128	5
	.4byte		.L3310-.L2
	.byte		"ClearInternalDtc"
	.byte		0
	.4byte		.L2369
	.uleb128	4468
	.uleb128	47
	.4byte		.L3313
	.byte		0x1
	.4byte		.L3311
	.4byte		.L3312
	.sleb128	3
	.4byte		.L2369
	.uleb128	4468
	.uleb128	47
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L3315
	.sleb128	3
	.4byte		.L2369
	.uleb128	4468
	.uleb128	47
	.byte		"DTCOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L3316
.L3317:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4470
	.uleb128	27
	.byte		"retVal"
	.byte		0
	.4byte		.L3313
	.4byte		.L3318
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3322
	.4byte		.L3319
	.4byte		.L3320
.L3323:
	.sleb128	6
	.4byte		.L2369
	.uleb128	4474
	.uleb128	31
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L3324:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4475
	.uleb128	13
	.byte		"originIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L3325
.L3326:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4476
	.uleb128	13
	.byte		"eventEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L3327
	.section	.debug_info,,n
	.sleb128	0
.L3322:
	.section	.debug_info,,n
	.sleb128	0
.L3310:
	.section	.debug_info,,n
.L3332:
	.sleb128	5
	.4byte		.L3329-.L2
	.byte		"ClearInternalDtcGroup"
	.byte		0
	.4byte		.L2369
	.uleb128	4501
	.uleb128	31
	.4byte		.L2391
	.byte		0x1
	.4byte		.L3330
	.4byte		.L3331
	.sleb128	3
	.4byte		.L2369
	.uleb128	4501
	.uleb128	31
	.byte		"intDtcGroup"
	.byte		0
	.4byte		.L2371
	.4byte		.L3333
	.sleb128	3
	.4byte		.L2369
	.uleb128	4501
	.uleb128	31
	.byte		"DTCOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L3334
	.sleb128	3
	.4byte		.L2369
	.uleb128	4501
	.uleb128	31
	.byte		"DTCFormat"
	.byte		0
	.4byte		.L3335
	.4byte		.L3336
	.sleb128	3
	.4byte		.L2369
	.uleb128	4501
	.uleb128	31
	.byte		"nextToClear"
	.byte		0
	.4byte		.L2391
	.4byte		.L3337
.L3338:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4504
	.uleb128	11
	.byte		"i"
	.byte		0
	.4byte		.L2391
	.4byte		.L3339
.L3340:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4505
	.uleb128	11
	.byte		"fDtc"
	.byte		0
	.4byte		.L2419
	.4byte		.L3341
.L3342:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4506
	.uleb128	11
	.byte		"numCleared"
	.byte		0
	.4byte		.L2391
	.4byte		.L3343
.L3344:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4507
	.uleb128	11
	.byte		"retVal"
	.byte		0
	.4byte		.L2391
	.4byte		.L3345
	.section	.debug_info,,n
	.sleb128	0
.L3329:
	.section	.debug_info,,n
.L3350:
	.sleb128	10
	.4byte		.L3347-.L2
	.byte		"Dem_ClearEventAllowed"
	.byte		0
	.4byte		.L2369
	.uleb128	7534
	.uleb128	25
	.4byte		.L2417
	.byte		0x1
	.byte		0x1
	.4byte		.L3348
	.4byte		.L3349
	.sleb128	3
	.4byte		.L2369
	.uleb128	7534
	.uleb128	25
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3351
.L3352:
	.sleb128	6
	.4byte		.L2369
	.uleb128	7536
	.uleb128	12
	.byte		"allowedToClearEvent"
	.byte		0
	.4byte		.L2417
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
	.section	.debug_info,,n
	.sleb128	0
.L3347:
	.section	.debug_info,,n
.L3357:
	.sleb128	7
	.4byte		.L3354-.L2
	.byte		"ClearEventStateInBuffer"
	.byte		0
	.4byte		.L2369
	.uleb128	5884
	.uleb128	29
	.byte		0x1
	.4byte		.L3355
	.4byte		.L3356
	.sleb128	3
	.4byte		.L2369
	.uleb128	5884
	.uleb128	29
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3358
.L3359:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5886
	.uleb128	11
	.byte		"evStateArrayIndex"
	.byte		0
	.4byte		.L2391
	.4byte		.L3360
.L3361:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5887
	.uleb128	10
	.byte		"shift"
	.byte		0
	.4byte		.L2371
	.4byte		.L3362
	.section	.debug_info,,n
	.sleb128	0
.L3354:
	.section	.debug_info,,n
.L3367:
	.sleb128	2
	.4byte		.L3364-.L2
	.byte		"Dem_ClearEventData"
	.byte		0
	.4byte		.L2369
	.uleb128	7557
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L3365
	.4byte		.L3366
	.sleb128	3
	.4byte		.L2369
	.uleb128	7557
	.uleb128	22
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3368
.L3369:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7559
	.uleb128	44
	.byte		"eventUdsStatusOld"
	.byte		0
	.4byte		.L3112
	.4byte		.L3370
.L3371:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7560
	.uleb128	29
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L3372
.L3373:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7561
	.uleb128	44
	.byte		"dtcUdsStatusOld"
	.byte		0
	.4byte		.L3112
	.4byte		.L3374
	.section	.debug_info,,n
	.sleb128	0
.L3364:
	.section	.debug_info,,n
.L3379:
	.sleb128	5
	.4byte		.L3376-.L2
	.byte		"ClearAllEvents"
	.byte		0
	.4byte		.L2369
	.uleb128	4554
	.uleb128	31
	.4byte		.L2391
	.byte		0x1
	.4byte		.L3377
	.4byte		.L3378
	.sleb128	3
	.4byte		.L2369
	.uleb128	4554
	.uleb128	31
	.byte		"nextToClear"
	.byte		0
	.4byte		.L2391
	.4byte		.L3380
.L3381:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4556
	.uleb128	11
	.byte		"i"
	.byte		0
	.4byte		.L2391
	.4byte		.L3382
.L3383:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4557
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L3384
.L3385:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4558
	.uleb128	11
	.byte		"numCleared"
	.byte		0
	.4byte		.L2391
	.4byte		.L3386
.L3387:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4559
	.uleb128	11
	.byte		"retVal"
	.byte		0
	.4byte		.L2391
	.4byte		.L3388
	.section	.debug_info,,n
	.sleb128	0
.L3376:
	.section	.debug_info,,n
.L3393:
	.sleb128	5
	.4byte		.L3390-.L2
	.byte		"GetIntDtcByUds"
	.byte		0
	.4byte		.L2369
	.uleb128	4603
	.uleb128	31
	.4byte		.L2391
	.byte		0x1
	.4byte		.L3391
	.4byte		.L3392
	.sleb128	3
	.4byte		.L2369
	.uleb128	4603
	.uleb128	31
	.byte		"dtc"
	.byte		0
	.4byte		.L2419
	.4byte		.L3394
	.sleb128	3
	.4byte		.L2369
	.uleb128	4603
	.uleb128	31
	.byte		"useCache"
	.byte		0
	.4byte		.L2417
	.4byte		.L3395
.L3396:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4605
	.uleb128	12
	.byte		"searchFinished"
	.byte		0
	.4byte		.L2417
	.4byte		.L3397
.L3398:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4606
	.uleb128	11
	.byte		"retVal"
	.byte		0
	.4byte		.L2391
	.4byte		.L3399
.L3400:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4607
	.uleb128	11
	.byte		"i"
	.byte		0
	.4byte		.L2391
	.4byte		.L3401
.L3402:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4608
	.uleb128	11
	.byte		"nDTCs"
	.byte		0
	.4byte		.L2391
	.4byte		.L3403
	.section	.debug_info,,n
	.sleb128	0
.L3390:
	.section	.debug_info,,n
.L3408:
	.sleb128	5
	.4byte		.L3405-.L2
	.byte		"GetIntDtcByObd"
	.byte		0
	.4byte		.L2369
	.uleb128	4636
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L3406
	.4byte		.L3407
	.sleb128	3
	.4byte		.L2369
	.uleb128	4636
	.uleb128	32
	.byte		"dtc"
	.byte		0
	.4byte		.L2419
	.4byte		.L3409
	.sleb128	3
	.4byte		.L2369
	.uleb128	4636
	.uleb128	32
	.byte		"pIntDtc"
	.byte		0
	.4byte		.L2610
	.4byte		.L3410
.L3411:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4638
	.uleb128	12
	.byte		"searchFinished"
	.byte		0
	.4byte		.L2417
	.4byte		.L3412
.L3413:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4639
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L3414
.L3415:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4640
	.uleb128	11
	.byte		"i"
	.byte		0
	.4byte		.L2391
	.4byte		.L3416
.L3417:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4641
	.uleb128	11
	.byte		"nDTCs"
	.byte		0
	.4byte		.L2391
	.4byte		.L3418
	.section	.debug_info,,n
	.sleb128	0
.L3405:
	.section	.debug_info,,n
.L3423:
	.sleb128	5
	.4byte		.L3420-.L2
	.byte		"GetDTCSuppression"
	.byte		0
	.4byte		.L2369
	.uleb128	6553
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L3421
	.4byte		.L3422
	.sleb128	3
	.4byte		.L2369
	.uleb128	6553
	.uleb128	32
	.byte		"interDtc"
	.byte		0
	.4byte		.L2419
	.4byte		.L3424
.L3425:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6555
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L3426
	.section	.debug_info,,n
	.sleb128	0
.L3420:
	.section	.debug_info,,n
.L3431:
	.sleb128	5
	.4byte		.L3428-.L2
	.byte		"DTCFilterMatch"
	.byte		0
	.4byte		.L2369
	.uleb128	4693
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L3429
	.4byte		.L3430
	.sleb128	3
	.4byte		.L2369
	.uleb128	4693
	.uleb128	32
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L3432
	.sleb128	3
	.4byte		.L2369
	.uleb128	4693
	.uleb128	32
	.byte		"dtcFdc"
	.byte		0
	.4byte		.L3433
	.4byte		.L3436
.L3437:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4695
	.uleb128	44
	.byte		"udsStatus"
	.byte		0
	.4byte		.L3112
	.4byte		.L3438
.L3439:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4696
	.uleb128	12
	.byte		"matchStatus"
	.byte		0
	.4byte		.L2417
	.4byte		.L3440
.L3441:
	.sleb128	6
	.4byte		.L2369
	.uleb128	4697
	.uleb128	10
	.byte		"fdc"
	.byte		0
	.4byte		.L3434
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
	.section	.debug_info,,n
	.sleb128	0
.L3428:
	.section	.debug_info,,n
.L3446:
	.sleb128	5
	.4byte		.L3443-.L2
	.byte		"GetPreviousFromChronologicalList"
	.byte		0
	.4byte		.L2369
	.uleb128	4824
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L3444
	.4byte		.L3445
	.sleb128	3
	.4byte		.L2369
	.uleb128	4824
	.uleb128	32
	.byte		"pCurrentEvMemEntryIndex"
	.byte		0
	.4byte		.L2377
	.4byte		.L3447
	.sleb128	3
	.4byte		.L2369
	.uleb128	4824
	.uleb128	32
	.byte		"Origin"
	.byte		0
	.4byte		.L2579
	.4byte		.L3448
.L3449:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4827
	.uleb128	10
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L3450
.L3451:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4828
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L3452
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3456
	.4byte		.L3453
	.4byte		.L3454
.L3457:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4832
	.uleb128	22
	.byte		"pLast"
	.byte		0
	.4byte		.L2376
	.4byte		.L3458
.L3459:
	.sleb128	4
	.4byte		.L2369
	.uleb128	4833
	.uleb128	22
	.byte		"pPrev"
	.byte		0
	.4byte		.L2376
	.4byte		.L3460
	.section	.debug_info,,n
	.sleb128	0
.L3456:
	.section	.debug_info,,n
	.sleb128	0
.L3443:
	.section	.debug_info,,n
.L3465:
	.sleb128	2
	.4byte		.L3462-.L2
	.byte		"Dem_MemCpy"
	.byte		0
	.4byte		.L2369
	.uleb128	7727
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L3463
	.4byte		.L3464
	.sleb128	3
	.4byte		.L2369
	.uleb128	7727
	.uleb128	22
	.byte		"pDest"
	.byte		0
	.4byte		.L2621
	.4byte		.L3466
	.sleb128	3
	.4byte		.L2369
	.uleb128	7727
	.uleb128	22
	.byte		"pSrc"
	.byte		0
	.4byte		.L3467
	.4byte		.L3469
	.sleb128	3
	.4byte		.L2369
	.uleb128	7727
	.uleb128	22
	.byte		"count"
	.byte		0
	.4byte		.L2391
	.4byte		.L3470
.L3471:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7730
	.uleb128	43
	.byte		"d"
	.byte		0
	.4byte		.L2377
	.4byte		.L3472
.L3473:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7731
	.uleb128	45
	.byte		"s"
	.byte		0
	.4byte		.L2655
	.4byte		.L3474
.L3475:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7732
	.uleb128	11
	.byte		"i"
	.byte		0
	.4byte		.L2391
	.4byte		.L3476
	.section	.debug_info,,n
	.sleb128	0
.L3462:
	.section	.debug_info,,n
.L3482:
	.sleb128	5
	.4byte		.L3478-.L2
	.byte		"UpdateBufferWithFreezeFrameData"
	.byte		0
	.4byte		.L2369
	.uleb128	5119
	.uleb128	62
	.4byte		.L3481
	.byte		0x1
	.4byte		.L3479
	.4byte		.L3480
	.sleb128	3
	.4byte		.L2369
	.uleb128	5119
	.uleb128	62
	.byte		"ffClass"
	.byte		0
	.4byte		.L2391
	.4byte		.L3483
	.sleb128	3
	.4byte		.L2369
	.uleb128	5119
	.uleb128	62
	.byte		"pFFData"
	.byte		0
	.4byte		.L2655
	.4byte		.L3484
	.sleb128	3
	.4byte		.L2369
	.uleb128	5119
	.uleb128	62
	.byte		"pNumDids"
	.byte		0
	.4byte		.L2377
	.4byte		.L3485
	.sleb128	3
	.4byte		.L2369
	.uleb128	5119
	.uleb128	62
	.byte		"pDestBuffer"
	.byte		0
	.4byte		.L2377
	.4byte		.L3486
	.sleb128	3
	.4byte		.L2369
	.uleb128	5119
	.uleb128	62
	.byte		"pBufSize"
	.byte		0
	.4byte		.L2610
	.4byte		.L3487
	.sleb128	3
	.4byte		.L2369
	.uleb128	5119
	.uleb128	62
	.byte		"fillInData"
	.byte		0
	.4byte		.L2417
	.4byte		.L3488
.L3489:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5126
	.uleb128	42
	.byte		"retVal"
	.byte		0
	.4byte		.L3481
	.4byte		.L3490
.L3491:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5127
	.uleb128	48
	.byte		"pFFDidIdx"
	.byte		0
	.4byte		.L2818
	.4byte		.L3492
.L3493:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5128
	.uleb128	10
	.byte		"numFFDids"
	.byte		0
	.4byte		.L2371
	.4byte		.L3494
.L3495:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5129
	.uleb128	60
	.byte		"pDidConfig"
	.byte		0
	.4byte		.L2812
	.4byte		.L3496
.L3497:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5130
	.uleb128	12
	.byte		"abortUpdate"
	.byte		0
	.4byte		.L2417
	.4byte		.L3498
.L3499:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5131
	.uleb128	11
	.byte		"destBufferOffset"
	.byte		0
	.4byte		.L2391
	.4byte		.L3500
.L3501:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5132
	.uleb128	11
	.byte		"didOffset"
	.byte		0
	.4byte		.L2391
	.4byte		.L3502
.L3503:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5133
	.uleb128	11
	.byte		"didIdx"
	.byte		0
	.4byte		.L2391
	.4byte		.L3504
.L3505:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5134
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L3506
.L3507:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5135
	.uleb128	11
	.byte		"didSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L3508
.L3509:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5136
	.uleb128	10
	.byte		"numDids"
	.byte		0
	.4byte		.L2371
	.4byte		.L3510
	.section	.debug_info,,n
	.sleb128	0
.L3478:
	.section	.debug_info,,n
.L3515:
	.sleb128	5
	.4byte		.L3512-.L2
	.byte		"FillBufferWithDidData"
	.byte		0
	.4byte		.L2369
	.uleb128	5182
	.uleb128	39
	.4byte		.L2837
	.byte		0x1
	.4byte		.L3513
	.4byte		.L3514
	.sleb128	3
	.4byte		.L2369
	.uleb128	5182
	.uleb128	39
	.byte		"reportTotalRecord"
	.byte		0
	.4byte		.L2417
	.4byte		.L3516
	.sleb128	3
	.4byte		.L2369
	.uleb128	5182
	.uleb128	39
	.byte		"dataId"
	.byte		0
	.4byte		.L2391
	.4byte		.L3517
	.sleb128	3
	.4byte		.L2369
	.uleb128	5182
	.uleb128	39
	.byte		"ffClass"
	.byte		0
	.4byte		.L2391
	.4byte		.L3518
	.sleb128	3
	.4byte		.L2369
	.uleb128	5182
	.uleb128	39
	.byte		"pFFData"
	.byte		0
	.4byte		.L2655
	.4byte		.L3519
	.sleb128	3
	.4byte		.L2369
	.uleb128	5182
	.uleb128	39
	.byte		"pDestBuffer"
	.byte		0
	.4byte		.L2377
	.4byte		.L3520
	.sleb128	3
	.4byte		.L2369
	.uleb128	5182
	.uleb128	39
	.byte		"pBufSize"
	.byte		0
	.4byte		.L2610
	.4byte		.L3521
.L3522:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5189
	.uleb128	48
	.byte		"pFFDidIdx"
	.byte		0
	.4byte		.L2818
	.4byte		.L3523
.L3524:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5190
	.uleb128	11
	.byte		"didIdx"
	.byte		0
	.4byte		.L2391
	.4byte		.L3525
.L3526:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5191
	.uleb128	10
	.byte		"numFFDids"
	.byte		0
	.4byte		.L2371
	.4byte		.L3527
.L3528:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5192
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L3529
.L3530:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5193
	.uleb128	11
	.byte		"didSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L3531
.L3532:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5194
	.uleb128	11
	.byte		"didOffset"
	.byte		0
	.4byte		.L2391
	.4byte		.L3533
.L3534:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5195
	.uleb128	11
	.byte		"destBufferOffset"
	.byte		0
	.4byte		.L2391
	.4byte		.L3535
.L3536:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5196
	.uleb128	12
	.byte		"abortUpdate"
	.byte		0
	.4byte		.L2417
	.4byte		.L3537
.L3538:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5197
	.uleb128	60
	.byte		"pDidConfig"
	.byte		0
	.4byte		.L2812
	.4byte		.L3539
.L3540:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5198
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L3541
	.section	.debug_info,,n
	.sleb128	0
.L3512:
	.section	.debug_info,,n
.L3547:
	.sleb128	5
	.4byte		.L3543-.L2
	.byte		"UpdateBufferWithExtendedData"
	.byte		0
	.4byte		.L2369
	.uleb128	5435
	.uleb128	65
	.4byte		.L3546
	.byte		0x1
	.4byte		.L3544
	.4byte		.L3545
	.sleb128	3
	.4byte		.L2369
	.uleb128	5435
	.uleb128	65
	.byte		"ExtendedDataNumber"
	.byte		0
	.4byte		.L2371
	.4byte		.L3548
	.sleb128	3
	.4byte		.L2369
	.uleb128	5435
	.uleb128	65
	.byte		"InternalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L3549
	.sleb128	3
	.4byte		.L2369
	.uleb128	5435
	.uleb128	65
	.byte		"pDestBuffer"
	.byte		0
	.4byte		.L2377
	.4byte		.L3550
	.sleb128	3
	.4byte		.L2369
	.uleb128	5435
	.uleb128	65
	.byte		"pBufSize"
	.byte		0
	.4byte		.L2610
	.4byte		.L3551
	.sleb128	3
	.4byte		.L2369
	.uleb128	5435
	.uleb128	65
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L3552
	.sleb128	3
	.4byte		.L2369
	.uleb128	5435
	.uleb128	65
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2599
	.4byte		.L3553
	.sleb128	3
	.4byte		.L2369
	.uleb128	5435
	.uleb128	65
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3554
.L3555:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5443
	.uleb128	45
	.byte		"retVal"
	.byte		0
	.4byte		.L3546
	.4byte		.L3556
.L3557:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5444
	.uleb128	12
	.byte		"found"
	.byte		0
	.4byte		.L2417
	.4byte		.L3558
.L3559:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5445
	.uleb128	28
	.byte		"edClassIndex"
	.byte		0
	.4byte		.L2656
	.4byte		.L3560
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3564
	.4byte		.L3561
	.4byte		.L3562
.L3565:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5454
	.uleb128	17
	.byte		"recOffset"
	.byte		0
	.4byte		.L2391
	.4byte		.L3566
.L3567:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5455
	.uleb128	34
	.byte		"numRecords"
	.byte		0
	.4byte		.L2656
	.4byte		.L3568
.L3569:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5456
	.uleb128	57
	.byte		"pRecConfigIndex"
	.byte		0
	.4byte		.L3570
	.4byte		.L3571
.L3572:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5457
	.uleb128	16
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L3573
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3577
	.4byte		.L3574
	.4byte		.L3575
.L3578:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5460
	.uleb128	78
	.byte		"pExtEdRecord"
	.byte		0
	.4byte		.L3579
	.4byte		.L3580
.L3581:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5461
	.uleb128	38
	.byte		"dataSize"
	.byte		0
	.4byte		.L2674
	.4byte		.L3582
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3586
	.4byte		.L3583
	.4byte		.L3584
.L3587:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5473
	.uleb128	58
	.byte		"pEDData"
	.byte		0
	.4byte		.L3588
	.4byte		.L3589
	.section	.debug_info,,n
	.sleb128	0
.L3586:
	.section	.debug_info,,n
	.sleb128	0
.L3577:
	.section	.debug_info,,n
	.sleb128	0
.L3564:
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3593
	.4byte		.L3590
	.4byte		.L3591
.L3594:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5495
	.uleb128	34
	.byte		"numRecords"
	.byte		0
	.4byte		.L2656
	.4byte		.L3595
.L3596:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5496
	.uleb128	57
	.byte		"pRecConfigIndex"
	.byte		0
	.4byte		.L3570
	.4byte		.L3597
.L3598:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5497
	.uleb128	16
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L3599
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3603
	.4byte		.L3600
	.4byte		.L3601
.L3604:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5500
	.uleb128	78
	.byte		"pIntEdRecord"
	.byte		0
	.4byte		.L3605
	.4byte		.L3610
	.section	.debug_info,,n
	.sleb128	0
.L3603:
	.section	.debug_info,,n
	.sleb128	0
.L3593:
	.section	.debug_info,,n
	.sleb128	0
.L3543:
	.section	.debug_info,,n
.L3615:
	.sleb128	7
	.4byte		.L3612-.L2
	.byte		"ClearHandledEventStates"
	.byte		0
	.4byte		.L2369
	.uleb128	5869
	.uleb128	29
	.byte		0x1
	.4byte		.L3613
	.4byte		.L3614
	.sleb128	3
	.4byte		.L2369
	.uleb128	5869
	.uleb128	29
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3616
.L3617:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5871
	.uleb128	11
	.byte		"evStateArrayIndex"
	.byte		0
	.4byte		.L2391
	.4byte		.L3618
.L3619:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5872
	.uleb128	10
	.byte		"shift"
	.byte		0
	.4byte		.L2371
	.4byte		.L3620
	.section	.debug_info,,n
	.sleb128	0
.L3612:
	.section	.debug_info,,n
.L3625:
	.sleb128	7
	.4byte		.L3622-.L2
	.byte		"HandleEventStateBuffer"
	.byte		0
	.4byte		.L2369
	.uleb128	5897
	.uleb128	29
	.byte		0x1
	.4byte		.L3623
	.4byte		.L3624
.L3626:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5899
	.uleb128	11
	.byte		"i"
	.byte		0
	.4byte		.L2391
	.4byte		.L3627
.L3628:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5900
	.uleb128	10
	.byte		"k"
	.byte		0
	.4byte		.L2371
	.4byte		.L3629
.L3630:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5901
	.uleb128	20
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3631
.L3632:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5902
	.uleb128	23
	.byte		"eventState"
	.byte		0
	.4byte		.L3167
	.4byte		.L3633
.L3634:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5903
	.uleb128	12
	.byte		"suspend"
	.byte		0
	.4byte		.L2417
	.4byte		.L3635
.L3636:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5904
	.uleb128	11
	.byte		"numHandledFailedEvents"
	.byte		0
	.4byte		.L2391
	.4byte		.L3637
.L3638:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5905
	.uleb128	11
	.byte		"numHandledPassedEvents"
	.byte		0
	.4byte		.L2391
	.4byte		.L3639
.L3640:
	.sleb128	4
	.4byte		.L2369
	.uleb128	5906
	.uleb128	11
	.byte		"numUpdateBytes"
	.byte		0
	.4byte		.L2391
	.4byte		.L3641
	.section	.debug_info,,n
	.sleb128	0
.L3622:
	.section	.debug_info,,n
.L3646:
	.sleb128	7
	.4byte		.L3643-.L2
	.byte		"OpCycleStartAllEvents"
	.byte		0
	.4byte		.L2369
	.uleb128	6005
	.uleb128	29
	.byte		0x1
	.4byte		.L3644
	.4byte		.L3645
	.sleb128	3
	.4byte		.L2369
	.uleb128	6005
	.uleb128	29
	.byte		"opCycleId"
	.byte		0
	.4byte		.L2371
	.4byte		.L3647
.L3648:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6007
	.uleb128	20
	.byte		"evId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3649
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3653
	.4byte		.L3650
	.4byte		.L3651
.L3654:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6014
	.uleb128	50
	.byte		"eventUdsStatusOld"
	.byte		0
	.4byte		.L3112
	.4byte		.L3655
.L3656:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6015
	.uleb128	35
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L3657
.L3658:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6016
	.uleb128	50
	.byte		"dtcUdsStatusOld"
	.byte		0
	.4byte		.L3112
	.4byte		.L3659
	.section	.debug_info,,n
	.sleb128	0
.L3653:
	.section	.debug_info,,n
	.sleb128	0
.L3643:
	.section	.debug_info,,n
.L3664:
	.sleb128	7
	.4byte		.L3661-.L2
	.byte		"SetOperationCycleStateStart"
	.byte		0
	.4byte		.L2369
	.uleb128	5976
	.uleb128	29
	.byte		0x1
	.4byte		.L3662
	.4byte		.L3663
	.sleb128	3
	.4byte		.L2369
	.uleb128	5976
	.uleb128	29
	.byte		"opCycleId"
	.byte		0
	.4byte		.L2371
	.4byte		.L3665
	.section	.debug_info,,n
	.sleb128	0
.L3661:
	.section	.debug_info,,n
.L3670:
	.sleb128	7
	.4byte		.L3667-.L2
	.byte		"IncrementOffBoardCounters"
	.byte		0
	.4byte		.L2369
	.uleb128	6236
	.uleb128	29
	.byte		0x1
	.4byte		.L3668
	.4byte		.L3669
	.sleb128	3
	.4byte		.L2369
	.uleb128	6236
	.uleb128	29
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L3671
	.section	.debug_info,,n
	.sleb128	0
.L3667:
	.section	.debug_info,,n
.L3676:
	.sleb128	7
	.4byte		.L3673-.L2
	.byte		"OpCycleEndAllEvMemEntries"
	.byte		0
	.4byte		.L2369
	.uleb128	6167
	.uleb128	29
	.byte		0x1
	.4byte		.L3674
	.4byte		.L3675
	.sleb128	3
	.4byte		.L2369
	.uleb128	6167
	.uleb128	29
	.byte		"opCycleId"
	.byte		0
	.4byte		.L2371
	.4byte		.L3677
.L3678:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6169
	.uleb128	10
	.byte		"origin"
	.byte		0
	.4byte		.L2371
	.4byte		.L3679
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3683
	.4byte		.L3680
	.4byte		.L3681
.L3684:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6176
	.uleb128	16
	.byte		"evMemEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L3685
.L3686:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6177
	.uleb128	75
	.byte		"pEntries"
	.byte		0
	.4byte		.L3687
	.4byte		.L3688
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3692
	.4byte		.L3689
	.4byte		.L3690
.L3693:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6181
	.uleb128	55
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2407
	.4byte		.L3694
.L3695:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6182
	.uleb128	47
	.byte		"eventId"
	.byte		0
	.4byte		.L2535
	.4byte		.L3696
	.section	.debug_info,,n
	.sleb128	0
.L3692:
	.section	.debug_info,,n
	.sleb128	0
.L3683:
	.section	.debug_info,,n
	.sleb128	0
.L3673:
	.section	.debug_info,,n
.L3701:
	.sleb128	7
	.4byte		.L3698-.L2
	.byte		"OpCycleEndAllEvents"
	.byte		0
	.4byte		.L2369
	.uleb128	6262
	.uleb128	29
	.byte		0x1
	.4byte		.L3699
	.4byte		.L3700
	.sleb128	3
	.4byte		.L2369
	.uleb128	6262
	.uleb128	29
	.byte		"opCycleId"
	.byte		0
	.4byte		.L2371
	.4byte		.L3702
.L3703:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6264
	.uleb128	20
	.byte		"evId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3704
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3708
	.4byte		.L3705
	.4byte		.L3706
.L3709:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6271
	.uleb128	50
	.byte		"eventUdsStatusOld"
	.byte		0
	.4byte		.L3112
	.4byte		.L3710
.L3711:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6272
	.uleb128	35
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L3712
.L3713:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6273
	.uleb128	50
	.byte		"dtcUdsStatusOld"
	.byte		0
	.4byte		.L3112
	.4byte		.L3714
	.section	.debug_info,,n
	.sleb128	0
.L3708:
	.section	.debug_info,,n
	.sleb128	0
.L3698:
	.section	.debug_info,,n
.L3719:
	.sleb128	7
	.4byte		.L3716-.L2
	.byte		"SetOperationCycleStateEnd"
	.byte		0
	.4byte		.L2369
	.uleb128	6141
	.uleb128	29
	.byte		0x1
	.4byte		.L3717
	.4byte		.L3718
	.sleb128	3
	.4byte		.L2369
	.uleb128	6141
	.uleb128	29
	.byte		"opCycleId"
	.byte		0
	.4byte		.L2371
	.4byte		.L3720
	.section	.debug_info,,n
	.sleb128	0
.L3716:
	.section	.debug_info,,n
.L3725:
	.sleb128	7
	.4byte		.L3722-.L2
	.byte		"SetAgingCycleState"
	.byte		0
	.4byte		.L2369
	.uleb128	6212
	.uleb128	29
	.byte		0x1
	.4byte		.L3723
	.4byte		.L3724
	.sleb128	3
	.4byte		.L2369
	.uleb128	6212
	.uleb128	29
	.byte		"agingCycleId"
	.byte		0
	.4byte		.L2371
	.4byte		.L3726
.L3727:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6214
	.uleb128	64
	.byte		"pEntries"
	.byte		0
	.4byte		.L2406
	.4byte		.L3728
.L3729:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6215
	.uleb128	10
	.byte		"origin"
	.byte		0
	.4byte		.L2371
	.4byte		.L3730
.L3731:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6216
	.uleb128	10
	.byte		"evMemEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L3732
	.section	.debug_info,,n
	.sleb128	0
.L3722:
	.section	.debug_info,,n
.L3737:
	.sleb128	5
	.4byte		.L3734-.L2
	.byte		"GetFFIndexByRecordNumber"
	.byte		0
	.4byte		.L2369
	.uleb128	6494
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L3735
	.4byte		.L3736
	.sleb128	3
	.4byte		.L2369
	.uleb128	6494
	.uleb128	32
	.byte		"evMemEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L3738
	.sleb128	3
	.4byte		.L2369
	.uleb128	6494
	.uleb128	32
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L3739
	.sleb128	3
	.4byte		.L2369
	.uleb128	6494
	.uleb128	32
	.byte		"RecordNumber"
	.byte		0
	.4byte		.L2371
	.4byte		.L3740
	.sleb128	3
	.4byte		.L2369
	.uleb128	6494
	.uleb128	32
	.byte		"ffType"
	.byte		0
	.4byte		.L3741
	.4byte		.L3743
	.sleb128	3
	.4byte		.L2369
	.uleb128	6494
	.uleb128	32
	.byte		"pFFIndex"
	.byte		0
	.4byte		.L2610
	.4byte		.L3744
.L3745:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6500
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L3746
.L3747:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6501
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L3748
.L3749:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6502
	.uleb128	28
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.4byte		.L3750
.L3751:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6504
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L3752
	.section	.debug_info,,n
	.sleb128	0
.L3734:
	.section	.debug_info,,n
.L3757:
	.sleb128	5
	.4byte		.L3754-.L2
	.byte		"IsFFRecordNumberValid"
	.byte		0
	.4byte		.L2369
	.uleb128	6565
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L3755
	.4byte		.L3756
	.sleb128	3
	.4byte		.L2369
	.uleb128	6565
	.uleb128	32
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L3758
	.sleb128	3
	.4byte		.L2369
	.uleb128	6565
	.uleb128	32
	.byte		"recordNumber"
	.byte		0
	.4byte		.L2371
	.4byte		.L3759
	.sleb128	3
	.4byte		.L2369
	.uleb128	6565
	.uleb128	32
	.byte		"pFFType"
	.byte		0
	.4byte		.L3760
	.4byte		.L3761
.L3762:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6568
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L3763
.L3764:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6569
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L3765
.L3766:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6570
	.uleb128	10
	.byte		"ffRecNumClassIdx"
	.byte		0
	.4byte		.L2371
	.4byte		.L3767
.L3768:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6571
	.uleb128	71
	.byte		"pFFRecords"
	.byte		0
	.4byte		.L3769
	.4byte		.L3773
.L3774:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6572
	.uleb128	10
	.byte		"numFF"
	.byte		0
	.4byte		.L2371
	.4byte		.L3775
	.section	.debug_info,,n
	.sleb128	0
.L3754:
	.section	.debug_info,,n
.L3780:
	.sleb128	5
	.4byte		.L3777-.L2
	.byte		"EnableConditionsFulfilled"
	.byte		0
	.4byte		.L2369
	.uleb128	6636
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L3778
	.4byte		.L3779
	.sleb128	9
	.4byte		.L2369
	.uleb128	6636
	.uleb128	32
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.sleb128	2
	.byte		0x90
	.uleb128	3
.L3781:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6638
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L3782
	.section	.debug_info,,n
	.sleb128	0
.L3777:
	.section	.debug_info,,n
.L3787:
	.sleb128	7
	.4byte		.L3784-.L2
	.byte		"ClearOccurrenceInfo"
	.byte		0
	.4byte		.L2369
	.uleb128	6919
	.uleb128	29
	.byte		0x1
	.4byte		.L3785
	.4byte		.L3786
	.section	.debug_info,,n
	.sleb128	0
.L3784:
	.section	.debug_info,,n
.L3792:
	.sleb128	7
	.4byte		.L3789-.L2
	.byte		"HandleClear"
	.byte		0
	.4byte		.L2369
	.uleb128	6726
	.uleb128	29
	.byte		0x1
	.4byte		.L3790
	.4byte		.L3791
.L3793:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6728
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L3794
.L3795:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6729
	.uleb128	10
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L3796
.L3797:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6730
	.uleb128	12
	.byte		"clearFinishedOk"
	.byte		0
	.4byte		.L2417
	.4byte		.L3798
	.section	.debug_info,,n
	.sleb128	0
.L3789:
	.section	.debug_info,,n
.L3803:
	.sleb128	5
	.4byte		.L3800-.L2
	.byte		"SetDTCSuppression"
	.byte		0
	.4byte		.L2369
	.uleb128	6927
	.uleb128	39
	.4byte		.L2837
	.byte		0x1
	.4byte		.L3801
	.4byte		.L3802
	.sleb128	3
	.4byte		.L2369
	.uleb128	6927
	.uleb128	39
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L3804
	.sleb128	3
	.4byte		.L2369
	.uleb128	6927
	.uleb128	39
	.byte		"suppressionStatus"
	.byte		0
	.4byte		.L2417
	.4byte		.L3805
.L3806:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6929
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L3807
.L3808:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6930
	.uleb128	10
	.byte		"origin"
	.byte		0
	.4byte		.L2371
	.4byte		.L3809
.L3810:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6931
	.uleb128	12
	.byte		"originFound"
	.byte		0
	.4byte		.L2417
	.4byte		.L3811
.L3812:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6932
	.uleb128	22
	.byte		"eventDest"
	.byte		0
	.4byte		.L2579
	.4byte		.L3813
.L3814:
	.sleb128	6
	.4byte		.L2369
	.uleb128	6933
	.uleb128	28
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
	.section	.debug_info,,n
	.sleb128	0
.L3800:
	.section	.debug_info,,n
.L3820:
	.sleb128	5
	.4byte		.L3817-.L2
	.byte		"UserClearDTC"
	.byte		0
	.4byte		.L2369
	.uleb128	6969
	.uleb128	47
	.4byte		.L3313
	.byte		0x1
	.4byte		.L3818
	.4byte		.L3819
	.sleb128	3
	.4byte		.L2369
	.uleb128	6969
	.uleb128	47
	.byte		"user"
	.byte		0
	.4byte		.L3821
	.4byte		.L3823
	.sleb128	3
	.4byte		.L2369
	.uleb128	6969
	.uleb128	47
	.byte		"DTC"
	.byte		0
	.4byte		.L2419
	.4byte		.L3824
	.sleb128	3
	.4byte		.L2369
	.uleb128	6969
	.uleb128	47
	.byte		"DTCFormat"
	.byte		0
	.4byte		.L3335
	.4byte		.L3825
	.sleb128	3
	.4byte		.L2369
	.uleb128	6969
	.uleb128	47
	.byte		"DTCOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L3826
.L3827:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6971
	.uleb128	27
	.byte		"retVal"
	.byte		0
	.4byte		.L3313
	.4byte		.L3828
.L3829:
	.sleb128	4
	.4byte		.L2369
	.uleb128	6972
	.uleb128	12
	.byte		"OBDService0x04Disabled"
	.byte		0
	.4byte		.L2417
	.4byte		.L3830
	.section	.debug_info,,n
	.sleb128	0
.L3817:
	.section	.debug_info,,n
.L3836:
	.sleb128	7
	.4byte		.L3833-.L2
	.byte		"HandleQueuedEvents"
	.byte		0
	.4byte		.L2369
	.uleb128	7132
	.uleb128	29
	.byte		0x1
	.4byte		.L3834
	.4byte		.L3835
.L3837:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7134
	.uleb128	11
	.byte		"i"
	.byte		0
	.4byte		.L2391
	.4byte		.L3838
.L3839:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7135
	.uleb128	10
	.byte		"k"
	.byte		0
	.4byte		.L2371
	.4byte		.L3840
.L3841:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7136
	.uleb128	20
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3842
.L3843:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7137
	.uleb128	23
	.byte		"eventState"
	.byte		0
	.4byte		.L3167
	.4byte		.L3844
.L3845:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7138
	.uleb128	11
	.byte		"numUpdateBytes"
	.byte		0
	.4byte		.L2391
	.4byte		.L3846
	.section	.debug_info,,n
	.sleb128	0
.L3833:
	.section	.debug_info,,n
.L3851:
	.sleb128	7
	.4byte		.L3848-.L2
	.byte		"ProcessBswEvents"
	.byte		0
	.4byte		.L2369
	.uleb128	7109
	.uleb128	29
	.byte		0x1
	.4byte		.L3849
	.4byte		.L3850
.L3852:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7111
	.uleb128	20
	.byte		"evId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3853
.L3854:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7112
	.uleb128	10
	.byte		"opCycle"
	.byte		0
	.4byte		.L2371
	.4byte		.L3855
	.section	.debug_info,,n
	.sleb128	0
.L3848:
	.section	.debug_info,,n
.L3860:
	.sleb128	5
	.4byte		.L3857-.L2
	.byte		"GetNumberOfFilteredDTCInEventMemory"
	.byte		0
	.4byte		.L2369
	.uleb128	7168
	.uleb128	31
	.4byte		.L2391
	.byte		0x1
	.4byte		.L3858
	.4byte		.L3859
.L3861:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7170
	.uleb128	11
	.byte		"numberOfFilteredDTC"
	.byte		0
	.4byte		.L2391
	.4byte		.L3862
.L3863:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7171
	.uleb128	28
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2656
	.4byte		.L3864
.L3865:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7172
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L3866
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3870
	.4byte		.L3867
	.4byte		.L3868
.L3871:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7176
	.uleb128	67
	.byte		"pEvMemEntries"
	.byte		0
	.4byte		.L2406
	.4byte		.L3872
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3876
	.4byte		.L3873
	.4byte		.L3874
.L3877:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7182
	.uleb128	38
	.byte		"internalDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L3878
	.section	.debug_info,,n
	.sleb128	0
.L3876:
	.section	.debug_info,,n
	.sleb128	0
.L3870:
	.section	.debug_info,,n
	.sleb128	0
.L3857:
	.section	.debug_info,,n
.L3883:
	.sleb128	5
	.4byte		.L3880-.L2
	.byte		"OpCycleCircularQueuePut"
	.byte		0
	.4byte		.L2369
	.uleb128	7311
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L3881
	.4byte		.L3882
	.sleb128	3
	.4byte		.L2369
	.uleb128	7311
	.uleb128	32
	.byte		"pItem"
	.byte		0
	.4byte		.L3884
	.4byte		.L3888
.L3889:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7313
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L3890
	.section	.debug_info,,n
	.sleb128	0
.L3880:
	.section	.debug_info,,n
.L3895:
	.sleb128	5
	.4byte		.L3892-.L2
	.byte		"OpCycleCircularQueueGet"
	.byte		0
	.4byte		.L2369
	.uleb128	7330
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L3893
	.4byte		.L3894
	.sleb128	3
	.4byte		.L2369
	.uleb128	7330
	.uleb128	32
	.byte		"pItem"
	.byte		0
	.4byte		.L3896
	.4byte		.L3897
.L3898:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7332
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L3899
	.section	.debug_info,,n
	.sleb128	0
.L3892:
	.section	.debug_info,,n
.L3904:
	.sleb128	5
	.4byte		.L3901-.L2
	.byte		"HandleOpCycleChanges"
	.byte		0
	.4byte		.L2369
	.uleb128	7349
	.uleb128	32
	.4byte		.L2417
	.byte		0x1
	.4byte		.L3902
	.4byte		.L3903
.L3905:
	.sleb128	6
	.4byte		.L2369
	.uleb128	7351
	.uleb128	28
	.byte		"paramValues"
	.byte		0
	.4byte		.L3886
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L3906:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7352
	.uleb128	12
	.byte		"retVal"
	.byte		0
	.4byte		.L2417
	.4byte		.L3907
	.section	.debug_info,,n
	.sleb128	0
.L3901:
	.section	.debug_info,,n
.L3912:
	.sleb128	7
	.4byte		.L3909-.L2
	.byte		"UpdateEventStatusPerEntry"
	.byte		0
	.4byte		.L2369
	.uleb128	7424
	.uleb128	29
	.byte		0x1
	.4byte		.L3910
	.4byte		.L3911
.L3913:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7426
	.uleb128	10
	.byte		"origin"
	.byte		0
	.4byte		.L2371
	.4byte		.L3914
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3918
	.4byte		.L3915
	.4byte		.L3916
.L3919:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7432
	.uleb128	16
	.byte		"entryIdx"
	.byte		0
	.4byte		.L2371
	.4byte		.L3920
.L3921:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7433
	.uleb128	75
	.byte		"pEvMemEntries"
	.byte		0
	.4byte		.L3687
	.4byte		.L3922
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3926
	.4byte		.L3923
	.4byte		.L3924
.L3927:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7437
	.uleb128	55
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2407
	.4byte		.L3928
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3932
	.4byte		.L3929
	.4byte		.L3930
.L3933:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7440
	.uleb128	23
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L3934
.L3935:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7441
	.uleb128	22
	.byte		"udsStatus"
	.byte		0
	.4byte		.L2371
	.4byte		.L3936
	.section	.debug_info,,n
	.sleb128	0
.L3932:
	.section	.debug_info,,n
	.sleb128	0
.L3926:
	.section	.debug_info,,n
	.sleb128	0
.L3918:
	.section	.debug_info,,n
	.sleb128	0
.L3909:
	.section	.debug_info,,n
.L3941:
	.sleb128	7
	.4byte		.L3938-.L2
	.byte		"UpdateSiPerEntry"
	.byte		0
	.4byte		.L2369
	.uleb128	7459
	.uleb128	29
	.byte		0x1
	.4byte		.L3939
	.4byte		.L3940
.L3942:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7461
	.uleb128	10
	.byte		"origin"
	.byte		0
	.4byte		.L2371
	.4byte		.L3943
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3947
	.4byte		.L3944
	.4byte		.L3945
.L3948:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7467
	.uleb128	16
	.byte		"entryIdx"
	.byte		0
	.4byte		.L2371
	.4byte		.L3949
.L3950:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7468
	.uleb128	70
	.byte		"pEvMemEntries"
	.byte		0
	.4byte		.L2406
	.4byte		.L3951
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3955
	.4byte		.L3952
	.4byte		.L3953
.L3956:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7471
	.uleb128	55
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2407
	.4byte		.L3957
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L3961
	.4byte		.L3958
	.4byte		.L3959
.L3962:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7474
	.uleb128	23
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L3963
.L3964:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7475
	.uleb128	22
	.byte		"siStatus"
	.byte		0
	.4byte		.L2371
	.4byte		.L3965
	.section	.debug_info,,n
	.sleb128	0
.L3961:
	.section	.debug_info,,n
	.sleb128	0
.L3955:
	.section	.debug_info,,n
	.sleb128	0
.L3947:
	.section	.debug_info,,n
	.sleb128	0
.L3938:
	.section	.debug_info,,n
.L3970:
	.sleb128	10
	.4byte		.L3967-.L2
	.byte		"Dem_BuildSiByte"
	.byte		0
	.4byte		.L2369
	.uleb128	7519
	.uleb128	23
	.4byte		.L2371
	.byte		0x1
	.byte		0x1
	.4byte		.L3968
	.4byte		.L3969
	.sleb128	3
	.4byte		.L2369
	.uleb128	7519
	.uleb128	23
	.byte		"evId"
	.byte		0
	.4byte		.L2390
	.4byte		.L3971
.L3972:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7521
	.uleb128	10
	.byte		"siByte"
	.byte		0
	.4byte		.L2371
	.4byte		.L3973
	.section	.debug_info,,n
	.sleb128	0
.L3967:
	.section	.debug_info,,n
.L3978:
	.sleb128	2
	.4byte		.L3975-.L2
	.byte		"Dem_GetVersionInfo"
	.byte		0
	.4byte		.L2369
	.uleb128	7979
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L3976
	.4byte		.L3977
	.sleb128	3
	.4byte		.L2369
	.uleb128	7979
	.uleb128	22
	.byte		"versioninfo"
	.byte		0
	.4byte		.L3979
	.4byte		.L3982
.L3983:
	.sleb128	4
	.4byte		.L2369
	.uleb128	7981
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L3984
	.section	.debug_info,,n
	.sleb128	0
.L3975:
	.section	.debug_info,,n
.L3989:
	.sleb128	10
	.4byte		.L3986-.L2
	.byte		"Dem_ConsistencyCheck"
	.byte		0
	.4byte		.L2369
	.uleb128	11759
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L3987
	.4byte		.L3988
	.sleb128	3
	.4byte		.L2369
	.uleb128	11759
	.uleb128	32
	.byte		"ConfigPtr"
	.byte		0
	.4byte		.L3990
	.4byte		.L3994
.L3995:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11761
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L3996
	.section	.debug_info,,n
	.sleb128	0
.L3986:
	.section	.debug_info,,n
.L4001:
	.sleb128	2
	.4byte		.L3998-.L2
	.byte		"Dem_PreInit"
	.byte		0
	.4byte		.L2369
	.uleb128	7998
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L3999
	.4byte		.L4000
	.sleb128	3
	.4byte		.L2369
	.uleb128	7998
	.uleb128	22
	.byte		"ConfigPtr"
	.byte		0
	.4byte		.L3990
	.4byte		.L4002
.L4003:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8000
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L4004
.L4005:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8002
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4006
	.section	.debug_info,,n
	.sleb128	0
.L3998:
	.section	.debug_info,,n
.L4011:
	.sleb128	2
	.4byte		.L4008-.L2
	.byte		"Dem_Init"
	.byte		0
	.4byte		.L2369
	.uleb128	8060
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L4009
	.4byte		.L4010
.L4012:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8062
	.uleb128	11
	.byte		"i"
	.byte		0
	.4byte		.L2391
	.4byte		.L4013
.L4014:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8064
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4015
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4019
	.4byte		.L4016
	.4byte		.L4017
.L4020:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8148
	.uleb128	19
	.byte		"j"
	.byte		0
	.4byte		.L2371
	.4byte		.L4021
.L4022:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8149
	.uleb128	19
	.byte		"numFFDids"
	.byte		0
	.4byte		.L2371
	.4byte		.L4023
.L4024:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8150
	.uleb128	57
	.byte		"pFFDidIdx"
	.byte		0
	.4byte		.L2818
	.4byte		.L4025
.L4026:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8151
	.uleb128	53
	.byte		"pFFLength"
	.byte		0
	.4byte		.L2610
	.4byte		.L4027
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4031
	.4byte		.L4028
	.4byte		.L4029
.L4032:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8157
	.uleb128	75
	.byte		"pDidConfig"
	.byte		0
	.4byte		.L2812
	.4byte		.L4033
	.section	.debug_info,,n
	.sleb128	0
.L4031:
	.section	.debug_info,,n
	.sleb128	0
.L4019:
	.section	.debug_info,,n
	.sleb128	0
.L4008:
	.section	.debug_info,,n
.L4038:
	.sleb128	2
	.4byte		.L4035-.L2
	.byte		"Dem_Shutdown"
	.byte		0
	.4byte		.L2369
	.uleb128	8186
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L4036
	.4byte		.L4037
.L4039:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8188
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4040
	.section	.debug_info,,n
	.sleb128	0
.L4035:
	.section	.debug_info,,n
.L4045:
	.sleb128	10
	.4byte		.L4042-.L2
	.byte		"Dem_SetEventStatus"
	.byte		0
	.4byte		.L2369
	.uleb128	8214
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4043
	.4byte		.L4044
	.sleb128	3
	.4byte		.L2369
	.uleb128	8214
	.uleb128	32
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L4046
	.sleb128	3
	.4byte		.L2369
	.uleb128	8214
	.uleb128	32
	.byte		"EventStatus"
	.byte		0
	.4byte		.L3193
	.4byte		.L4047
.L4048:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8216
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4049
.L4050:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8218
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4051
	.section	.debug_info,,n
	.sleb128	0
.L4042:
	.section	.debug_info,,n
.L4056:
	.sleb128	10
	.4byte		.L4053-.L2
	.byte		"Dem_ResetEventStatus"
	.byte		0
	.4byte		.L2369
	.uleb128	8257
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4054
	.4byte		.L4055
	.sleb128	3
	.4byte		.L2369
	.uleb128	8257
	.uleb128	32
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L4057
.L4058:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8259
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4059
.L4060:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8261
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4061
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4065
	.4byte		.L4062
	.4byte		.L4063
.L4066:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8269
	.uleb128	47
	.byte		"eventUdsStatusOld"
	.byte		0
	.4byte		.L3112
	.4byte		.L4067
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4071
	.4byte		.L4068
	.4byte		.L4069
.L4072:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8274
	.uleb128	35
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L4073
.L4074:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8275
	.uleb128	50
	.byte		"dtcUdsStatusOld"
	.byte		0
	.4byte		.L3112
	.4byte		.L4075
	.section	.debug_info,,n
	.sleb128	0
.L4071:
	.section	.debug_info,,n
	.sleb128	0
.L4065:
	.section	.debug_info,,n
	.sleb128	0
.L4053:
	.section	.debug_info,,n
.L4080:
	.sleb128	10
	.4byte		.L4077-.L2
	.byte		"Dem_GetEventStatus"
	.byte		0
	.4byte		.L2369
	.uleb128	8302
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4078
	.4byte		.L4079
	.sleb128	3
	.4byte		.L2369
	.uleb128	8302
	.uleb128	32
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L4081
	.sleb128	3
	.4byte		.L2369
	.uleb128	8302
	.uleb128	32
	.byte		"EventStatusByte"
	.byte		0
	.4byte		.L2566
	.4byte		.L4082
.L4083:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8305
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4084
.L4085:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8307
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4086
	.section	.debug_info,,n
	.sleb128	0
.L4077:
	.section	.debug_info,,n
.L4091:
	.sleb128	10
	.4byte		.L4088-.L2
	.byte		"Dem_GetEventFailed"
	.byte		0
	.4byte		.L2369
	.uleb128	8336
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4089
	.4byte		.L4090
	.sleb128	3
	.4byte		.L2369
	.uleb128	8336
	.uleb128	32
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L4092
	.sleb128	3
	.4byte		.L2369
	.uleb128	8336
	.uleb128	32
	.byte		"EventFailed"
	.byte		0
	.4byte		.L4093
	.4byte		.L4094
.L4095:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8338
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4096
.L4097:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8340
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4098
	.section	.debug_info,,n
	.sleb128	0
.L4088:
	.section	.debug_info,,n
.L4103:
	.sleb128	10
	.4byte		.L4100-.L2
	.byte		"Dem_GetEventTested"
	.byte		0
	.4byte		.L2369
	.uleb128	8376
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4101
	.4byte		.L4102
	.sleb128	3
	.4byte		.L2369
	.uleb128	8376
	.uleb128	32
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L4104
	.sleb128	3
	.4byte		.L2369
	.uleb128	8376
	.uleb128	32
	.byte		"EventTested"
	.byte		0
	.4byte		.L4093
	.4byte		.L4105
.L4106:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8378
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4107
.L4108:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8380
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4109
	.section	.debug_info,,n
	.sleb128	0
.L4100:
	.section	.debug_info,,n
.L4114:
	.sleb128	10
	.4byte		.L4111-.L2
	.byte		"Dem_GetDTCOfEvent"
	.byte		0
	.4byte		.L2369
	.uleb128	8417
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4112
	.4byte		.L4113
	.sleb128	3
	.4byte		.L2369
	.uleb128	8417
	.uleb128	32
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L4115
	.sleb128	3
	.4byte		.L2369
	.uleb128	8417
	.uleb128	32
	.byte		"DTCFormat"
	.byte		0
	.4byte		.L3335
	.4byte		.L4116
	.sleb128	3
	.4byte		.L2369
	.uleb128	8417
	.uleb128	32
	.byte		"DTCOfEvent"
	.byte		0
	.4byte		.L4117
	.4byte		.L4118
.L4119:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8420
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4120
.L4121:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8422
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4122
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4126
	.4byte		.L4123
	.4byte		.L4124
.L4127:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8431
	.uleb128	14
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L4128
	.section	.debug_info,,n
	.sleb128	0
.L4126:
	.section	.debug_info,,n
	.sleb128	0
.L4111:
	.section	.debug_info,,n
.L4133:
	.sleb128	2
	.4byte		.L4130-.L2
	.byte		"Dem_ReportErrorStatus"
	.byte		0
	.4byte		.L2369
	.uleb128	8464
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L4131
	.4byte		.L4132
	.sleb128	3
	.4byte		.L2369
	.uleb128	8464
	.uleb128	22
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L4134
	.sleb128	3
	.4byte		.L2369
	.uleb128	8464
	.uleb128	22
	.byte		"EventStatus"
	.byte		0
	.4byte		.L3193
	.4byte		.L4135
.L4136:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8466
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4137
	.section	.debug_info,,n
	.sleb128	0
.L4130:
	.section	.debug_info,,n
.L4143:
	.sleb128	10
	.4byte		.L4139-.L2
	.byte		"Dem_DcmGetStatusOfDTC"
	.byte		0
	.4byte		.L2369
	.uleb128	8494
	.uleb128	46
	.4byte		.L4142
	.byte		0x1
	.byte		0x1
	.4byte		.L4140
	.4byte		.L4141
	.sleb128	3
	.4byte		.L2369
	.uleb128	8494
	.uleb128	46
	.byte		"DTC"
	.byte		0
	.4byte		.L2419
	.4byte		.L4144
	.sleb128	3
	.4byte		.L2369
	.uleb128	8494
	.uleb128	46
	.byte		"DTCOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L4145
	.sleb128	3
	.4byte		.L2369
	.uleb128	8494
	.uleb128	46
	.byte		"DTCStatus"
	.byte		0
	.4byte		.L2377
	.4byte		.L4146
.L4147:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8498
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L4148
.L4149:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8499
	.uleb128	33
	.byte		"retVal"
	.byte		0
	.4byte		.L4142
	.4byte		.L4150
.L4151:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8500
	.uleb128	10
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L4152
.L4153:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8502
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4154
	.section	.debug_info,,n
	.sleb128	0
.L4139:
	.section	.debug_info,,n
.L4159:
	.sleb128	10
	.4byte		.L4156-.L2
	.byte		"Dem_DcmClearDTC"
	.byte		0
	.4byte		.L2369
	.uleb128	8544
	.uleb128	40
	.4byte		.L3313
	.byte		0x1
	.byte		0x1
	.4byte		.L4157
	.4byte		.L4158
	.sleb128	3
	.4byte		.L2369
	.uleb128	8544
	.uleb128	40
	.byte		"DTC"
	.byte		0
	.4byte		.L2419
	.4byte		.L4160
	.sleb128	3
	.4byte		.L2369
	.uleb128	8544
	.uleb128	40
	.byte		"DTCFormat"
	.byte		0
	.4byte		.L3335
	.4byte		.L4161
	.sleb128	3
	.4byte		.L2369
	.uleb128	8544
	.uleb128	40
	.byte		"DTCOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L4162
.L4163:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8546
	.uleb128	27
	.byte		"retVal"
	.byte		0
	.4byte		.L3313
	.4byte		.L4164
.L4165:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8548
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4166
	.section	.debug_info,,n
	.sleb128	0
.L4156:
	.section	.debug_info,,n
.L4171:
	.sleb128	10
	.4byte		.L4168-.L2
	.byte		"Dem_ClearDTC"
	.byte		0
	.4byte		.L2369
	.uleb128	8583
	.uleb128	40
	.4byte		.L3313
	.byte		0x1
	.byte		0x1
	.4byte		.L4169
	.4byte		.L4170
	.sleb128	3
	.4byte		.L2369
	.uleb128	8583
	.uleb128	40
	.byte		"DTC"
	.byte		0
	.4byte		.L2419
	.4byte		.L4172
	.sleb128	3
	.4byte		.L2369
	.uleb128	8583
	.uleb128	40
	.byte		"DTCFormat"
	.byte		0
	.4byte		.L3335
	.4byte		.L4173
	.sleb128	3
	.4byte		.L2369
	.uleb128	8583
	.uleb128	40
	.byte		"DTCOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L4174
.L4175:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8585
	.uleb128	27
	.byte		"retVal"
	.byte		0
	.4byte		.L3313
	.4byte		.L4176
.L4177:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8587
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4178
	.section	.debug_info,,n
	.sleb128	0
.L4168:
	.section	.debug_info,,n
.L4183:
	.sleb128	2
	.4byte		.L4180-.L2
	.byte		"Dem_MainFunction"
	.byte		0
	.4byte		.L2369
	.uleb128	8611
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L4181
	.4byte		.L4182
.L4184:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8613
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4185
	.section	.debug_info,,n
	.sleb128	0
.L4180:
	.section	.debug_info,,n
.L4190:
	.sleb128	10
	.4byte		.L4187-.L2
	.byte		"Dem_SetOperationCycleState"
	.byte		0
	.4byte		.L2369
	.uleb128	8709
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4188
	.4byte		.L4189
	.sleb128	3
	.4byte		.L2369
	.uleb128	8709
	.uleb128	32
	.byte		"OperationCycleId"
	.byte		0
	.4byte		.L2371
	.4byte		.L4191
	.sleb128	3
	.4byte		.L2369
	.uleb128	8709
	.uleb128	32
	.byte		"CycleState"
	.byte		0
	.4byte		.L4192
	.4byte		.L4193
.L4194:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8712
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4195
.L4196:
	.sleb128	6
	.4byte		.L2369
	.uleb128	8713
	.uleb128	28
	.byte		"newItem"
	.byte		0
	.4byte		.L3886
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L4197:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8715
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4198
	.section	.debug_info,,n
	.sleb128	0
.L4187:
	.section	.debug_info,,n
.L4203:
	.sleb128	10
	.4byte		.L4200-.L2
	.byte		"Dem_SetAgingCycleState"
	.byte		0
	.4byte		.L2369
	.uleb128	8745
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4201
	.4byte		.L4202
	.sleb128	3
	.4byte		.L2369
	.uleb128	8745
	.uleb128	32
	.byte		"OperationCycleId"
	.byte		0
	.4byte		.L2371
	.4byte		.L4204
.L4205:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8747
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4206
.L4207:
	.sleb128	6
	.4byte		.L2369
	.uleb128	8748
	.uleb128	28
	.byte		"newItem"
	.byte		0
	.4byte		.L3886
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L4208:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8750
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4209
	.section	.debug_info,,n
	.sleb128	0
.L4200:
	.section	.debug_info,,n
.L4214:
	.sleb128	10
	.4byte		.L4211-.L2
	.byte		"Dem_GetEventExtendedDataRecord"
	.byte		0
	.4byte		.L2369
	.uleb128	8782
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4212
	.4byte		.L4213
	.sleb128	3
	.4byte		.L2369
	.uleb128	8782
	.uleb128	32
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L4215
	.sleb128	3
	.4byte		.L2369
	.uleb128	8782
	.uleb128	32
	.byte		"RecordNumber"
	.byte		0
	.4byte		.L2371
	.4byte		.L4216
	.sleb128	3
	.4byte		.L2369
	.uleb128	8782
	.uleb128	32
	.byte		"DestBuffer"
	.byte		0
	.4byte		.L2377
	.4byte		.L4217
.L4218:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8786
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4219
.L4220:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8788
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4221
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4225
	.4byte		.L4222
	.4byte		.L4223
.L4226:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8801
	.uleb128	32
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L4227
.L4228:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8802
	.uleb128	31
	.byte		"origin"
	.byte		0
	.4byte		.L2656
	.4byte		.L4229
.L4230:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8803
	.uleb128	31
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2656
	.4byte		.L4231
.L4232:
	.sleb128	6
	.4byte		.L2369
	.uleb128	8804
	.uleb128	31
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	12
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4236
	.4byte		.L4233
	.4byte		.L4234
.L4237:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8821
	.uleb128	19
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L4238
.L4239:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8822
	.uleb128	20
	.byte		"bufSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L4240
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4244
	.4byte		.L4241
	.4byte		.L4242
.L4245:
	.sleb128	6
	.4byte		.L2369
	.uleb128	8827
	.uleb128	23
	.byte		"tmpBufSize"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L4246:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8828
	.uleb128	75
	.byte		"updateBuffer"
	.byte		0
	.4byte		.L4247
	.4byte		.L4248
	.section	.debug_info,,n
	.sleb128	0
.L4244:
	.section	.debug_info,,n
	.sleb128	0
.L4236:
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4252
	.4byte		.L4249
	.4byte		.L4250
.L4253:
	.sleb128	6
	.4byte		.L2369
	.uleb128	8846
	.uleb128	20
	.byte		"bufSize"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	10
	.section	.debug_info,,n
	.sleb128	0
.L4252:
	.section	.debug_info,,n
	.sleb128	0
.L4225:
	.section	.debug_info,,n
	.sleb128	0
.L4211:
	.section	.debug_info,,n
.L4258:
	.sleb128	10
	.4byte		.L4255-.L2
	.byte		"Dem_GetEventFreezeFrameData"
	.byte		0
	.4byte		.L2369
	.uleb128	8972
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4256
	.4byte		.L4257
	.sleb128	3
	.4byte		.L2369
	.uleb128	8972
	.uleb128	32
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L4259
	.sleb128	3
	.4byte		.L2369
	.uleb128	8972
	.uleb128	32
	.byte		"RecordNumber"
	.byte		0
	.4byte		.L2371
	.4byte		.L4260
	.sleb128	3
	.4byte		.L2369
	.uleb128	8972
	.uleb128	32
	.byte		"ReportTotalRecord"
	.byte		0
	.4byte		.L2417
	.4byte		.L4261
	.sleb128	3
	.4byte		.L2369
	.uleb128	8972
	.uleb128	32
	.byte		"DataId"
	.byte		0
	.4byte		.L2391
	.4byte		.L4262
	.sleb128	3
	.4byte		.L2369
	.uleb128	8972
	.uleb128	32
	.byte		"DestBuffer"
	.byte		0
	.4byte		.L2377
	.4byte		.L4263
.L4264:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8978
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4265
.L4266:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8979
	.uleb128	19
	.byte		"commonRetVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4267
.L4268:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8980
	.uleb128	19
	.byte		"specificRetVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4269
.L4270:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8982
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4271
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4275
	.4byte		.L4272
	.4byte		.L4273
.L4276:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8995
	.uleb128	32
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L4277
.L4278:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8996
	.uleb128	31
	.byte		"ffRecNumClassIdx"
	.byte		0
	.4byte		.L2656
	.4byte		.L4279
.L4280:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8997
	.uleb128	31
	.byte		"origin"
	.byte		0
	.4byte		.L2656
	.4byte		.L4281
.L4282:
	.sleb128	4
	.4byte		.L2369
	.uleb128	8998
	.uleb128	31
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2656
	.4byte		.L4283
.L4284:
	.sleb128	6
	.4byte		.L2369
	.uleb128	8999
	.uleb128	31
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	16
.L4285:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9000
	.uleb128	13
	.byte		"evMemEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L4286
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4290
	.4byte		.L4287
	.4byte		.L4288
.L4291:
	.sleb128	6
	.4byte		.L2369
	.uleb128	9009
	.uleb128	30
	.byte		"ffType"
	.byte		0
	.4byte		.L3741
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	12
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4295
	.4byte		.L4292
	.4byte		.L4293
.L4296:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9022
	.uleb128	69
	.byte		"pFFStorage"
	.byte		0
	.4byte		.L2467
	.4byte		.L4297
.L4298:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9023
	.uleb128	20
	.byte		"ffClass"
	.byte		0
	.4byte		.L2391
	.4byte		.L4299
.L4300:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9024
	.uleb128	20
	.byte		"commonFFClass"
	.byte		0
	.4byte		.L2391
	.4byte		.L4301
.L4302:
	.sleb128	6
	.4byte		.L2369
	.uleb128	9025
	.uleb128	20
	.byte		"ffIndex"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	10
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4306
	.4byte		.L4303
	.4byte		.L4304
.L4307:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9058
	.uleb128	49
	.byte		"pFFData"
	.byte		0
	.4byte		.L3588
	.4byte		.L4308
.L4309:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9059
	.uleb128	23
	.byte		"bufSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L4310
.L4311:
	.sleb128	6
	.4byte		.L2369
	.uleb128	9060
	.uleb128	23
	.byte		"inOutSize"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L4312:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9061
	.uleb128	23
	.byte		"usedSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L4313
.L4314:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9062
	.uleb128	23
	.byte		"commonFFSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L4315
	.section	.debug_info,,n
	.sleb128	0
.L4306:
	.section	.debug_info,,n
	.sleb128	0
.L4295:
	.section	.debug_info,,n
	.sleb128	0
.L4290:
	.section	.debug_info,,n
	.sleb128	0
.L4275:
	.section	.debug_info,,n
	.sleb128	0
.L4255:
	.section	.debug_info,,n
.L4320:
	.sleb128	10
	.4byte		.L4317-.L2
	.byte		"Dem_GetEventMemoryOverflow"
	.byte		0
	.4byte		.L2369
	.uleb128	9220
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4318
	.4byte		.L4319
	.sleb128	3
	.4byte		.L2369
	.uleb128	9220
	.uleb128	32
	.byte		"DTCOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L4321
	.sleb128	3
	.4byte		.L2369
	.uleb128	9220
	.uleb128	32
	.byte		"OverflowIndication"
	.byte		0
	.4byte		.L4093
	.4byte		.L4322
.L4323:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9223
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4324
.L4325:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9224
	.uleb128	10
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L4326
.L4327:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9226
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4328
	.section	.debug_info,,n
	.sleb128	0
.L4317:
	.section	.debug_info,,n
.L4333:
	.sleb128	10
	.4byte		.L4330-.L2
	.byte		"Dem_SetDTCSuppression"
	.byte		0
	.4byte		.L2369
	.uleb128	9267
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4331
	.4byte		.L4332
	.sleb128	3
	.4byte		.L2369
	.uleb128	9267
	.uleb128	32
	.byte		"DTC"
	.byte		0
	.4byte		.L2419
	.4byte		.L4334
	.sleb128	3
	.4byte		.L2369
	.uleb128	9267
	.uleb128	32
	.byte		"DTCFormat"
	.byte		0
	.4byte		.L3335
	.4byte		.L4335
	.sleb128	3
	.4byte		.L2369
	.uleb128	9267
	.uleb128	32
	.byte		"SuppressionStatus"
	.byte		0
	.4byte		.L2417
	.4byte		.L4336
.L4337:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9271
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4338
.L4339:
	.sleb128	6
	.4byte		.L2369
	.uleb128	9272
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L4340:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9273
	.uleb128	12
	.byte		"found"
	.byte		0
	.4byte		.L2417
	.4byte		.L4341
.L4342:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9275
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4343
	.section	.debug_info,,n
	.sleb128	0
.L4330:
	.section	.debug_info,,n
.L4349:
	.sleb128	10
	.4byte		.L4345-.L2
	.byte		"Dem_DcmDisableDTCSetting"
	.byte		0
	.4byte		.L2369
	.uleb128	9327
	.uleb128	49
	.4byte		.L4348
	.byte		0x1
	.byte		0x1
	.4byte		.L4346
	.4byte		.L4347
	.sleb128	3
	.4byte		.L2369
	.uleb128	9327
	.uleb128	49
	.byte		"DTCGroup"
	.byte		0
	.4byte		.L2419
	.4byte		.L4350
	.sleb128	3
	.4byte		.L2369
	.uleb128	9327
	.uleb128	49
	.byte		"DTCKind"
	.byte		0
	.4byte		.L4351
	.4byte		.L4352
.L4353:
	.sleb128	6
	.4byte		.L2369
	.uleb128	9329
	.uleb128	10
	.byte		"intDtcGroup"
	.byte		0
	.4byte		.L2371
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L4354:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9330
	.uleb128	36
	.byte		"retVal"
	.byte		0
	.4byte		.L4348
	.4byte		.L4355
.L4356:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9332
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4357
	.section	.debug_info,,n
	.sleb128	0
.L4345:
	.section	.debug_info,,n
.L4362:
	.sleb128	10
	.4byte		.L4359-.L2
	.byte		"Dem_DcmEnableDTCSetting"
	.byte		0
	.4byte		.L2369
	.uleb128	9360
	.uleb128	49
	.4byte		.L4348
	.byte		0x1
	.byte		0x1
	.4byte		.L4360
	.4byte		.L4361
	.sleb128	3
	.4byte		.L2369
	.uleb128	9360
	.uleb128	49
	.byte		"DTCGroup"
	.byte		0
	.4byte		.L2419
	.4byte		.L4363
	.sleb128	3
	.4byte		.L2369
	.uleb128	9360
	.uleb128	49
	.byte		"DTCKind"
	.byte		0
	.4byte		.L4351
	.4byte		.L4364
.L4365:
	.sleb128	6
	.4byte		.L2369
	.uleb128	9362
	.uleb128	10
	.byte		"intDtcGroup"
	.byte		0
	.4byte		.L2371
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L4366:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9363
	.uleb128	36
	.byte		"retVal"
	.byte		0
	.4byte		.L4348
	.4byte		.L4367
.L4368:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9365
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4369
	.section	.debug_info,,n
	.sleb128	0
.L4359:
	.section	.debug_info,,n
.L4375:
	.sleb128	10
	.4byte		.L4371-.L2
	.byte		"Dem_DcmGetSeverityOfDTC"
	.byte		0
	.4byte		.L2369
	.uleb128	9392
	.uleb128	48
	.4byte		.L4374
	.byte		0x1
	.byte		0x1
	.4byte		.L4372
	.4byte		.L4373
	.sleb128	3
	.4byte		.L2369
	.uleb128	9392
	.uleb128	48
	.byte		"DTC"
	.byte		0
	.4byte		.L2419
	.4byte		.L4376
	.sleb128	3
	.4byte		.L2369
	.uleb128	9392
	.uleb128	48
	.byte		"DTCSeverity"
	.byte		0
	.4byte		.L4377
	.4byte		.L4379
.L4380:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9395
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L4381
.L4382:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9396
	.uleb128	35
	.byte		"retVal"
	.byte		0
	.4byte		.L4374
	.4byte		.L4383
.L4384:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9398
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4385
	.section	.debug_info,,n
	.sleb128	0
.L4371:
	.section	.debug_info,,n
.L4391:
	.sleb128	10
	.4byte		.L4387-.L2
	.byte		"Dem_DcmGetFunctionalUnitOfDTC"
	.byte		0
	.4byte		.L2369
	.uleb128	9428
	.uleb128	54
	.4byte		.L4390
	.byte		0x1
	.byte		0x1
	.4byte		.L4388
	.4byte		.L4389
	.sleb128	3
	.4byte		.L2369
	.uleb128	9428
	.uleb128	54
	.byte		"DTC"
	.byte		0
	.4byte		.L2419
	.4byte		.L4392
	.sleb128	3
	.4byte		.L2369
	.uleb128	9428
	.uleb128	54
	.byte		"DTCFunctionalUnit"
	.byte		0
	.4byte		.L2377
	.4byte		.L4393
.L4394:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9431
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L4395
.L4396:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9432
	.uleb128	41
	.byte		"retVal"
	.byte		0
	.4byte		.L4390
	.4byte		.L4397
.L4398:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9434
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4399
	.section	.debug_info,,n
	.sleb128	0
.L4387:
	.section	.debug_info,,n
.L4405:
	.sleb128	10
	.4byte		.L4401-.L2
	.byte		"Dem_DcmGetTranslationType"
	.byte		0
	.4byte		.L2369
	.uleb128	9462
	.uleb128	46
	.4byte		.L4404
	.byte		0x1
	.byte		0x1
	.4byte		.L4402
	.4byte		.L4403
.L4406:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9464
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4407
	.section	.debug_info,,n
	.sleb128	0
.L4401:
	.section	.debug_info,,n
.L4412:
	.sleb128	10
	.4byte		.L4409-.L2
	.byte		"Dem_Internal_GetFaultDetectionCounter"
	.byte		0
	.4byte		.L2369
	.uleb128	11875
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4410
	.4byte		.L4411
	.sleb128	3
	.4byte		.L2369
	.uleb128	11875
	.uleb128	32
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L4413
	.sleb128	3
	.4byte		.L2369
	.uleb128	11875
	.uleb128	32
	.byte		"FaultDetectionCounter"
	.byte		0
	.4byte		.L3433
	.4byte		.L4414
.L4415:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11878
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4416
.L4417:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11880
	.uleb128	11
	.byte		"counter"
	.byte		0
	.4byte		.L4418
	.4byte		.L4420
.L4421:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11881
	.uleb128	11
	.byte		"counterIndex"
	.byte		0
	.4byte		.L2391
	.4byte		.L4422
	.section	.debug_info,,n
	.sleb128	0
.L4409:
	.section	.debug_info,,n
.L4427:
	.sleb128	10
	.4byte		.L4424-.L2
	.byte		"Dem_GetFaultDetectionCounter"
	.byte		0
	.4byte		.L2369
	.uleb128	9483
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4425
	.4byte		.L4426
	.sleb128	3
	.4byte		.L2369
	.uleb128	9483
	.uleb128	32
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L4428
	.sleb128	3
	.4byte		.L2369
	.uleb128	9483
	.uleb128	32
	.byte		"FaultDetectionCounter"
	.byte		0
	.4byte		.L3433
	.4byte		.L4429
.L4430:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9486
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4431
.L4432:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9488
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4433
	.section	.debug_info,,n
	.sleb128	0
.L4424:
	.section	.debug_info,,n
.L4439:
	.sleb128	10
	.4byte		.L4435-.L2
	.byte		"Dem_DcmSetDTCFilter"
	.byte		0
	.4byte		.L2369
	.uleb128	9539
	.uleb128	41
	.4byte		.L4438
	.byte		0x1
	.byte		0x1
	.4byte		.L4436
	.4byte		.L4437
	.sleb128	3
	.4byte		.L2369
	.uleb128	9539
	.uleb128	41
	.byte		"DTCStatusMask"
	.byte		0
	.4byte		.L2567
	.4byte		.L4440
	.sleb128	3
	.4byte		.L2369
	.uleb128	9539
	.uleb128	41
	.byte		"DTCKind"
	.byte		0
	.4byte		.L4351
	.4byte		.L4441
	.sleb128	3
	.4byte		.L2369
	.uleb128	9539
	.uleb128	41
	.byte		"DTCFormat"
	.byte		0
	.4byte		.L3335
	.4byte		.L4442
	.sleb128	3
	.4byte		.L2369
	.uleb128	9539
	.uleb128	41
	.byte		"DTCOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L4443
	.sleb128	3
	.4byte		.L2369
	.uleb128	9539
	.uleb128	41
	.byte		"FilterWithSeverity"
	.byte		0
	.4byte		.L2417
	.4byte		.L4444
	.sleb128	3
	.4byte		.L2369
	.uleb128	9539
	.uleb128	41
	.byte		"DTCSeverityMask"
	.byte		0
	.4byte		.L4378
	.4byte		.L4445
	.sleb128	3
	.4byte		.L2369
	.uleb128	9539
	.uleb128	41
	.byte		"FilterForFaultDetectionCounter"
	.byte		0
	.4byte		.L2417
	.4byte		.L4446
.L4447:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9545
	.uleb128	28
	.byte		"retVal"
	.byte		0
	.4byte		.L4438
	.4byte		.L4448
.L4449:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9548
	.uleb128	10
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L4450
.L4451:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9551
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4452
	.section	.debug_info,,n
	.sleb128	0
.L4435:
	.section	.debug_info,,n
.L4457:
	.sleb128	10
	.4byte		.L4454-.L2
	.byte		"Dem_DcmGetDTCStatusAvailabilityMask"
	.byte		0
	.4byte		.L2369
	.uleb128	9594
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4455
	.4byte		.L4456
	.sleb128	3
	.4byte		.L2369
	.uleb128	9594
	.uleb128	32
	.byte		"DTCStatusMask"
	.byte		0
	.4byte		.L2566
	.4byte		.L4458
.L4459:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9597
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4460
.L4461:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9599
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4462
	.section	.debug_info,,n
	.sleb128	0
.L4454:
	.section	.debug_info,,n
.L4468:
	.sleb128	10
	.4byte		.L4464-.L2
	.byte		"Dem_DcmGetNumberOfFilteredDTC"
	.byte		0
	.4byte		.L2369
	.uleb128	9619
	.uleb128	54
	.4byte		.L4467
	.byte		0x1
	.byte		0x1
	.4byte		.L4465
	.4byte		.L4466
	.sleb128	3
	.4byte		.L2369
	.uleb128	9619
	.uleb128	54
	.byte		"NumberOfFilteredDTC"
	.byte		0
	.4byte		.L2610
	.4byte		.L4469
.L4470:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9621
	.uleb128	41
	.byte		"retVal"
	.byte		0
	.4byte		.L4467
	.4byte		.L4471
.L4472:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9622
	.uleb128	11
	.byte		"i"
	.byte		0
	.4byte		.L2391
	.4byte		.L4473
.L4474:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9624
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4475
	.section	.debug_info,,n
	.sleb128	0
.L4464:
	.section	.debug_info,,n
.L4481:
	.sleb128	10
	.4byte		.L4477-.L2
	.byte		"Dem_DcmGetNextFilteredDTC"
	.byte		0
	.4byte		.L2369
	.uleb128	9666
	.uleb128	54
	.4byte		.L4480
	.byte		0x1
	.byte		0x1
	.4byte		.L4478
	.4byte		.L4479
	.sleb128	3
	.4byte		.L2369
	.uleb128	9666
	.uleb128	54
	.byte		"DTC"
	.byte		0
	.4byte		.L4117
	.4byte		.L4482
	.sleb128	3
	.4byte		.L2369
	.uleb128	9666
	.uleb128	54
	.byte		"DTCStatus"
	.byte		0
	.4byte		.L2566
	.4byte		.L4483
.L4484:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9669
	.uleb128	12
	.byte		"dtcFound"
	.byte		0
	.4byte		.L2417
	.4byte		.L4485
.L4486:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9670
	.uleb128	11
	.byte		"i"
	.byte		0
	.4byte		.L2391
	.4byte		.L4487
.L4488:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9671
	.uleb128	41
	.byte		"retVal"
	.byte		0
	.4byte		.L4480
	.4byte		.L4489
.L4490:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9672
	.uleb128	11
	.byte		"intDtcIdx"
	.byte		0
	.4byte		.L2391
	.4byte		.L4491
.L4492:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9673
	.uleb128	20
	.byte		"currentEventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L4493
.L4494:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9674
	.uleb128	12
	.byte		"eventFound"
	.byte		0
	.4byte		.L2417
	.4byte		.L4495
.L4496:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9676
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4497
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4501
	.4byte		.L4498
	.4byte		.L4499
.L4502:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9696
	.uleb128	19
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L4503
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4507
	.4byte		.L4504
	.4byte		.L4505
.L4508:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9700
	.uleb128	76
	.byte		"pEvMemEntries"
	.byte		0
	.4byte		.L2406
	.4byte		.L4509
	.section	.debug_info,,n
	.sleb128	0
.L4507:
	.section	.debug_info,,n
	.sleb128	0
.L4501:
	.section	.debug_info,,n
	.sleb128	0
.L4477:
	.section	.debug_info,,n
.L4515:
	.sleb128	10
	.4byte		.L4511-.L2
	.byte		"Dem_DcmGetDTCByOccurrenceTime"
	.byte		0
	.4byte		.L2369
	.uleb128	9762
	.uleb128	54
	.4byte		.L4514
	.byte		0x1
	.byte		0x1
	.4byte		.L4512
	.4byte		.L4513
	.sleb128	3
	.4byte		.L2369
	.uleb128	9762
	.uleb128	54
	.byte		"DTCRequest"
	.byte		0
	.4byte		.L4516
	.4byte		.L4517
	.sleb128	3
	.4byte		.L2369
	.uleb128	9762
	.uleb128	54
	.byte		"DTC"
	.byte		0
	.4byte		.L4117
	.4byte		.L4518
.L4519:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9765
	.uleb128	41
	.byte		"retVal"
	.byte		0
	.4byte		.L4514
	.4byte		.L4520
.L4521:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9766
	.uleb128	20
	.byte		"eventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L4522
.L4523:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9768
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4524
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4528
	.4byte		.L4525
	.4byte		.L4526
.L4529:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9809
	.uleb128	17
	.byte		"intDtcIdx"
	.byte		0
	.4byte		.L2391
	.4byte		.L4530
	.section	.debug_info,,n
	.sleb128	0
.L4528:
	.section	.debug_info,,n
	.sleb128	0
.L4511:
	.section	.debug_info,,n
.L4535:
	.sleb128	10
	.4byte		.L4532-.L2
	.byte		"Dem_DcmGetFreezeFrameDataByDTC"
	.byte		0
	.4byte		.L2369
	.uleb128	9823
	.uleb128	55
	.4byte		.L3481
	.byte		0x1
	.byte		0x1
	.4byte		.L4533
	.4byte		.L4534
	.sleb128	3
	.4byte		.L2369
	.uleb128	9823
	.uleb128	55
	.byte		"DTC"
	.byte		0
	.4byte		.L2419
	.4byte		.L4536
	.sleb128	3
	.4byte		.L2369
	.uleb128	9823
	.uleb128	55
	.byte		"DTCOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L4537
	.sleb128	3
	.4byte		.L2369
	.uleb128	9823
	.uleb128	55
	.byte		"RecordNumber"
	.byte		0
	.4byte		.L2371
	.4byte		.L4538
	.sleb128	3
	.4byte		.L2369
	.uleb128	9823
	.uleb128	55
	.byte		"DestBuffer"
	.byte		0
	.4byte		.L2377
	.4byte		.L4539
	.sleb128	3
	.4byte		.L2369
	.uleb128	9823
	.uleb128	55
	.byte		"BufSize"
	.byte		0
	.4byte		.L2610
	.4byte		.L4540
.L4541:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9829
	.uleb128	42
	.byte		"retVal"
	.byte		0
	.4byte		.L3481
	.4byte		.L4542
.L4543:
	.sleb128	6
	.4byte		.L2369
	.uleb128	9830
	.uleb128	28
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	16
.L4544:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9831
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L4545
.L4546:
	.sleb128	6
	.4byte		.L2369
	.uleb128	9832
	.uleb128	11
	.byte		"ffIndex"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	10
.L4547:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9833
	.uleb128	60
	.byte		"pFFStorage"
	.byte		0
	.4byte		.L2467
	.4byte		.L4548
.L4549:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9834
	.uleb128	19
	.byte		"pFFData"
	.byte		0
	.4byte		.L2376
	.4byte		.L4550
.L4551:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9835
	.uleb128	11
	.byte		"ffClass"
	.byte		0
	.4byte		.L2391
	.4byte		.L4552
.L4553:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9836
	.uleb128	11
	.byte		"commonFFClass"
	.byte		0
	.4byte		.L2391
	.4byte		.L4554
.L4555:
	.sleb128	6
	.4byte		.L2369
	.uleb128	9837
	.uleb128	24
	.byte		"ffType"
	.byte		0
	.4byte		.L3741
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	12
.L4556:
	.sleb128	6
	.4byte		.L2369
	.uleb128	9838
	.uleb128	11
	.byte		"inOutSize"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L4557:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9839
	.uleb128	11
	.byte		"usedSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L4558
.L4559:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9840
	.uleb128	10
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L4560
.L4561:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9841
	.uleb128	11
	.byte		"commonFFSize"
	.byte		0
	.4byte		.L2391
	.4byte		.L4562
.L4563:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9842
	.uleb128	10
	.byte		"evMemEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L4564
.L4565:
	.sleb128	4
	.4byte		.L2369
	.uleb128	9844
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4566
	.section	.debug_info,,n
	.sleb128	0
.L4532:
	.section	.debug_info,,n
.L4571:
	.sleb128	10
	.4byte		.L4568-.L2
	.byte		"Dem_DcmSetFreezeFrameRecordFilter"
	.byte		0
	.4byte		.L2369
	.uleb128	10005
	.uleb128	41
	.4byte		.L4438
	.byte		0x1
	.byte		0x1
	.4byte		.L4569
	.4byte		.L4570
	.sleb128	3
	.4byte		.L2369
	.uleb128	10005
	.uleb128	41
	.byte		"DTCFormat"
	.byte		0
	.4byte		.L3335
	.4byte		.L4572
	.sleb128	3
	.4byte		.L2369
	.uleb128	10005
	.uleb128	41
	.byte		"NumberOfFilteredRecords"
	.byte		0
	.4byte		.L2610
	.4byte		.L4573
.L4574:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10008
	.uleb128	28
	.byte		"retVal"
	.byte		0
	.4byte		.L4438
	.4byte		.L4575
.L4576:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10010
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4577
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4581
	.4byte		.L4578
	.4byte		.L4579
.L4582:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10031
	.uleb128	72
	.byte		"pEntries"
	.byte		0
	.4byte		.L3687
	.4byte		.L4583
.L4584:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10033
	.uleb128	13
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L4585
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4589
	.4byte		.L4586
	.4byte		.L4587
.L4590:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10042
	.uleb128	38
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L4591
	.section	.debug_info,,n
	.sleb128	0
.L4589:
	.section	.debug_info,,n
	.sleb128	0
.L4581:
	.section	.debug_info,,n
	.sleb128	0
.L4568:
	.section	.debug_info,,n
.L4596:
	.sleb128	10
	.4byte		.L4593-.L2
	.byte		"Dem_DcmGetNextFilteredRecord"
	.byte		0
	.4byte		.L2369
	.uleb128	10073
	.uleb128	54
	.4byte		.L4480
	.byte		0x1
	.byte		0x1
	.4byte		.L4594
	.4byte		.L4595
	.sleb128	3
	.4byte		.L2369
	.uleb128	10073
	.uleb128	54
	.byte		"DTC"
	.byte		0
	.4byte		.L4117
	.4byte		.L4597
	.sleb128	3
	.4byte		.L2369
	.uleb128	10073
	.uleb128	54
	.byte		"RecordNumber"
	.byte		0
	.4byte		.L2377
	.4byte		.L4598
.L4599:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10076
	.uleb128	41
	.byte		"retVal"
	.byte		0
	.4byte		.L4480
	.4byte		.L4600
.L4601:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10078
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4602
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4606
	.4byte		.L4603
	.4byte		.L4604
.L4607:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10090
	.uleb128	75
	.byte		"pEntries"
	.byte		0
	.4byte		.L3687
	.4byte		.L4608
.L4609:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10092
	.uleb128	16
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L4610
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4614
	.4byte		.L4611
	.4byte		.L4612
.L4615:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10095
	.uleb128	47
	.byte		"eventId"
	.byte		0
	.4byte		.L2535
	.4byte		.L4616
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4620
	.4byte		.L4617
	.4byte		.L4618
.L4621:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10099
	.uleb128	41
	.byte		"internalDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L4622
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4626
	.4byte		.L4623
	.4byte		.L4624
.L4627:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10118
	.uleb128	46
	.byte		"ffRecNumClass"
	.byte		0
	.4byte		.L2656
	.4byte		.L4628
	.section	.debug_info,,n
	.sleb128	0
.L4626:
	.section	.debug_info,,n
	.sleb128	0
.L4620:
	.section	.debug_info,,n
	.sleb128	0
.L4614:
	.section	.debug_info,,n
	.sleb128	0
.L4606:
	.section	.debug_info,,n
	.sleb128	0
.L4593:
	.section	.debug_info,,n
.L4633:
	.sleb128	10
	.4byte		.L4630-.L2
	.byte		"Dem_DcmGetNextFilteredDTCAndFDC"
	.byte		0
	.4byte		.L2369
	.uleb128	10277
	.uleb128	54
	.4byte		.L4480
	.byte		0x1
	.byte		0x1
	.4byte		.L4631
	.4byte		.L4632
	.sleb128	3
	.4byte		.L2369
	.uleb128	10277
	.uleb128	54
	.byte		"DTC"
	.byte		0
	.4byte		.L4117
	.4byte		.L4634
	.sleb128	3
	.4byte		.L2369
	.uleb128	10277
	.uleb128	54
	.byte		"DTCFaultDetectionCounter"
	.byte		0
	.4byte		.L3433
	.4byte		.L4635
.L4636:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10280
	.uleb128	12
	.byte		"dtcFound"
	.byte		0
	.4byte		.L2417
	.4byte		.L4637
.L4638:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10281
	.uleb128	11
	.byte		"i"
	.byte		0
	.4byte		.L2391
	.4byte		.L4639
.L4640:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10282
	.uleb128	41
	.byte		"retVal"
	.byte		0
	.4byte		.L4480
	.4byte		.L4641
.L4642:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10284
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4643
	.section	.debug_info,,n
	.sleb128	0
.L4630:
	.section	.debug_info,,n
.L4648:
	.sleb128	10
	.4byte		.L4645-.L2
	.byte		"Dem_DcmGetNextFilteredDTCAndSeverity"
	.byte		0
	.4byte		.L2369
	.uleb128	10326
	.uleb128	54
	.4byte		.L4480
	.byte		0x1
	.byte		0x1
	.4byte		.L4646
	.4byte		.L4647
	.sleb128	3
	.4byte		.L2369
	.uleb128	10326
	.uleb128	54
	.byte		"DTC"
	.byte		0
	.4byte		.L4117
	.4byte		.L4649
	.sleb128	3
	.4byte		.L2369
	.uleb128	10326
	.uleb128	54
	.byte		"DTCStatus"
	.byte		0
	.4byte		.L2566
	.4byte		.L4650
	.sleb128	3
	.4byte		.L2369
	.uleb128	10326
	.uleb128	54
	.byte		"DTCSeverity"
	.byte		0
	.4byte		.L4377
	.4byte		.L4651
	.sleb128	3
	.4byte		.L2369
	.uleb128	10326
	.uleb128	54
	.byte		"DTCFunctionalUnit"
	.byte		0
	.4byte		.L2377
	.4byte		.L4652
.L4653:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10332
	.uleb128	12
	.byte		"dtcFound"
	.byte		0
	.4byte		.L2417
	.4byte		.L4654
.L4655:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10333
	.uleb128	11
	.byte		"i"
	.byte		0
	.4byte		.L2391
	.4byte		.L4656
.L4657:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10334
	.uleb128	41
	.byte		"retVal"
	.byte		0
	.4byte		.L4480
	.4byte		.L4658
.L4659:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10336
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4660
	.section	.debug_info,,n
	.sleb128	0
.L4645:
	.section	.debug_info,,n
.L4666:
	.sleb128	10
	.4byte		.L4662-.L2
	.byte		"Dem_DcmDisableDTCRecordUpdate"
	.byte		0
	.4byte		.L2369
	.uleb128	10387
	.uleb128	54
	.4byte		.L4665
	.byte		0x1
	.byte		0x1
	.4byte		.L4663
	.4byte		.L4664
	.sleb128	3
	.4byte		.L2369
	.uleb128	10387
	.uleb128	54
	.byte		"DTC"
	.byte		0
	.4byte		.L2419
	.4byte		.L4667
	.sleb128	3
	.4byte		.L2369
	.uleb128	10387
	.uleb128	54
	.byte		"DTCOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L4668
.L4669:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10389
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L4670
.L4671:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10390
	.uleb128	41
	.byte		"retVal"
	.byte		0
	.4byte		.L4665
	.4byte		.L4672
.L4673:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10392
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4674
	.section	.debug_info,,n
	.sleb128	0
.L4662:
	.section	.debug_info,,n
.L4679:
	.sleb128	10
	.4byte		.L4676-.L2
	.byte		"Dem_DcmEnableDTCRecordUpdate"
	.byte		0
	.4byte		.L2369
	.uleb128	10422
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4677
	.4byte		.L4678
.L4680:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10424
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4681
.L4682:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10426
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4683
	.section	.debug_info,,n
	.sleb128	0
.L4676:
	.section	.debug_info,,n
.L4688:
	.sleb128	10
	.4byte		.L4685-.L2
	.byte		"Dem_DcmGetOBDFreezeFrameData"
	.byte		0
	.4byte		.L2369
	.uleb128	10440
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4686
	.4byte		.L4687
	.sleb128	9
	.4byte		.L2369
	.uleb128	10440
	.uleb128	32
	.byte		"DTC"
	.byte		0
	.4byte		.L4117
	.sleb128	2
	.byte		0x90
	.uleb128	3
	.sleb128	9
	.4byte		.L2369
	.uleb128	10440
	.uleb128	32
	.byte		"DestBuffer"
	.byte		0
	.4byte		.L2377
	.sleb128	2
	.byte		0x90
	.uleb128	4
	.sleb128	9
	.4byte		.L2369
	.uleb128	10440
	.uleb128	32
	.byte		"BufSize"
	.byte		0
	.4byte		.L2610
	.sleb128	2
	.byte		0x90
	.uleb128	5
.L4689:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10445
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4690
	.section	.debug_info,,n
	.sleb128	0
.L4685:
	.section	.debug_info,,n
.L4696:
	.sleb128	10
	.4byte		.L4692-.L2
	.byte		"Dem_DcmGetSizeOfFreezeFrameByDTC"
	.byte		0
	.4byte		.L2369
	.uleb128	10497
	.uleb128	50
	.4byte		.L4695
	.byte		0x1
	.byte		0x1
	.4byte		.L4693
	.4byte		.L4694
	.sleb128	3
	.4byte		.L2369
	.uleb128	10497
	.uleb128	50
	.byte		"DTC"
	.byte		0
	.4byte		.L2419
	.4byte		.L4697
	.sleb128	3
	.4byte		.L2369
	.uleb128	10497
	.uleb128	50
	.byte		"DTCOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L4698
	.sleb128	3
	.4byte		.L2369
	.uleb128	10497
	.uleb128	50
	.byte		"RecordNumber"
	.byte		0
	.4byte		.L2371
	.4byte		.L4699
	.sleb128	3
	.4byte		.L2369
	.uleb128	10497
	.uleb128	50
	.byte		"SizeOfFreezeFrame"
	.byte		0
	.4byte		.L2610
	.4byte		.L4700
.L4701:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10502
	.uleb128	37
	.byte		"retVal"
	.byte		0
	.4byte		.L4695
	.4byte		.L4702
.L4703:
	.sleb128	6
	.4byte		.L2369
	.uleb128	10503
	.uleb128	28
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	12
.L4704:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10504
	.uleb128	10
	.byte		"evMemEntryIndex"
	.byte		0
	.4byte		.L2371
	.4byte		.L4705
.L4706:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10505
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L4707
.L4708:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10506
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L4709
.L4710:
	.sleb128	6
	.4byte		.L2369
	.uleb128	10507
	.uleb128	11
	.byte		"ffSize"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L4711:
	.sleb128	6
	.4byte		.L2369
	.uleb128	10508
	.uleb128	24
	.byte		"ffType"
	.byte		0
	.4byte		.L3741
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	16
.L4712:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10509
	.uleb128	11
	.byte		"ffClass"
	.byte		0
	.4byte		.L2391
	.4byte		.L4713
.L4714:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10510
	.uleb128	11
	.byte		"commonFFClass"
	.byte		0
	.4byte		.L2391
	.4byte		.L4715
.L4716:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10516
	.uleb128	10
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L4717
.L4718:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10517
	.uleb128	60
	.byte		"pFFStorage"
	.byte		0
	.4byte		.L2467
	.4byte		.L4719
.L4720:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10519
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4721
	.section	.debug_info,,n
	.sleb128	0
.L4692:
	.section	.debug_info,,n
.L4727:
	.sleb128	10
	.4byte		.L4723-.L2
	.byte		"Dem_GetStatusIndicatorsOfDTC"
	.byte		0
	.4byte		.L2369
	.uleb128	10694
	.uleb128	56
	.4byte		.L4726
	.byte		0x1
	.byte		0x1
	.4byte		.L4724
	.4byte		.L4725
	.sleb128	3
	.4byte		.L2369
	.uleb128	10694
	.uleb128	56
	.byte		"DTC"
	.byte		0
	.4byte		.L2419
	.4byte		.L4728
	.sleb128	3
	.4byte		.L2369
	.uleb128	10694
	.uleb128	56
	.byte		"DTCOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L4729
	.sleb128	3
	.4byte		.L2369
	.uleb128	10694
	.uleb128	56
	.byte		"DTCStatus"
	.byte		0
	.4byte		.L2377
	.4byte		.L4730
.L4731:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10698
	.uleb128	43
	.byte		"retVal"
	.byte		0
	.4byte		.L4726
	.4byte		.L4732
.L4733:
	.sleb128	6
	.4byte		.L2369
	.uleb128	10699
	.uleb128	28
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L4734:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10700
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L4735
.L4736:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10701
	.uleb128	10
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L4737
.L4738:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10703
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4739
	.section	.debug_info,,n
	.sleb128	0
.L4723:
	.section	.debug_info,,n
.L4744:
	.sleb128	10
	.4byte		.L4741-.L2
	.byte		"Dem_DcmGetExtendedDataRecordByDTC"
	.byte		0
	.4byte		.L2369
	.uleb128	10755
	.uleb128	58
	.4byte		.L3546
	.byte		0x1
	.byte		0x1
	.4byte		.L4742
	.4byte		.L4743
	.sleb128	3
	.4byte		.L2369
	.uleb128	10755
	.uleb128	58
	.byte		"DTC"
	.byte		0
	.4byte		.L2419
	.4byte		.L4745
	.sleb128	3
	.4byte		.L2369
	.uleb128	10755
	.uleb128	58
	.byte		"DTCOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L4746
	.sleb128	3
	.4byte		.L2369
	.uleb128	10755
	.uleb128	58
	.byte		"ExtendedDataNumber"
	.byte		0
	.4byte		.L2371
	.4byte		.L4747
	.sleb128	3
	.4byte		.L2369
	.uleb128	10755
	.uleb128	58
	.byte		"DestBuffer"
	.byte		0
	.4byte		.L2377
	.4byte		.L4748
	.sleb128	3
	.4byte		.L2369
	.uleb128	10755
	.uleb128	58
	.byte		"BufSize"
	.byte		0
	.4byte		.L2610
	.4byte		.L4749
.L4750:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10761
	.uleb128	45
	.byte		"retVal"
	.byte		0
	.4byte		.L3546
	.4byte		.L4751
.L4752:
	.sleb128	6
	.4byte		.L2369
	.uleb128	10762
	.uleb128	28
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L4753:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10763
	.uleb128	10
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L4754
.L4755:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10765
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4756
	.section	.debug_info,,n
	.sleb128	8
	.4byte		.L4760
	.4byte		.L4757
	.4byte		.L4758
.L4761:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10778
	.uleb128	32
	.byte		"intDtc"
	.byte		0
	.4byte		.L2674
	.4byte		.L4762
	.section	.debug_info,,n
	.sleb128	0
.L4760:
	.section	.debug_info,,n
	.sleb128	0
.L4741:
	.section	.debug_info,,n
.L4767:
	.sleb128	10
	.4byte		.L4764-.L2
	.byte		"Dem_DcmGetSizeOfExtendedDataRecordByDTC"
	.byte		0
	.4byte		.L2369
	.uleb128	10827
	.uleb128	50
	.4byte		.L4695
	.byte		0x1
	.byte		0x1
	.4byte		.L4765
	.4byte		.L4766
	.sleb128	3
	.4byte		.L2369
	.uleb128	10827
	.uleb128	50
	.byte		"DTC"
	.byte		0
	.4byte		.L2419
	.4byte		.L4768
	.sleb128	3
	.4byte		.L2369
	.uleb128	10827
	.uleb128	50
	.byte		"DTCOrigin"
	.byte		0
	.4byte		.L2579
	.4byte		.L4769
	.sleb128	3
	.4byte		.L2369
	.uleb128	10827
	.uleb128	50
	.byte		"ExtendedDataNumber"
	.byte		0
	.4byte		.L2371
	.4byte		.L4770
	.sleb128	3
	.4byte		.L2369
	.uleb128	10827
	.uleb128	50
	.byte		"SizeOfExtendedDataRecord"
	.byte		0
	.4byte		.L2610
	.4byte		.L4771
.L4772:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10832
	.uleb128	37
	.byte		"retVal"
	.byte		0
	.4byte		.L4695
	.4byte		.L4773
.L4774:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10833
	.uleb128	10
	.byte		"originRetVal"
	.byte		0
	.4byte		.L2371
	.4byte		.L4775
.L4776:
	.sleb128	6
	.4byte		.L2369
	.uleb128	10834
	.uleb128	28
	.byte		"pEvMemEntry"
	.byte		0
	.4byte		.L2396
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	12
.L4777:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10835
	.uleb128	11
	.byte		"intDtc"
	.byte		0
	.4byte		.L2391
	.4byte		.L4778
.L4779:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10836
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L4780
.L4781:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10837
	.uleb128	10
	.byte		"internalOrigin"
	.byte		0
	.4byte		.L2371
	.4byte		.L4782
.L4783:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10838
	.uleb128	10
	.byte		"startRange"
	.byte		0
	.4byte		.L2371
	.4byte		.L4784
.L4785:
	.sleb128	6
	.4byte		.L2369
	.uleb128	10839
	.uleb128	11
	.byte		"tmpBufSize"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x92
	.uleb128	1
	.sleb128	8
.L4786:
	.sleb128	4
	.4byte		.L2369
	.uleb128	10841
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4787
	.section	.debug_info,,n
	.sleb128	0
.L4764:
	.section	.debug_info,,n
.L4792:
	.sleb128	10
	.4byte		.L4789-.L2
	.byte		"Dem_GetSIStatus"
	.byte		0
	.4byte		.L2369
	.uleb128	11039
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4790
	.4byte		.L4791
	.sleb128	3
	.4byte		.L2369
	.uleb128	11039
	.uleb128	32
	.byte		"EventId"
	.byte		0
	.4byte		.L2390
	.4byte		.L4793
	.sleb128	3
	.4byte		.L2369
	.uleb128	11039
	.uleb128	32
	.byte		"Status"
	.byte		0
	.4byte		.L2377
	.4byte		.L4794
.L4795:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11042
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4796
.L4797:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11044
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4798
	.section	.debug_info,,n
	.sleb128	0
.L4789:
	.section	.debug_info,,n
.L4803:
	.sleb128	10
	.4byte		.L4800-.L2
	.byte		"Dem_DcmSetEvMemDTCFilter"
	.byte		0
	.4byte		.L2369
	.uleb128	11779
	.uleb128	41
	.4byte		.L4438
	.byte		0x1
	.byte		0x1
	.4byte		.L4801
	.4byte		.L4802
.L4804:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11781
	.uleb128	28
	.byte		"retVal"
	.byte		0
	.4byte		.L4438
	.4byte		.L4805
.L4806:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11783
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4807
	.section	.debug_info,,n
	.sleb128	0
.L4800:
	.section	.debug_info,,n
.L4812:
	.sleb128	10
	.4byte		.L4809-.L2
	.byte		"Dem_DcmGetNextFilteredEvMemDTC"
	.byte		0
	.4byte		.L2369
	.uleb128	11800
	.uleb128	54
	.4byte		.L4480
	.byte		0x1
	.byte		0x1
	.4byte		.L4810
	.4byte		.L4811
	.sleb128	3
	.4byte		.L2369
	.uleb128	11800
	.uleb128	54
	.byte		"DTC"
	.byte		0
	.4byte		.L4117
	.4byte		.L4813
	.sleb128	3
	.4byte		.L2369
	.uleb128	11800
	.uleb128	54
	.byte		"DTCStatus"
	.byte		0
	.4byte		.L2566
	.4byte		.L4814
.L4815:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11804
	.uleb128	41
	.byte		"retVal"
	.byte		0
	.4byte		.L4480
	.4byte		.L4816
.L4817:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11805
	.uleb128	12
	.byte		"dtcFound"
	.byte		0
	.4byte		.L2417
	.4byte		.L4818
.L4819:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11806
	.uleb128	10
	.byte		"i"
	.byte		0
	.4byte		.L2371
	.4byte		.L4820
.L4821:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11807
	.uleb128	20
	.byte		"evId"
	.byte		0
	.4byte		.L2390
	.4byte		.L4822
.L4823:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11808
	.uleb128	11
	.byte		"udsDtcValue"
	.byte		0
	.4byte		.L2419
	.4byte		.L4824
.L4825:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11809
	.uleb128	11
	.byte		"intDtcIdx"
	.byte		0
	.4byte		.L2391
	.4byte		.L4826
.L4827:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11810
	.uleb128	64
	.byte		"pEvMemEntries"
	.byte		0
	.4byte		.L2406
	.4byte		.L4828
.L4829:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11812
	.uleb128	10
	.byte		"numEvMemEntries"
	.byte		0
	.4byte		.L2371
	.4byte		.L4830
.L4831:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11814
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4832
	.section	.debug_info,,n
	.sleb128	0
.L4809:
	.section	.debug_info,,n
.L4837:
	.sleb128	2
	.4byte		.L4834-.L2
	.byte		"Dem_DcmControlDTCStatusChangedNotification"
	.byte		0
	.4byte		.L2369
	.uleb128	11852
	.uleb128	22
	.byte		0x1
	.byte		0x1
	.4byte		.L4835
	.4byte		.L4836
	.sleb128	9
	.4byte		.L2369
	.uleb128	11852
	.uleb128	22
	.byte		"TriggerNotification"
	.byte		0
	.4byte		.L2417
	.sleb128	2
	.byte		0x90
	.uleb128	3
.L4838:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11854
	.uleb128	4
	.byte		"noErrors"
	.byte		0
	.4byte		.L2417
	.4byte		.L4839
	.section	.debug_info,,n
	.sleb128	0
.L4834:
	.section	.debug_info,,n
.L4844:
	.sleb128	10
	.4byte		.L4841-.L2
	.byte		"Dem_GetComponentFailed"
	.byte		0
	.4byte		.L2369
	.uleb128	11867
	.uleb128	32
	.4byte		.L2837
	.byte		0x1
	.byte		0x1
	.4byte		.L4842
	.4byte		.L4843
	.sleb128	9
	.4byte		.L2369
	.uleb128	11867
	.uleb128	32
	.byte		"ComponentId"
	.byte		0
	.4byte		.L4845
	.sleb128	2
	.byte		0x90
	.uleb128	3
	.sleb128	9
	.4byte		.L2369
	.uleb128	11867
	.uleb128	32
	.byte		"ComponentFailed"
	.byte		0
	.4byte		.L4093
	.sleb128	2
	.byte		0x90
	.uleb128	4
.L4846:
	.sleb128	4
	.4byte		.L2369
	.uleb128	11869
	.uleb128	19
	.byte		"retVal"
	.byte		0
	.4byte		.L2837
	.4byte		.L4847
	.section	.debug_info,,n
	.sleb128	0
.L4841:
	.section	.debug_info,,n
.L4848:
	.sleb128	11
	.byte		0x1
	.byte		0x1
	.4byte		.L4849
	.uleb128	193
	.uleb128	33
	.byte		"Dem_LTHashValue"
	.byte		0
	.4byte		.L4850
	.section	.debug_info,,n
.L4851:
	.sleb128	11
	.byte		0x1
	.byte		0x1
	.4byte		.L4849
	.uleb128	198
	.uleb128	33
	.byte		"Dem_LTtoPCHashValue"
	.byte		0
	.4byte		.L4850
.L4852:
	.sleb128	11
	.byte		0x1
	.byte		0x1
	.4byte		.L4853
	.uleb128	252
	.uleb128	44
	.byte		"Dem_NvUdsStatus"
	.byte		0
	.4byte		.L4854
	.0byte		.L4852
.L4856:
	.sleb128	11
	.byte		0x1
	.byte		0x1
	.4byte		.L4853
	.uleb128	253
	.uleb128	50
	.byte		"Dem_NvOpCycleState"
	.byte		0
	.4byte		.L4857
.L4859:
	.sleb128	11
	.byte		0x1
	.byte		0x1
	.4byte		.L4853
	.uleb128	254
	.uleb128	38
	.byte		"Dem_NvAdmin"
	.byte		0
	.4byte		.L4860
.L4862:
	.sleb128	11
	.byte		0x1
	.byte		0x1
	.4byte		.L4863
	.uleb128	114
	.uleb128	30
	.byte		"Dem_NvStorageOngoing"
	.byte		0
	.4byte		.L2417
.L4864:
	.sleb128	11
	.byte		0x1
	.byte		0x1
	.4byte		.L4863
	.uleb128	116
	.uleb128	30
	.byte		"Dem_NvAllStorageOngoing"
	.byte		0
	.4byte		.L2417
.L4865:
	.sleb128	11
	.byte		0x1
	.byte		0x1
	.4byte		.L4866
	.uleb128	81
	.uleb128	39
	.byte		"Dem_LCfg"
	.byte		0
	.4byte		.L4867
.L4870:
	.sleb128	11
	.byte		0x1
	.byte		0x1
	.4byte		.L4866
	.uleb128	89
	.uleb128	30
	.byte		"Dem_SiModified"
	.byte		0
	.4byte		.L2417
	.section	.debug_info,,n
.L4871:
	.sleb128	12
	.byte		0x1
	.4byte		.L2369
	.uleb128	587
	.uleb128	25
	.byte		"Dem_OriginMasks"
	.byte		0
	.4byte		.L4872
	.sleb128	5
	.byte		0x3
	.4byte		Dem_OriginMasks
	.section	.debug_info,,n
.L4874:
	.sleb128	12
	.byte		0x1
	.4byte		.L2369
	.uleb128	591
	.uleb128	25
	.byte		"Dem_MaxNumEvMemEntries"
	.byte		0
	.4byte		.L4875
	.sleb128	5
	.byte		0x3
	.4byte		Dem_MaxNumEvMemEntries
	.section	.debug_info,,n
.L4877:
	.sleb128	6
	.4byte		.L2369
	.uleb128	611
	.uleb128	30
	.byte		"UdsStatusModified"
	.byte		0
	.4byte		.L2417
	.sleb128	5
	.byte		0x3
	.4byte		UdsStatusModified
	.lcomm		UdsStatusModified,1,0
.L4878:
	.sleb128	6
	.4byte		.L2369
	.uleb128	616
	.uleb128	30
	.byte		"UpdateIndicators"
	.byte		0
	.4byte		.L2417
	.sleb128	5
	.byte		0x3
	.4byte		UpdateIndicators
	.lcomm		UpdateIndicators,1,0
.L4879:
	.sleb128	6
	.4byte		.L2369
	.uleb128	628
	.uleb128	30
	.byte		"Dem_NvTriggerImmediateNvStorage"
	.byte		0
	.4byte		.L2417
	.sleb128	5
	.byte		0x3
	.4byte		Dem_NvTriggerImmediateNvStorage
	.lcomm		Dem_NvTriggerImmediateNvStorage,1,0
.L4880:
	.sleb128	6
	.4byte		.L2369
	.uleb128	667
	.uleb128	28
	.byte		"DemBitToHandle"
	.byte		0
	.4byte		.L2371
	.sleb128	5
	.byte		0x3
	.4byte		DemBitToHandle
	.lcomm		DemBitToHandle,1,0
.L4881:
	.sleb128	6
	.4byte		.L2369
	.uleb128	672
	.uleb128	44
	.byte		"Dem_OpCycleQueue"
	.byte		0
	.4byte		.L4882
	.sleb128	5
	.byte		0x3
	.4byte		Dem_OpCycleQueue
	.lcomm		Dem_OpCycleQueue,3,0
.L4884:
	.sleb128	6
	.4byte		.L2369
	.uleb128	690
	.uleb128	29
	.byte		"DemByteToHandle"
	.byte		0
	.4byte		.L2391
	.sleb128	5
	.byte		0x3
	.4byte		DemByteToHandle
	.lcomm		DemByteToHandle,2,1
.L4885:
	.sleb128	6
	.4byte		.L2369
	.uleb128	708
	.uleb128	29
	.byte		"DTCRecordUpdateDisabled"
	.byte		0
	.4byte		.L2419
	.sleb128	5
	.byte		0x3
	.4byte		DTCRecordUpdateDisabled
	.lcomm		DTCRecordUpdateDisabled,4,2
.L4886:
	.sleb128	6
	.4byte		.L2369
	.uleb128	739
	.uleb128	36
	.byte		"DTCFilter"
	.byte		0
	.4byte		.L4887
	.sleb128	5
	.byte		0x3
	.4byte		DTCFilter
	.lcomm		DTCFilter,12,1
.L4889:
	.sleb128	6
	.4byte		.L2369
	.uleb128	744
	.uleb128	41
	.byte		"EvMemDTCFilter"
	.byte		0
	.4byte		.L4890
	.sleb128	5
	.byte		0x3
	.4byte		EvMemDTCFilter
	.lcomm		EvMemDTCFilter,2,0
.L4892:
	.sleb128	6
	.4byte		.L2369
	.uleb128	749
	.uleb128	42
	.byte		"DTCRecordFilter"
	.byte		0
	.4byte		.L4893
	.sleb128	5
	.byte		0x3
	.4byte		DTCRecordFilter
	.lcomm		DTCRecordFilter,5,0
.L4895:
	.sleb128	6
	.4byte		.L2369
	.uleb128	754
	.uleb128	35
	.byte		"CacheUdsDTC"
	.byte		0
	.4byte		.L4896
	.sleb128	5
	.byte		0x3
	.4byte		CacheUdsDTC
	.lcomm		CacheUdsDTC,8,2
.L4898:
	.sleb128	6
	.4byte		.L2369
	.uleb128	759
	.uleb128	41
	.byte		"DemClearState"
	.byte		0
	.4byte		.L4899
	.sleb128	5
	.byte		0x3
	.4byte		DemClearState
	.lcomm		DemClearState,4,2
.L4901:
	.sleb128	6
	.4byte		.L2369
	.uleb128	764
	.uleb128	40
	.byte		"DemClearData"
	.byte		0
	.4byte		.L4902
	.sleb128	5
	.byte		0x3
	.4byte		DemClearData
	.lcomm		DemClearData,16,2
.L4904:
	.sleb128	6
	.4byte		.L2369
	.uleb128	769
	.uleb128	44
	.byte		"DemOpCycleChange"
	.byte		0
	.4byte		.L4905
	.sleb128	5
	.byte		0x3
	.4byte		DemOpCycleChange
	.lcomm		DemOpCycleChange,8,2
.L4907:
	.sleb128	12
	.byte		0x1
	.4byte		.L2369
	.uleb128	786
	.uleb128	51
	.byte		"Dem_pPbCfg"
	.byte		0
	.4byte		.L3990
	.sleb128	5
	.byte		0x3
	.4byte		Dem_pPbCfg
	.comm		Dem_pPbCfg,4,2
.L4908:
	.sleb128	12
	.byte		0x1
	.4byte		.L2369
	.uleb128	791
	.uleb128	33
	.byte		"Dem_InitState"
	.byte		0
	.4byte		.L4909
	.sleb128	5
	.byte		0x3
	.4byte		Dem_InitState
	.comm		Dem_InitState,4,2
	.section	.debug_info,,n
.L4883:
	.sleb128	13
	.4byte		.L2369
	.uleb128	370
	.uleb128	14
	.4byte		.L4911-.L2
	.byte		"Dem_CircularQueueType_Tag"
	.byte		0
	.uleb128	3
	.section	.debug_info,,n
.L313:
	.sleb128	14
	.byte		"rear"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L314:
	.sleb128	14
	.byte		"front"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	1
	.byte		0x1
.L315:
	.sleb128	14
	.byte		"num_items"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	2
	.byte		0x1
	.sleb128	0
.L4911:
.L2849:
	.sleb128	13
	.4byte		.L2369
	.uleb128	370
	.uleb128	14
	.4byte		.L4912-.L2
	.byte		"Dem_StoreFFInput_Tag"
	.byte		0
	.uleb128	12
.L308:
	.sleb128	14
	.byte		"p_storage"
	.byte		0
	.4byte		.L2467
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L309:
	.sleb128	14
	.byte		"num_entries"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
.L310:
	.sleb128	14
	.byte		"int_origin"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	6
	.byte		0x1
.L311:
	.sleb128	14
	.byte		"event_prio"
	.byte		0
	.4byte		.L4913
	.sleb128	2
	.byte		0x23
	.uleb128	7
	.byte		0x1
.L312:
	.sleb128	14
	.byte		"event_mem_entry_index"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	8
	.byte		0x1
	.sleb128	0
.L4912:
.L4906:
	.sleb128	13
	.4byte		.L2369
	.uleb128	370
	.uleb128	14
	.4byte		.L4914-.L2
	.byte		"Dem_OpCycleChangeType_Tag"
	.byte		0
	.uleb128	8
.L306:
	.sleb128	14
	.byte		"state"
	.byte		0
	.4byte		.L4915
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L307:
	.sleb128	14
	.byte		"in_param_op_cycle_id"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
	.sleb128	0
.L4914:
.L4903:
	.sleb128	13
	.4byte		.L2369
	.uleb128	370
	.uleb128	14
	.4byte		.L4917-.L2
	.byte		"Dem_ClearDataType_Tag"
	.byte		0
	.uleb128	16
.L299:
	.sleb128	14
	.byte		"in_param_dtc"
	.byte		0
	.4byte		.L2419
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L300:
	.sleb128	14
	.byte		"next_to_clear"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
.L301:
	.sleb128	14
	.byte		"in_param_dtc_format"
	.byte		0
	.4byte		.L3335
	.sleb128	2
	.byte		0x23
	.uleb128	6
	.byte		0x1
.L302:
	.sleb128	14
	.byte		"in_param_dtc_origin"
	.byte		0
	.4byte		.L2579
	.sleb128	2
	.byte		0x23
	.uleb128	7
	.byte		0x1
.L303:
	.sleb128	14
	.byte		"response"
	.byte		0
	.4byte		.L3313
	.sleb128	2
	.byte		0x23
	.uleb128	8
	.byte		0x1
.L304:
	.sleb128	14
	.byte		"internal_dtc_group"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	9
	.byte		0x1
.L305:
	.sleb128	14
	.byte		"user_clear_dtc"
	.byte		0
	.4byte		.L3821
	.sleb128	2
	.byte		0x23
	.uleb128	12
	.byte		0x1
	.sleb128	0
.L4917:
.L4897:
	.sleb128	13
	.4byte		.L2369
	.uleb128	370
	.uleb128	14
	.4byte		.L4918-.L2
	.byte		"DTCCache_Tag"
	.byte		0
	.uleb128	8
.L297:
	.sleb128	14
	.byte		"dtc_value"
	.byte		0
	.4byte		.L2419
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L298:
	.sleb128	14
	.byte		"int_dtc_index"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
	.sleb128	0
.L4918:
.L4894:
	.sleb128	13
	.4byte		.L2369
	.uleb128	370
	.uleb128	14
	.4byte		.L4919-.L2
	.byte		"DTCRecordFilter_Tag"
	.byte		0
	.uleb128	5
.L292:
	.sleb128	14
	.byte		"next_ev_mem_entry_index"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L293:
	.sleb128	14
	.byte		"next_ev_mem_entry_ff_index"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	1
	.byte		0x1
.L294:
	.sleb128	14
	.byte		"has_checked_dev_a_ff"
	.byte		0
	.4byte		.L2417
	.sleb128	2
	.byte		0x23
	.uleb128	2
	.byte		0x1
.L295:
	.sleb128	14
	.byte		"has_checked_dev_b_ff"
	.byte		0
	.4byte		.L2417
	.sleb128	2
	.byte		0x23
	.uleb128	3
	.byte		0x1
.L296:
	.sleb128	14
	.byte		"dtc_format"
	.byte		0
	.4byte		.L3335
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
	.sleb128	0
.L4919:
.L4891:
	.sleb128	13
	.4byte		.L2369
	.uleb128	370
	.uleb128	14
	.4byte		.L4920-.L2
	.byte		"DTCEvMemFilter_Tag"
	.byte		0
	.uleb128	2
.L290:
	.sleb128	14
	.byte		"filter_active"
	.byte		0
	.4byte		.L2417
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L291:
	.sleb128	14
	.byte		"next_entry_to_handle"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	1
	.byte		0x1
	.sleb128	0
.L4920:
.L4888:
	.sleb128	13
	.4byte		.L2369
	.uleb128	370
	.uleb128	14
	.4byte		.L4921-.L2
	.byte		"DTCFilter_Tag"
	.byte		0
	.uleb128	12
.L280:
	.sleb128	14
	.byte		"filter_active"
	.byte		0
	.4byte		.L2417
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L281:
	.sleb128	14
	.byte		"status_mask"
	.byte		0
	.4byte		.L2567
	.sleb128	2
	.byte		0x23
	.uleb128	1
	.byte		0x1
.L282:
	.sleb128	14
	.byte		"dtc_kind"
	.byte		0
	.4byte		.L4351
	.sleb128	2
	.byte		0x23
	.uleb128	2
	.byte		0x1
.L283:
	.sleb128	14
	.byte		"dtc_format"
	.byte		0
	.4byte		.L3335
	.sleb128	2
	.byte		0x23
	.uleb128	3
	.byte		0x1
.L284:
	.sleb128	14
	.byte		"dtc_origin"
	.byte		0
	.4byte		.L2579
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
.L285:
	.sleb128	14
	.byte		"dtc_severity_active"
	.byte		0
	.4byte		.L2417
	.sleb128	2
	.byte		0x23
	.uleb128	5
	.byte		0x1
.L286:
	.sleb128	14
	.byte		"dtc_severity_mask"
	.byte		0
	.4byte		.L4378
	.sleb128	2
	.byte		0x23
	.uleb128	6
	.byte		0x1
.L287:
	.sleb128	14
	.byte		"fdc_active"
	.byte		0
	.4byte		.L2417
	.sleb128	2
	.byte		0x23
	.uleb128	7
	.byte		0x1
.L288:
	.sleb128	14
	.byte		"next_dtc_to_handle"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	8
	.byte		0x1
.L289:
	.sleb128	14
	.byte		"current_ev_mem_entry"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	10
	.byte		0x1
	.sleb128	0
.L4921:
.L4869:
	.sleb128	13
	.4byte		.L4922
	.uleb128	770
	.uleb128	14
	.4byte		.L4923-.L2
	.byte		"Dem_LCfg_Tag"
	.byte		0
	.uleb128	180
.L228:
	.sleb128	14
	.byte		"p_event_state_buffer"
	.byte		0
	.4byte		.L2377
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L229:
	.sleb128	14
	.byte		"p_event_state_update"
	.byte		0
	.4byte		.L2377
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
.L230:
	.sleb128	14
	.byte		"p_op_cycle_change_buffer"
	.byte		0
	.4byte		.L3896
	.sleb128	2
	.byte		0x23
	.uleb128	8
	.byte		0x1
.L231:
	.sleb128	14
	.byte		"op_cycle_change_buffer_size"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	12
	.byte		0x1
.L232:
	.sleb128	14
	.byte		"p_events"
	.byte		0
	.4byte		.L4924
	.sleb128	2
	.byte		0x23
	.uleb128	16
	.byte		0x1
.L233:
	.sleb128	14
	.byte		"pp_ev_mem"
	.byte		0
	.4byte		.L4928
	.sleb128	2
	.byte		0x23
	.uleb128	20
	.byte		0x1
.L234:
	.sleb128	14
	.byte		"p_data_element"
	.byte		0
	.4byte		.L4934
	.sleb128	2
	.byte		0x23
	.uleb128	28
	.byte		0x1
.L235:
	.sleb128	14
	.byte		"p_ff_rec_num_classes"
	.byte		0
	.4byte		.L4938
	.sleb128	2
	.byte		0x23
	.uleb128	32
	.byte		0x1
.L236:
	.sleb128	14
	.byte		"p_ff_did_define"
	.byte		0
	.4byte		.L2812
	.sleb128	2
	.byte		0x23
	.uleb128	36
	.byte		0x1
.L237:
	.sleb128	14
	.byte		"num_ff_dids"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	40
	.byte		0x1
.L238:
	.sleb128	14
	.byte		"p_ff_prestorage"
	.byte		0
	.4byte		.L4942
	.sleb128	2
	.byte		0x23
	.uleb128	44
	.byte		0x1
.L239:
	.sleb128	14
	.byte		"pp_ff_storage"
	.byte		0
	.4byte		.L4946
	.sleb128	2
	.byte		0x23
	.uleb128	48
	.byte		0x1
.L240:
	.sleb128	14
	.byte		"p_num_ff_entries"
	.byte		0
	.4byte		.L4948
	.sleb128	2
	.byte		0x23
	.uleb128	56
	.byte		0x1
.L241:
	.sleb128	14
	.byte		"p_dev_a_ff_storage"
	.byte		0
	.4byte		.L2467
	.sleb128	2
	.byte		0x23
	.uleb128	60
	.byte		0x1
.L242:
	.sleb128	14
	.byte		"num_dev_a_entries"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	64
	.byte		0x1
.L243:
	.sleb128	14
	.byte		"p_dev_b_ff_storage"
	.byte		0
	.4byte		.L2467
	.sleb128	2
	.byte		0x23
	.uleb128	68
	.byte		0x1
.L244:
	.sleb128	14
	.byte		"num_dev_b_entries"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	72
	.byte		0x1
.L245:
	.sleb128	14
	.byte		"pp_ed_storage"
	.byte		0
	.4byte		.L4950
	.sleb128	2
	.byte		0x23
	.uleb128	76
	.byte		0x1
.L246:
	.sleb128	14
	.byte		"num_ed_entries"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	84
	.byte		0x1
.L247:
	.sleb128	14
	.byte		"p_ext_ed_record_define"
	.byte		0
	.4byte		.L2649
	.sleb128	2
	.byte		0x23
	.uleb128	88
	.byte		0x1
.L248:
	.sleb128	14
	.byte		"num_ext_ed_records"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	92
	.byte		0x1
.L249:
	.sleb128	14
	.byte		"p_int_ed_record_define"
	.byte		0
	.4byte		.L3606
	.sleb128	2
	.byte		0x23
	.uleb128	96
	.byte		0x1
.L250:
	.sleb128	14
	.byte		"num_int_ed_records"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	100
	.byte		0x1
.L251:
	.sleb128	14
	.byte		"p_ed_classes"
	.byte		0
	.4byte		.L4952
	.sleb128	2
	.byte		0x23
	.uleb128	104
	.byte		0x1
.L252:
	.sleb128	14
	.byte		"p_indicator_status"
	.byte		0
	.4byte		.L4956
	.sleb128	2
	.byte		0x23
	.uleb128	108
	.byte		0x1
.L253:
	.sleb128	14
	.byte		"p_dtc_storage"
	.byte		0
	.4byte		.L4093
	.sleb128	2
	.byte		0x23
	.uleb128	112
	.byte		0x1
.L254:
	.sleb128	14
	.byte		"p_dtc_suppressed"
	.byte		0
	.4byte		.L2377
	.sleb128	2
	.byte		0x23
	.uleb128	116
	.byte		0x1
.L255:
	.sleb128	14
	.byte		"p_ff_length"
	.byte		0
	.4byte		.L2610
	.sleb128	2
	.byte		0x23
	.uleb128	120
	.byte		0x1
.L256:
	.sleb128	14
	.byte		"p_counter_db_counter"
	.byte		0
	.4byte		.L3197
	.sleb128	2
	.byte		0x23
	.uleb128	124
	.byte		0x1
.L257:
	.sleb128	14
	.byte		"num_counter_db_events"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x23
	.uleb128	128
	.byte		0x1
.L258:
	.sleb128	14
	.byte		"p_monitor_db_data"
	.byte		0
	.4byte		.L4958
	.sleb128	3
	.byte		0x23
	.uleb128	132
	.byte		0x1
.L259:
	.sleb128	14
	.byte		"num_events"
	.byte		0
	.4byte		.L2390
	.sleb128	3
	.byte		0x23
	.uleb128	136
	.byte		0x1
.L260:
	.sleb128	14
	.byte		"num_indicators"
	.byte		0
	.4byte		.L2371
	.sleb128	3
	.byte		0x23
	.uleb128	138
	.byte		0x1
.L261:
	.sleb128	14
	.byte		"num_op_cycles"
	.byte		0
	.4byte		.L2371
	.sleb128	3
	.byte		0x23
	.uleb128	139
	.byte		0x1
.L262:
	.sleb128	14
	.byte		"num_dtc_groups"
	.byte		0
	.4byte		.L2371
	.sleb128	3
	.byte		0x23
	.uleb128	140
	.byte		0x1
.L263:
	.sleb128	14
	.byte		"num_ff_classes"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x23
	.uleb128	142
	.byte		0x1
.L264:
	.sleb128	14
	.byte		"max_handled_passed_events_per_scheduling"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x23
	.uleb128	144
	.byte		0x1
.L265:
	.sleb128	14
	.byte		"max_handled_failed_events_per_scheduling"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x23
	.uleb128	146
	.byte		0x1
.L266:
	.sleb128	14
	.byte		"max_cleared_per_scheduling"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x23
	.uleb128	148
	.byte		0x1
.L267:
	.sleb128	14
	.byte		"p_gen_cbk_event_status_changed"
	.byte		0
	.4byte		.L4962
	.sleb128	3
	.byte		0x23
	.uleb128	152
	.byte		0x1
.L268:
	.sleb128	14
	.byte		"p_gen_cbk_event_data_changed"
	.byte		0
	.4byte		.L4965
	.sleb128	3
	.byte		0x23
	.uleb128	156
	.byte		0x1
.L269:
	.sleb128	14
	.byte		"p_op_cycle_init_value"
	.byte		0
	.4byte		.L4968
	.sleb128	3
	.byte		0x23
	.uleb128	160
	.byte		0x1
.L270:
	.sleb128	14
	.byte		"pp_dtc_status_changed"
	.byte		0
	.4byte		.L4970
	.sleb128	3
	.byte		0x23
	.uleb128	164
	.byte		0x1
.L271:
	.sleb128	14
	.byte		"p_internal_dtc_groups"
	.byte		0
	.4byte		.L4971
	.sleb128	3
	.byte		0x23
	.uleb128	168
	.byte		0x1
.L272:
	.sleb128	14
	.byte		"num_dtc_status_changed"
	.byte		0
	.4byte		.L2371
	.sleb128	3
	.byte		0x23
	.uleb128	172
	.byte		0x1
.L273:
	.sleb128	14
	.byte		"service_04_clear_all"
	.byte		0
	.4byte		.L2417
	.sleb128	3
	.byte		0x23
	.uleb128	173
	.byte		0x1
.L274:
	.sleb128	14
	.byte		"clear_internal_events"
	.byte		0
	.4byte		.L2417
	.sleb128	3
	.byte		0x23
	.uleb128	174
	.byte		0x1
.L275:
	.sleb128	14
	.byte		"max_allowed_standard_ff_length"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x23
	.uleb128	176
	.byte		0x1
	.sleb128	0
.L4923:
.L3887:
	.sleb128	13
	.4byte		.L4922
	.uleb128	770
	.uleb128	14
	.4byte		.L4975-.L2
	.byte		"Dem_SetOpCycleParamType_Tag"
	.byte		0
	.uleb128	2
.L226:
	.sleb128	14
	.byte		"operation_cycle_id"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L227:
	.sleb128	14
	.byte		"cycle_state"
	.byte		0
	.4byte		.L4192
	.sleb128	2
	.byte		0x23
	.uleb128	1
	.byte		0x1
	.sleb128	0
.L4975:
.L4945:
	.sleb128	13
	.4byte		.L4922
	.uleb128	770
	.uleb128	14
	.4byte		.L4976-.L2
	.byte		"Dem_FFPrestorageType_Tag"
	.byte		0
	.uleb128	12
.L223:
	.sleb128	14
	.byte		"p_get_prestored_ff_entry"
	.byte		0
	.4byte		.L4977
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L224:
	.sleb128	14
	.byte		"p_entry_occupied"
	.byte		0
	.4byte		.L4981
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
.L225:
	.sleb128	14
	.byte		"num_prestore_entries"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	8
	.byte		0x1
	.sleb128	0
.L4976:
.L2470:
	.sleb128	13
	.4byte		.L4922
	.uleb128	770
	.uleb128	14
	.4byte		.L4982-.L2
	.byte		"Dem_DataStorageType_Tag"
	.byte		0
	.uleb128	12
.L220:
	.sleb128	14
	.byte		"p_get_buffer_entry"
	.byte		0
	.4byte		.L4983
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L221:
	.sleb128	14
	.byte		"p_get_entry_occupied"
	.byte		0
	.4byte		.L4986
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
.L222:
	.sleb128	14
	.byte		"buffer_length"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	8
	.byte		0x1
	.sleb128	0
.L4982:
.L3609:
	.sleb128	13
	.4byte		.L4922
	.uleb128	770
	.uleb128	14
	.4byte		.L4989-.L2
	.byte		"Dem_IntExtendedDataType_Tag"
	.byte		0
	.uleb128	8
.L218:
	.sleb128	14
	.byte		"record_number"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L219:
	.sleb128	14
	.byte		"p_read_int_data"
	.byte		0
	.4byte		.L4990
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
	.sleb128	0
.L4989:
.L2652:
	.sleb128	13
	.4byte		.L4922
	.uleb128	770
	.uleb128	14
	.4byte		.L4994-.L2
	.byte		"Dem_ExtExtendedDataType_Tag"
	.byte		0
	.uleb128	8
.L214:
	.sleb128	14
	.byte		"record_number"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L215:
	.sleb128	14
	.byte		"update"
	.byte		0
	.4byte		.L2417
	.sleb128	2
	.byte		0x23
	.uleb128	1
	.byte		0x1
.L216:
	.sleb128	14
	.byte		"size"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	2
	.byte		0x1
.L217:
	.sleb128	14
	.byte		"p_read_data"
	.byte		0
	.4byte		.L2833
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
	.sleb128	0
.L4994:
.L4941:
	.sleb128	13
	.4byte		.L4922
	.uleb128	770
	.uleb128	14
	.4byte		.L4995-.L2
	.byte		"Dem_FreezeFrameRecNumClassType_Tag"
	.byte		0
	.uleb128	8
.L212:
	.sleb128	14
	.byte		"p_ff_record"
	.byte		0
	.4byte		.L3769
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L213:
	.sleb128	14
	.byte		"num_ff"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
	.sleb128	0
.L4995:
.L3772:
	.sleb128	13
	.4byte		.L4922
	.uleb128	770
	.uleb128	14
	.4byte		.L4996-.L2
	.byte		"Dem_FreezeFrameRecordClassType_Tag"
	.byte		0
	.uleb128	8
.L209:
	.sleb128	14
	.byte		"record_number"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L210:
	.sleb128	14
	.byte		"ff_update"
	.byte		0
	.4byte		.L2417
	.sleb128	2
	.byte		0x23
	.uleb128	1
	.byte		0x1
.L211:
	.sleb128	14
	.byte		"ff_record_trigger"
	.byte		0
	.4byte		.L2789
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
	.sleb128	0
.L4996:
.L2815:
	.sleb128	13
	.4byte		.L4922
	.uleb128	658
	.uleb128	14
	.4byte		.L4997-.L2
	.byte		"Dem_FFDidDefineType_Tag"
	.byte		0
	.uleb128	4
.L207:
	.sleb128	14
	.byte		"did"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L208:
	.sleb128	14
	.byte		"data_element_idx"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	2
	.byte		0x1
	.sleb128	0
.L4997:
.L4937:
	.sleb128	13
	.4byte		.L4922
	.uleb128	658
	.uleb128	14
	.4byte		.L4998-.L2
	.byte		"DataArrayType_Tag"
	.byte		0
	.uleb128	8
.L205:
	.sleb128	14
	.byte		"size"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L206:
	.sleb128	14
	.byte		"pReadData"
	.byte		0
	.4byte		.L2833
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
	.sleb128	0
.L4998:
.L4933:
	.sleb128	13
	.4byte		.L4922
	.uleb128	658
	.uleb128	14
	.4byte		.L4999-.L2
	.byte		"Dem_EvMem_Tag"
	.byte		0
	.uleb128	20
.L200:
	.sleb128	14
	.byte		"p_ev_mem_entries"
	.byte		0
	.4byte		.L2406
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L201:
	.sleb128	14
	.byte		"p_first"
	.byte		0
	.4byte		.L2376
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
.L202:
	.sleb128	14
	.byte		"p_last"
	.byte		0
	.4byte		.L2376
	.sleb128	2
	.byte		0x23
	.uleb128	8
	.byte		0x1
.L203:
	.sleb128	14
	.byte		"p_next"
	.byte		0
	.4byte		.L2376
	.sleb128	2
	.byte		0x23
	.uleb128	12
	.byte		0x1
.L204:
	.sleb128	14
	.byte		"p_prev"
	.byte		0
	.4byte		.L2376
	.sleb128	2
	.byte		0x23
	.uleb128	16
	.byte		0x1
	.sleb128	0
.L4999:
.L4927:
	.sleb128	13
	.4byte		.L4922
	.uleb128	658
	.uleb128	14
	.4byte		.L5000-.L2
	.byte		"Dem_LCfgEvent_Tag"
	.byte		0
	.uleb128	20
.L193:
	.sleb128	14
	.byte		"p_init_m_for_e"
	.byte		0
	.4byte		.L5001
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L194:
	.sleb128	14
	.byte		"ppEventStatusChanged"
	.byte		0
	.4byte		.L5006
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
.L195:
	.sleb128	14
	.byte		"pClearEventAllowed"
	.byte		0
	.4byte		.L5007
	.sleb128	2
	.byte		0x23
	.uleb128	8
	.byte		0x1
.L196:
	.sleb128	14
	.byte		"p_event_data_changed"
	.byte		0
	.4byte		.L5010
	.sleb128	2
	.byte		0x23
	.uleb128	12
	.byte		0x1
.L197:
	.sleb128	14
	.byte		"debounce_counter_idx"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	16
	.byte		0x1
.L198:
	.sleb128	14
	.byte		"num_evStatusCh"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	18
	.byte		0x1
.L199:
	.sleb128	14
	.byte		"debounce_alg"
	.byte		0
	.4byte		.L5013
	.sleb128	2
	.byte		0x23
	.uleb128	19
	.byte		0x1
	.sleb128	0
.L5000:
.L2399:
	.sleb128	13
	.4byte		.L5014
	.uleb128	65
	.uleb128	14
	.4byte		.L5015-.L2
	.byte		"Dem_NvEvMemEntry_Tag"
	.byte		0
	.uleb128	24
.L173:
	.sleb128	14
	.byte		"event_id"
	.byte		0
	.4byte		.L2390
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L174:
	.sleb128	14
	.byte		"ed_storage_index"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	2
	.byte		0x1
.L175:
	.sleb128	14
	.byte		"dev_a_ff_index"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
.L176:
	.sleb128	14
	.byte		"dev_b_ff_index"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	6
	.byte		0x1
.L177:
	.sleb128	14
	.byte		"ff_index"
	.byte		0
	.4byte		.L5016
	.sleb128	2
	.byte		0x23
	.uleb128	8
	.byte		0x1
.L178:
	.sleb128	14
	.byte		"record_numbers"
	.byte		0
	.4byte		.L5018
	.sleb128	2
	.byte		0x23
	.uleb128	10
	.byte		0x1
.L179:
	.sleb128	14
	.byte		"num_stored_ff"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	11
	.byte		0x1
.L180:
	.sleb128	14
	.byte		"ed_stored"
	.byte		0
	.4byte		.L2417
	.sleb128	2
	.byte		0x23
	.uleb128	12
	.byte		0x1
.L181:
	.sleb128	14
	.byte		"uds_status"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	13
	.byte		0x1
.L182:
	.sleb128	14
	.byte		"si"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	14
	.byte		0x1
.L183:
	.sleb128	14
	.byte		"occurrence_counter"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	15
	.byte		0x1
.L184:
	.sleb128	14
	.byte		"cycles_since_last_failed"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	16
	.byte		0x1
.L185:
	.sleb128	14
	.byte		"cycles_since_first_failed"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	17
	.byte		0x1
.L186:
	.sleb128	14
	.byte		"failed_cycles"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	18
	.byte		0x1
.L187:
	.sleb128	14
	.byte		"aging_counter"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	19
	.byte		0x1
.L188:
	.sleb128	14
	.byte		"wir_bits"
	.byte		0
	.4byte		.L5020
	.sleb128	2
	.byte		0x23
	.uleb128	20
	.byte		0x1
.L189:
	.sleb128	14
	.byte		"failure_counter"
	.byte		0
	.4byte		.L5022
	.sleb128	2
	.byte		0x23
	.uleb128	21
	.byte		0x1
.L190:
	.sleb128	14
	.byte		"healing_counter"
	.byte		0
	.4byte		.L5024
	.sleb128	2
	.byte		0x23
	.uleb128	22
	.byte		0x1
	.sleb128	0
.L5015:
.L4861:
	.sleb128	13
	.4byte		.L5014
	.uleb128	65
	.uleb128	14
	.4byte		.L5026-.L2
	.byte		"Dem_NvAdmin_Tag"
	.byte		0
	.uleb128	32
.L165:
	.sleb128	14
	.byte		"event_occurrence_info"
	.byte		0
	.4byte		.L5027
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L166:
	.sleb128	14
	.byte		"event_memory_overflow_ind"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	8
	.byte		0x1
.L167:
	.sleb128	14
	.byte		"primary_first_ev_mem_entry"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	9
	.byte		0x1
.L168:
	.sleb128	14
	.byte		"primary_last_ev_mem_entry"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	10
	.byte		0x1
.L169:
	.sleb128	14
	.byte		"primary_next_ev_mem_entry"
	.byte		0
	.4byte		.L5029
	.sleb128	2
	.byte		0x23
	.uleb128	11
	.byte		0x1
.L170:
	.sleb128	14
	.byte		"primary_prev_ev_mem_entry"
	.byte		0
	.4byte		.L5031
	.sleb128	2
	.byte		0x23
	.uleb128	21
	.byte		0x1
	.sleb128	0
.L5026:
.L3993:
	.sleb128	13
	.4byte		.L5033
	.uleb128	69
	.uleb128	1
	.4byte		.L5034-.L2
	.byte		"Dem_ConfigType_Tag"
	.byte		0
	.uleb128	164
.L101:
	.sleb128	14
	.byte		"p_dtc_attr_aging_allowed"
	.byte		0
	.4byte		.L5035
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L102:
	.sleb128	14
	.byte		"p_dtc_attr_immediate_nv_storage"
	.byte		0
	.4byte		.L5035
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
.L103:
	.sleb128	14
	.byte		"p_dtc_attr_instant_aging"
	.byte		0
	.4byte		.L5035
	.sleb128	2
	.byte		0x23
	.uleb128	8
	.byte		0x1
.L104:
	.sleb128	14
	.byte		"p_dtc_attr_aging_cycle"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	12
	.byte		0x1
.L105:
	.sleb128	14
	.byte		"p_dtc_attr_aging_threshold"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	16
	.byte		0x1
.L106:
	.sleb128	14
	.byte		"p_dtc_attr_memory_dest"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	20
	.byte		0x1
.L107:
	.sleb128	14
	.byte		"p_dtc_attr_priority"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	24
	.byte		0x1
.L108:
	.sleb128	14
	.byte		"p_dtc_attr_significance"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	28
	.byte		0x1
.L109:
	.sleb128	14
	.byte		"p_dtc_attr_ed"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	32
	.byte		0x1
.L110:
	.sleb128	14
	.byte		"p_dtc_attr_ff_rec_num_class"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	36
	.byte		0x1
.L111:
	.sleb128	14
	.byte		"p_dtc_attr_dev_ff_a_rec_num"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	40
	.byte		0x1
.L112:
	.sleb128	14
	.byte		"p_dtc_attr_dev_ff_b_rec_num"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	44
	.byte		0x1
.L113:
	.sleb128	14
	.byte		"p_event_attr_confirmed_threshold"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	48
	.byte		0x1
.L114:
	.sleb128	14
	.byte		"p_event_attr_op_cycle"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	52
	.byte		0x1
.L115:
	.sleb128	14
	.byte		"p_event_attr_enable_cond_group"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	56
	.byte		0x1
.L116:
	.sleb128	14
	.byte		"p_event_attr_storage_cond_group"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	60
	.byte		0x1
.L117:
	.sleb128	14
	.byte		"p_dtc_functional_unit"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	64
	.byte		0x1
.L118:
	.sleb128	14
	.byte		"p_dtc_severity"
	.byte		0
	.4byte		.L5036
	.sleb128	2
	.byte		0x23
	.uleb128	68
	.byte		0x1
.L119:
	.sleb128	14
	.byte		"p_dtc_obd_dtc"
	.byte		0
	.4byte		.L2818
	.sleb128	2
	.byte		0x23
	.uleb128	72
	.byte		0x1
.L120:
	.sleb128	14
	.byte		"p_dtc_uds_dtc"
	.byte		0
	.4byte		.L5038
	.sleb128	2
	.byte		0x23
	.uleb128	76
	.byte		0x1
.L121:
	.sleb128	14
	.byte		"p_dtc_ff_class"
	.byte		0
	.4byte		.L2818
	.sleb128	2
	.byte		0x23
	.uleb128	80
	.byte		0x1
.L122:
	.sleb128	14
	.byte		"p_dtc_dev_a_ff_class"
	.byte		0
	.4byte		.L2818
	.sleb128	2
	.byte		0x23
	.uleb128	84
	.byte		0x1
.L123:
	.sleb128	14
	.byte		"p_dtc_dev_b_ff_class"
	.byte		0
	.4byte		.L2818
	.sleb128	2
	.byte		0x23
	.uleb128	88
	.byte		0x1
.L124:
	.sleb128	14
	.byte		"p_dtc_attributes"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	92
	.byte		0x1
.L125:
	.sleb128	14
	.byte		"p_event_available"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	96
	.byte		0x1
.L126:
	.sleb128	14
	.byte		"p_event_debounce_data"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	100
	.byte		0x1
.L127:
	.sleb128	14
	.byte		"p_event_attributes"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	104
	.byte		0x1
.L128:
	.sleb128	14
	.byte		"p_event_indicator_attributes"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	108
	.byte		0x1
.L129:
	.sleb128	14
	.byte		"p_common_ff_data"
	.byte		0
	.4byte		.L2818
	.sleb128	2
	.byte		0x23
	.uleb128	112
	.byte		0x1
.L130:
	.sleb128	14
	.byte		"p_common_ff_data_dev_a"
	.byte		0
	.4byte		.L2818
	.sleb128	2
	.byte		0x23
	.uleb128	116
	.byte		0x1
.L131:
	.sleb128	14
	.byte		"p_db_counter"
	.byte		0
	.4byte		.L3203
	.sleb128	2
	.byte		0x23
	.uleb128	120
	.byte		0x1
.L132:
	.sleb128	14
	.byte		"p_db_time"
	.byte		0
	.4byte		.L5039
	.sleb128	2
	.byte		0x23
	.uleb128	124
	.byte		0x1
.L133:
	.sleb128	14
	.byte		"p_int_dtc_index"
	.byte		0
	.4byte		.L2818
	.sleb128	3
	.byte		0x23
	.uleb128	128
	.byte		0x1
.L134:
	.sleb128	14
	.byte		"p_int_dtc_events"
	.byte		0
	.4byte		.L5043
	.sleb128	3
	.byte		0x23
	.uleb128	132
	.byte		0x1
.L135:
	.sleb128	14
	.byte		"p_indicator_attributes"
	.byte		0
	.4byte		.L5044
	.sleb128	3
	.byte		0x23
	.uleb128	136
	.byte		0x1
.L136:
	.sleb128	14
	.byte		"p_ff_classes"
	.byte		0
	.4byte		.L5051
	.sleb128	3
	.byte		0x23
	.uleb128	140
	.byte		0x1
.L137:
	.sleb128	14
	.byte		"p_enable_condition_groups"
	.byte		0
	.4byte		.L5055
	.sleb128	3
	.byte		0x23
	.uleb128	144
	.byte		0x1
.L138:
	.sleb128	14
	.byte		"p_storage_condition_groups"
	.byte		0
	.4byte		.L5059
	.sleb128	3
	.byte		0x23
	.uleb128	148
	.byte		0x1
.L139:
	.sleb128	14
	.byte		"num_dtcs"
	.byte		0
	.4byte		.L2391
	.sleb128	3
	.byte		0x23
	.uleb128	152
	.byte		0x1
.L140:
	.sleb128	14
	.byte		"num_events"
	.byte		0
	.4byte		.L2390
	.sleb128	3
	.byte		0x23
	.uleb128	154
	.byte		0x1
.L141:
	.sleb128	14
	.byte		"PBtoPCHashValue_P"
	.byte		0
	.4byte		.L5063
	.sleb128	3
	.byte		0x23
	.uleb128	156
	.byte		0x1
.L142:
	.sleb128	14
	.byte		"PBtoLTHashValue_P"
	.byte		0
	.4byte		.L5063
	.sleb128	3
	.byte		0x23
	.uleb128	160
	.byte		0x1
	.sleb128	0
.L5034:
.L5028:
	.sleb128	13
	.4byte		.L5033
	.uleb128	69
	.uleb128	1
	.4byte		.L5064-.L2
	.byte		"Dem_EventOccurrenceInfoType_Tag"
	.byte		0
	.uleb128	8
.L95:
	.sleb128	14
	.byte		"most_recent_failed_event"
	.byte		0
	.4byte		.L2390
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L96:
	.sleb128	14
	.byte		"most_recent_confirmed_event"
	.byte		0
	.4byte		.L2390
	.sleb128	2
	.byte		0x23
	.uleb128	2
	.byte		0x1
.L97:
	.sleb128	14
	.byte		"first_failed_event"
	.byte		0
	.4byte		.L2390
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
.L98:
	.sleb128	14
	.byte		"first_confirmed_event"
	.byte		0
	.4byte		.L2390
	.sleb128	2
	.byte		0x23
	.uleb128	6
	.byte		0x1
	.sleb128	0
.L5064:
.L4955:
	.sleb128	13
	.4byte		.L5033
	.uleb128	69
	.uleb128	1
	.4byte		.L5065-.L2
	.byte		"Dem_ExtendedData_Tag"
	.byte		0
	.uleb128	16
.L91:
	.sleb128	14
	.byte		"p_ext_ed_record_index"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L92:
	.sleb128	14
	.byte		"num_ext_ed_records"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
.L93:
	.sleb128	14
	.byte		"p_int_ed_record_index"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	8
	.byte		0x1
.L94:
	.sleb128	14
	.byte		"num_int_ed_records"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	12
	.byte		0x1
	.sleb128	0
.L5065:
.L5042:
	.sleb128	13
	.4byte		.L5033
	.uleb128	69
	.uleb128	1
	.4byte		.L5066-.L2
	.byte		"Dem_TimeDebouncing_Tag"
	.byte		0
	.uleb128	8
.L89:
	.sleb128	14
	.byte		"failed_threshold"
	.byte		0
	.4byte		.L4418
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L90:
	.sleb128	14
	.byte		"passed_threshold"
	.byte		0
	.4byte		.L4418
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
	.sleb128	0
.L5066:
.L3206:
	.sleb128	13
	.4byte		.L5033
	.uleb128	69
	.uleb128	1
	.4byte		.L5067-.L2
	.byte		"Dem_CounterDebouncing_Tag"
	.byte		0
	.uleb128	16
.L80:
	.sleb128	14
	.byte		"incr_step"
	.byte		0
	.4byte		.L3198
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L81:
	.sleb128	14
	.byte		"decr_step"
	.byte		0
	.4byte		.L3198
	.sleb128	2
	.byte		0x23
	.uleb128	2
	.byte		0x1
.L82:
	.sleb128	14
	.byte		"failed_threshold"
	.byte		0
	.4byte		.L3198
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
.L83:
	.sleb128	14
	.byte		"passed_threshold"
	.byte		0
	.4byte		.L3198
	.sleb128	2
	.byte		0x23
	.uleb128	6
	.byte		0x1
.L84:
	.sleb128	14
	.byte		"fdc_threshold"
	.byte		0
	.4byte		.L3198
	.sleb128	2
	.byte		0x23
	.uleb128	8
	.byte		0x1
.L85:
	.sleb128	14
	.byte		"jump_up_value"
	.byte		0
	.4byte		.L3198
	.sleb128	2
	.byte		0x23
	.uleb128	10
	.byte		0x1
.L86:
	.sleb128	14
	.byte		"jump_down_value"
	.byte		0
	.4byte		.L3198
	.sleb128	2
	.byte		0x23
	.uleb128	12
	.byte		0x1
.L87:
	.sleb128	14
	.byte		"jump_up"
	.byte		0
	.4byte		.L2417
	.sleb128	2
	.byte		0x23
	.uleb128	14
	.byte		0x1
.L88:
	.sleb128	14
	.byte		"jump_down"
	.byte		0
	.4byte		.L2417
	.sleb128	2
	.byte		0x23
	.uleb128	15
	.byte		0x1
	.sleb128	0
.L5067:
.L4961:
	.sleb128	13
	.4byte		.L5033
	.uleb128	69
	.uleb128	1
	.4byte		.L5068-.L2
	.byte		"Dem_MonitorDebouncing_Tag"
	.byte		0
	.uleb128	4
.L79:
	.sleb128	14
	.byte		"pGetFDCnt"
	.byte		0
	.4byte		.L5069
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
	.sleb128	0
.L5068:
.L5062:
	.sleb128	13
	.4byte		.L5033
	.uleb128	69
	.uleb128	1
	.4byte		.L5073-.L2
	.byte		"Dem_StorageConditionGroupType_Tag"
	.byte		0
	.uleb128	8
.L77:
	.sleb128	14
	.byte		"p_storage_conditions"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L78:
	.sleb128	14
	.byte		"num_storage_conditions"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
	.sleb128	0
.L5073:
.L5058:
	.sleb128	13
	.4byte		.L5033
	.uleb128	69
	.uleb128	1
	.4byte		.L5074-.L2
	.byte		"Dem_EnableConditionGroupType_Tag"
	.byte		0
	.uleb128	8
.L75:
	.sleb128	14
	.byte		"p_enable_conditions"
	.byte		0
	.4byte		.L2655
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L76:
	.sleb128	14
	.byte		"num_enable_conditions"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
	.sleb128	0
.L5074:
.L5054:
	.sleb128	13
	.4byte		.L5033
	.uleb128	69
	.uleb128	1
	.4byte		.L5075-.L2
	.byte		"Dem_FreezeFrameClassType_Tag"
	.byte		0
	.uleb128	8
.L73:
	.sleb128	14
	.byte		"p_ff_did_idx"
	.byte		0
	.4byte		.L2818
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L74:
	.sleb128	14
	.byte		"num_ff_dids"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
	.sleb128	0
.L5075:
.L5050:
	.sleb128	13
	.4byte		.L5033
	.uleb128	69
	.uleb128	1
	.4byte		.L5076-.L2
	.byte		"Dem_IndicatorListItem_Tag"
	.byte		0
	.uleb128	3
.L70:
	.sleb128	14
	.byte		"behaviour"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L71:
	.sleb128	14
	.byte		"healing_threshold"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	1
	.byte		0x1
.L72:
	.sleb128	14
	.byte		"failure_threshold"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	2
	.byte		0x1
	.sleb128	0
.L5076:
.L4974:
	.sleb128	13
	.4byte		.L5033
	.uleb128	69
	.uleb128	1
	.4byte		.L5077-.L2
	.byte		"Dem_InternalGroupOfDtc_Tag"
	.byte		0
	.uleb128	12
.L67:
	.sleb128	14
	.byte		"dtc_group"
	.byte		0
	.4byte		.L2419
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L68:
	.sleb128	14
	.byte		"start_dtc_value"
	.byte		0
	.4byte		.L2419
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
.L69:
	.sleb128	14
	.byte		"end_dtc_value"
	.byte		0
	.4byte		.L2419
	.sleb128	2
	.byte		0x23
	.uleb128	8
	.byte		0x1
	.sleb128	0
.L5077:
	.section	.debug_info,,n
.L3981:
	.sleb128	15
	.4byte		.L5033
	.uleb128	69
	.uleb128	1
	.4byte		.L5078-.L2
	.uleb128	8
.L57:
	.sleb128	14
	.byte		"vendorID"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	0
	.byte		0x1
.L58:
	.sleb128	14
	.byte		"moduleID"
	.byte		0
	.4byte		.L2391
	.sleb128	2
	.byte		0x23
	.uleb128	2
	.byte		0x1
.L59:
	.sleb128	14
	.byte		"sw_major_version"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	4
	.byte		0x1
.L60:
	.sleb128	14
	.byte		"sw_minor_version"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	5
	.byte		0x1
.L61:
	.sleb128	14
	.byte		"sw_patch_version"
	.byte		0
	.4byte		.L2371
	.sleb128	2
	.byte		0x23
	.uleb128	6
	.byte		0x1
	.sleb128	0
.L5078:
	.section	.debug_info,,n
.L3742:
	.sleb128	16
	.4byte		.L2369
	.uleb128	338
	.uleb128	14
	.4byte		.L5079-.L2
	.byte		"Dem_FreezeFrame_Tag"
	.byte		0
	.uleb128	4
	.section	.debug_info,,n
	.sleb128	17
	.byte		"DEM_STANDARD_FREEZE_FRAME"
	.byte		0
	.sleb128	0
	.sleb128	17
	.byte		"DEM_DEV_A_FREEZE_FRAME"
	.byte		0
	.sleb128	1
	.sleb128	17
	.byte		"DEM_DEV_B_FREEZE_FRAME"
	.byte		0
	.sleb128	2
	.sleb128	17
	.byte		"DEM_ALL_FREEZE_FRAME"
	.byte		0
	.sleb128	3
	.sleb128	17
	.byte		"DEM_OBD_FREEZE_FRAME"
	.byte		0
	.sleb128	4
	.sleb128	0
.L5079:
.L4916:
	.sleb128	16
	.4byte		.L2369
	.uleb128	306
	.uleb128	14
	.4byte		.L5080-.L2
	.byte		"Dem_OpCycleChangeStateType_Tag"
	.byte		0
	.uleb128	4
	.sleb128	17
	.byte		"DEM_OP_CYCLE_CHANGE_IDLE"
	.byte		0
	.sleb128	0
	.sleb128	17
	.byte		"DEM_OP_CYCLE_CHANGE_START_ONGOING"
	.byte		0
	.sleb128	1
	.sleb128	17
	.byte		"DEM_OP_CYCLE_CHANGE_END_ONGOING"
	.byte		0
	.sleb128	2
	.sleb128	17
	.byte		"DEM_OP_CYCLE_CHANGE_RESTART_ONGOING"
	.byte		0
	.sleb128	3
	.sleb128	17
	.byte		"DEM_OP_CYCLE_CHANGE_AGING_ONGOING"
	.byte		0
	.sleb128	4
	.sleb128	0
.L5080:
.L4900:
	.sleb128	16
	.4byte		.L2369
	.uleb128	264
	.uleb128	14
	.4byte		.L5081-.L2
	.byte		"Dem_ClearState_Tag"
	.byte		0
	.uleb128	4
	.sleb128	17
	.byte		"DEM_CLEAR_IDLE"
	.byte		0
	.sleb128	0
	.sleb128	17
	.byte		"DEM_CLEAR_INIT"
	.byte		0
	.sleb128	1
	.sleb128	17
	.byte		"DEM_CLEAR_SINGLE_ONGOING"
	.byte		0
	.sleb128	2
	.sleb128	17
	.byte		"DEM_CLEAR_ALL_ONGOING"
	.byte		0
	.sleb128	3
	.sleb128	17
	.byte		"DEM_CLEAR_GROUP_ONGOING"
	.byte		0
	.sleb128	4
	.sleb128	17
	.byte		"DEM_CLEAR_NV_WRITE_PENDING"
	.byte		0
	.sleb128	5
	.sleb128	17
	.byte		"DEM_CLEAR_FINISHED"
	.byte		0
	.sleb128	6
	.sleb128	0
.L5081:
.L3822:
	.sleb128	16
	.4byte		.L2369
	.uleb128	247
	.uleb128	14
	.4byte		.L5082-.L2
	.byte		"Dem_UserClearDTC_Tag"
	.byte		0
	.uleb128	4
	.sleb128	17
	.byte		"DEM_CLEAR_USER_DCM"
	.byte		0
	.sleb128	0
	.sleb128	17
	.byte		"DEM_CLEAR_USER_CDD"
	.byte		0
	.sleb128	1
	.sleb128	0
.L5082:
.L2790:
	.sleb128	16
	.4byte		.L4922
	.uleb128	770
	.uleb128	14
	.4byte		.L5083-.L2
	.byte		"Dem_RecordTriggerType_Tag"
	.byte		0
	.uleb128	4
	.sleb128	17
	.byte		"DEM_TRIGGER_ON_CONFIRMED"
	.byte		0
	.sleb128	0
	.sleb128	17
	.byte		"DEM_TRIGGER_ON_FDC_THRESHOLD"
	.byte		0
	.sleb128	1
	.sleb128	17
	.byte		"DEM_TRIGGER_ON_PENDING"
	.byte		0
	.sleb128	2
	.sleb128	17
	.byte		"DEM_TRIGGER_ON_TEST_FAILED"
	.byte		0
	.sleb128	3
	.sleb128	0
.L5083:
.L3247:
	.sleb128	16
	.4byte		.L4922
	.uleb128	658
	.uleb128	14
	.4byte		.L5084-.L2
	.byte		"Dem_SetDBCounter_Tag"
	.byte		0
	.uleb128	4
	.sleb128	17
	.byte		"DEM_DB_COUNTER_PASSED"
	.byte		0
	.sleb128	0
	.sleb128	17
	.byte		"DEM_DB_COUNTER_FAILED"
	.byte		0
	.sleb128	1
	.sleb128	17
	.byte		"DEM_DB_COUNTER_CLEAR"
	.byte		0
	.sleb128	2
	.sleb128	0
.L5084:
.L4910:
	.sleb128	16
	.4byte		.L4922
	.uleb128	636
	.uleb128	14
	.4byte		.L5085-.L2
	.byte		"Dem_InitState_Tag"
	.byte		0
	.uleb128	4
	.sleb128	17
	.byte		"DEM_UNINIT"
	.byte		0
	.sleb128	0
	.sleb128	17
	.byte		"DEM_PREINIT"
	.byte		0
	.sleb128	1
	.sleb128	17
	.byte		"DEM_INIT"
	.byte		0
	.sleb128	2
	.sleb128	0
.L5085:
	.section	.debug_info,,n
.L2372:
	.sleb128	18
	.byte		"unsigned char"
	.byte		0
	.byte		0x8
	.byte		0x1
	.section	.debug_info,,n
.L2371:
	.sleb128	19
	.byte		"uint8"
	.byte		0
	.4byte		.L2372
	.section	.debug_info,,n
.L2377:
	.sleb128	20
	.4byte		.L2371
.L2376:
	.sleb128	19
	.byte		"Uint8NvPtrType"
	.byte		0
	.4byte		.L2377
.L2392:
	.sleb128	18
	.byte		"unsigned short"
	.byte		0
	.byte		0x7
	.byte		0x2
.L2391:
	.sleb128	19
	.byte		"uint16"
	.byte		0
	.4byte		.L2392
.L2390:
	.sleb128	19
	.byte		"Dem_EventIdType"
	.byte		0
	.4byte		.L2391
.L2398:
	.sleb128	19
	.byte		"Dem_NvEvMemEntryType"
	.byte		0
	.4byte		.L2399
.L2397:
	.sleb128	20
	.4byte		.L2398
.L2396:
	.sleb128	19
	.byte		"Dem_NvEvMemEntryPtrType"
	.byte		0
	.4byte		.L2397
.L2395:
	.sleb128	20
	.4byte		.L2396
	.section	.debug_info,,n
.L2407:
	.sleb128	21
	.4byte		.L2396
.L2406:
	.sleb128	20
	.4byte		.L2407
.L2417:
	.sleb128	19
	.byte		"boolean"
	.byte		0
	.4byte		.L2372
.L2420:
	.sleb128	18
	.byte		"unsigned long"
	.byte		0
	.byte		0x7
	.byte		0x4
.L2419:
	.sleb128	19
	.byte		"uint32"
	.byte		0
	.4byte		.L2420
.L2469:
	.sleb128	19
	.byte		"Dem_DataStorageType"
	.byte		0
	.4byte		.L2470
.L2468:
	.sleb128	21
	.4byte		.L2469
.L2467:
	.sleb128	20
	.4byte		.L2468
.L2535:
	.sleb128	21
	.4byte		.L2390
.L2567:
	.sleb128	19
	.byte		"Dem_UdsStatusByteType"
	.byte		0
	.4byte		.L2371
.L2566:
	.sleb128	20
	.4byte		.L2567
.L2579:
	.sleb128	19
	.byte		"Dem_DTCOriginType"
	.byte		0
	.4byte		.L2371
.L2600:
	.sleb128	21
	.4byte		.L2398
.L2599:
	.sleb128	20
	.4byte		.L2600
.L2610:
	.sleb128	20
	.4byte		.L2391
	.section	.debug_info,,n
.L2622:
	.sleb128	22
	.byte		"void"
	.byte		0
	.byte		0x0
.L2621:
	.sleb128	20
	.4byte		.L2622
.L2651:
	.sleb128	19
	.byte		"Dem_ExtExtendedDataType"
	.byte		0
	.4byte		.L2652
.L2650:
	.sleb128	21
	.4byte		.L2651
.L2649:
	.sleb128	20
	.4byte		.L2650
.L2656:
	.sleb128	21
	.4byte		.L2371
.L2655:
	.sleb128	20
	.4byte		.L2656
.L2674:
	.sleb128	21
	.4byte		.L2391
.L2679:
	.sleb128	21
	.4byte		.L2467
.L2783:
	.sleb128	21
	.4byte		.L2417
.L2789:
	.sleb128	19
	.byte		"Dem_RecordTriggerType"
	.byte		0
	.4byte		.L2790
.L2788:
	.sleb128	21
	.4byte		.L2789
.L2814:
	.sleb128	19
	.byte		"Dem_FFDidDefineType"
	.byte		0
	.4byte		.L2815
.L2813:
	.sleb128	21
	.4byte		.L2814
.L2812:
	.sleb128	20
	.4byte		.L2813
.L2818:
	.sleb128	20
	.4byte		.L2674
.L2837:
	.sleb128	19
	.byte		"Std_ReturnType"
	.byte		0
	.4byte		.L2371
	.section	.debug_info,,n
.L2835:
	.sleb128	23
	.4byte		.L2836-.L2
	.4byte		.L2837
	.byte		0x1
	.section	.debug_info,,n
	.sleb128	24
	.4byte		.L2377
	.sleb128	0
.L2836:
.L2834:
	.sleb128	20
	.4byte		.L2835
.L2833:
	.sleb128	19
	.byte		"ReadDataPtrType"
	.byte		0
	.4byte		.L2834
.L2848:
	.sleb128	19
	.byte		"Dem_StoreFFInputType"
	.byte		0
	.4byte		.L2849
.L2847:
	.sleb128	21
	.4byte		.L2848
.L2846:
	.sleb128	20
	.4byte		.L2847
.L2858:
	.sleb128	21
	.4byte		.L2610
.L3035:
	.sleb128	23
	.4byte		.L3036-.L2
	.4byte		.L2837
	.byte		0x1
	.sleb128	0
.L3036:
.L3034:
	.sleb128	20
	.4byte		.L3035
.L3033:
	.sleb128	19
	.byte		"EvDataChPtrType"
	.byte		0
	.4byte		.L3034
.L3112:
	.sleb128	21
	.4byte		.L2567
.L3128:
	.sleb128	23
	.4byte		.L3129-.L2
	.4byte		.L2837
	.byte		0x1
	.sleb128	24
	.4byte		.L2567
	.sleb128	24
	.4byte		.L2567
	.sleb128	0
.L3129:
.L3127:
	.sleb128	20
	.4byte		.L3128
.L3126:
	.sleb128	19
	.byte		"EvStChPtrType"
	.byte		0
	.4byte		.L3127
.L3125:
	.sleb128	21
	.4byte		.L3126
.L3158:
	.sleb128	23
	.4byte		.L3159-.L2
	.4byte		.L2837
	.byte		0x1
	.sleb128	24
	.4byte		.L2419
	.sleb128	24
	.4byte		.L2567
	.sleb128	24
	.4byte		.L2567
	.sleb128	0
.L3159:
.L3157:
	.sleb128	20
	.4byte		.L3158
.L3156:
	.sleb128	19
	.byte		"DtcStChPtrType"
	.byte		0
	.4byte		.L3157
.L3155:
	.sleb128	21
	.4byte		.L3156
.L3167:
	.sleb128	19
	.byte		"Dem_EventStateType"
	.byte		0
	.4byte		.L2371
.L3193:
	.sleb128	19
	.byte		"Dem_EventStatusType"
	.byte		0
	.4byte		.L2371
.L3199:
	.sleb128	18
	.byte		"short"
	.byte		0
	.byte		0x5
	.byte		0x2
.L3198:
	.sleb128	19
	.byte		"sint16"
	.byte		0
	.4byte		.L3199
.L3197:
	.sleb128	20
	.4byte		.L3198
.L3196:
	.sleb128	21
	.4byte		.L3197
.L3205:
	.sleb128	19
	.byte		"Dem_CounterDebouncingType"
	.byte		0
	.4byte		.L3206
.L3204:
	.sleb128	21
	.4byte		.L3205
.L3203:
	.sleb128	20
	.4byte		.L3204
.L3202:
	.sleb128	21
	.4byte		.L3203
.L3211:
	.sleb128	21
	.4byte		.L3198
.L3218:
	.sleb128	21
	.4byte		.L3167
.L3227:
	.sleb128	20
	.4byte		.L3167
.L3246:
	.sleb128	19
	.byte		"Dem_SetDBCounterType"
	.byte		0
	.4byte		.L3247
.L3313:
	.sleb128	19
	.byte		"Dem_ReturnClearDTCType"
	.byte		0
	.4byte		.L2371
.L3335:
	.sleb128	19
	.byte		"Dem_DTCFormatType"
	.byte		0
	.4byte		.L2371
.L3435:
	.sleb128	18
	.byte		"signed char"
	.byte		0
	.byte		0x6
	.byte		0x1
.L3434:
	.sleb128	19
	.byte		"sint8"
	.byte		0
	.4byte		.L3435
.L3433:
	.sleb128	20
	.4byte		.L3434
.L3468:
	.sleb128	21
	.4byte		.L2622
.L3467:
	.sleb128	20
	.4byte		.L3468
.L3481:
	.sleb128	19
	.byte		"Dem_ReturnGetFreezeFrameDataByDTCType"
	.byte		0
	.4byte		.L2371
.L3546:
	.sleb128	19
	.byte		"Dem_ReturnGetExtendedDataRecordByDTCType"
	.byte		0
	.4byte		.L2371
.L3570:
	.sleb128	21
	.4byte		.L2655
.L3579:
	.sleb128	21
	.4byte		.L2649
.L3588:
	.sleb128	21
	.4byte		.L2376
.L3608:
	.sleb128	19
	.byte		"Dem_IntExtendedDataType"
	.byte		0
	.4byte		.L3609
.L3607:
	.sleb128	21
	.4byte		.L3608
.L3606:
	.sleb128	20
	.4byte		.L3607
.L3605:
	.sleb128	21
	.4byte		.L3606
.L3687:
	.sleb128	21
	.4byte		.L2406
.L3741:
	.sleb128	19
	.byte		"Dem_FreezeFrameType"
	.byte		0
	.4byte		.L3742
.L3760:
	.sleb128	20
	.4byte		.L3741
.L3771:
	.sleb128	19
	.byte		"Dem_FreezeFrameRecordClassType"
	.byte		0
	.4byte		.L3772
.L3770:
	.sleb128	21
	.4byte		.L3771
.L3769:
	.sleb128	20
	.4byte		.L3770
.L3821:
	.sleb128	19
	.byte		"Dem_UserClearDTCType"
	.byte		0
	.4byte		.L3822
.L3886:
	.sleb128	19
	.byte		"Dem_SetOpCycleParamType"
	.byte		0
	.4byte		.L3887
.L3885:
	.sleb128	21
	.4byte		.L3886
.L3884:
	.sleb128	20
	.4byte		.L3885
.L3896:
	.sleb128	20
	.4byte		.L3886
.L3980:
	.sleb128	19
	.byte		"Std_VersionInfoType"
	.byte		0
	.4byte		.L3981
.L3979:
	.sleb128	20
	.4byte		.L3980
.L3992:
	.sleb128	19
	.byte		"Dem_ConfigType"
	.byte		0
	.4byte		.L3993
.L3991:
	.sleb128	21
	.4byte		.L3992
.L3990:
	.sleb128	20
	.4byte		.L3991
.L4093:
	.sleb128	20
	.4byte		.L2417
.L4117:
	.sleb128	20
	.4byte		.L2419
.L4142:
	.sleb128	19
	.byte		"Dem_ReturnGetStatusOfDTCType"
	.byte		0
	.4byte		.L2371
.L4192:
	.sleb128	19
	.byte		"Dem_OperationCycleStateType"
	.byte		0
	.4byte		.L2371
.L4247:
	.sleb128	21
	.4byte		.L3546
.L4348:
	.sleb128	19
	.byte		"Dem_ReturnControlDTCSettingType"
	.byte		0
	.4byte		.L2371
.L4351:
	.sleb128	19
	.byte		"Dem_DTCKindType"
	.byte		0
	.4byte		.L2371
.L4374:
	.sleb128	19
	.byte		"Dem_ReturnGetSeverityOfDTCType"
	.byte		0
	.4byte		.L2371
.L4378:
	.sleb128	19
	.byte		"Dem_DTCSeverityType"
	.byte		0
	.4byte		.L2371
.L4377:
	.sleb128	20
	.4byte		.L4378
.L4390:
	.sleb128	19
	.byte		"Dem_ReturnGetFunctionalUnitOfDTCType"
	.byte		0
	.4byte		.L2371
.L4404:
	.sleb128	19
	.byte		"Dem_DTCTranslationFormatType"
	.byte		0
	.4byte		.L2371
.L4419:
	.sleb128	18
	.byte		"long"
	.byte		0
	.byte		0x5
	.byte		0x4
.L4418:
	.sleb128	19
	.byte		"sint32"
	.byte		0
	.4byte		.L4419
.L4438:
	.sleb128	19
	.byte		"Dem_ReturnSetFilterType"
	.byte		0
	.4byte		.L2371
.L4467:
	.sleb128	19
	.byte		"Dem_ReturnGetNumberOfFilteredDTCType"
	.byte		0
	.4byte		.L2371
.L4480:
	.sleb128	19
	.byte		"Dem_ReturnGetNextFilteredElementType"
	.byte		0
	.4byte		.L2371
.L4514:
	.sleb128	19
	.byte		"Dem_ReturnGetDTCByOccurrenceTimeType"
	.byte		0
	.4byte		.L2371
.L4516:
	.sleb128	19
	.byte		"Dem_DTCRequestType"
	.byte		0
	.4byte		.L2371
.L4665:
	.sleb128	19
	.byte		"Dem_ReturnDisableDTCRecordUpdateType"
	.byte		0
	.4byte		.L2371
.L4695:
	.sleb128	19
	.byte		"Dem_ReturnGetSizeOfDataByDTCType"
	.byte		0
	.4byte		.L2371
.L4726:
	.sleb128	19
	.byte		"Dem_ReturnGetStatusIndicatorsOfDTCType"
	.byte		0
	.4byte		.L2371
.L4845:
	.sleb128	19
	.byte		"Dem_ComponentIdType"
	.byte		0
	.4byte		.L2391
.L4850:
	.sleb128	21
	.4byte		.L2419
	.section	.debug_info,,n
.L4854:
	.sleb128	25
	.4byte		.L4855-.L2
	.4byte		.L2567
	.section	.debug_info,,n
	.sleb128	26
	.uleb128	3
	.sleb128	0
.L4855:
.L4857:
	.sleb128	25
	.4byte		.L4858-.L2
	.4byte		.L4192
	.sleb128	26
	.uleb128	0
	.sleb128	0
.L4858:
.L4860:
	.sleb128	19
	.byte		"Dem_NvAdminType"
	.byte		0
	.4byte		.L4861
.L4868:
	.sleb128	19
	.byte		"Dem_LCfgType"
	.byte		0
	.4byte		.L4869
.L4867:
	.sleb128	21
	.4byte		.L4868
.L4872:
	.sleb128	25
	.4byte		.L4873-.L2
	.4byte		.L2656
	.sleb128	26
	.uleb128	1
	.sleb128	0
.L4873:
.L4875:
	.sleb128	25
	.4byte		.L4876-.L2
	.4byte		.L2656
	.sleb128	26
	.uleb128	1
	.sleb128	0
.L4876:
.L4882:
	.sleb128	19
	.byte		"Dem_CircularQueueType"
	.byte		0
	.4byte		.L4883
.L4887:
	.sleb128	19
	.byte		"DTCFilterType"
	.byte		0
	.4byte		.L4888
.L4890:
	.sleb128	19
	.byte		"DTCEvMemFilterType"
	.byte		0
	.4byte		.L4891
.L4893:
	.sleb128	19
	.byte		"DTCRecordFilterType"
	.byte		0
	.4byte		.L4894
.L4896:
	.sleb128	19
	.byte		"DTCCacheType"
	.byte		0
	.4byte		.L4897
.L4899:
	.sleb128	19
	.byte		"Dem_ClearStateType"
	.byte		0
	.4byte		.L4900
.L4902:
	.sleb128	19
	.byte		"Dem_ClearDataType"
	.byte		0
	.4byte		.L4903
.L4905:
	.sleb128	19
	.byte		"Dem_OpCycleChangeType"
	.byte		0
	.4byte		.L4906
.L4909:
	.sleb128	19
	.byte		"Dem_InitStateType"
	.byte		0
	.4byte		.L4910
.L4913:
	.sleb128	19
	.byte		"Dem_EventPriorityType"
	.byte		0
	.4byte		.L2371
.L4915:
	.sleb128	19
	.byte		"Dem_OpCycleChangeStateType"
	.byte		0
	.4byte		.L4916
.L4926:
	.sleb128	19
	.byte		"Dem_LCfgEventType"
	.byte		0
	.4byte		.L4927
.L4925:
	.sleb128	21
	.4byte		.L4926
.L4924:
	.sleb128	20
	.4byte		.L4925
.L4932:
	.sleb128	19
	.byte		"Dem_EvMemType"
	.byte		0
	.4byte		.L4933
.L4931:
	.sleb128	21
	.4byte		.L4932
.L4930:
	.sleb128	20
	.4byte		.L4931
.L4928:
	.sleb128	25
	.4byte		.L4929-.L2
	.4byte		.L4930
	.sleb128	26
	.uleb128	1
	.sleb128	0
.L4929:
.L4936:
	.sleb128	19
	.byte		"Dem_DataElementType"
	.byte		0
	.4byte		.L4937
.L4935:
	.sleb128	21
	.4byte		.L4936
.L4934:
	.sleb128	20
	.4byte		.L4935
.L4940:
	.sleb128	19
	.byte		"Dem_FreezeFrameRecNumClassType"
	.byte		0
	.4byte		.L4941
.L4939:
	.sleb128	21
	.4byte		.L4940
.L4938:
	.sleb128	20
	.4byte		.L4939
.L4944:
	.sleb128	19
	.byte		"Dem_FFPrestorageType"
	.byte		0
	.4byte		.L4945
.L4943:
	.sleb128	21
	.4byte		.L4944
.L4942:
	.sleb128	20
	.4byte		.L4943
.L4946:
	.sleb128	25
	.4byte		.L4947-.L2
	.4byte		.L2467
	.sleb128	26
	.uleb128	1
	.sleb128	0
.L4947:
.L4948:
	.sleb128	25
	.4byte		.L4949-.L2
	.4byte		.L2391
	.sleb128	26
	.uleb128	1
	.sleb128	0
.L4949:
.L4950:
	.sleb128	25
	.4byte		.L4951-.L2
	.4byte		.L2467
	.sleb128	26
	.uleb128	1
	.sleb128	0
.L4951:
.L4954:
	.sleb128	19
	.byte		"Dem_ExtendedDataType"
	.byte		0
	.4byte		.L4955
.L4953:
	.sleb128	21
	.4byte		.L4954
.L4952:
	.sleb128	20
	.4byte		.L4953
.L4957:
	.sleb128	19
	.byte		"Dem_IndicatorStatusType"
	.byte		0
	.4byte		.L2371
.L4956:
	.sleb128	20
	.4byte		.L4957
.L4960:
	.sleb128	19
	.byte		"Dem_MonitorDebouncingType"
	.byte		0
	.4byte		.L4961
.L4959:
	.sleb128	21
	.4byte		.L4960
.L4958:
	.sleb128	20
	.4byte		.L4959
.L4963:
	.sleb128	23
	.4byte		.L4964-.L2
	.4byte		.L2837
	.byte		0x1
	.sleb128	24
	.4byte		.L2390
	.sleb128	24
	.4byte		.L2567
	.sleb128	24
	.4byte		.L2567
	.sleb128	0
.L4964:
.L4962:
	.sleb128	20
	.4byte		.L4963
.L4966:
	.sleb128	23
	.4byte		.L4967-.L2
	.4byte		.L2837
	.byte		0x1
	.sleb128	24
	.4byte		.L2390
	.sleb128	0
.L4967:
.L4965:
	.sleb128	20
	.4byte		.L4966
.L4969:
	.sleb128	21
	.4byte		.L4192
.L4968:
	.sleb128	20
	.4byte		.L4969
.L4970:
	.sleb128	20
	.4byte		.L3155
.L4973:
	.sleb128	19
	.byte		"Dem_InternalGroupOfDtcType"
	.byte		0
	.4byte		.L4974
.L4972:
	.sleb128	21
	.4byte		.L4973
.L4971:
	.sleb128	20
	.4byte		.L4972
.L4980:
	.sleb128	19
	.byte		"Uint8PtrType"
	.byte		0
	.4byte		.L2377
.L4978:
	.sleb128	23
	.4byte		.L4979-.L2
	.4byte		.L4980
	.byte		0x1
	.sleb128	24
	.4byte		.L2371
	.sleb128	0
.L4979:
.L4977:
	.sleb128	20
	.4byte		.L4978
.L4981:
	.sleb128	20
	.4byte		.L2390
.L4984:
	.sleb128	23
	.4byte		.L4985-.L2
	.4byte		.L2376
	.byte		0x1
	.sleb128	24
	.4byte		.L2391
	.sleb128	0
.L4985:
.L4983:
	.sleb128	20
	.4byte		.L4984
.L4987:
	.sleb128	23
	.4byte		.L4988-.L2
	.4byte		.L2376
	.byte		0x1
	.sleb128	24
	.4byte		.L2391
	.sleb128	0
.L4988:
.L4986:
	.sleb128	20
	.4byte		.L4987
.L4992:
	.sleb128	23
	.4byte		.L4993-.L2
	.4byte		.L3546
	.byte		0x1
	.sleb128	24
	.4byte		.L2599
	.sleb128	24
	.4byte		.L2371
	.sleb128	24
	.4byte		.L2390
	.sleb128	24
	.4byte		.L2391
	.sleb128	24
	.4byte		.L2377
	.sleb128	24
	.4byte		.L2610
	.sleb128	0
.L4993:
.L4991:
	.sleb128	20
	.4byte		.L4992
.L4990:
	.sleb128	19
	.byte		"ReadIntDataWrapper"
	.byte		0
	.4byte		.L4991
.L5003:
	.sleb128	23
	.4byte		.L5004-.L2
	.4byte		.L2837
	.byte		0x1
.L5005:
	.sleb128	19
	.byte		"Dem_InitMonitorReasonType"
	.byte		0
	.4byte		.L2371
	.sleb128	24
	.4byte		.L5005
	.sleb128	0
.L5004:
.L5002:
	.sleb128	20
	.4byte		.L5003
.L5001:
	.sleb128	19
	.byte		"InitMForEPtrType"
	.byte		0
	.4byte		.L5002
.L5006:
	.sleb128	20
	.4byte		.L3125
.L5008:
	.sleb128	23
	.4byte		.L5009-.L2
	.4byte		.L2837
	.byte		0x1
	.sleb128	24
	.4byte		.L4093
	.sleb128	0
.L5009:
.L5007:
	.sleb128	20
	.4byte		.L5008
.L5011:
	.sleb128	23
	.4byte		.L5012-.L2
	.4byte		.L2837
	.byte		0x1
	.sleb128	0
.L5012:
.L5010:
	.sleb128	20
	.4byte		.L5011
.L5013:
	.sleb128	19
	.byte		"Dem_DebouncingType"
	.byte		0
	.4byte		.L2371
.L5016:
	.sleb128	25
	.4byte		.L5017-.L2
	.4byte		.L2391
	.sleb128	26
	.uleb128	0
	.sleb128	0
.L5017:
.L5018:
	.sleb128	25
	.4byte		.L5019-.L2
	.4byte		.L2371
	.sleb128	26
	.uleb128	0
	.sleb128	0
.L5019:
.L5020:
	.sleb128	25
	.4byte		.L5021-.L2
	.4byte		.L2371
	.sleb128	26
	.uleb128	0
	.sleb128	26
	.uleb128	0
	.sleb128	0
.L5021:
.L5022:
	.sleb128	25
	.4byte		.L5023-.L2
	.4byte		.L2371
	.sleb128	26
	.uleb128	0
	.sleb128	0
.L5023:
.L5024:
	.sleb128	25
	.4byte		.L5025-.L2
	.4byte		.L2371
	.sleb128	26
	.uleb128	0
	.sleb128	0
.L5025:
.L5027:
	.sleb128	19
	.byte		"Dem_EventOccurrenceInfoType"
	.byte		0
	.4byte		.L5028
.L5029:
	.sleb128	25
	.4byte		.L5030-.L2
	.4byte		.L2371
	.sleb128	26
	.uleb128	9
	.sleb128	0
.L5030:
.L5031:
	.sleb128	25
	.4byte		.L5032-.L2
	.4byte		.L2371
	.sleb128	26
	.uleb128	9
	.sleb128	0
.L5032:
.L5035:
	.sleb128	20
	.4byte		.L2783
.L5037:
	.sleb128	21
	.4byte		.L4378
.L5036:
	.sleb128	20
	.4byte		.L5037
.L5038:
	.sleb128	20
	.4byte		.L4850
.L5041:
	.sleb128	19
	.byte		"Dem_TimeDebouncingType"
	.byte		0
	.4byte		.L5042
.L5040:
	.sleb128	21
	.4byte		.L5041
.L5039:
	.sleb128	20
	.4byte		.L5040
.L5043:
	.sleb128	20
	.4byte		.L2535
.L5049:
	.sleb128	19
	.byte		"Dem_IndicatorListItemType"
	.byte		0
	.4byte		.L5050
.L5048:
	.sleb128	21
	.4byte		.L5049
.L5047:
	.sleb128	20
	.4byte		.L5048
.L5046:
	.sleb128	19
	.byte		"IndicatorListItemPtrType"
	.byte		0
	.4byte		.L5047
.L5045:
	.sleb128	21
	.4byte		.L5046
.L5044:
	.sleb128	20
	.4byte		.L5045
.L5053:
	.sleb128	19
	.byte		"Dem_FreezeFrameClassType"
	.byte		0
	.4byte		.L5054
.L5052:
	.sleb128	21
	.4byte		.L5053
.L5051:
	.sleb128	20
	.4byte		.L5052
.L5057:
	.sleb128	19
	.byte		"Dem_EnableConditionGroupType"
	.byte		0
	.4byte		.L5058
.L5056:
	.sleb128	21
	.4byte		.L5057
.L5055:
	.sleb128	20
	.4byte		.L5056
.L5061:
	.sleb128	19
	.byte		"Dem_StorageConditionGroupType"
	.byte		0
	.4byte		.L5062
.L5060:
	.sleb128	21
	.4byte		.L5061
.L5059:
	.sleb128	20
	.4byte		.L5060
.L5063:
	.sleb128	21
	.4byte		.L5038
.L5071:
	.sleb128	23
	.4byte		.L5072-.L2
	.4byte		.L2837
	.byte		0x1
	.sleb128	24
	.4byte		.L3433
	.sleb128	0
.L5072:
.L5070:
	.sleb128	20
	.4byte		.L5071
.L5069:
	.sleb128	19
	.byte		"GetFaultDetectionCounterPtrType"
	.byte		0
	.4byte		.L5070
.L7:
	.sleb128	0
.L3:

	.section	.debug_loc,,n
	.align	0
.L2373:
	.d2locreg	%offsetof(.Llo1), %offsetof(.Llo2),3
	.d2locreg	%offsetof(.Llo3), %offsetof(.Llo4),0
	.d2locreg	%offsetof(.Llo5), %offsetof(.Llo6),0
	.d2locreg	%offsetof(.Llo7), %offsetof(.Llo8),0
	.d2locreg	%offsetof(.Llo9), %offsetof(.Llo10),0
	.d2locend
.L2374:
	.d2locreg	%offsetof(.Llo1), %offsetof(.Llo11),4
	.d2locreg	%offsetof(.Llo12), %offsetof(.Llo13),31
	.d2locend
.L2378:
	.d2locreg	%offsetof(.Llo14), %offsetof(.Llo15),3
	.d2locreg	%offsetof(.Llo16), %offsetof(.Llo17),3
	.d2locend
.L2380:
	.d2locreg	%offsetof(.Llo12), %offsetof(.Llo13),4
	.d2locend
.L2382:
	.d2locreg	%offsetof(.Llo18), %offsetof(.Llo10),5
	.d2locend
.L2384:
	.d2locreg	%offsetof(.Llo19), %offsetof(.Llo10),6
	.d2locend
.L2393:
	.d2locreg	%offsetof(.Llo20), %offsetof(.Llo21),3
	.d2locreg	%offsetof(.Llo22), %offsetof(.Llo23),31
	.d2locend
.L2394:
	.d2locreg	%offsetof(.Llo20), %offsetof(.Llo24),4
	.d2locreg	%offsetof(.Llo25), %offsetof(.Llo23),30
	.d2locend
.L2400:
	.d2locreg	%offsetof(.Llo20), %offsetof(.Llo22),5
	.d2locreg	%offsetof(.Llo26), %offsetof(.Llo27),29
	.d2locreg	%offsetof(.Llo28), %offsetof(.Llo29),5
	.d2locend
.L2402:
	.d2locreg	%offsetof(.Llo21), %offsetof(.Llo22),3
	.d2locreg	%offsetof(.Llo26), %offsetof(.Llo23),28
	.d2locreg	%offsetof(.Llo30), %offsetof(.Llo28),3
	.d2locend
.L2404:
	.d2locreg	%offsetof(.Llo22), %offsetof(.Llo23),28
	.d2locend
.L2408:
	.d2locreg	%offsetof(.Llo31), %offsetof(.Llo32),8
	.d2locend
.L2410:
	.d2locreg	%offsetof(.Llo33), %offsetof(.Llo27),27
	.d2locend
.L2412:
	.d2locreg	%offsetof(.Llo34), %offsetof(.Llo23),26
	.d2locend
.L2421:
	.d2locreg	%offsetof(.Llo35), %offsetof(.Llo36),3
	.d2locend
.L2422:
	.d2locreg	%offsetof(.Llo35), %offsetof(.Llo36),4
	.d2locend
.L2424:
	.d2locreg	%offsetof(.Llo37), %offsetof(.Llo36),5
	.d2locend
.L2426:
	.d2locreg	%offsetof(.Llo38), %offsetof(.Llo39),6
	.d2locend
.L2432:
	.d2locreg	%offsetof(.Llo40), %offsetof(.Llo41),3
	.d2locend
.L2433:
	.d2locreg	%offsetof(.Llo40), %offsetof(.Llo41),4
	.d2locend
.L2435:
	.d2locreg	%offsetof(.Llo42), %offsetof(.Llo41),5
	.d2locend
.L2437:
	.d2locreg	%offsetof(.Llo43), %offsetof(.Llo44),6
	.d2locend
.L2443:
	.d2locreg	%offsetof(.Llo45), %offsetof(.Llo46),3
	.d2locreg	%offsetof(.Llo47), %offsetof(.Llo48),0
	.d2locreg	%offsetof(.Llo49), %offsetof(.Llo50),0
	.d2locreg	%offsetof(.Llo51), %offsetof(.Llo52),0
	.d2locreg	%offsetof(.Llo53), %offsetof(.Llo54),0
	.d2locreg	%offsetof(.Llo55), %offsetof(.Llo56),0
	.d2locreg	%offsetof(.Llo57), %offsetof(.Llo58),0
	.d2locend
.L2446:
	.d2locreg	%offsetof(.Llo59), %offsetof(.Llo60),31
	.d2locreg	%offsetof(.Llo61), %offsetof(.Llo62),31
	.d2locend
.L2448:
	.d2locreg	%offsetof(.Llo45), %offsetof(.Llo56),30
	.d2locreg	%offsetof(.Llo57), %offsetof(.Llo58),3
	.d2locreg	%offsetof(.Llo63), %offsetof(.Llo64),30
	.d2locend
.L2454:
	.d2locreg	%offsetof(.Llo65), %offsetof(.Llo66),3
	.d2locreg	%offsetof(.Llo67), %offsetof(.Llo68),0
	.d2locend
.L2456:
	.d2locreg	%offsetof(.Llo69), %offsetof(.Llo70),4
	.d2locend
.L2458:
	.d2locreg	%offsetof(.Llo71), %offsetof(.Llo72),0
	.d2locend
.L2460:
	.d2locreg	%offsetof(.Llo73), %offsetof(.Llo74),0
	.d2locreg	%offsetof(.Llo68), %offsetof(.Llo75),0
	.d2locend
.L2466:
	.d2locreg	%offsetof(.Llo76), %offsetof(.Llo77),3
	.d2locreg	%offsetof(.Llo78), %offsetof(.Llo79),31
	.d2locend
.L2471:
	.d2locreg	%offsetof(.Llo76), %offsetof(.Llo77),4
	.d2locreg	%offsetof(.Llo78), %offsetof(.Llo80),30
	.d2locreg	%offsetof(.Llo81), %offsetof(.Llo82),4
	.d2locend
.L2473:
	.d2locreg	%offsetof(.Llo77), %offsetof(.Llo80),29
	.d2locend
.L2475:
	.d2locreg	%offsetof(.Llo78), %offsetof(.Llo83),3
	.d2locreg	%offsetof(.Llo84), %offsetof(.Llo85),3
	.d2locreg	%offsetof(.Llo86), %offsetof(.Llo87),3
	.d2locreg	%offsetof(.Llo81), %offsetof(.Llo82),3
	.d2locend
.L2481:
	.d2locreg	%offsetof(.Llo88), %offsetof(.Llo89),3
	.d2locreg	%offsetof(.Llo90), %offsetof(.Llo91),30
	.d2locend
.L2483:
	.d2locreg	%offsetof(.Llo92), %offsetof(.Llo93),0
	.d2locreg	%offsetof(.Llo94), %offsetof(.Llo95),0
	.d2locreg	%offsetof(.Llo96), %offsetof(.Llo97),0
	.d2locend
.L2489:
	.d2locreg	%offsetof(.Llo98), %offsetof(.Llo99),3
	.d2locreg	%offsetof(.Llo100), %offsetof(.Llo101),31
	.d2locreg	%offsetof(.Llo102), %offsetof(.Llo103),3
	.d2locend
.L2490:
	.d2locreg	%offsetof(.Llo98), %offsetof(.Llo104),4
	.d2locend
.L2492:
	.d2locreg	%offsetof(.Llo100), %offsetof(.Llo105),3
	.d2locreg	%offsetof(.Llo104), %offsetof(.Llo101),3
	.d2locend
.L2498:
	.d2locreg	%offsetof(.Llo106), %offsetof(.Llo107),3
	.d2locreg	%offsetof(.Llo108), %offsetof(.Llo109),0
	.d2locreg	%offsetof(.Llo110), %offsetof(.Llo111),0
	.d2locreg	%offsetof(.Llo112), %offsetof(.Llo113),0
	.d2locreg	%offsetof(.Llo114), %offsetof(.Llo115),0
	.d2locreg	%offsetof(.Llo116), %offsetof(.Llo117),0
	.d2locreg	%offsetof(.Llo118), %offsetof(.Llo119),0
	.d2locreg	%offsetof(.Llo120), %offsetof(.Llo121),0
	.d2locreg	%offsetof(.Llo122), %offsetof(.Llo123),0
	.d2locreg	%offsetof(.Llo124), %offsetof(.Llo125),0
	.d2locreg	%offsetof(.Llo126), %offsetof(.Llo127),0
	.d2locreg	%offsetof(.Llo128), %offsetof(.Llo129),0
	.d2locend
.L2499:
	.d2locreg	%offsetof(.Llo106), %offsetof(.Llo130),4
	.d2locreg	%offsetof(.Llo109), %offsetof(.Llo131),31
	.d2locreg	%offsetof(.Llo128), %offsetof(.Llo132),31
	.d2locend
.L2505:
	.d2locreg	%offsetof(.Llo133), %offsetof(.Llo119),3
	.d2locreg	%offsetof(.Llo121), %offsetof(.Llo134),3
	.d2locreg	%offsetof(.Llo135), %offsetof(.Llo131),3
	.d2locend
.L2507:
	.d2locreg	%offsetof(.Llo136), %offsetof(.Llo121),4
	.d2locreg	%offsetof(.Llo137), %offsetof(.Llo123),4
	.d2locreg	%offsetof(.Llo138), %offsetof(.Llo125),4
	.d2locreg	%offsetof(.Llo139), %offsetof(.Llo131),4
	.d2locend
.L2509:
	.d2locreg	%offsetof(.Llo140), %offsetof(.Llo129),5
	.d2locend
.L2511:
	.d2locreg	%offsetof(.Llo141), %offsetof(.Llo129),6
	.d2locend
.L2517:
	.d2locreg	%offsetof(.Llo142), %offsetof(.Llo143),3
	.d2locreg	%offsetof(.Llo144), %offsetof(.Llo145),31
	.d2locreg	%offsetof(.Llo146), %offsetof(.Llo147),3
	.d2locend
.L2518:
	.d2locreg	%offsetof(.Llo142), %offsetof(.Llo143),4
	.d2locreg	%offsetof(.Llo144), %offsetof(.Llo145),30
	.d2locend
.L2519:
	.d2locreg	%offsetof(.Llo142), %offsetof(.Llo143),5
	.d2locreg	%offsetof(.Llo144), %offsetof(.Llo145),29
	.d2locreg	%offsetof(.Llo146), %offsetof(.Llo147),5
	.d2locend
.L2530:
	.d2locreg	%offsetof(.Llo148), %offsetof(.Llo149),3
	.d2locreg	%offsetof(.Llo150), %offsetof(.Llo151),0
	.d2locend
.L2531:
	.d2locreg	%offsetof(.Llo148), %offsetof(.Llo152),4
	.d2locend
.L2533:
	.d2locreg	%offsetof(.Llo153), %offsetof(.Llo154),3
	.d2locend
.L2536:
	.d2locreg	%offsetof(.Llo148), %offsetof(.Llo155),31
	.d2locend
.L2542:
	.d2locreg	%offsetof(.Llo156), %offsetof(.Llo157),3
	.d2locend
.L2543:
	.d2locreg	%offsetof(.Llo156), %offsetof(.Llo157),4
	.d2locend
.L2544:
	.d2locreg	%offsetof(.Llo156), %offsetof(.Llo157),5
	.d2locend
.L2546:
	.d2locreg	%offsetof(.Llo158), %offsetof(.Llo159),0
	.d2locreg	%offsetof(.Llo160), %offsetof(.Llo157),0
	.d2locend
.L2548:
	.d2locreg	%offsetof(.Llo161), %offsetof(.Llo162),6
	.d2locreg	%offsetof(.Llo163), %offsetof(.Llo164),6
	.d2locreg	%offsetof(.Llo165), %offsetof(.Llo157),6
	.d2locend
.L2550:
	.d2locreg	%offsetof(.Llo166), %offsetof(.Llo167),7
	.d2locreg	%offsetof(.Llo168), %offsetof(.Llo157),31
	.d2locreg	%offsetof(.Llo169), %offsetof(.Llo170),7
	.d2locend
.L2552:
	.d2locreg	%offsetof(.Llo167), %offsetof(.Llo157),31
	.d2locend
.L2563:
	.d2locreg	%offsetof(.Llo171), %offsetof(.Llo172),3
	.d2locreg	%offsetof(.Llo173), %offsetof(.Llo174),3
	.d2locend
.L2564:
	.d2locreg	%offsetof(.Llo171), %offsetof(.Llo175),4
	.d2locreg	%offsetof(.Llo176), %offsetof(.Llo177),30
	.d2locend
.L2568:
	.d2locreg	%offsetof(.Llo176), %offsetof(.Llo177),31
	.d2locend
.L2574:
	.d2locreg	%offsetof(.Llo178), %offsetof(.Llo179),3
	.d2locreg	%offsetof(.Llo180), %offsetof(.Llo181),31
	.d2locend
.L2577:
	.d2locreg	%offsetof(.Llo182), %offsetof(.Llo183),30
	.d2locend
.L2580:
	.d2locreg	%offsetof(.Llo184), %offsetof(.Llo183),29
	.d2locend
.L2582:
	.d2locreg	%offsetof(.Llo185), %offsetof(.Llo183),28
	.d2locend
.L2584:
	.d2locreg	%offsetof(.Llo186), %offsetof(.Llo187),3
	.d2locreg	%offsetof(.Llo188), %offsetof(.Llo189),0
	.d2locreg	%offsetof(.Llo190), %offsetof(.Llo183),0
	.d2locend
.L2590:
	.d2locreg	%offsetof(.Llo191), %offsetof(.Llo192),3
	.d2locreg	%offsetof(.Llo193), %offsetof(.Llo194),0
	.d2locend
.L2592:
	.d2locreg	%offsetof(.Llo195), %offsetof(.Llo196),4
	.d2locreg	%offsetof(.Llo197), %offsetof(.Llo198),4
	.d2locend
.L2598:
	.d2locreg	%offsetof(.Llo199), %offsetof(.Llo200),3
	.d2locreg	%offsetof(.Llo201), %offsetof(.Llo202),3
	.d2locend
.L2601:
	.d2locreg	%offsetof(.Llo199), %offsetof(.Llo202),4
	.d2locend
.L2603:
	.d2locreg	%offsetof(.Llo203), %offsetof(.Llo204),5
	.d2locend
.L2609:
	.d2locreg	%offsetof(.Llo205), %offsetof(.Llo206),3
	.d2locreg	%offsetof(.Llo207), %offsetof(.Llo208),31
	.d2locend
.L2611:
	.d2locreg	%offsetof(.Llo205), %offsetof(.Llo206),4
	.d2locreg	%offsetof(.Llo207), %offsetof(.Llo208),30
	.d2locreg	%offsetof(.Llo209), %offsetof(.Llo210),4
	.d2locend
.L2613:
	.d2locreg	%offsetof(.Llo211), %offsetof(.Llo212),29
	.d2locend
.L2615:
	.d2locreg	%offsetof(.Llo206), %offsetof(.Llo208),28
	.d2locend
.L2623:
	.d2locreg	%offsetof(.Llo213), %offsetof(.Llo214),3
	.d2locend
.L2624:
	.d2locreg	%offsetof(.Llo213), %offsetof(.Llo215),4
	.d2locend
.L2625:
	.d2locreg	%offsetof(.Llo213), %offsetof(.Llo216),5
	.d2locreg	%offsetof(.Llo217), %offsetof(.Llo215),0
	.d2locend
.L2627:
	.d2locreg	%offsetof(.Llo214), %offsetof(.Llo216),3
	.d2locend
.L2629:
	.d2locreg	%offsetof(.Llo216), %offsetof(.Llo215),3
	.d2locend
.L2635:
	.d2locreg	%offsetof(.Llo218), %offsetof(.Llo219),3
	.d2locreg	%offsetof(.Llo220), %offsetof(.Llo221),31
	.d2locend
.L2636:
	.d2locreg	%offsetof(.Llo218), %offsetof(.Llo221),4
	.d2locreg	%offsetof(.Llo222), %offsetof(.Llo223),3
	.d2locreg	%offsetof(.Llo224), %offsetof(.Llo225),3
	.d2locreg	%offsetof(.Llo226), %offsetof(.Llo227),3
	.d2locreg	%offsetof(.Llo228), %offsetof(.Llo229),3
	.d2locreg	%offsetof(.Llo230), %offsetof(.Llo231),3
	.d2locend
.L2637:
	.d2locreg	%offsetof(.Llo218), %offsetof(.Llo221),5
	.d2locend
.L2638:
	.d2locreg	%offsetof(.Llo218), %offsetof(.Llo221),6
	.d2locend
.L2639:
	.d2locreg	%offsetof(.Llo218), %offsetof(.Llo232),7
	.d2locreg	%offsetof(.Llo221), %offsetof(.Llo233),25
	.d2locend
.L2641:
	.d2locreg	%offsetof(.Llo234), %offsetof(.Llo233),31
	.d2locend
.L2643:
	.d2locreg	%offsetof(.Llo235), %offsetof(.Llo233),30
	.d2locend
.L2645:
	.d2locreg	%offsetof(.Llo236), %offsetof(.Llo233),29
	.d2locend
.L2647:
	.d2locreg	%offsetof(.Llo221), %offsetof(.Llo234),3
	.d2locreg	%offsetof(.Llo222), %offsetof(.Llo233),28
	.d2locend
.L2653:
	.d2locreg	%offsetof(.Llo237), %offsetof(.Llo238),27
	.d2locreg	%offsetof(.Llo239), %offsetof(.Llo225),0
	.d2locreg	%offsetof(.Llo240), %offsetof(.Llo233),27
	.d2locend
.L2657:
	.d2locreg	%offsetof(.Llo241), %offsetof(.Llo242),26
	.d2locend
.L2663:
	.d2locreg	%offsetof(.Llo243), %offsetof(.Llo244),3
	.d2locend
.L2664:
	.d2locreg	%offsetof(.Llo243), %offsetof(.Llo245),4
	.d2locreg	%offsetof(.Llo246), %offsetof(.Llo247),7
	.d2locend
.L2665:
	.d2locreg	%offsetof(.Llo243), %offsetof(.Llo244),5
	.d2locreg	%offsetof(.Llo248), %offsetof(.Llo249),31
	.d2locend
.L2666:
	.d2locreg	%offsetof(.Llo243), %offsetof(.Llo250),6
	.d2locreg	%offsetof(.Llo251), %offsetof(.Llo249),30
	.d2locend
.L2668:
	.d2locreg	%offsetof(.Llo251), %offsetof(.Llo248),6
	.d2locreg	%offsetof(.Llo252), %offsetof(.Llo253),4
	.d2locreg	%offsetof(.Llo249), %offsetof(.Llo254),6
	.d2locend
.L2675:
	.d2locreg	%offsetof(.Llo255), %offsetof(.Llo256),0
	.d2locreg	%offsetof(.Llo257), %offsetof(.Llo253),0
	.d2locend
.L2677:
	.d2locreg	%offsetof(.Llo258), %offsetof(.Llo249),28
	.d2locend
.L2680:
	.d2locreg	%offsetof(.Llo259), %offsetof(.Llo249),29
	.d2locend
.L2691:
	.d2locreg	%offsetof(.Llo260), %offsetof(.Llo261),3
	.d2locreg	%offsetof(.Llo262), %offsetof(.Llo263),0
	.d2locend
.L2693:
	.d2locreg	%offsetof(.Llo264), %offsetof(.Llo265),4
	.d2locreg	%offsetof(.Llo266), %offsetof(.Llo267),4
	.d2locend
.L2699:
	.d2locreg	%offsetof(.Llo268), %offsetof(.Llo269),3
	.d2locreg	%offsetof(.Llo270), %offsetof(.Llo271),31
	.d2locend
.L2700:
	.d2locreg	%offsetof(.Llo268), %offsetof(.Llo270),4
	.d2locreg	%offsetof(.Llo272), %offsetof(.Llo271),30
	.d2locend
.L2702:
	.d2locreg	%offsetof(.Llo273), %offsetof(.Llo274),29
	.d2locend
.L2704:
	.d2locreg	%offsetof(.Llo275), %offsetof(.Llo271),28
	.d2locend
.L2710:
	.d2locreg	%offsetof(.Llo272), %offsetof(.Llo271),27
	.d2locend
.L2716:
	.d2locreg	%offsetof(.Llo276), %offsetof(.Llo277),3
	.d2locreg	%offsetof(.Llo278), %offsetof(.Llo279),3
	.d2locreg	%offsetof(.Llo280), %offsetof(.Llo281),3
	.d2locreg	%offsetof(.Llo282), %offsetof(.Llo283),3
	.d2locreg	%offsetof(.Llo284), %offsetof(.Llo285),3
	.d2locreg	%offsetof(.Llo286), %offsetof(.Llo287),3
	.d2locreg	%offsetof(.Llo288), %offsetof(.Llo289),3
	.d2locreg	%offsetof(.Llo290), %offsetof(.Llo291),3
	.d2locend
.L2722:
	.d2locreg	%offsetof(.Llo292), %offsetof(.Llo293),3
	.d2locreg	%offsetof(.Llo294), %offsetof(.Llo295),3
	.d2locend
.L2723:
	.d2locreg	%offsetof(.Llo292), %offsetof(.Llo296),4
	.d2locreg	%offsetof(.Llo297), %offsetof(.Llo298),30
	.d2locend
.L2725:
	.d2locreg	%offsetof(.Llo297), %offsetof(.Llo298),31
	.d2locend
.L2731:
	.d2locreg	%offsetof(.Llo299), %offsetof(.Llo300),3
	.d2locreg	%offsetof(.Llo301), %offsetof(.Llo302),31
	.d2locend
.L2732:
	.d2locreg	%offsetof(.Llo299), %offsetof(.Llo303),4
	.d2locreg	%offsetof(.Llo304), %offsetof(.Llo302),30
	.d2locend
.L2738:
	.d2locreg	%offsetof(.Llo305), %offsetof(.Llo306),3
	.d2locreg	%offsetof(.Llo307), %offsetof(.Llo308),4
	.d2locreg	%offsetof(.Llo309), %offsetof(.Llo310),3
	.d2locend
.L2744:
	.d2locreg	%offsetof(.Llo311), %offsetof(.Llo312),3
	.d2locend
.L2745:
	.d2locreg	%offsetof(.Llo311), %offsetof(.Llo313),4
	.d2locend
.L2751:
	.d2locreg	%offsetof(.Llo314), %offsetof(.Llo315),3
	.d2locreg	%offsetof(.Llo316), %offsetof(.Llo317),31
	.d2locend
.L2752:
	.d2locreg	%offsetof(.Llo314), %offsetof(.Llo316),4
	.d2locreg	%offsetof(.Llo318), %offsetof(.Llo319),30
	.d2locreg	%offsetof(.Llo320), %offsetof(.Llo321),4
	.d2locreg	%offsetof(.Llo322), %offsetof(.Llo323),3
	.d2locend
.L2753:
	.d2locreg	%offsetof(.Llo314), %offsetof(.Llo316),5
	.d2locreg	%offsetof(.Llo318), %offsetof(.Llo317),29
	.d2locend
.L2759:
	.d2locreg	%offsetof(.Llo324), %offsetof(.Llo325),3
	.d2locend
.L2760:
	.d2locreg	%offsetof(.Llo324), %offsetof(.Llo326),4
	.d2locreg	%offsetof(.Llo327), %offsetof(.Llo328),0
	.d2locend
.L2762:
	.d2locreg	%offsetof(.Llo326), %offsetof(.Llo329),4
	.d2locend
.L2764:
	.d2locreg	%offsetof(.Llo325), %offsetof(.Llo327),3
	.d2locreg	%offsetof(.Llo330), %offsetof(.Llo328),3
	.d2locend
.L2770:
	.d2locreg	%offsetof(.Llo331), %offsetof(.Llo332),3
	.d2locreg	%offsetof(.Llo333), %offsetof(.Llo334),7
	.d2locreg	%offsetof(.Llo335), %offsetof(.Llo336),7
	.d2locend
.L2771:
	.d2locreg	%offsetof(.Llo331), %offsetof(.Llo337),4
	.d2locreg	%offsetof(.Llo333), %offsetof(.Llo338),31
	.d2locreg	%offsetof(.Llo335), %offsetof(.Llo336),31
	.d2locend
.L2773:
	.d2locreg	%offsetof(.Llo339), %offsetof(.Llo340),30
	.d2locend
.L2775:
	.d2locreg	%offsetof(.Llo332), %offsetof(.Llo333),3
	.d2locreg	%offsetof(.Llo341), %offsetof(.Llo342),3
	.d2locend
.L2777:
	.d2locreg	%offsetof(.Llo331), %offsetof(.Llo343),29
	.d2locreg	%offsetof(.Llo344), %offsetof(.Llo345),29
	.d2locend
.L2784:
	.d2locreg	%offsetof(.Llo346), %offsetof(.Llo347),3
	.d2locreg	%offsetof(.Llo348), %offsetof(.Llo349),3
	.d2locend
.L2786:
	.d2locreg	%offsetof(.Llo350), %offsetof(.Llo351),0
	.d2locend
.L2791:
	.d2locreg	%offsetof(.Llo343), %offsetof(.Llo350),0
	.d2locreg	%offsetof(.Llo351), %offsetof(.Llo349),0
	.d2locreg	%offsetof(.Llo352), %offsetof(.Llo338),0
	.d2locreg	%offsetof(.Llo353), %offsetof(.Llo336),0
	.d2locend
.L2797:
	.d2locreg	%offsetof(.Llo354), %offsetof(.Llo355),3
	.d2locreg	%offsetof(.Llo356), %offsetof(.Llo357),31
	.d2locend
.L2798:
	.d2locreg	%offsetof(.Llo354), %offsetof(.Llo355),4
	.d2locreg	%offsetof(.Llo356), %offsetof(.Llo357),30
	.d2locend
.L2799:
	.d2locreg	%offsetof(.Llo354), %offsetof(.Llo355),5
	.d2locreg	%offsetof(.Llo356), %offsetof(.Llo357),29
	.d2locreg	%offsetof(.Llo358), %offsetof(.Llo359),5
	.d2locend
.L2801:
	.d2locreg	%offsetof(.Llo360), %offsetof(.Llo361),28
	.d2locend
.L2803:
	.d2locreg	%offsetof(.Llo355), %offsetof(.Llo357),27
	.d2locend
.L2809:
	.d2locreg	%offsetof(.Llo362), %offsetof(.Llo363),3
	.d2locreg	%offsetof(.Llo364), %offsetof(.Llo365),31
	.d2locend
.L2810:
	.d2locreg	%offsetof(.Llo362), %offsetof(.Llo364),4
	.d2locreg	%offsetof(.Llo366), %offsetof(.Llo367),4
	.d2locend
.L2816:
	.d2locreg	%offsetof(.Llo368), %offsetof(.Llo369),0
	.d2locend
.L2819:
	.d2locreg	%offsetof(.Llo370), %offsetof(.Llo371),30
	.d2locend
.L2821:
	.d2locreg	%offsetof(.Llo372), %offsetof(.Llo365),29
	.d2locend
.L2823:
	.d2locreg	%offsetof(.Llo373), %offsetof(.Llo374),0
	.d2locreg	%offsetof(.Llo375), %offsetof(.Llo376),0
	.d2locreg	%offsetof(.Llo366), %offsetof(.Llo368),0
	.d2locreg	%offsetof(.Llo369), %offsetof(.Llo377),0
	.d2locreg	%offsetof(.Llo378), %offsetof(.Llo365),0
	.d2locend
.L2825:
	.d2locreg	%offsetof(.Llo379), %offsetof(.Llo365),28
	.d2locend
.L2827:
	.d2locreg	%offsetof(.Llo380), %offsetof(.Llo381),5
	.d2locreg	%offsetof(.Llo382), %offsetof(.Llo378),27
	.d2locend
.L2829:
	.d2locreg	%offsetof(.Llo364), %offsetof(.Llo365),26
	.d2locend
.L2831:
	.d2locreg	%offsetof(.Llo362), %offsetof(.Llo383),25
	.d2locend
.L2838:
	.d2locreg	%offsetof(.Llo377), %offsetof(.Llo381),0
	.d2locend
.L2844:
	.d2locreg	%offsetof(.Llo384), %offsetof(.Llo385),3
	.d2locreg	%offsetof(.Llo386), %offsetof(.Llo387),3
	.d2locreg	%offsetof(.Llo388), %offsetof(.Llo389),3
	.d2locreg	%offsetof(.Llo390), %offsetof(.Llo391),3
	.d2locend
.L2845:
	.d2locreg	%offsetof(.Llo384), %offsetof(.Llo392),4
	.d2locreg	%offsetof(.Llo393), %offsetof(.Llo394),31
	.d2locend
.L2850:
	.d2locreg	%offsetof(.Llo384), %offsetof(.Llo395),5
	.d2locreg	%offsetof(.Llo385), %offsetof(.Llo396),30
	.d2locend
.L2852:
	.d2locreg	%offsetof(.Llo397), %offsetof(.Llo385),0
	.d2locreg	%offsetof(.Llo398), %offsetof(.Llo399),0
	.d2locreg	%offsetof(.Llo400), %offsetof(.Llo401),0
	.d2locreg	%offsetof(.Llo402), %offsetof(.Llo403),0
	.d2locreg	%offsetof(.Llo404), %offsetof(.Llo405),0
	.d2locreg	%offsetof(.Llo406), %offsetof(.Llo394),0
	.d2locend
.L2854:
	.d2locreg	%offsetof(.Llo407), %offsetof(.Llo396),29
	.d2locreg	%offsetof(.Llo408), %offsetof(.Llo409),29
	.d2locend
.L2856:
	.d2locreg	%offsetof(.Llo410), %offsetof(.Llo394),28
	.d2locend
.L2859:
	.d2locreg	%offsetof(.Llo411), %offsetof(.Llo412),4
	.d2locreg	%offsetof(.Llo413), %offsetof(.Llo385),4
	.d2locreg	%offsetof(.Llo414), %offsetof(.Llo396),27
	.d2locreg	%offsetof(.Llo415), %offsetof(.Llo394),4
	.d2locend
.L2865:
	.d2locreg	%offsetof(.Llo416), %offsetof(.Llo417),26
	.d2locend
.L2867:
	.d2locreg	%offsetof(.Llo414), %offsetof(.Llo418),25
	.d2locend
.L2869:
	.d2locreg	%offsetof(.Llo419), %offsetof(.Llo420),24
	.d2locreg	%offsetof(.Llo421), %offsetof(.Llo418),24
	.d2locend
.L2871:
	.d2locreg	%offsetof(.Llo414), %offsetof(.Llo421),25
	.d2locreg	%offsetof(.Llo422), %offsetof(.Llo417),23
	.d2locend
.L2873:
	.d2locreg	%offsetof(.Llo423), %offsetof(.Llo405),3
	.d2locend
.L2879:
	.d2locreg	%offsetof(.Llo424), %offsetof(.Llo425),3
	.d2locreg	%offsetof(.Llo426), %offsetof(.Llo427),3
	.d2locreg	%offsetof(.Llo428), %offsetof(.Llo429),3
	.d2locreg	%offsetof(.Llo396), %offsetof(.Llo394),3
	.d2locreg	%offsetof(.Llo430), %offsetof(.Llo431),3
	.d2locreg	%offsetof(.Llo432), %offsetof(.Llo433),3
	.d2locreg	%offsetof(.Llo434), %offsetof(.Llo435),3
	.d2locend
.L2885:
	.d2locreg	%offsetof(.Llo436), %offsetof(.Llo428),3
	.d2locreg	%offsetof(.Llo396), %offsetof(.Llo417),22
	.d2locend
.L2891:
	.d2locreg	%offsetof(.Llo437), %offsetof(.Llo438),3
	.d2locreg	%offsetof(.Llo439), %offsetof(.Llo440),0
	.d2locend
.L2892:
	.d2locreg	%offsetof(.Llo437), %offsetof(.Llo441),4
	.d2locreg	%offsetof(.Llo442), %offsetof(.Llo443),31
	.d2locend
.L2893:
	.d2locreg	%offsetof(.Llo437), %offsetof(.Llo444),5
	.d2locend
.L2895:
	.d2locreg	%offsetof(.Llo444), %offsetof(.Llo445),3
	.d2locreg	%offsetof(.Llo446), %offsetof(.Llo443),30
	.d2locend
.L2897:
	.d2locreg	%offsetof(.Llo439), %offsetof(.Llo447),3
	.d2locreg	%offsetof(.Llo445), %offsetof(.Llo446),3
	.d2locreg	%offsetof(.Llo448), %offsetof(.Llo449),3
	.d2locreg	%offsetof(.Llo450), %offsetof(.Llo451),3
	.d2locreg	%offsetof(.Llo452), %offsetof(.Llo453),3
	.d2locend
.L2899:
	.d2locreg	%offsetof(.Llo454), %offsetof(.Llo455),29
	.d2locend
.L2901:
	.d2locreg	%offsetof(.Llo456), %offsetof(.Llo443),28
	.d2locend
.L2903:
	.d2locreg	%offsetof(.Llo457), %offsetof(.Llo458),27
	.d2locreg	%offsetof(.Llo459), %offsetof(.Llo455),27
	.d2locend
.L2909:
	.d2locreg	%offsetof(.Llo460), %offsetof(.Llo461),3
	.d2locreg	%offsetof(.Llo462), %offsetof(.Llo463),31
	.d2locreg	%offsetof(.Llo464), %offsetof(.Llo465),31
	.d2locend
.L2910:
	.d2locreg	%offsetof(.Llo460), %offsetof(.Llo466),4
	.d2locend
.L2911:
	.d2locreg	%offsetof(.Llo460), %offsetof(.Llo467),5
	.d2locreg	%offsetof(.Llo462), %offsetof(.Llo463),30
	.d2locreg	%offsetof(.Llo464), %offsetof(.Llo465),30
	.d2locend
.L2912:
	.d2locreg	%offsetof(.Llo460), %offsetof(.Llo467),6
	.d2locreg	%offsetof(.Llo462), %offsetof(.Llo463),8
	.d2locreg	%offsetof(.Llo464), %offsetof(.Llo465),8
	.d2locend
.L2913:
	.d2locreg	%offsetof(.Llo460), %offsetof(.Llo467),7
	.d2locreg	%offsetof(.Llo462), %offsetof(.Llo468),29
	.d2locreg	%offsetof(.Llo464), %offsetof(.Llo469),29
	.d2locend
.L2915:
	.d2locreg	%offsetof(.Llo460), %offsetof(.Llo462),28
	.d2locreg	%offsetof(.Llo470), %offsetof(.Llo471),3
	.d2locreg	%offsetof(.Llo472), %offsetof(.Llo463),3
	.d2locreg	%offsetof(.Llo473), %offsetof(.Llo474),3
	.d2locreg	%offsetof(.Llo475), %offsetof(.Llo476),3
	.d2locreg	%offsetof(.Llo477), %offsetof(.Llo478),3
	.d2locreg	%offsetof(.Llo469), %offsetof(.Llo479),28
	.d2locend
.L2921:
	.d2locreg	%offsetof(.Llo480), %offsetof(.Llo474),28
	.d2locreg	%offsetof(.Llo481), %offsetof(.Llo482),28
	.d2locreg	%offsetof(.Llo483), %offsetof(.Llo484),28
	.d2locend
.L2923:
	.d2locreg	%offsetof(.Llo485), %offsetof(.Llo468),7
	.d2locreg	%offsetof(.Llo464), %offsetof(.Llo469),7
	.d2locend
.L2929:
	.d2locreg	%offsetof(.Llo486), %offsetof(.Llo474),0
	.d2locend
.L2931:
	.d2locreg	%offsetof(.Llo487), %offsetof(.Llo474),4
	.d2locend
.L2942:
	.d2locreg	%offsetof(.Llo488), %offsetof(.Llo489),3
	.d2locreg	%offsetof(.Llo490), %offsetof(.Llo491),3
	.d2locreg	%offsetof(.Llo492), %offsetof(.Llo493),3
	.d2locend
.L2943:
	.d2locreg	%offsetof(.Llo488), %offsetof(.Llo494),4
	.d2locreg	%offsetof(.Llo489), %offsetof(.Llo495),31
	.d2locend
.L2945:
	.d2locreg	%offsetof(.Llo496), %offsetof(.Llo497),3
	.d2locreg	%offsetof(.Llo495), %offsetof(.Llo498),30
	.d2locend
.L2947:
	.d2locreg	%offsetof(.Llo499), %offsetof(.Llo500),3
	.d2locreg	%offsetof(.Llo501), %offsetof(.Llo502),3
	.d2locreg	%offsetof(.Llo497), %offsetof(.Llo503),3
	.d2locreg	%offsetof(.Llo495), %offsetof(.Llo504),3
	.d2locreg	%offsetof(.Llo505), %offsetof(.Llo506),3
	.d2locreg	%offsetof(.Llo507), %offsetof(.Llo508),3
	.d2locreg	%offsetof(.Llo509), %offsetof(.Llo510),3
	.d2locend
.L2949:
	.d2locreg	%offsetof(.Llo511), %offsetof(.Llo498),29
	.d2locend
.L2951:
	.d2locreg	%offsetof(.Llo512), %offsetof(.Llo513),28
	.d2locreg	%offsetof(.Llo514), %offsetof(.Llo515),28
	.d2locend
.L2953:
	.d2locreg	%offsetof(.Llo516), %offsetof(.Llo495),27
	.d2locend
.L2955:
	.d2locreg	%offsetof(.Llo517), %offsetof(.Llo518),0
	.d2locend
.L2957:
	.d2locreg	%offsetof(.Llo519), %offsetof(.Llo515),26
	.d2locend
.L2959:
	.d2locreg	%offsetof(.Llo520), %offsetof(.Llo498),24
	.d2locend
.L2961:
	.d2locreg	%offsetof(.Llo521), %offsetof(.Llo522),3
	.d2locend
.L2963:
	.d2locreg	%offsetof(.Llo523), %offsetof(.Llo517),0
	.d2locreg	%offsetof(.Llo518), %offsetof(.Llo489),0
	.d2locreg	%offsetof(.Llo524), %offsetof(.Llo525),0
	.d2locreg	%offsetof(.Llo526), %offsetof(.Llo527),0
	.d2locreg	%offsetof(.Llo528), %offsetof(.Llo522),0
	.d2locend
.L2969:
	.d2locreg	%offsetof(.Llo529), %offsetof(.Llo530),3
	.d2locreg	%offsetof(.Llo531), %offsetof(.Llo532),3
	.d2locreg	%offsetof(.Llo533), %offsetof(.Llo534),3
	.d2locend
.L2970:
	.d2locreg	%offsetof(.Llo529), %offsetof(.Llo535),4
	.d2locreg	%offsetof(.Llo530), %offsetof(.Llo536),31
	.d2locend
.L2972:
	.d2locreg	%offsetof(.Llo537), %offsetof(.Llo538),3
	.d2locreg	%offsetof(.Llo536), %offsetof(.Llo539),30
	.d2locend
.L2974:
	.d2locreg	%offsetof(.Llo540), %offsetof(.Llo541),3
	.d2locreg	%offsetof(.Llo542), %offsetof(.Llo543),3
	.d2locreg	%offsetof(.Llo538), %offsetof(.Llo544),3
	.d2locreg	%offsetof(.Llo536), %offsetof(.Llo545),3
	.d2locreg	%offsetof(.Llo546), %offsetof(.Llo547),3
	.d2locend
.L2976:
	.d2locreg	%offsetof(.Llo548), %offsetof(.Llo539),29
	.d2locend
.L2978:
	.d2locreg	%offsetof(.Llo549), %offsetof(.Llo536),28
	.d2locend
.L2980:
	.d2locreg	%offsetof(.Llo550), %offsetof(.Llo551),0
	.d2locend
.L2982:
	.d2locreg	%offsetof(.Llo535), %offsetof(.Llo534),4
	.d2locend
.L2984:
	.d2locreg	%offsetof(.Llo552), %offsetof(.Llo550),0
	.d2locreg	%offsetof(.Llo551), %offsetof(.Llo553),0
	.d2locreg	%offsetof(.Llo554), %offsetof(.Llo530),0
	.d2locreg	%offsetof(.Llo555), %offsetof(.Llo556),0
	.d2locreg	%offsetof(.Llo557), %offsetof(.Llo558),0
	.d2locreg	%offsetof(.Llo559), %offsetof(.Llo534),0
	.d2locend
.L2990:
	.d2locreg	%offsetof(.Llo560), %offsetof(.Llo561),3
	.d2locreg	%offsetof(.Llo562), %offsetof(.Llo563),31
	.d2locend
.L2991:
	.d2locreg	%offsetof(.Llo560), %offsetof(.Llo561),4
	.d2locreg	%offsetof(.Llo562), %offsetof(.Llo563),30
	.d2locreg	%offsetof(.Llo564), %offsetof(.Llo565),4
	.d2locend
.L2992:
	.d2locreg	%offsetof(.Llo560), %offsetof(.Llo561),5
	.d2locreg	%offsetof(.Llo562), %offsetof(.Llo563),29
	.d2locreg	%offsetof(.Llo564), %offsetof(.Llo565),5
	.d2locend
.L2993:
	.d2locreg	%offsetof(.Llo560), %offsetof(.Llo566),6
	.d2locend
.L2999:
	.d2locreg	%offsetof(.Llo567), %offsetof(.Llo568),28
	.d2locreg	%offsetof(.Llo569), %offsetof(.Llo570),28
	.d2locend
.L3015:
	.d2locreg	%offsetof(.Llo571), %offsetof(.Llo572),3
	.d2locreg	%offsetof(.Llo573), %offsetof(.Llo574),31
	.d2locend
.L3021:
	.d2locreg	%offsetof(.Llo575), %offsetof(.Llo576),3
	.d2locreg	%offsetof(.Llo577), %offsetof(.Llo578),29
	.d2locend
.L3022:
	.d2locreg	%offsetof(.Llo575), %offsetof(.Llo579),4
	.d2locreg	%offsetof(.Llo580), %offsetof(.Llo581),28
	.d2locreg	%offsetof(.Llo582), %offsetof(.Llo583),28
	.d2locreg	%offsetof(.Llo584), %offsetof(.Llo585),28
	.d2locend
.L3023:
	.d2locreg	%offsetof(.Llo575), %offsetof(.Llo586),5
	.d2locreg	%offsetof(.Llo587), %offsetof(.Llo578),31
	.d2locend
.L3025:
	.d2locreg	%offsetof(.Llo588), %offsetof(.Llo580),3
	.d2locreg	%offsetof(.Llo589), %offsetof(.Llo590),30
	.d2locend
.L3031:
	.d2locreg	%offsetof(.Llo591), %offsetof(.Llo592),3
	.d2locreg	%offsetof(.Llo593), %offsetof(.Llo594),31
	.d2locend
.L3037:
	.d2locreg	%offsetof(.Llo595), %offsetof(.Llo596),0
	.d2locreg	%offsetof(.Llo597), %offsetof(.Llo598),0
	.d2locend
.L3045:
	.d2locreg	%offsetof(.Llo599), %offsetof(.Llo600),3
	.d2locreg	%offsetof(.Llo601), %offsetof(.Llo602),3
	.d2locreg	%offsetof(.Llo603), %offsetof(.Llo604),3
	.d2locreg	%offsetof(.Llo605), %offsetof(.Llo606),0
	.d2locend
.L3047:
	.d2locreg	%offsetof(.Llo604), %offsetof(.Llo605),3
	.d2locreg	%offsetof(.Llo606), %offsetof(.Llo607),3
	.d2locend
.L3053:
	.d2locreg	%offsetof(.Llo608), %offsetof(.Llo609),3
	.d2locreg	%offsetof(.Llo610), %offsetof(.Llo611),31
	.d2locend
.L3054:
	.d2locreg	%offsetof(.Llo608), %offsetof(.Llo612),4
	.d2locreg	%offsetof(.Llo613), %offsetof(.Llo614),30
	.d2locend
.L3056:
	.d2locreg	%offsetof(.Llo612), %offsetof(.Llo615),4
	.d2locreg	%offsetof(.Llo616), %offsetof(.Llo617),4
	.d2locend
.L3058:
	.d2locreg	%offsetof(.Llo618), %offsetof(.Llo619),3
	.d2locreg	%offsetof(.Llo620), %offsetof(.Llo621),3
	.d2locreg	%offsetof(.Llo622), %offsetof(.Llo623),3
	.d2locreg	%offsetof(.Llo624), %offsetof(.Llo615),3
	.d2locreg	%offsetof(.Llo625), %offsetof(.Llo626),3
	.d2locend
.L3060:
	.d2locreg	%offsetof(.Llo627), %offsetof(.Llo628),3
	.d2locreg	%offsetof(.Llo622), %offsetof(.Llo614),29
	.d2locend
.L3066:
	.d2locreg	%offsetof(.Llo629), %offsetof(.Llo630),28
	.d2locreg	%offsetof(.Llo631), %offsetof(.Llo632),3
	.d2locreg	%offsetof(.Llo633), %offsetof(.Llo614),28
	.d2locend
.L3068:
	.d2locreg	%offsetof(.Llo634), %offsetof(.Llo630),27
	.d2locreg	%offsetof(.Llo635), %offsetof(.Llo636),3
	.d2locreg	%offsetof(.Llo633), %offsetof(.Llo611),27
	.d2locend
.L3071:
	.d2locreg	%offsetof(.Llo637), %offsetof(.Llo630),3
	.d2locreg	%offsetof(.Llo638), %offsetof(.Llo614),26
	.d2locend
.L3077:
	.d2locreg	%offsetof(.Llo639), %offsetof(.Llo640),27
	.d2locend
.L3083:
	.d2locreg	%offsetof(.Llo641), %offsetof(.Llo642),3
	.d2locreg	%offsetof(.Llo643), %offsetof(.Llo644),31
	.d2locend
.L3089:
	.d2locreg	%offsetof(.Llo645), %offsetof(.Llo646),3
	.d2locend
.L3095:
	.d2locreg	%offsetof(.Llo647), %offsetof(.Llo648),3
	.d2locreg	%offsetof(.Llo649), %offsetof(.Llo650),31
	.d2locend
.L3096:
	.d2locreg	%offsetof(.Llo647), %offsetof(.Llo651),4
	.d2locreg	%offsetof(.Llo652), %offsetof(.Llo650),30
	.d2locend
.L3097:
	.d2locreg	%offsetof(.Llo647), %offsetof(.Llo653),5
	.d2locreg	%offsetof(.Llo652), %offsetof(.Llo654),29
	.d2locreg	%offsetof(.Llo655), %offsetof(.Llo656),29
	.d2locend
.L3099:
	.d2locreg	%offsetof(.Llo657), %offsetof(.Llo658),28
	.d2locend
.L3101:
	.d2locreg	%offsetof(.Llo647), %offsetof(.Llo656),27
	.d2locreg	%offsetof(.Llo659), %offsetof(.Llo660),27
	.d2locend
.L3103:
	.d2locreg	%offsetof(.Llo653), %offsetof(.Llo661),3
	.d2locreg	%offsetof(.Llo662), %offsetof(.Llo655),3
	.d2locreg	%offsetof(.Llo663), %offsetof(.Llo656),3
	.d2locreg	%offsetof(.Llo664), %offsetof(.Llo658),3
	.d2locend
.L3109:
	.d2locreg	%offsetof(.Llo665), %offsetof(.Llo666),3
	.d2locreg	%offsetof(.Llo667), %offsetof(.Llo668),31
	.d2locend
.L3110:
	.d2locreg	%offsetof(.Llo665), %offsetof(.Llo669),4
	.d2locreg	%offsetof(.Llo670), %offsetof(.Llo668),30
	.d2locend
.L3113:
	.d2locreg	%offsetof(.Llo671), %offsetof(.Llo668),29
	.d2locend
.L3119:
	.d2locreg	%offsetof(.Llo672), %offsetof(.Llo673),28
	.d2locend
.L3130:
	.d2locreg	%offsetof(.Llo674), %offsetof(.Llo675),0
	.d2locend
.L3136:
	.d2locreg	%offsetof(.Llo676), %offsetof(.Llo677),3
	.d2locreg	%offsetof(.Llo678), %offsetof(.Llo679),31
	.d2locreg	%offsetof(.Llo680), %offsetof(.Llo681),3
	.d2locend
.L3137:
	.d2locreg	%offsetof(.Llo676), %offsetof(.Llo677),4
	.d2locreg	%offsetof(.Llo678), %offsetof(.Llo679),30
	.d2locreg	%offsetof(.Llo680), %offsetof(.Llo681),4
	.d2locend
.L3143:
	.d2locreg	%offsetof(.Llo682), %offsetof(.Llo683),3
	.d2locreg	%offsetof(.Llo684), %offsetof(.Llo679),29
	.d2locend
.L3149:
	.d2locreg	%offsetof(.Llo685), %offsetof(.Llo679),28
	.d2locend
.L3160:
	.d2locreg	%offsetof(.Llo686), %offsetof(.Llo687),0
	.d2locend
.L3166:
	.d2locreg	%offsetof(.Llo688), %offsetof(.Llo689),3
	.d2locreg	%offsetof(.Llo690), %offsetof(.Llo691),31
	.d2locend
.L3168:
	.d2locreg	%offsetof(.Llo688), %offsetof(.Llo692),4
	.d2locreg	%offsetof(.Llo693), %offsetof(.Llo694),30
	.d2locend
.L3170:
	.d2locreg	%offsetof(.Llo695), %offsetof(.Llo691),29
	.d2locend
.L3172:
	.d2locreg	%offsetof(.Llo696), %offsetof(.Llo691),28
	.d2locend
.L3174:
	.d2locreg	%offsetof(.Llo693), %offsetof(.Llo697),27
	.d2locreg	%offsetof(.Llo698), %offsetof(.Llo699),3
	.d2locreg	%offsetof(.Llo700), %offsetof(.Llo691),27
	.d2locend
.L3176:
	.d2locreg	%offsetof(.Llo688), %offsetof(.Llo701),26
	.d2locreg	%offsetof(.Llo702), %offsetof(.Llo703),26
	.d2locend
.L3182:
	.d2locreg	%offsetof(.Llo704), %offsetof(.Llo705),3
	.d2locend
.L3184:
	.d2locreg	%offsetof(.Llo706), %offsetof(.Llo707),4
	.d2locreg	%offsetof(.Llo708), %offsetof(.Llo709),4
	.d2locend
.L3186:
	.d2locreg	%offsetof(.Llo705), %offsetof(.Llo710),3
	.d2locend
.L3192:
	.d2locreg	%offsetof(.Llo711), %offsetof(.Llo712),3
	.d2locreg	%offsetof(.Llo713), %offsetof(.Llo714),31
	.d2locreg	%offsetof(.Llo715), %offsetof(.Llo716),31
	.d2locend
.L3194:
	.d2locreg	%offsetof(.Llo711), %offsetof(.Llo717),4
	.d2locreg	%offsetof(.Llo718), %offsetof(.Llo719),4
	.d2locreg	%offsetof(.Llo720), %offsetof(.Llo721),4
	.d2locreg	%offsetof(.Llo722), %offsetof(.Llo723),4
	.d2locreg	%offsetof(.Llo724), %offsetof(.Llo725),4
	.d2locreg	%offsetof(.Llo726), %offsetof(.Llo727),4
	.d2locend
.L3200:
	.d2locreg	%offsetof(.Llo728), %offsetof(.Llo729),30
	.d2locreg	%offsetof(.Llo718), %offsetof(.Llo730),30
	.d2locreg	%offsetof(.Llo731), %offsetof(.Llo732),30
	.d2locend
.L3207:
	.d2locreg	%offsetof(.Llo733), %offsetof(.Llo734),0
	.d2locreg	%offsetof(.Llo717), %offsetof(.Llo735),29
	.d2locreg	%offsetof(.Llo718), %offsetof(.Llo723),29
	.d2locreg	%offsetof(.Llo731), %offsetof(.Llo732),29
	.d2locend
.L3209:
	.d2locreg	%offsetof(.Llo711), %offsetof(.Llo736),27
	.d2locreg	%offsetof(.Llo737), %offsetof(.Llo723),3
	.d2locreg	%offsetof(.Llo738), %offsetof(.Llo739),27
	.d2locend
.L3212:
	.d2locreg	%offsetof(.Llo740), %offsetof(.Llo729),28
	.d2locreg	%offsetof(.Llo718), %offsetof(.Llo730),28
	.d2locreg	%offsetof(.Llo731), %offsetof(.Llo741),28
	.d2locend
.L3219:
	.d2locreg	%offsetof(.Llo742), %offsetof(.Llo743),3
	.d2locreg	%offsetof(.Llo714), %offsetof(.Llo744),3
	.d2locreg	%offsetof(.Llo745), %offsetof(.Llo732),3
	.d2locend
.L3225:
	.d2locreg	%offsetof(.Llo746), %offsetof(.Llo747),3
	.d2locreg	%offsetof(.Llo748), %offsetof(.Llo749),3
	.d2locend
.L3226:
	.d2locreg	%offsetof(.Llo746), %offsetof(.Llo750),4
	.d2locreg	%offsetof(.Llo747), %offsetof(.Llo751),4
	.d2locend
.L3228:
	.d2locreg	%offsetof(.Llo746), %offsetof(.Llo752),5
	.d2locreg	%offsetof(.Llo750), %offsetof(.Llo749),31
	.d2locend
.L3234:
	.d2locreg	%offsetof(.Llo753), %offsetof(.Llo754),3
	.d2locreg	%offsetof(.Llo755), %offsetof(.Llo756),3
	.d2locend
.L3235:
	.d2locreg	%offsetof(.Llo753), %offsetof(.Llo757),4
	.d2locreg	%offsetof(.Llo758), %offsetof(.Llo759),30
	.d2locend
.L3237:
	.d2locreg	%offsetof(.Llo760), %offsetof(.Llo761),29
	.d2locend
.L3239:
	.d2locreg	%offsetof(.Llo753), %offsetof(.Llo759),28
	.d2locend
.L3245:
	.d2locreg	%offsetof(.Llo762), %offsetof(.Llo763),3
	.d2locreg	%offsetof(.Llo764), %offsetof(.Llo765),31
	.d2locreg	%offsetof(.Llo766), %offsetof(.Llo767),31
	.d2locend
.L3248:
	.d2locreg	%offsetof(.Llo762), %offsetof(.Llo768),4
	.d2locreg	%offsetof(.Llo769), %offsetof(.Llo770),30
	.d2locreg	%offsetof(.Llo767), %offsetof(.Llo771),4
	.d2locend
.L3250:
	.d2locreg	%offsetof(.Llo772), %offsetof(.Llo765),29
	.d2locreg	%offsetof(.Llo773), %offsetof(.Llo774),29
	.d2locreg	%offsetof(.Llo775), %offsetof(.Llo770),29
	.d2locreg	%offsetof(.Llo776), %offsetof(.Llo777),29
	.d2locreg	%offsetof(.Llo778), %offsetof(.Llo779),29
	.d2locend
.L3257:
	.d2locreg	%offsetof(.Llo780), %offsetof(.Llo781),3
	.d2locreg	%offsetof(.Llo782), %offsetof(.Llo783),31
	.d2locend
.L3258:
	.d2locreg	%offsetof(.Llo780), %offsetof(.Llo782),4
	.d2locreg	%offsetof(.Llo784), %offsetof(.Llo785),7
	.d2locreg	%offsetof(.Llo786), %offsetof(.Llo787),7
	.d2locend
.L3261:
	.d2locreg	%offsetof(.Llo788), %offsetof(.Llo789),3
	.d2locreg	%offsetof(.Llo790), %offsetof(.Llo791),30
	.d2locreg	%offsetof(.Llo792), %offsetof(.Llo793),30
	.d2locend
.L3263:
	.d2locreg	%offsetof(.Llo794), %offsetof(.Llo791),29
	.d2locreg	%offsetof(.Llo795), %offsetof(.Llo793),29
	.d2locend
.L3270:
	.d2locreg	%offsetof(.Llo796), %offsetof(.Llo797),3
	.d2locreg	%offsetof(.Llo798), %offsetof(.Llo799),31
	.d2locend
.L3271:
	.d2locreg	%offsetof(.Llo796), %offsetof(.Llo800),4
	.d2locreg	%offsetof(.Llo801), %offsetof(.Llo802),30
	.d2locreg	%offsetof(.Llo803), %offsetof(.Llo804),4
	.d2locreg	%offsetof(.Llo805), %offsetof(.Llo806),4
	.d2locreg	%offsetof(.Llo807), %offsetof(.Llo808),4
	.d2locreg	%offsetof(.Llo809), %offsetof(.Llo810),4
	.d2locreg	%offsetof(.Llo811), %offsetof(.Llo812),4
	.d2locreg	%offsetof(.Llo813), %offsetof(.Llo814),4
	.d2locend
.L3273:
	.d2locreg	%offsetof(.Llo815), %offsetof(.Llo799),29
	.d2locend
.L3275:
	.d2locreg	%offsetof(.Llo816), %offsetof(.Llo799),28
	.d2locend
.L3277:
	.d2locreg	%offsetof(.Llo801), %offsetof(.Llo817),25
	.d2locreg	%offsetof(.Llo818), %offsetof(.Llo819),3
	.d2locreg	%offsetof(.Llo820), %offsetof(.Llo799),25
	.d2locend
.L3279:
	.d2locreg	%offsetof(.Llo821), %offsetof(.Llo822),27
	.d2locreg	%offsetof(.Llo823), %offsetof(.Llo824),27
	.d2locreg	%offsetof(.Llo825), %offsetof(.Llo826),27
	.d2locend
.L3281:
	.d2locreg	%offsetof(.Llo827), %offsetof(.Llo822),26
	.d2locreg	%offsetof(.Llo807), %offsetof(.Llo828),26
	.d2locreg	%offsetof(.Llo829), %offsetof(.Llo824),26
	.d2locreg	%offsetof(.Llo809), %offsetof(.Llo830),26
	.d2locreg	%offsetof(.Llo811), %offsetof(.Llo826),26
	.d2locend
.L3287:
	.d2locreg	%offsetof(.Llo831), %offsetof(.Llo832),3
	.d2locreg	%offsetof(.Llo833), %offsetof(.Llo834),3
	.d2locend
.L3289:
	.d2locreg	%offsetof(.Llo831), %offsetof(.Llo835),31
	.d2locend
.L3295:
	.d2locreg	%offsetof(.Llo836), %offsetof(.Llo837),3
	.d2locreg	%offsetof(.Llo838), %offsetof(.Llo839),31
	.d2locend
.L3301:
	.d2locreg	%offsetof(.Llo840), %offsetof(.Llo841),3
	.d2locreg	%offsetof(.Llo842), %offsetof(.Llo843),5
	.d2locend
.L3302:
	.d2locreg	%offsetof(.Llo840), %offsetof(.Llo844),4
	.d2locend
.L3304:
	.d2locreg	%offsetof(.Llo845), %offsetof(.Llo846),3
	.d2locreg	%offsetof(.Llo847), %offsetof(.Llo848),3
	.d2locend
.L3306:
	.d2locreg	%offsetof(.Llo849), %offsetof(.Llo846),4
	.d2locend
.L3308:
	.d2locreg	%offsetof(.Llo850), %offsetof(.Llo851),0
	.d2locreg	%offsetof(.Llo852), %offsetof(.Llo853),3
	.d2locreg	%offsetof(.Llo854), %offsetof(.Llo855),0
	.d2locreg	%offsetof(.Llo856), %offsetof(.Llo857),0
	.d2locreg	%offsetof(.Llo858), %offsetof(.Llo846),0
	.d2locend
.L3315:
	.d2locreg	%offsetof(.Llo859), %offsetof(.Llo860),3
	.d2locreg	%offsetof(.Llo861), %offsetof(.Llo862),28
	.d2locend
.L3316:
	.d2locreg	%offsetof(.Llo859), %offsetof(.Llo863),4
	.d2locreg	%offsetof(.Llo861), %offsetof(.Llo864),6
	.d2locend
.L3318:
	.d2locreg	%offsetof(.Llo865), %offsetof(.Llo861),3
	.d2locreg	%offsetof(.Llo866), %offsetof(.Llo867),31
	.d2locend
.L3325:
	.d2locreg	%offsetof(.Llo868), %offsetof(.Llo869),3
	.d2locreg	%offsetof(.Llo870), %offsetof(.Llo871),30
	.d2locend
.L3327:
	.d2locreg	%offsetof(.Llo864), %offsetof(.Llo872),3
	.d2locreg	%offsetof(.Llo862), %offsetof(.Llo871),29
	.d2locend
.L3333:
	.d2locreg	%offsetof(.Llo873), %offsetof(.Llo874),3
	.d2locreg	%offsetof(.Llo875), %offsetof(.Llo876),31
	.d2locend
.L3334:
	.d2locreg	%offsetof(.Llo873), %offsetof(.Llo874),4
	.d2locreg	%offsetof(.Llo875), %offsetof(.Llo876),30
	.d2locreg	%offsetof(.Llo877), %offsetof(.Llo878),4
	.d2locend
.L3336:
	.d2locreg	%offsetof(.Llo873), %offsetof(.Llo874),5
	.d2locreg	%offsetof(.Llo875), %offsetof(.Llo876),29
	.d2locreg	%offsetof(.Llo877), %offsetof(.Llo878),5
	.d2locend
.L3337:
	.d2locreg	%offsetof(.Llo873), %offsetof(.Llo879),6
	.d2locend
.L3339:
	.d2locreg	%offsetof(.Llo879), %offsetof(.Llo874),6
	.d2locreg	%offsetof(.Llo875), %offsetof(.Llo877),28
	.d2locend
.L3341:
	.d2locreg	%offsetof(.Llo875), %offsetof(.Llo880),0
	.d2locreg	%offsetof(.Llo881), %offsetof(.Llo882),0
	.d2locreg	%offsetof(.Llo883), %offsetof(.Llo884),4
	.d2locreg	%offsetof(.Llo885), %offsetof(.Llo886),0
	.d2locreg	%offsetof(.Llo887), %offsetof(.Llo888),4
	.d2locreg	%offsetof(.Llo889), %offsetof(.Llo890),4
	.d2locreg	%offsetof(.Llo891), %offsetof(.Llo876),0
	.d2locend
.L3343:
	.d2locreg	%offsetof(.Llo892), %offsetof(.Llo876),27
	.d2locend
.L3345:
	.d2locreg	%offsetof(.Llo893), %offsetof(.Llo894),3
	.d2locend
.L3351:
	.d2locreg	%offsetof(.Llo895), %offsetof(.Llo896),3
	.d2locreg	%offsetof(.Llo897), %offsetof(.Llo898),0
	.d2locreg	%offsetof(.Llo899), %offsetof(.Llo900),0
	.d2locreg	%offsetof(.Llo901), %offsetof(.Llo902),0
	.d2locreg	%offsetof(.Llo903), %offsetof(.Llo904),0
	.d2locend
.L3358:
	.d2locreg	%offsetof(.Llo905), %offsetof(.Llo906),3
	.d2locreg	%offsetof(.Llo907), %offsetof(.Llo908),3
	.d2locend
.L3360:
	.d2locreg	%offsetof(.Llo909), %offsetof(.Llo910),30
	.d2locend
.L3362:
	.d2locreg	%offsetof(.Llo905), %offsetof(.Llo911),29
	.d2locend
.L3368:
	.d2locreg	%offsetof(.Llo912), %offsetof(.Llo913),3
	.d2locreg	%offsetof(.Llo914), %offsetof(.Llo915),31
	.d2locreg	%offsetof(.Llo916), %offsetof(.Llo917),31
	.d2locend
.L3370:
	.d2locreg	%offsetof(.Llo918), %offsetof(.Llo915),30
	.d2locend
.L3372:
	.d2locreg	%offsetof(.Llo912), %offsetof(.Llo915),28
	.d2locreg	%offsetof(.Llo919), %offsetof(.Llo920),3
	.d2locend
.L3374:
	.d2locreg	%offsetof(.Llo921), %offsetof(.Llo922),29
	.d2locreg	%offsetof(.Llo923), %offsetof(.Llo924),3
	.d2locreg	%offsetof(.Llo925), %offsetof(.Llo915),29
	.d2locend
.L3380:
	.d2locreg	%offsetof(.Llo926), %offsetof(.Llo927),3
	.d2locend
.L3382:
	.d2locreg	%offsetof(.Llo927), %offsetof(.Llo928),3
	.d2locreg	%offsetof(.Llo929), %offsetof(.Llo930),31
	.d2locend
.L3384:
	.d2locreg	%offsetof(.Llo931), %offsetof(.Llo932),3
	.d2locreg	%offsetof(.Llo933), %offsetof(.Llo934),3
	.d2locreg	%offsetof(.Llo935), %offsetof(.Llo936),3
	.d2locreg	%offsetof(.Llo937), %offsetof(.Llo938),3
	.d2locend
.L3386:
	.d2locreg	%offsetof(.Llo939), %offsetof(.Llo940),30
	.d2locend
.L3388:
	.d2locreg	%offsetof(.Llo941), %offsetof(.Llo942),3
	.d2locend
.L3394:
	.d2locreg	%offsetof(.Llo943), %offsetof(.Llo944),3
	.d2locreg	%offsetof(.Llo945), %offsetof(.Llo946),3
	.d2locend
.L3395:
	.d2locreg	%offsetof(.Llo943), %offsetof(.Llo947),4
	.d2locreg	%offsetof(.Llo948), %offsetof(.Llo946),0
	.d2locend
.L3397:
	.d2locreg	%offsetof(.Llo948), %offsetof(.Llo946),7
	.d2locend
.L3399:
	.d2locreg	%offsetof(.Llo949), %offsetof(.Llo950),4
	.d2locreg	%offsetof(.Llo951), %offsetof(.Llo946),5
	.d2locreg	%offsetof(.Llo952), %offsetof(.Llo953),4
	.d2locend
.L3401:
	.d2locreg	%offsetof(.Llo950), %offsetof(.Llo946),5
	.d2locend
.L3403:
	.d2locreg	%offsetof(.Llo954), %offsetof(.Llo946),30
	.d2locend
.L3409:
	.d2locreg	%offsetof(.Llo955), %offsetof(.Llo956),3
	.d2locend
.L3410:
	.d2locreg	%offsetof(.Llo955), %offsetof(.Llo956),4
	.d2locend
.L3412:
	.d2locreg	%offsetof(.Llo957), %offsetof(.Llo956),0
	.d2locend
.L3414:
	.d2locreg	%offsetof(.Llo958), %offsetof(.Llo959),5
	.d2locend
.L3416:
	.d2locreg	%offsetof(.Llo960), %offsetof(.Llo956),6
	.d2locend
.L3418:
	.d2locreg	%offsetof(.Llo961), %offsetof(.Llo956),30
	.d2locend
.L3424:
	.d2locreg	%offsetof(.Llo962), %offsetof(.Llo963),3
	.d2locreg	%offsetof(.Llo964), %offsetof(.Llo965),0
	.d2locreg	%offsetof(.Llo966), %offsetof(.Llo967),0
	.d2locend
.L3426:
	.d2locreg	%offsetof(.Llo963), %offsetof(.Llo964),3
	.d2locreg	%offsetof(.Llo968), %offsetof(.Llo966),3
	.d2locreg	%offsetof(.Llo967), %offsetof(.Llo969),3
	.d2locend
.L3432:
	.d2locreg	%offsetof(.Llo970), %offsetof(.Llo971),3
	.d2locreg	%offsetof(.Llo972), %offsetof(.Llo973),31
	.d2locreg	%offsetof(.Llo974), %offsetof(.Llo975),3
	.d2locend
.L3436:
	.d2locreg	%offsetof(.Llo970), %offsetof(.Llo976),4
	.d2locreg	%offsetof(.Llo977), %offsetof(.Llo973),30
	.d2locend
.L3438:
	.d2locreg	%offsetof(.Llo976), %offsetof(.Llo978),3
	.d2locreg	%offsetof(.Llo977), %offsetof(.Llo979),28
	.d2locreg	%offsetof(.Llo980), %offsetof(.Llo981),28
	.d2locend
.L3440:
	.d2locreg	%offsetof(.Llo982), %offsetof(.Llo977),29
	.d2locreg	%offsetof(.Llo983), %offsetof(.Llo984),5
	.d2locreg	%offsetof(.Llo985), %offsetof(.Llo986),29
	.d2locend
.L3447:
	.d2locreg	%offsetof(.Llo987), %offsetof(.Llo988),3
	.d2locreg	%offsetof(.Llo989), %offsetof(.Llo990),5
	.d2locend
.L3448:
	.d2locreg	%offsetof(.Llo987), %offsetof(.Llo991),4
	.d2locend
.L3450:
	.d2locreg	%offsetof(.Llo992), %offsetof(.Llo993),3
	.d2locreg	%offsetof(.Llo994), %offsetof(.Llo995),0
	.d2locreg	%offsetof(.Llo996), %offsetof(.Llo997),3
	.d2locreg	%offsetof(.Llo998), %offsetof(.Llo999),3
	.d2locreg	%offsetof(.Llo1000), %offsetof(.Llo1001),0
	.d2locreg	%offsetof(.Llo1002), %offsetof(.Llo1003),0
	.d2locreg	%offsetof(.Llo1004), %offsetof(.Llo1005),0
	.d2locreg	%offsetof(.Llo1006), %offsetof(.Llo1007),0
	.d2locreg	%offsetof(.Llo1008), %offsetof(.Llo990),0
	.d2locend
.L3452:
	.d2locreg	%offsetof(.Llo991), %offsetof(.Llo1009),4
	.d2locend
.L3458:
	.d2locreg	%offsetof(.Llo1010), %offsetof(.Llo1005),6
	.d2locend
.L3460:
	.d2locreg	%offsetof(.Llo999), %offsetof(.Llo1003),3
	.d2locreg	%offsetof(.Llo1005), %offsetof(.Llo990),3
	.d2locend
.L3466:
	.d2locreg	%offsetof(.Llo1011), %offsetof(.Llo1012),3
	.d2locend
.L3469:
	.d2locreg	%offsetof(.Llo1011), %offsetof(.Llo1013),4
	.d2locend
.L3470:
	.d2locreg	%offsetof(.Llo1011), %offsetof(.Llo1014),5
	.d2locreg	%offsetof(.Llo1015), %offsetof(.Llo1016),0
	.d2locend
.L3472:
	.d2locreg	%offsetof(.Llo1012), %offsetof(.Llo1016),3
	.d2locend
.L3474:
	.d2locreg	%offsetof(.Llo1013), %offsetof(.Llo1014),4
	.d2locend
.L3476:
	.d2locreg	%offsetof(.Llo1014), %offsetof(.Llo1016),4
	.d2locend
.L3483:
	.d2locreg	%offsetof(.Llo1017), %offsetof(.Llo1018),3
	.d2locreg	%offsetof(.Llo1019), %offsetof(.Llo1020),3
	.d2locreg	%offsetof(.Llo1021), %offsetof(.Llo1022),3
	.d2locreg	%offsetof(.Llo1023), %offsetof(.Llo1024),3
	.d2locend
.L3484:
	.d2locreg	%offsetof(.Llo1017), %offsetof(.Llo1025),4
	.d2locreg	%offsetof(.Llo1018), %offsetof(.Llo1026),31
	.d2locend
.L3485:
	.d2locreg	%offsetof(.Llo1017), %offsetof(.Llo1027),5
	.d2locreg	%offsetof(.Llo1018), %offsetof(.Llo1028),30
	.d2locend
.L3486:
	.d2locreg	%offsetof(.Llo1017), %offsetof(.Llo1018),6
	.d2locreg	%offsetof(.Llo1019), %offsetof(.Llo1026),29
	.d2locreg	%offsetof(.Llo1029), %offsetof(.Llo1030),6
	.d2locend
.L3487:
	.d2locreg	%offsetof(.Llo1017), %offsetof(.Llo1018),7
	.d2locreg	%offsetof(.Llo1019), %offsetof(.Llo1026),28
	.d2locreg	%offsetof(.Llo1029), %offsetof(.Llo1030),7
	.d2locend
.L3488:
	.d2locreg	%offsetof(.Llo1017), %offsetof(.Llo1026),8
	.d2locend
.L3490:
	.d2locreg	%offsetof(.Llo1031), %offsetof(.Llo1032),27
	.d2locend
.L3492:
	.d2locreg	%offsetof(.Llo1033), %offsetof(.Llo1034),9
	.d2locend
.L3494:
	.d2locreg	%offsetof(.Llo1035), %offsetof(.Llo1026),26
	.d2locend
.L3496:
	.d2locreg	%offsetof(.Llo1036), %offsetof(.Llo1037),0
	.d2locreg	%offsetof(.Llo1038), %offsetof(.Llo1039),3
	.d2locreg	%offsetof(.Llo1040), %offsetof(.Llo1041),3
	.d2locend
.L3498:
	.d2locreg	%offsetof(.Llo1042), %offsetof(.Llo1026),25
	.d2locend
.L3500:
	.d2locreg	%offsetof(.Llo1043), %offsetof(.Llo1026),24
	.d2locend
.L3502:
	.d2locreg	%offsetof(.Llo1043), %offsetof(.Llo1026),24
	.d2locend
.L3504:
	.d2locreg	%offsetof(.Llo1044), %offsetof(.Llo1020),0
	.d2locreg	%offsetof(.Llo1045), %offsetof(.Llo1046),0
	.d2locreg	%offsetof(.Llo1047), %offsetof(.Llo1022),0
	.d2locreg	%offsetof(.Llo1048), %offsetof(.Llo1036),0
	.d2locreg	%offsetof(.Llo1037), %offsetof(.Llo1049),0
	.d2locreg	%offsetof(.Llo1050), %offsetof(.Llo1038),0
	.d2locreg	%offsetof(.Llo1051), %offsetof(.Llo1052),0
	.d2locreg	%offsetof(.Llo1053), %offsetof(.Llo1054),0
	.d2locreg	%offsetof(.Llo1055), %offsetof(.Llo1040),0
	.d2locreg	%offsetof(.Llo1056), %offsetof(.Llo1057),0
	.d2locreg	%offsetof(.Llo1029), %offsetof(.Llo1028),0
	.d2locend
.L3506:
	.d2locreg	%offsetof(.Llo1058), %offsetof(.Llo1028),23
	.d2locend
.L3508:
	.d2locreg	%offsetof(.Llo1059), %offsetof(.Llo1056),12
	.d2locend
.L3510:
	.d2locreg	%offsetof(.Llo1060), %offsetof(.Llo1018),10
	.d2locreg	%offsetof(.Llo1019), %offsetof(.Llo1028),23
	.d2locend
.L3516:
	.d2locreg	%offsetof(.Llo1061), %offsetof(.Llo1062),3
	.d2locreg	%offsetof(.Llo1063), %offsetof(.Llo1064),31
	.d2locend
.L3517:
	.d2locreg	%offsetof(.Llo1061), %offsetof(.Llo1065),4
	.d2locreg	%offsetof(.Llo1063), %offsetof(.Llo1064),30
	.d2locend
.L3518:
	.d2locreg	%offsetof(.Llo1061), %offsetof(.Llo1063),5
	.d2locend
.L3519:
	.d2locreg	%offsetof(.Llo1061), %offsetof(.Llo1063),6
	.d2locreg	%offsetof(.Llo1066), %offsetof(.Llo1064),29
	.d2locreg	%offsetof(.Llo1067), %offsetof(.Llo1068),6
	.d2locend
.L3520:
	.d2locreg	%offsetof(.Llo1061), %offsetof(.Llo1063),7
	.d2locreg	%offsetof(.Llo1066), %offsetof(.Llo1064),28
	.d2locreg	%offsetof(.Llo1067), %offsetof(.Llo1068),7
	.d2locend
.L3521:
	.d2locreg	%offsetof(.Llo1061), %offsetof(.Llo1068),8
	.d2locend
.L3523:
	.d2locreg	%offsetof(.Llo1069), %offsetof(.Llo1070),9
	.d2locend
.L3525:
	.d2locreg	%offsetof(.Llo1071), %offsetof(.Llo1072),0
	.d2locreg	%offsetof(.Llo1073), %offsetof(.Llo1074),0
	.d2locreg	%offsetof(.Llo1075), %offsetof(.Llo1076),0
	.d2locreg	%offsetof(.Llo1077), %offsetof(.Llo1078),0
	.d2locreg	%offsetof(.Llo1079), %offsetof(.Llo1080),0
	.d2locreg	%offsetof(.Llo1081), %offsetof(.Llo1082),0
	.d2locreg	%offsetof(.Llo1083), %offsetof(.Llo1084),0
	.d2locreg	%offsetof(.Llo1085), %offsetof(.Llo1064),0
	.d2locend
.L3527:
	.d2locreg	%offsetof(.Llo1086), %offsetof(.Llo1064),27
	.d2locend
.L3529:
	.d2locreg	%offsetof(.Llo1063), %offsetof(.Llo1064),26
	.d2locend
.L3531:
	.d2locreg	%offsetof(.Llo1087), %offsetof(.Llo1085),25
	.d2locend
.L3533:
	.d2locreg	%offsetof(.Llo1061), %offsetof(.Llo1064),24
	.d2locend
.L3535:
	.d2locreg	%offsetof(.Llo1088), %offsetof(.Llo1064),24
	.d2locreg	%offsetof(.Llo1067), %offsetof(.Llo1068),10
	.d2locend
.L3537:
	.d2locreg	%offsetof(.Llo1089), %offsetof(.Llo1063),10
	.d2locreg	%offsetof(.Llo1066), %offsetof(.Llo1064),12
	.d2locreg	%offsetof(.Llo1067), %offsetof(.Llo1068),10
	.d2locend
.L3539:
	.d2locreg	%offsetof(.Llo1066), %offsetof(.Llo1072),3
	.d2locreg	%offsetof(.Llo1090), %offsetof(.Llo1076),3
	.d2locreg	%offsetof(.Llo1091), %offsetof(.Llo1082),3
	.d2locreg	%offsetof(.Llo1092), %offsetof(.Llo1093),3
	.d2locreg	%offsetof(.Llo1094), %offsetof(.Llo1084),3
	.d2locreg	%offsetof(.Llo1095), %offsetof(.Llo1096),3
	.d2locend
.L3541:
	.d2locreg	%offsetof(.Llo1097), %offsetof(.Llo1063),11
	.d2locreg	%offsetof(.Llo1066), %offsetof(.Llo1068),12
	.d2locend
.L3548:
	.d2locreg	%offsetof(.Llo1098), %offsetof(.Llo1099),3
	.d2locreg	%offsetof(.Llo1100), %offsetof(.Llo1101),31
	.d2locend
.L3549:
	.d2locreg	%offsetof(.Llo1098), %offsetof(.Llo1102),4
	.d2locreg	%offsetof(.Llo1100), %offsetof(.Llo1101),30
	.d2locend
.L3550:
	.d2locreg	%offsetof(.Llo1098), %offsetof(.Llo1100),5
	.d2locreg	%offsetof(.Llo1103), %offsetof(.Llo1101),29
	.d2locreg	%offsetof(.Llo1104), %offsetof(.Llo1105),5
	.d2locend
.L3551:
	.d2locreg	%offsetof(.Llo1098), %offsetof(.Llo1106),6
	.d2locreg	%offsetof(.Llo1100), %offsetof(.Llo1101),28
	.d2locend
.L3552:
	.d2locreg	%offsetof(.Llo1098), %offsetof(.Llo1100),7
	.d2locreg	%offsetof(.Llo1103), %offsetof(.Llo1101),27
	.d2locreg	%offsetof(.Llo1104), %offsetof(.Llo1105),7
	.d2locend
.L3553:
	.d2locreg	%offsetof(.Llo1098), %offsetof(.Llo1100),8
	.d2locreg	%offsetof(.Llo1103), %offsetof(.Llo1101),26
	.d2locreg	%offsetof(.Llo1104), %offsetof(.Llo1105),8
	.d2locend
.L3554:
	.d2locreg	%offsetof(.Llo1098), %offsetof(.Llo1100),9
	.d2locreg	%offsetof(.Llo1103), %offsetof(.Llo1101),25
	.d2locreg	%offsetof(.Llo1104), %offsetof(.Llo1105),9
	.d2locend
.L3556:
	.d2locreg	%offsetof(.Llo1098), %offsetof(.Llo1107),17
	.d2locreg	%offsetof(.Llo1108), %offsetof(.Llo1101),17
	.d2locend
.L3558:
	.d2locreg	%offsetof(.Llo1109), %offsetof(.Llo1101),24
	.d2locend
.L3560:
	.d2locreg	%offsetof(.Llo1110), %offsetof(.Llo1101),23
	.d2locend
.L3566:
	.d2locreg	%offsetof(.Llo1111), %offsetof(.Llo1112),22
	.d2locreg	%offsetof(.Llo1113), %offsetof(.Llo1114),4
	.d2locend
.L3568:
	.d2locreg	%offsetof(.Llo1115), %offsetof(.Llo1112),21
	.d2locend
.L3571:
	.d2locreg	%offsetof(.Llo1116), %offsetof(.Llo1117),20
	.d2locend
.L3573:
	.d2locreg	%offsetof(.Llo1111), %offsetof(.Llo1112),22
	.d2locend
.L3580:
	.d2locreg	%offsetof(.Llo1118), %offsetof(.Llo1119),3
	.d2locreg	%offsetof(.Llo1120), %offsetof(.Llo1121),3
	.d2locreg	%offsetof(.Llo1122), %offsetof(.Llo1123),0
	.d2locreg	%offsetof(.Llo1124), %offsetof(.Llo1125),3
	.d2locreg	%offsetof(.Llo1126), %offsetof(.Llo1127),3
	.d2locreg	%offsetof(.Llo1128), %offsetof(.Llo1129),3
	.d2locreg	%offsetof(.Llo1130), %offsetof(.Llo1131),3
	.d2locend
.L3582:
	.d2locreg	%offsetof(.Llo1122), %offsetof(.Llo1132),18
	.d2locend
.L3589:
	.d2locreg	%offsetof(.Llo1133), %offsetof(.Llo1134),3
	.d2locend
.L3595:
	.d2locreg	%offsetof(.Llo1135), %offsetof(.Llo1101),23
	.d2locend
.L3597:
	.d2locreg	%offsetof(.Llo1136), %offsetof(.Llo1137),22
	.d2locend
.L3599:
	.d2locreg	%offsetof(.Llo1129), %offsetof(.Llo1101),21
	.d2locend
.L3610:
	.d2locreg	%offsetof(.Llo1138), %offsetof(.Llo1139),3
	.d2locreg	%offsetof(.Llo1140), %offsetof(.Llo1141),0
	.d2locreg	%offsetof(.Llo1114), %offsetof(.Llo1142),3
	.d2locend
.L3616:
	.d2locreg	%offsetof(.Llo1143), %offsetof(.Llo1144),3
	.d2locreg	%offsetof(.Llo1145), %offsetof(.Llo1146),3
	.d2locreg	%offsetof(.Llo1147), %offsetof(.Llo1148),3
	.d2locreg	%offsetof(.Llo1149), %offsetof(.Llo1150),3
	.d2locend
.L3618:
	.d2locreg	%offsetof(.Llo1151), %offsetof(.Llo1148),30
	.d2locreg	%offsetof(.Llo1152), %offsetof(.Llo1153),30
	.d2locend
.L3620:
	.d2locreg	%offsetof(.Llo1144), %offsetof(.Llo1154),3
	.d2locreg	%offsetof(.Llo1148), %offsetof(.Llo1150),29
	.d2locend
.L3627:
	.d2locreg	%offsetof(.Llo1155), %offsetof(.Llo1156),31
	.d2locend
.L3629:
	.d2locreg	%offsetof(.Llo1157), %offsetof(.Llo1156),30
	.d2locend
.L3631:
	.d2locreg	%offsetof(.Llo1158), %offsetof(.Llo1159),3
	.d2locreg	%offsetof(.Llo1160), %offsetof(.Llo1161),3
	.d2locreg	%offsetof(.Llo1162), %offsetof(.Llo1163),3
	.d2locreg	%offsetof(.Llo1164), %offsetof(.Llo1165),29
	.d2locreg	%offsetof(.Llo1166), %offsetof(.Llo1167),3
	.d2locreg	%offsetof(.Llo1168), %offsetof(.Llo1169),3
	.d2locreg	%offsetof(.Llo1170), %offsetof(.Llo1171),3
	.d2locreg	%offsetof(.Llo1172), %offsetof(.Llo1173),3
	.d2locend
.L3633:
	.d2locreg	%offsetof(.Llo1174), %offsetof(.Llo1175),3
	.d2locreg	%offsetof(.Llo1176), %offsetof(.Llo1177),28
	.d2locend
.L3635:
	.d2locreg	%offsetof(.Llo1178), %offsetof(.Llo1156),27
	.d2locend
.L3637:
	.d2locreg	%offsetof(.Llo1179), %offsetof(.Llo1156),26
	.d2locend
.L3639:
	.d2locreg	%offsetof(.Llo1180), %offsetof(.Llo1156),25
	.d2locend
.L3641:
	.d2locreg	%offsetof(.Llo1181), %offsetof(.Llo1156),24
	.d2locend
.L3647:
	.d2locreg	%offsetof(.Llo1182), %offsetof(.Llo1183),3
	.d2locreg	%offsetof(.Llo1184), %offsetof(.Llo1185),31
	.d2locend
.L3649:
	.d2locreg	%offsetof(.Llo1183), %offsetof(.Llo1185),30
	.d2locend
.L3655:
	.d2locreg	%offsetof(.Llo1186), %offsetof(.Llo1187),29
	.d2locend
.L3657:
	.d2locreg	%offsetof(.Llo1188), %offsetof(.Llo1189),3
	.d2locreg	%offsetof(.Llo1190), %offsetof(.Llo1191),3
	.d2locreg	%offsetof(.Llo1192), %offsetof(.Llo1193),3
	.d2locreg	%offsetof(.Llo1194), %offsetof(.Llo1187),28
	.d2locend
.L3659:
	.d2locreg	%offsetof(.Llo1195), %offsetof(.Llo1191),4
	.d2locreg	%offsetof(.Llo1194), %offsetof(.Llo1196),27
	.d2locreg	%offsetof(.Llo1197), %offsetof(.Llo1198),3
	.d2locreg	%offsetof(.Llo1199), %offsetof(.Llo1187),27
	.d2locend
.L3665:
	.d2locreg	%offsetof(.Llo1200), %offsetof(.Llo1201),3
	.d2locend
.L3671:
	.d2locreg	%offsetof(.Llo1202), %offsetof(.Llo1203),3
	.d2locreg	%offsetof(.Llo1204), %offsetof(.Llo1205),4
	.d2locreg	%offsetof(.Llo1206), %offsetof(.Llo1207),3
	.d2locend
.L3677:
	.d2locreg	%offsetof(.Llo1208), %offsetof(.Llo1209),3
	.d2locreg	%offsetof(.Llo1210), %offsetof(.Llo1211),31
	.d2locreg	%offsetof(.Llo1212), %offsetof(.Llo1213),3
	.d2locend
.L3679:
	.d2locreg	%offsetof(.Llo1209), %offsetof(.Llo1211),30
	.d2locend
.L3685:
	.d2locreg	%offsetof(.Llo1214), %offsetof(.Llo1215),3
	.d2locreg	%offsetof(.Llo1216), %offsetof(.Llo1217),3
	.d2locreg	%offsetof(.Llo1218), %offsetof(.Llo1219),3
	.d2locreg	%offsetof(.Llo1220), %offsetof(.Llo1211),29
	.d2locend
.L3688:
	.d2locreg	%offsetof(.Llo1221), %offsetof(.Llo1222),28
	.d2locend
.L3694:
	.d2locreg	%offsetof(.Llo1223), %offsetof(.Llo1224),27
	.d2locend
.L3696:
	.d2locreg	%offsetof(.Llo1225), %offsetof(.Llo1215),0
	.d2locreg	%offsetof(.Llo1226), %offsetof(.Llo1217),0
	.d2locreg	%offsetof(.Llo1220), %offsetof(.Llo1227),0
	.d2locreg	%offsetof(.Llo1228), %offsetof(.Llo1229),0
	.d2locreg	%offsetof(.Llo1230), %offsetof(.Llo1231),0
	.d2locend
.L3702:
	.d2locreg	%offsetof(.Llo1232), %offsetof(.Llo1233),3
	.d2locreg	%offsetof(.Llo1234), %offsetof(.Llo1235),31
	.d2locend
.L3704:
	.d2locreg	%offsetof(.Llo1233), %offsetof(.Llo1235),30
	.d2locend
.L3710:
	.d2locreg	%offsetof(.Llo1236), %offsetof(.Llo1237),29
	.d2locend
.L3712:
	.d2locreg	%offsetof(.Llo1238), %offsetof(.Llo1239),3
	.d2locreg	%offsetof(.Llo1240), %offsetof(.Llo1241),3
	.d2locreg	%offsetof(.Llo1242), %offsetof(.Llo1243),3
	.d2locreg	%offsetof(.Llo1244), %offsetof(.Llo1237),28
	.d2locend
.L3714:
	.d2locreg	%offsetof(.Llo1234), %offsetof(.Llo1239),4
	.d2locreg	%offsetof(.Llo1245), %offsetof(.Llo1241),4
	.d2locreg	%offsetof(.Llo1244), %offsetof(.Llo1246),27
	.d2locreg	%offsetof(.Llo1247), %offsetof(.Llo1248),3
	.d2locreg	%offsetof(.Llo1249), %offsetof(.Llo1237),27
	.d2locend
.L3720:
	.d2locreg	%offsetof(.Llo1250), %offsetof(.Llo1251),3
	.d2locreg	%offsetof(.Llo1252), %offsetof(.Llo1253),31
	.d2locend
.L3726:
	.d2locreg	%offsetof(.Llo1254), %offsetof(.Llo1255),3
	.d2locreg	%offsetof(.Llo1256), %offsetof(.Llo1257),31
	.d2locreg	%offsetof(.Llo1258), %offsetof(.Llo1259),3
	.d2locend
.L3728:
	.d2locreg	%offsetof(.Llo1260), %offsetof(.Llo1261),30
	.d2locend
.L3730:
	.d2locreg	%offsetof(.Llo1255), %offsetof(.Llo1257),29
	.d2locend
.L3732:
	.d2locreg	%offsetof(.Llo1262), %offsetof(.Llo1257),28
	.d2locend
.L3738:
	.d2locreg	%offsetof(.Llo1263), %offsetof(.Llo1264),3
	.d2locreg	%offsetof(.Llo1265), %offsetof(.Llo1266),31
	.d2locreg	%offsetof(.Llo1267), %offsetof(.Llo1268),31
	.d2locend
.L3739:
	.d2locreg	%offsetof(.Llo1263), %offsetof(.Llo1269),4
	.d2locend
.L3740:
	.d2locreg	%offsetof(.Llo1263), %offsetof(.Llo1270),5
	.d2locend
.L3743:
	.d2locreg	%offsetof(.Llo1263), %offsetof(.Llo1271),6
	.d2locreg	%offsetof(.Llo1272), %offsetof(.Llo1273),0
	.d2locreg	%offsetof(.Llo1274), %offsetof(.Llo1275),0
	.d2locreg	%offsetof(.Llo1276), %offsetof(.Llo1270),0
	.d2locreg	%offsetof(.Llo1277), %offsetof(.Llo1278),0
	.d2locend
.L3744:
	.d2locreg	%offsetof(.Llo1263), %offsetof(.Llo1278),7
	.d2locend
.L3746:
	.d2locreg	%offsetof(.Llo1279), %offsetof(.Llo1280),30
	.d2locreg	%offsetof(.Llo1281), %offsetof(.Llo1282),30
	.d2locreg	%offsetof(.Llo1283), %offsetof(.Llo1270),30
	.d2locend
.L3748:
	.d2locreg	%offsetof(.Llo1264), %offsetof(.Llo1284),3
	.d2locend
.L3750:
	.d2locreg	%offsetof(.Llo1269), %offsetof(.Llo1278),4
	.d2locend
.L3752:
	.d2locreg	%offsetof(.Llo1268), %offsetof(.Llo1275),31
	.d2locreg	%offsetof(.Llo1285), %offsetof(.Llo1286),31
	.d2locend
.L3758:
	.d2locreg	%offsetof(.Llo1287), %offsetof(.Llo1288),3
	.d2locreg	%offsetof(.Llo1289), %offsetof(.Llo1290),3
	.d2locend
.L3759:
	.d2locreg	%offsetof(.Llo1287), %offsetof(.Llo1291),4
	.d2locend
.L3761:
	.d2locreg	%offsetof(.Llo1287), %offsetof(.Llo1292),5
	.d2locend
.L3763:
	.d2locreg	%offsetof(.Llo1293), %offsetof(.Llo1294),6
	.d2locreg	%offsetof(.Llo1295), %offsetof(.Llo1296),6
	.d2locreg	%offsetof(.Llo1297), %offsetof(.Llo1298),6
	.d2locreg	%offsetof(.Llo1299), %offsetof(.Llo1288),6
	.d2locreg	%offsetof(.Llo1300), %offsetof(.Llo1291),6
	.d2locend
.L3765:
	.d2locreg	%offsetof(.Llo1301), %offsetof(.Llo1302),7
	.d2locend
.L3767:
	.d2locreg	%offsetof(.Llo1303), %offsetof(.Llo1304),31
	.d2locreg	%offsetof(.Llo1305), %offsetof(.Llo1306),31
	.d2locreg	%offsetof(.Llo1307), %offsetof(.Llo1308),31
	.d2locreg	%offsetof(.Llo1309), %offsetof(.Llo1310),31
	.d2locreg	%offsetof(.Llo1311), %offsetof(.Llo1312),31
	.d2locreg	%offsetof(.Llo1313), %offsetof(.Llo1314),31
	.d2locreg	%offsetof(.Llo1294), %offsetof(.Llo1296),31
	.d2locreg	%offsetof(.Llo1315), %offsetof(.Llo1316),31
	.d2locend
.L3773:
	.d2locreg	%offsetof(.Llo1317), %offsetof(.Llo1318),0
	.d2locend
.L3775:
	.d2locreg	%offsetof(.Llo1319), %offsetof(.Llo1296),28
	.d2locend
.L3782:
	.d2locreg	%offsetof(.Llo1320), %offsetof(.Llo1321),3
	.d2locend
.L3794:
	.d2locreg	%offsetof(.Llo1322), %offsetof(.Llo1323),3
	.d2locreg	%offsetof(.Llo1324), %offsetof(.Llo1325),0
	.d2locreg	%offsetof(.Llo1326), %offsetof(.Llo1327),3
	.d2locreg	%offsetof(.Llo1328), %offsetof(.Llo1329),3
	.d2locreg	%offsetof(.Llo1330), %offsetof(.Llo1331),3
	.d2locreg	%offsetof(.Llo1332), %offsetof(.Llo1333),3
	.d2locreg	%offsetof(.Llo1334), %offsetof(.Llo1335),3
	.d2locreg	%offsetof(.Llo1336), %offsetof(.Llo1337),3
	.d2locend
.L3796:
	.d2locreg	%offsetof(.Llo1338), %offsetof(.Llo1339),3
	.d2locreg	%offsetof(.Llo1340), %offsetof(.Llo1341),3
	.d2locreg	%offsetof(.Llo1342), %offsetof(.Llo1343),0
	.d2locreg	%offsetof(.Llo1344), %offsetof(.Llo1345),3
	.d2locreg	%offsetof(.Llo1346), %offsetof(.Llo1347),0
	.d2locreg	%offsetof(.Llo1348), %offsetof(.Llo1349),0
	.d2locreg	%offsetof(.Llo1350), %offsetof(.Llo1351),3
	.d2locreg	%offsetof(.Llo1352), %offsetof(.Llo1353),3
	.d2locreg	%offsetof(.Llo1354), %offsetof(.Llo1355),3
	.d2locreg	%offsetof(.Llo1356), %offsetof(.Llo1357),0
	.d2locreg	%offsetof(.Llo1358), %offsetof(.Llo1359),3
	.d2locreg	%offsetof(.Llo1360), %offsetof(.Llo1361),3
	.d2locreg	%offsetof(.Llo1362), %offsetof(.Llo1363),3
	.d2locreg	%offsetof(.Llo1364), %offsetof(.Llo1365),3
	.d2locreg	%offsetof(.Llo1366), %offsetof(.Llo1367),0
	.d2locreg	%offsetof(.Llo1368), %offsetof(.Llo1369),0
	.d2locreg	%offsetof(.Llo1370), %offsetof(.Llo1371),0
	.d2locreg	%offsetof(.Llo1372), %offsetof(.Llo1373),3
	.d2locreg	%offsetof(.Llo1374), %offsetof(.Llo1375),3
	.d2locreg	%offsetof(.Llo1376), %offsetof(.Llo1329),0
	.d2locreg	%offsetof(.Llo1377), %offsetof(.Llo1331),0
	.d2locreg	%offsetof(.Llo1378), %offsetof(.Llo1333),0
	.d2locreg	%offsetof(.Llo1379), %offsetof(.Llo1380),3
	.d2locreg	%offsetof(.Llo1381), %offsetof(.Llo1382),3
	.d2locreg	%offsetof(.Llo1383), %offsetof(.Llo1384),3
	.d2locreg	%offsetof(.Llo1385), %offsetof(.Llo1386),3
	.d2locreg	%offsetof(.Llo1387), %offsetof(.Llo1388),3
	.d2locreg	%offsetof(.Llo1389), %offsetof(.Llo1390),0
	.d2locreg	%offsetof(.Llo1391), %offsetof(.Llo1392),3
	.d2locreg	%offsetof(.Llo1393), %offsetof(.Llo1394),3
	.d2locreg	%offsetof(.Llo1395), %offsetof(.Llo1396),3
	.d2locreg	%offsetof(.Llo1397), %offsetof(.Llo1398),3
	.d2locreg	%offsetof(.Llo1399), %offsetof(.Llo1400),3
	.d2locreg	%offsetof(.Llo1401), %offsetof(.Llo1402),3
	.d2locreg	%offsetof(.Llo1403), %offsetof(.Llo1404),3
	.d2locreg	%offsetof(.Llo1405), %offsetof(.Llo1406),3
	.d2locreg	%offsetof(.Llo1407), %offsetof(.Llo1408),0
	.d2locreg	%offsetof(.Llo1409), %offsetof(.Llo1410),3
	.d2locreg	%offsetof(.Llo1411), %offsetof(.Llo1412),3
	.d2locreg	%offsetof(.Llo1413), %offsetof(.Llo1414),0
	.d2locreg	%offsetof(.Llo1415), %offsetof(.Llo1335),0
	.d2locreg	%offsetof(.Llo1416), %offsetof(.Llo1337),0
	.d2locend
.L3798:
	.d2locreg	%offsetof(.Llo1417), %offsetof(.Llo1404),31
	.d2locreg	%offsetof(.Llo1418), %offsetof(.Llo1419),31
	.d2locend
.L3804:
	.d2locreg	%offsetof(.Llo1420), %offsetof(.Llo1421),3
	.d2locreg	%offsetof(.Llo1422), %offsetof(.Llo1423),31
	.d2locreg	%offsetof(.Llo1424), %offsetof(.Llo1425),3
	.d2locreg	%offsetof(.Llo1426), %offsetof(.Llo1427),3
	.d2locend
.L3805:
	.d2locreg	%offsetof(.Llo1420), %offsetof(.Llo1428),4
	.d2locreg	%offsetof(.Llo1429), %offsetof(.Llo1423),30
	.d2locend
.L3807:
	.d2locreg	%offsetof(.Llo1430), %offsetof(.Llo1431),29
	.d2locend
.L3809:
	.d2locreg	%offsetof(.Llo1429), %offsetof(.Llo1432),28
	.d2locreg	%offsetof(.Llo1433), %offsetof(.Llo1425),4
	.d2locreg	%offsetof(.Llo1434), %offsetof(.Llo1427),4
	.d2locend
.L3811:
	.d2locreg	%offsetof(.Llo1435), %offsetof(.Llo1432),27
	.d2locend
.L3813:
	.d2locreg	%offsetof(.Llo1436), %offsetof(.Llo1432),26
	.d2locend
.L3823:
	.d2locreg	%offsetof(.Llo1437), %offsetof(.Llo1438),3
	.d2locreg	%offsetof(.Llo1439), %offsetof(.Llo1440),31
	.d2locreg	%offsetof(.Llo1441), %offsetof(.Llo1442),31
	.d2locend
.L3824:
	.d2locreg	%offsetof(.Llo1437), %offsetof(.Llo1439),4
	.d2locreg	%offsetof(.Llo1443), %offsetof(.Llo1444),30
	.d2locreg	%offsetof(.Llo1445), %offsetof(.Llo1446),30
	.d2locreg	%offsetof(.Llo1447), %offsetof(.Llo1448),30
	.d2locreg	%offsetof(.Llo1449), %offsetof(.Llo1450),4
	.d2locend
.L3825:
	.d2locreg	%offsetof(.Llo1437), %offsetof(.Llo1439),5
	.d2locreg	%offsetof(.Llo1443), %offsetof(.Llo1444),29
	.d2locreg	%offsetof(.Llo1451), %offsetof(.Llo1452),29
	.d2locreg	%offsetof(.Llo1441), %offsetof(.Llo1446),29
	.d2locreg	%offsetof(.Llo1453), %offsetof(.Llo1454),29
	.d2locreg	%offsetof(.Llo1455), %offsetof(.Llo1456),29
	.d2locreg	%offsetof(.Llo1447), %offsetof(.Llo1448),29
	.d2locreg	%offsetof(.Llo1449), %offsetof(.Llo1450),5
	.d2locend
.L3826:
	.d2locreg	%offsetof(.Llo1437), %offsetof(.Llo1439),6
	.d2locreg	%offsetof(.Llo1443), %offsetof(.Llo1452),28
	.d2locreg	%offsetof(.Llo1457), %offsetof(.Llo1458),28
	.d2locreg	%offsetof(.Llo1441), %offsetof(.Llo1454),28
	.d2locreg	%offsetof(.Llo1459), %offsetof(.Llo1460),28
	.d2locreg	%offsetof(.Llo1455), %offsetof(.Llo1456),28
	.d2locreg	%offsetof(.Llo1447), %offsetof(.Llo1448),28
	.d2locreg	%offsetof(.Llo1449), %offsetof(.Llo1450),6
	.d2locend
.L3828:
	.d2locreg	%offsetof(.Llo1437), %offsetof(.Llo1461),27
	.d2locreg	%offsetof(.Llo1462), %offsetof(.Llo1463),27
	.d2locreg	%offsetof(.Llo1464), %offsetof(.Llo1441),27
	.d2locreg	%offsetof(.Llo1465), %offsetof(.Llo1445),27
	.d2locreg	%offsetof(.Llo1466), %offsetof(.Llo1455),27
	.d2locreg	%offsetof(.Llo1456), %offsetof(.Llo1447),27
	.d2locreg	%offsetof(.Llo1448), %offsetof(.Llo1467),27
	.d2locend
.L3830:
	.d2locreg	%offsetof(.Llo1468), %offsetof(.Llo1469),0
	.d2locreg	%offsetof(.Llo1470), %offsetof(.Llo1463),0
	.d2locreg	%offsetof(.Llo1471), %offsetof(.Llo1444),0
	.d2locreg	%offsetof(.Llo1451), %offsetof(.Llo1452),0
	.d2locreg	%offsetof(.Llo1457), %offsetof(.Llo1458),0
	.d2locreg	%offsetof(.Llo1472), %offsetof(.Llo1440),0
	.d2locreg	%offsetof(.Llo1473), %offsetof(.Llo1442),0
	.d2locreg	%offsetof(.Llo1474), %offsetof(.Llo1446),0
	.d2locreg	%offsetof(.Llo1453), %offsetof(.Llo1454),0
	.d2locreg	%offsetof(.Llo1459), %offsetof(.Llo1460),0
	.d2locreg	%offsetof(.Llo1475), %offsetof(.Llo1447),0
	.d2locend
.L3838:
	.d2locreg	%offsetof(.Llo1476), %offsetof(.Llo1477),31
	.d2locend
.L3840:
	.d2locreg	%offsetof(.Llo1478), %offsetof(.Llo1477),30
	.d2locend
.L3842:
	.d2locreg	%offsetof(.Llo1479), %offsetof(.Llo1480),29
	.d2locend
.L3844:
	.d2locreg	%offsetof(.Llo1481), %offsetof(.Llo1482),3
	.d2locreg	%offsetof(.Llo1483), %offsetof(.Llo1480),28
	.d2locend
.L3846:
	.d2locreg	%offsetof(.Llo1484), %offsetof(.Llo1477),27
	.d2locend
.L3853:
	.d2locreg	%offsetof(.Llo1485), %offsetof(.Llo1486),31
	.d2locend
.L3855:
	.d2locreg	%offsetof(.Llo1487), %offsetof(.Llo1488),0
	.d2locreg	%offsetof(.Llo1489), %offsetof(.Llo1490),0
	.d2locend
.L3862:
	.d2locreg	%offsetof(.Llo1491), %offsetof(.Llo1492),31
	.d2locend
.L3864:
	.d2locreg	%offsetof(.Llo1493), %offsetof(.Llo1494),3
	.d2locreg	%offsetof(.Llo1495), %offsetof(.Llo1496),30
	.d2locend
.L3866:
	.d2locreg	%offsetof(.Llo1497), %offsetof(.Llo1496),29
	.d2locend
.L3872:
	.d2locreg	%offsetof(.Llo1498), %offsetof(.Llo1499),28
	.d2locend
.L3878:
	.d2locreg	%offsetof(.Llo1500), %offsetof(.Llo1501),3
	.d2locend
.L3888:
	.d2locreg	%offsetof(.Llo1502), %offsetof(.Llo1503),3
	.d2locreg	%offsetof(.Llo1504), %offsetof(.Llo1505),31
	.d2locend
.L3890:
	.d2locreg	%offsetof(.Llo1502), %offsetof(.Llo1506),30
	.d2locend
.L3897:
	.d2locreg	%offsetof(.Llo1507), %offsetof(.Llo1508),3
	.d2locreg	%offsetof(.Llo1509), %offsetof(.Llo1510),0
	.d2locend
.L3899:
	.d2locreg	%offsetof(.Llo1511), %offsetof(.Llo1512),4
	.d2locend
.L3907:
	.d2locreg	%offsetof(.Llo1513), %offsetof(.Llo1514),31
	.d2locend
.L3914:
	.d2locreg	%offsetof(.Llo1515), %offsetof(.Llo1516),31
	.d2locend
.L3920:
	.d2locreg	%offsetof(.Llo1517), %offsetof(.Llo1516),30
	.d2locend
.L3922:
	.d2locreg	%offsetof(.Llo1518), %offsetof(.Llo1519),29
	.d2locend
.L3928:
	.d2locreg	%offsetof(.Llo1520), %offsetof(.Llo1521),26
	.d2locend
.L3934:
	.d2locreg	%offsetof(.Llo1522), %offsetof(.Llo1523),28
	.d2locend
.L3936:
	.d2locreg	%offsetof(.Llo1524), %offsetof(.Llo1525),3
	.d2locreg	%offsetof(.Llo1523), %offsetof(.Llo1521),27
	.d2locend
.L3943:
	.d2locreg	%offsetof(.Llo1526), %offsetof(.Llo1527),31
	.d2locend
.L3949:
	.d2locreg	%offsetof(.Llo1528), %offsetof(.Llo1527),30
	.d2locend
.L3951:
	.d2locreg	%offsetof(.Llo1529), %offsetof(.Llo1530),29
	.d2locend
.L3957:
	.d2locreg	%offsetof(.Llo1531), %offsetof(.Llo1532),26
	.d2locend
.L3963:
	.d2locreg	%offsetof(.Llo1533), %offsetof(.Llo1534),28
	.d2locend
.L3965:
	.d2locreg	%offsetof(.Llo1535), %offsetof(.Llo1536),3
	.d2locreg	%offsetof(.Llo1534), %offsetof(.Llo1532),27
	.d2locend
.L3971:
	.d2locreg	%offsetof(.Llo1537), %offsetof(.Llo1538),3
	.d2locreg	%offsetof(.Llo1539), %offsetof(.Llo1540),3
	.d2locreg	%offsetof(.Llo1541), %offsetof(.Llo1542),31
	.d2locend
.L3973:
	.d2locreg	%offsetof(.Llo1537), %offsetof(.Llo1543),30
	.d2locend
.L3982:
	.d2locreg	%offsetof(.Llo1544), %offsetof(.Llo1545),3
	.d2locreg	%offsetof(.Llo1546), %offsetof(.Llo1547),31
	.d2locreg	%offsetof(.Llo1548), %offsetof(.Llo1549),3
	.d2locend
.L3984:
	.d2locreg	%offsetof(.Llo1550), %offsetof(.Llo1551),0
	.d2locreg	%offsetof(.Llo1552), %offsetof(.Llo1547),0
	.d2locend
.L3994:
	.d2locreg	%offsetof(.Llo1553), %offsetof(.Llo1554),3
	.d2locreg	%offsetof(.Llo1555), %offsetof(.Llo1556),4
	.d2locreg	%offsetof(.Llo1557), %offsetof(.Llo1558),4
	.d2locend
.L3996:
	.d2locreg	%offsetof(.Llo1559), %offsetof(.Llo1557),3
	.d2locreg	%offsetof(.Llo1558), %offsetof(.Llo1560),3
	.d2locend
.L4002:
	.d2locreg	%offsetof(.Llo1561), %offsetof(.Llo1562),3
	.d2locreg	%offsetof(.Llo1563), %offsetof(.Llo1564),31
	.d2locreg	%offsetof(.Llo1565), %offsetof(.Llo1566),3
	.d2locreg	%offsetof(.Llo1567), %offsetof(.Llo1568),3
	.d2locreg	%offsetof(.Llo1569), %offsetof(.Llo1570),3
	.d2locreg	%offsetof(.Llo1571), %offsetof(.Llo1572),3
	.d2locreg	%offsetof(.Llo1573), %offsetof(.Llo1574),3
	.d2locreg	%offsetof(.Llo1575), %offsetof(.Llo1576),3
	.d2locend
.L4004:
	.d2locreg	%offsetof(.Llo1577), %offsetof(.Llo1572),4
	.d2locreg	%offsetof(.Llo1578), %offsetof(.Llo1575),4
	.d2locend
.L4006:
	.d2locreg	%offsetof(.Llo1579), %offsetof(.Llo1580),0
	.d2locreg	%offsetof(.Llo1581), %offsetof(.Llo1570),0
	.d2locreg	%offsetof(.Llo1582), %offsetof(.Llo1572),0
	.d2locreg	%offsetof(.Llo1583), %offsetof(.Llo1575),0
	.d2locend
.L4013:
	.d2locreg	%offsetof(.Llo1584), %offsetof(.Llo1585),3
	.d2locreg	%offsetof(.Llo1586), %offsetof(.Llo1587),3
	.d2locreg	%offsetof(.Llo1588), %offsetof(.Llo1589),3
	.d2locreg	%offsetof(.Llo1590), %offsetof(.Llo1591),3
	.d2locend
.L4015:
	.d2locreg	%offsetof(.Llo1592), %offsetof(.Llo1593),0
	.d2locreg	%offsetof(.Llo1594), %offsetof(.Llo1595),0
	.d2locreg	%offsetof(.Llo1596), %offsetof(.Llo1597),0
	.d2locreg	%offsetof(.Llo1598), %offsetof(.Llo1599),0
	.d2locreg	%offsetof(.Llo1600), %offsetof(.Llo1587),0
	.d2locreg	%offsetof(.Llo1601), %offsetof(.Llo1602),0
	.d2locreg	%offsetof(.Llo1603), %offsetof(.Llo1591),0
	.d2locend
.L4021:
	.d2locreg	%offsetof(.Llo1604), %offsetof(.Llo1602),4
	.d2locreg	%offsetof(.Llo1605), %offsetof(.Llo1606),4
	.d2locreg	%offsetof(.Llo1607), %offsetof(.Llo1608),4
	.d2locend
.L4023:
	.d2locreg	%offsetof(.Llo1609), %offsetof(.Llo1608),0
	.d2locend
.L4025:
	.d2locreg	%offsetof(.Llo1610), %offsetof(.Llo1611),8
	.d2locend
.L4027:
	.d2locreg	%offsetof(.Llo1612), %offsetof(.Llo1602),5
	.d2locreg	%offsetof(.Llo1613), %offsetof(.Llo1608),5
	.d2locend
.L4033:
	.d2locreg	%offsetof(.Llo1614), %offsetof(.Llo1615),6
	.d2locreg	%offsetof(.Llo1616), %offsetof(.Llo1617),6
	.d2locreg	%offsetof(.Llo1618), %offsetof(.Llo1619),6
	.d2locreg	%offsetof(.Llo1620), %offsetof(.Llo1621),6
	.d2locend
.L4040:
	.d2locreg	%offsetof(.Llo1622), %offsetof(.Llo1623),0
	.d2locreg	%offsetof(.Llo1624), %offsetof(.Llo1625),0
	.d2locreg	%offsetof(.Llo1626), %offsetof(.Llo1627),0
	.d2locend
.L4046:
	.d2locreg	%offsetof(.Llo1628), %offsetof(.Llo1629),3
	.d2locreg	%offsetof(.Llo1630), %offsetof(.Llo1631),31
	.d2locend
.L4047:
	.d2locreg	%offsetof(.Llo1628), %offsetof(.Llo1630),4
	.d2locreg	%offsetof(.Llo1632), %offsetof(.Llo1631),30
	.d2locend
.L4049:
	.d2locreg	%offsetof(.Llo1628), %offsetof(.Llo1631),29
	.d2locend
.L4051:
	.d2locreg	%offsetof(.Llo1633), %offsetof(.Llo1634),0
	.d2locreg	%offsetof(.Llo1635), %offsetof(.Llo1636),0
	.d2locreg	%offsetof(.Llo1637), %offsetof(.Llo1638),0
	.d2locreg	%offsetof(.Llo1639), %offsetof(.Llo1640),0
	.d2locend
.L4057:
	.d2locreg	%offsetof(.Llo1641), %offsetof(.Llo1642),3
	.d2locreg	%offsetof(.Llo1643), %offsetof(.Llo1644),31
	.d2locend
.L4059:
	.d2locreg	%offsetof(.Llo1645), %offsetof(.Llo1644),30
	.d2locend
.L4061:
	.d2locreg	%offsetof(.Llo1646), %offsetof(.Llo1647),0
	.d2locreg	%offsetof(.Llo1648), %offsetof(.Llo1649),0
	.d2locreg	%offsetof(.Llo1650), %offsetof(.Llo1651),0
	.d2locreg	%offsetof(.Llo1652), %offsetof(.Llo1653),0
	.d2locend
.L4067:
	.d2locreg	%offsetof(.Llo1654), %offsetof(.Llo1644),29
	.d2locend
.L4073:
	.d2locreg	%offsetof(.Llo1655), %offsetof(.Llo1656),28
	.d2locend
.L4075:
	.d2locreg	%offsetof(.Llo1657), %offsetof(.Llo1658),27
	.d2locreg	%offsetof(.Llo1659), %offsetof(.Llo1660),3
	.d2locreg	%offsetof(.Llo1661), %offsetof(.Llo1656),27
	.d2locend
.L4081:
	.d2locreg	%offsetof(.Llo1662), %offsetof(.Llo1663),3
	.d2locreg	%offsetof(.Llo1664), %offsetof(.Llo1665),31
	.d2locreg	%offsetof(.Llo1666), %offsetof(.Llo1667),31
	.d2locreg	%offsetof(.Llo1668), %offsetof(.Llo1669),31
	.d2locend
.L4082:
	.d2locreg	%offsetof(.Llo1662), %offsetof(.Llo1664),4
	.d2locreg	%offsetof(.Llo1670), %offsetof(.Llo1669),30
	.d2locend
.L4084:
	.d2locreg	%offsetof(.Llo1662), %offsetof(.Llo1671),29
	.d2locend
.L4086:
	.d2locreg	%offsetof(.Llo1672), %offsetof(.Llo1673),0
	.d2locreg	%offsetof(.Llo1674), %offsetof(.Llo1675),0
	.d2locreg	%offsetof(.Llo1676), %offsetof(.Llo1668),0
	.d2locend
.L4092:
	.d2locreg	%offsetof(.Llo1677), %offsetof(.Llo1678),3
	.d2locreg	%offsetof(.Llo1679), %offsetof(.Llo1680),31
	.d2locreg	%offsetof(.Llo1681), %offsetof(.Llo1682),31
	.d2locreg	%offsetof(.Llo1683), %offsetof(.Llo1684),31
	.d2locend
.L4094:
	.d2locreg	%offsetof(.Llo1677), %offsetof(.Llo1679),4
	.d2locreg	%offsetof(.Llo1685), %offsetof(.Llo1684),30
	.d2locend
.L4096:
	.d2locreg	%offsetof(.Llo1677), %offsetof(.Llo1686),29
	.d2locend
.L4098:
	.d2locreg	%offsetof(.Llo1687), %offsetof(.Llo1688),0
	.d2locreg	%offsetof(.Llo1689), %offsetof(.Llo1690),0
	.d2locreg	%offsetof(.Llo1691), %offsetof(.Llo1692),0
	.d2locreg	%offsetof(.Llo1693), %offsetof(.Llo1694),0
	.d2locreg	%offsetof(.Llo1695), %offsetof(.Llo1683),0
	.d2locend
.L4104:
	.d2locreg	%offsetof(.Llo1696), %offsetof(.Llo1697),3
	.d2locreg	%offsetof(.Llo1698), %offsetof(.Llo1699),31
	.d2locreg	%offsetof(.Llo1700), %offsetof(.Llo1701),31
	.d2locreg	%offsetof(.Llo1702), %offsetof(.Llo1703),31
	.d2locend
.L4105:
	.d2locreg	%offsetof(.Llo1696), %offsetof(.Llo1698),4
	.d2locreg	%offsetof(.Llo1704), %offsetof(.Llo1703),30
	.d2locend
.L4107:
	.d2locreg	%offsetof(.Llo1696), %offsetof(.Llo1705),29
	.d2locend
.L4109:
	.d2locreg	%offsetof(.Llo1706), %offsetof(.Llo1707),0
	.d2locreg	%offsetof(.Llo1708), %offsetof(.Llo1709),0
	.d2locreg	%offsetof(.Llo1710), %offsetof(.Llo1711),0
	.d2locreg	%offsetof(.Llo1712), %offsetof(.Llo1713),0
	.d2locreg	%offsetof(.Llo1714), %offsetof(.Llo1702),0
	.d2locend
.L4115:
	.d2locreg	%offsetof(.Llo1715), %offsetof(.Llo1716),3
	.d2locreg	%offsetof(.Llo1717), %offsetof(.Llo1718),31
	.d2locreg	%offsetof(.Llo1719), %offsetof(.Llo1720),31
	.d2locreg	%offsetof(.Llo1721), %offsetof(.Llo1722),31
	.d2locend
.L4116:
	.d2locreg	%offsetof(.Llo1715), %offsetof(.Llo1717),4
	.d2locreg	%offsetof(.Llo1723), %offsetof(.Llo1724),30
	.d2locreg	%offsetof(.Llo1725), %offsetof(.Llo1726),30
	.d2locreg	%offsetof(.Llo1721), %offsetof(.Llo1722),30
	.d2locend
.L4118:
	.d2locreg	%offsetof(.Llo1715), %offsetof(.Llo1717),5
	.d2locreg	%offsetof(.Llo1723), %offsetof(.Llo1726),29
	.d2locreg	%offsetof(.Llo1721), %offsetof(.Llo1722),29
	.d2locreg	%offsetof(.Llo1727), %offsetof(.Llo1728),5
	.d2locend
.L4120:
	.d2locreg	%offsetof(.Llo1715), %offsetof(.Llo1727),28
	.d2locend
.L4122:
	.d2locreg	%offsetof(.Llo1729), %offsetof(.Llo1730),0
	.d2locreg	%offsetof(.Llo1731), %offsetof(.Llo1732),0
	.d2locreg	%offsetof(.Llo1719), %offsetof(.Llo1733),0
	.d2locend
.L4128:
	.d2locreg	%offsetof(.Llo1733), %offsetof(.Llo1734),0
	.d2locreg	%offsetof(.Llo1735), %offsetof(.Llo1736),0
	.d2locreg	%offsetof(.Llo1737), %offsetof(.Llo1726),0
	.d2locend
.L4134:
	.d2locreg	%offsetof(.Llo1738), %offsetof(.Llo1739),3
	.d2locreg	%offsetof(.Llo1740), %offsetof(.Llo1741),31
	.d2locend
.L4135:
	.d2locreg	%offsetof(.Llo1738), %offsetof(.Llo1740),4
	.d2locreg	%offsetof(.Llo1742), %offsetof(.Llo1741),30
	.d2locend
.L4137:
	.d2locreg	%offsetof(.Llo1743), %offsetof(.Llo1744),0
	.d2locreg	%offsetof(.Llo1745), %offsetof(.Llo1746),0
	.d2locreg	%offsetof(.Llo1747), %offsetof(.Llo1748),0
	.d2locreg	%offsetof(.Llo1749), %offsetof(.Llo1750),0
	.d2locreg	%offsetof(.Llo1751), %offsetof(.Llo1752),0
	.d2locend
.L4144:
	.d2locreg	%offsetof(.Llo1753), %offsetof(.Llo1754),3
	.d2locreg	%offsetof(.Llo1755), %offsetof(.Llo1756),31
	.d2locend
.L4145:
	.d2locreg	%offsetof(.Llo1753), %offsetof(.Llo1757),4
	.d2locreg	%offsetof(.Llo1758), %offsetof(.Llo1759),30
	.d2locreg	%offsetof(.Llo1760), %offsetof(.Llo1761),30
	.d2locend
.L4146:
	.d2locreg	%offsetof(.Llo1753), %offsetof(.Llo1755),5
	.d2locreg	%offsetof(.Llo1762), %offsetof(.Llo1763),28
	.d2locreg	%offsetof(.Llo1764), %offsetof(.Llo1765),5
	.d2locend
.L4148:
	.d2locreg	%offsetof(.Llo1766), %offsetof(.Llo1756),3
	.d2locreg	%offsetof(.Llo1767), %offsetof(.Llo1768),6
	.d2locreg	%offsetof(.Llo1769), %offsetof(.Llo1760),3
	.d2locreg	%offsetof(.Llo1770), %offsetof(.Llo1771),6
	.d2locreg	%offsetof(.Llo1761), %offsetof(.Llo1763),6
	.d2locend
.L4150:
	.d2locreg	%offsetof(.Llo1772), %offsetof(.Llo1773),0
	.d2locreg	%offsetof(.Llo1774), %offsetof(.Llo1755),0
	.d2locreg	%offsetof(.Llo1775), %offsetof(.Llo1776),0
	.d2locreg	%offsetof(.Llo1777), %offsetof(.Llo1778),0
	.d2locreg	%offsetof(.Llo1779), %offsetof(.Llo1780),0
	.d2locreg	%offsetof(.Llo1781), %offsetof(.Llo1759),3
	.d2locreg	%offsetof(.Llo1782), %offsetof(.Llo1760),31
	.d2locreg	%offsetof(.Llo1770), %offsetof(.Llo1771),31
	.d2locreg	%offsetof(.Llo1783), %offsetof(.Llo1784),31
	.d2locreg	%offsetof(.Llo1761), %offsetof(.Llo1763),31
	.d2locend
.L4152:
	.d2locreg	%offsetof(.Llo1785), %offsetof(.Llo1786),3
	.d2locreg	%offsetof(.Llo1755), %offsetof(.Llo1787),29
	.d2locreg	%offsetof(.Llo1788), %offsetof(.Llo1789),29
	.d2locreg	%offsetof(.Llo1784), %offsetof(.Llo1761),29
	.d2locend
.L4154:
	.d2locreg	%offsetof(.Llo1790), %offsetof(.Llo1791),4
	.d2locreg	%offsetof(.Llo1792), %offsetof(.Llo1778),3
	.d2locreg	%offsetof(.Llo1793), %offsetof(.Llo1787),3
	.d2locreg	%offsetof(.Llo1794), %offsetof(.Llo1780),3
	.d2locend
.L4160:
	.d2locreg	%offsetof(.Llo1795), %offsetof(.Llo1796),3
	.d2locreg	%offsetof(.Llo1797), %offsetof(.Llo1798),31
	.d2locend
.L4161:
	.d2locreg	%offsetof(.Llo1795), %offsetof(.Llo1797),4
	.d2locreg	%offsetof(.Llo1799), %offsetof(.Llo1798),30
	.d2locend
.L4162:
	.d2locreg	%offsetof(.Llo1795), %offsetof(.Llo1797),5
	.d2locreg	%offsetof(.Llo1799), %offsetof(.Llo1798),29
	.d2locend
.L4164:
	.d2locreg	%offsetof(.Llo1800), %offsetof(.Llo1801),3
	.d2locreg	%offsetof(.Llo1798), %offsetof(.Llo1802),3
	.d2locend
.L4166:
	.d2locreg	%offsetof(.Llo1803), %offsetof(.Llo1804),0
	.d2locend
.L4172:
	.d2locreg	%offsetof(.Llo1805), %offsetof(.Llo1806),3
	.d2locreg	%offsetof(.Llo1807), %offsetof(.Llo1808),31
	.d2locend
.L4173:
	.d2locreg	%offsetof(.Llo1805), %offsetof(.Llo1807),4
	.d2locreg	%offsetof(.Llo1809), %offsetof(.Llo1808),30
	.d2locend
.L4174:
	.d2locreg	%offsetof(.Llo1805), %offsetof(.Llo1807),5
	.d2locreg	%offsetof(.Llo1809), %offsetof(.Llo1808),29
	.d2locend
.L4176:
	.d2locreg	%offsetof(.Llo1810), %offsetof(.Llo1811),3
	.d2locreg	%offsetof(.Llo1808), %offsetof(.Llo1812),3
	.d2locend
.L4178:
	.d2locreg	%offsetof(.Llo1813), %offsetof(.Llo1814),0
	.d2locend
.L4185:
	.d2locreg	%offsetof(.Llo1815), %offsetof(.Llo1816),0
	.d2locreg	%offsetof(.Llo1817), %offsetof(.Llo1818),0
	.d2locreg	%offsetof(.Llo1819), %offsetof(.Llo1820),0
	.d2locreg	%offsetof(.Llo1821), %offsetof(.Llo1822),0
	.d2locreg	%offsetof(.Llo1823), %offsetof(.Llo1824),0
	.d2locreg	%offsetof(.Llo1825), %offsetof(.Llo1826),0
	.d2locreg	%offsetof(.Llo1827), %offsetof(.Llo1828),0
	.d2locreg	%offsetof(.Llo1829), %offsetof(.Llo1830),0
	.d2locreg	%offsetof(.Llo1831), %offsetof(.Llo1832),0
	.d2locend
.L4191:
	.d2locreg	%offsetof(.Llo1833), %offsetof(.Llo1834),3
	.d2locreg	%offsetof(.Llo1835), %offsetof(.Llo1836),31
	.d2locend
.L4193:
	.d2locreg	%offsetof(.Llo1833), %offsetof(.Llo1835),4
	.d2locreg	%offsetof(.Llo1837), %offsetof(.Llo1836),30
	.d2locend
.L4195:
	.d2locreg	%offsetof(.Llo1833), %offsetof(.Llo1836),29
	.d2locend
.L4198:
	.d2locreg	%offsetof(.Llo1838), %offsetof(.Llo1839),0
	.d2locreg	%offsetof(.Llo1840), %offsetof(.Llo1841),0
	.d2locreg	%offsetof(.Llo1842), %offsetof(.Llo1843),0
	.d2locend
.L4204:
	.d2locreg	%offsetof(.Llo1844), %offsetof(.Llo1845),3
	.d2locreg	%offsetof(.Llo1846), %offsetof(.Llo1847),31
	.d2locend
.L4206:
	.d2locreg	%offsetof(.Llo1844), %offsetof(.Llo1847),30
	.d2locend
.L4209:
	.d2locreg	%offsetof(.Llo1848), %offsetof(.Llo1849),0
	.d2locreg	%offsetof(.Llo1850), %offsetof(.Llo1851),0
	.d2locreg	%offsetof(.Llo1852), %offsetof(.Llo1853),0
	.d2locreg	%offsetof(.Llo1854), %offsetof(.Llo1855),0
	.d2locend
.L4215:
	.d2locreg	%offsetof(.Llo1856), %offsetof(.Llo1857),3
	.d2locreg	%offsetof(.Llo1858), %offsetof(.Llo1859),31
	.d2locreg	%offsetof(.Llo1860), %offsetof(.Llo1861),31
	.d2locend
.L4216:
	.d2locreg	%offsetof(.Llo1856), %offsetof(.Llo1858),4
	.d2locreg	%offsetof(.Llo1862), %offsetof(.Llo1863),27
	.d2locreg	%offsetof(.Llo1864), %offsetof(.Llo1859),27
	.d2locreg	%offsetof(.Llo1860), %offsetof(.Llo1861),27
	.d2locreg	%offsetof(.Llo1865), %offsetof(.Llo1866),4
	.d2locend
.L4217:
	.d2locreg	%offsetof(.Llo1856), %offsetof(.Llo1858),5
	.d2locreg	%offsetof(.Llo1862), %offsetof(.Llo1859),30
	.d2locreg	%offsetof(.Llo1860), %offsetof(.Llo1861),30
	.d2locreg	%offsetof(.Llo1865), %offsetof(.Llo1866),5
	.d2locend
.L4219:
	.d2locreg	%offsetof(.Llo1867), %offsetof(.Llo1863),29
	.d2locreg	%offsetof(.Llo1868), %offsetof(.Llo1869),29
	.d2locreg	%offsetof(.Llo1870), %offsetof(.Llo1871),29
	.d2locreg	%offsetof(.Llo1872), %offsetof(.Llo1873),29
	.d2locreg	%offsetof(.Llo1874), %offsetof(.Llo1875),29
	.d2locreg	%offsetof(.Llo1860), %offsetof(.Llo1861),29
	.d2locend
.L4221:
	.d2locreg	%offsetof(.Llo1876), %offsetof(.Llo1877),0
	.d2locreg	%offsetof(.Llo1878), %offsetof(.Llo1879),0
	.d2locreg	%offsetof(.Llo1880), %offsetof(.Llo1881),0
	.d2locreg	%offsetof(.Llo1882), %offsetof(.Llo1883),0
	.d2locreg	%offsetof(.Llo1884), %offsetof(.Llo1885),0
	.d2locreg	%offsetof(.Llo1886), %offsetof(.Llo1887),0
	.d2locreg	%offsetof(.Llo1888), %offsetof(.Llo1889),0
	.d2locreg	%offsetof(.Llo1890), %offsetof(.Llo1891),0
	.d2locreg	%offsetof(.Llo1892), %offsetof(.Llo1893),0
	.d2locend
.L4227:
	.d2locreg	%offsetof(.Llo1894), %offsetof(.Llo1859),28
	.d2locreg	%offsetof(.Llo1860), %offsetof(.Llo1861),28
	.d2locend
.L4229:
	.d2locreg	%offsetof(.Llo1895), %offsetof(.Llo1896),3
	.d2locend
.L4231:
	.d2locreg	%offsetof(.Llo1897), %offsetof(.Llo1895),3
	.d2locreg	%offsetof(.Llo1898), %offsetof(.Llo1899),3
	.d2locreg	%offsetof(.Llo1900), %offsetof(.Llo1859),25
	.d2locreg	%offsetof(.Llo1860), %offsetof(.Llo1861),25
	.d2locend
.L4238:
	.d2locreg	%offsetof(.Llo1901), %offsetof(.Llo1863),27
	.d2locreg	%offsetof(.Llo1864), %offsetof(.Llo1859),27
	.d2locreg	%offsetof(.Llo1860), %offsetof(.Llo1861),27
	.d2locend
.L4240:
	.d2locreg	%offsetof(.Llo1902), %offsetof(.Llo1873),26
	.d2locreg	%offsetof(.Llo1860), %offsetof(.Llo1861),26
	.d2locend
.L4248:
	.d2locreg	%offsetof(.Llo1903), %offsetof(.Llo1889),3
	.d2locreg	%offsetof(.Llo1870), %offsetof(.Llo1904),3
	.d2locreg	%offsetof(.Llo1871), %offsetof(.Llo1872),3
	.d2locend
.L4259:
	.d2locreg	%offsetof(.Llo1905), %offsetof(.Llo1906),3
	.d2locreg	%offsetof(.Llo1907), %offsetof(.Llo1908),25
	.d2locreg	%offsetof(.Llo1909), %offsetof(.Llo1910),25
	.d2locreg	%offsetof(.Llo1911), %offsetof(.Llo1912),25
	.d2locreg	%offsetof(.Llo1913), %offsetof(.Llo1914),25
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),25
	.d2locend
.L4260:
	.d2locreg	%offsetof(.Llo1905), %offsetof(.Llo1907),4
	.d2locreg	%offsetof(.Llo1917), %offsetof(.Llo1918),24
	.d2locreg	%offsetof(.Llo1919), %offsetof(.Llo1920),5
	.d2locreg	%offsetof(.Llo1921), %offsetof(.Llo1922),5
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),24
	.d2locend
.L4261:
	.d2locreg	%offsetof(.Llo1905), %offsetof(.Llo1907),5
	.d2locreg	%offsetof(.Llo1917), %offsetof(.Llo1914),31
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),31
	.d2locreg	%offsetof(.Llo1923), %offsetof(.Llo1924),5
	.d2locend
.L4262:
	.d2locreg	%offsetof(.Llo1905), %offsetof(.Llo1907),6
	.d2locreg	%offsetof(.Llo1917), %offsetof(.Llo1914),30
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),30
	.d2locreg	%offsetof(.Llo1923), %offsetof(.Llo1924),6
	.d2locend
.L4263:
	.d2locreg	%offsetof(.Llo1905), %offsetof(.Llo1907),7
	.d2locreg	%offsetof(.Llo1917), %offsetof(.Llo1914),29
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),29
	.d2locreg	%offsetof(.Llo1923), %offsetof(.Llo1924),7
	.d2locend
.L4265:
	.d2locreg	%offsetof(.Llo1925), %offsetof(.Llo1916),28
	.d2locend
.L4267:
	.d2locreg	%offsetof(.Llo1926), %offsetof(.Llo1914),27
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),27
	.d2locend
.L4269:
	.d2locreg	%offsetof(.Llo1927), %offsetof(.Llo1928),26
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),26
	.d2locend
.L4271:
	.d2locreg	%offsetof(.Llo1929), %offsetof(.Llo1930),0
	.d2locreg	%offsetof(.Llo1931), %offsetof(.Llo1932),0
	.d2locreg	%offsetof(.Llo1933), %offsetof(.Llo1934),0
	.d2locreg	%offsetof(.Llo1935), %offsetof(.Llo1936),0
	.d2locreg	%offsetof(.Llo1937), %offsetof(.Llo1938),0
	.d2locreg	%offsetof(.Llo1939), %offsetof(.Llo1908),0
	.d2locreg	%offsetof(.Llo1940), %offsetof(.Llo1911),0
	.d2locreg	%offsetof(.Llo1941), %offsetof(.Llo1942),0
	.d2locreg	%offsetof(.Llo1943), %offsetof(.Llo1944),0
	.d2locreg	%offsetof(.Llo1945), %offsetof(.Llo1946),0
	.d2locreg	%offsetof(.Llo1947), %offsetof(.Llo1948),0
	.d2locreg	%offsetof(.Llo1949), %offsetof(.Llo1950),0
	.d2locend
.L4277:
	.d2locreg	%offsetof(.Llo1951), %offsetof(.Llo1942),11
	.d2locreg	%offsetof(.Llo1952), %offsetof(.Llo1953),3
	.d2locreg	%offsetof(.Llo1943), %offsetof(.Llo1944),11
	.d2locreg	%offsetof(.Llo1954), %offsetof(.Llo1955),3
	.d2locreg	%offsetof(.Llo1945), %offsetof(.Llo1946),11
	.d2locreg	%offsetof(.Llo1956), %offsetof(.Llo1957),3
	.d2locreg	%offsetof(.Llo1958), %offsetof(.Llo1918),11
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),11
	.d2locend
.L4279:
	.d2locreg	%offsetof(.Llo1959), %offsetof(.Llo1908),25
	.d2locreg	%offsetof(.Llo1909), %offsetof(.Llo1910),25
	.d2locreg	%offsetof(.Llo1911), %offsetof(.Llo1912),25
	.d2locreg	%offsetof(.Llo1913), %offsetof(.Llo1914),25
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),25
	.d2locend
.L4281:
	.d2locreg	%offsetof(.Llo1960), %offsetof(.Llo1961),3
	.d2locend
.L4283:
	.d2locreg	%offsetof(.Llo1962), %offsetof(.Llo1963),3
	.d2locreg	%offsetof(.Llo1964), %offsetof(.Llo1918),12
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),12
	.d2locend
.L4286:
	.d2locreg	%offsetof(.Llo1965), %offsetof(.Llo1918),10
	.d2locreg	%offsetof(.Llo1966), %offsetof(.Llo1967),3
	.d2locreg	%offsetof(.Llo1968), %offsetof(.Llo1969),6
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),10
	.d2locend
.L4297:
	.d2locreg	%offsetof(.Llo1970), %offsetof(.Llo1971),9
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),9
	.d2locend
.L4299:
	.d2locreg	%offsetof(.Llo1959), %offsetof(.Llo1908),25
	.d2locreg	%offsetof(.Llo1909), %offsetof(.Llo1910),25
	.d2locreg	%offsetof(.Llo1911), %offsetof(.Llo1912),25
	.d2locreg	%offsetof(.Llo1913), %offsetof(.Llo1914),25
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),25
	.d2locend
.L4301:
	.d2locreg	%offsetof(.Llo1959), %offsetof(.Llo1908),25
	.d2locreg	%offsetof(.Llo1909), %offsetof(.Llo1910),25
	.d2locreg	%offsetof(.Llo1911), %offsetof(.Llo1912),25
	.d2locreg	%offsetof(.Llo1913), %offsetof(.Llo1914),25
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),25
	.d2locend
.L4308:
	.d2locreg	%offsetof(.Llo1971), %offsetof(.Llo1920),3
	.d2locreg	%offsetof(.Llo1966), %offsetof(.Llo1914),24
	.d2locend
.L4310:
	.d2locreg	%offsetof(.Llo1972), %offsetof(.Llo1922),23
	.d2locend
.L4313:
	.d2locreg	%offsetof(.Llo1973), %offsetof(.Llo1974),22
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),22
	.d2locend
.L4315:
	.d2locreg	%offsetof(.Llo1973), %offsetof(.Llo1975),22
	.d2locreg	%offsetof(.Llo1915), %offsetof(.Llo1916),22
	.d2locend
.L4321:
	.d2locreg	%offsetof(.Llo1976), %offsetof(.Llo1977),3
	.d2locreg	%offsetof(.Llo1978), %offsetof(.Llo1979),31
	.d2locreg	%offsetof(.Llo1980), %offsetof(.Llo1981),31
	.d2locend
.L4322:
	.d2locreg	%offsetof(.Llo1976), %offsetof(.Llo1978),4
	.d2locreg	%offsetof(.Llo1982), %offsetof(.Llo1981),30
	.d2locreg	%offsetof(.Llo1983), %offsetof(.Llo1984),4
	.d2locend
.L4324:
	.d2locreg	%offsetof(.Llo1976), %offsetof(.Llo1981),29
	.d2locend
.L4326:
	.d2locreg	%offsetof(.Llo1985), %offsetof(.Llo1986),3
	.d2locreg	%offsetof(.Llo1987), %offsetof(.Llo1979),0
	.d2locreg	%offsetof(.Llo1988), %offsetof(.Llo1989),3
	.d2locreg	%offsetof(.Llo1990), %offsetof(.Llo1981),0
	.d2locend
.L4328:
	.d2locreg	%offsetof(.Llo1991), %offsetof(.Llo1992),0
	.d2locreg	%offsetof(.Llo1993), %offsetof(.Llo1994),0
	.d2locend
.L4334:
	.d2locreg	%offsetof(.Llo1995), %offsetof(.Llo1996),3
	.d2locreg	%offsetof(.Llo1997), %offsetof(.Llo1998),31
	.d2locreg	%offsetof(.Llo1999), %offsetof(.Llo2000),31
	.d2locreg	%offsetof(.Llo2001), %offsetof(.Llo2002),31
	.d2locend
.L4335:
	.d2locreg	%offsetof(.Llo1995), %offsetof(.Llo1997),4
	.d2locreg	%offsetof(.Llo2003), %offsetof(.Llo2004),30
	.d2locreg	%offsetof(.Llo2005), %offsetof(.Llo2006),30
	.d2locreg	%offsetof(.Llo2001), %offsetof(.Llo2002),30
	.d2locend
.L4336:
	.d2locreg	%offsetof(.Llo1995), %offsetof(.Llo1997),5
	.d2locreg	%offsetof(.Llo2003), %offsetof(.Llo2000),29
	.d2locreg	%offsetof(.Llo2001), %offsetof(.Llo2002),29
	.d2locreg	%offsetof(.Llo2007), %offsetof(.Llo2008),5
	.d2locend
.L4338:
	.d2locreg	%offsetof(.Llo1995), %offsetof(.Llo1998),28
	.d2locreg	%offsetof(.Llo2009), %offsetof(.Llo2010),3
	.d2locreg	%offsetof(.Llo2011), %offsetof(.Llo2007),28
	.d2locend
.L4341:
	.d2locreg	%offsetof(.Llo2005), %offsetof(.Llo2000),30
	.d2locend
.L4343:
	.d2locreg	%offsetof(.Llo2012), %offsetof(.Llo2013),0
	.d2locreg	%offsetof(.Llo2014), %offsetof(.Llo2015),0
	.d2locreg	%offsetof(.Llo2016), %offsetof(.Llo2017),0
	.d2locend
.L4350:
	.d2locreg	%offsetof(.Llo2018), %offsetof(.Llo2019),3
	.d2locreg	%offsetof(.Llo2020), %offsetof(.Llo2021),31
	.d2locreg	%offsetof(.Llo2022), %offsetof(.Llo2023),3
	.d2locreg	%offsetof(.Llo2024), %offsetof(.Llo2025),31
	.d2locend
.L4352:
	.d2locreg	%offsetof(.Llo2018), %offsetof(.Llo2020),4
	.d2locreg	%offsetof(.Llo2026), %offsetof(.Llo2027),30
	.d2locreg	%offsetof(.Llo2028), %offsetof(.Llo2029),30
	.d2locend
.L4355:
	.d2locreg	%offsetof(.Llo2018), %offsetof(.Llo2030),29
	.d2locend
.L4357:
	.d2locreg	%offsetof(.Llo2031), %offsetof(.Llo2029),0
	.d2locreg	%offsetof(.Llo2032), %offsetof(.Llo2033),0
	.d2locreg	%offsetof(.Llo2034), %offsetof(.Llo2023),0
	.d2locend
.L4363:
	.d2locreg	%offsetof(.Llo2035), %offsetof(.Llo2036),3
	.d2locreg	%offsetof(.Llo2037), %offsetof(.Llo2038),31
	.d2locreg	%offsetof(.Llo2039), %offsetof(.Llo2040),3
	.d2locreg	%offsetof(.Llo2041), %offsetof(.Llo2042),31
	.d2locend
.L4364:
	.d2locreg	%offsetof(.Llo2035), %offsetof(.Llo2037),4
	.d2locreg	%offsetof(.Llo2043), %offsetof(.Llo2044),30
	.d2locreg	%offsetof(.Llo2045), %offsetof(.Llo2046),30
	.d2locend
.L4367:
	.d2locreg	%offsetof(.Llo2035), %offsetof(.Llo2047),29
	.d2locend
.L4369:
	.d2locreg	%offsetof(.Llo2048), %offsetof(.Llo2046),0
	.d2locreg	%offsetof(.Llo2049), %offsetof(.Llo2050),0
	.d2locreg	%offsetof(.Llo2051), %offsetof(.Llo2040),0
	.d2locend
.L4376:
	.d2locreg	%offsetof(.Llo2052), %offsetof(.Llo2053),3
	.d2locreg	%offsetof(.Llo2054), %offsetof(.Llo2055),31
	.d2locreg	%offsetof(.Llo2056), %offsetof(.Llo2057),31
	.d2locend
.L4379:
	.d2locreg	%offsetof(.Llo2052), %offsetof(.Llo2054),4
	.d2locreg	%offsetof(.Llo2058), %offsetof(.Llo2057),30
	.d2locreg	%offsetof(.Llo2059), %offsetof(.Llo2060),4
	.d2locend
.L4381:
	.d2locreg	%offsetof(.Llo2061), %offsetof(.Llo2062),3
	.d2locreg	%offsetof(.Llo2063), %offsetof(.Llo2055),0
	.d2locreg	%offsetof(.Llo2064), %offsetof(.Llo2065),3
	.d2locreg	%offsetof(.Llo2066), %offsetof(.Llo2056),0
	.d2locend
.L4383:
	.d2locreg	%offsetof(.Llo2067), %offsetof(.Llo2068),3
	.d2locreg	%offsetof(.Llo2069), %offsetof(.Llo2056),3
	.d2locreg	%offsetof(.Llo2057), %offsetof(.Llo2059),3
	.d2locend
.L4385:
	.d2locreg	%offsetof(.Llo2070), %offsetof(.Llo2071),0
	.d2locreg	%offsetof(.Llo2072), %offsetof(.Llo2073),0
	.d2locend
.L4392:
	.d2locreg	%offsetof(.Llo2074), %offsetof(.Llo2075),3
	.d2locreg	%offsetof(.Llo2076), %offsetof(.Llo2077),31
	.d2locreg	%offsetof(.Llo2078), %offsetof(.Llo2079),31
	.d2locend
.L4393:
	.d2locreg	%offsetof(.Llo2074), %offsetof(.Llo2076),4
	.d2locreg	%offsetof(.Llo2080), %offsetof(.Llo2079),30
	.d2locreg	%offsetof(.Llo2081), %offsetof(.Llo2082),4
	.d2locend
.L4395:
	.d2locreg	%offsetof(.Llo2083), %offsetof(.Llo2084),3
	.d2locreg	%offsetof(.Llo2085), %offsetof(.Llo2077),0
	.d2locreg	%offsetof(.Llo2086), %offsetof(.Llo2087),3
	.d2locreg	%offsetof(.Llo2088), %offsetof(.Llo2078),0
	.d2locend
.L4397:
	.d2locreg	%offsetof(.Llo2074), %offsetof(.Llo2081),29
	.d2locend
.L4399:
	.d2locreg	%offsetof(.Llo2089), %offsetof(.Llo2090),0
	.d2locreg	%offsetof(.Llo2091), %offsetof(.Llo2092),0
	.d2locend
.L4407:
	.d2locreg	%offsetof(.Llo2093), %offsetof(.Llo2094),0
	.d2locreg	%offsetof(.Llo2095), %offsetof(.Llo2096),0
	.d2locend
.L4413:
	.d2locreg	%offsetof(.Llo2097), %offsetof(.Llo2098),3
	.d2locreg	%offsetof(.Llo2099), %offsetof(.Llo2100),3
	.d2locreg	%offsetof(.Llo2101), %offsetof(.Llo2102),3
	.d2locreg	%offsetof(.Llo2103), %offsetof(.Llo2104),3
	.d2locreg	%offsetof(.Llo2105), %offsetof(.Llo2106),3
	.d2locreg	%offsetof(.Llo2107), %offsetof(.Llo2108),3
	.d2locend
.L4414:
	.d2locreg	%offsetof(.Llo2097), %offsetof(.Llo2109),4
	.d2locreg	%offsetof(.Llo2110), %offsetof(.Llo2111),31
	.d2locend
.L4416:
	.d2locreg	%offsetof(.Llo2097), %offsetof(.Llo2112),4
	.d2locreg	%offsetof(.Llo2113), %offsetof(.Llo2098),4
	.d2locreg	%offsetof(.Llo2114), %offsetof(.Llo2115),4
	.d2locreg	%offsetof(.Llo2116), %offsetof(.Llo2101),3
	.d2locreg	%offsetof(.Llo2102), %offsetof(.Llo2103),4
	.d2locreg	%offsetof(.Llo2117), %offsetof(.Llo2104),4
	.d2locreg	%offsetof(.Llo2118), %offsetof(.Llo2106),4
	.d2locreg	%offsetof(.Llo2119), %offsetof(.Llo2108),4
	.d2locreg	%offsetof(.Llo2111), %offsetof(.Llo2120),4
	.d2locend
.L4420:
	.d2locreg	%offsetof(.Llo2121), %offsetof(.Llo2111),0
	.d2locend
.L4422:
	.d2locreg	%offsetof(.Llo2122), %offsetof(.Llo2112),0
	.d2locreg	%offsetof(.Llo2123), %offsetof(.Llo2124),0
	.d2locend
.L4428:
	.d2locreg	%offsetof(.Llo2125), %offsetof(.Llo2126),3
	.d2locreg	%offsetof(.Llo2127), %offsetof(.Llo2128),31
	.d2locend
.L4429:
	.d2locreg	%offsetof(.Llo2125), %offsetof(.Llo2127),4
	.d2locreg	%offsetof(.Llo2129), %offsetof(.Llo2128),30
	.d2locend
.L4431:
	.d2locreg	%offsetof(.Llo2125), %offsetof(.Llo2128),29
	.d2locend
.L4433:
	.d2locreg	%offsetof(.Llo2130), %offsetof(.Llo2131),0
	.d2locreg	%offsetof(.Llo2132), %offsetof(.Llo2133),0
	.d2locend
.L4440:
	.d2locreg	%offsetof(.Llo2134), %offsetof(.Llo2135),3
	.d2locreg	%offsetof(.Llo2136), %offsetof(.Llo2137),31
	.d2locreg	%offsetof(.Llo2138), %offsetof(.Llo2139),31
	.d2locend
.L4441:
	.d2locreg	%offsetof(.Llo2134), %offsetof(.Llo2140),4
	.d2locreg	%offsetof(.Llo2136), %offsetof(.Llo2137),30
	.d2locreg	%offsetof(.Llo2138), %offsetof(.Llo2139),30
	.d2locend
.L4442:
	.d2locreg	%offsetof(.Llo2134), %offsetof(.Llo2136),5
	.d2locreg	%offsetof(.Llo2141), %offsetof(.Llo2137),29
	.d2locreg	%offsetof(.Llo2138), %offsetof(.Llo2139),29
	.d2locend
.L4443:
	.d2locreg	%offsetof(.Llo2134), %offsetof(.Llo2136),6
	.d2locreg	%offsetof(.Llo2141), %offsetof(.Llo2137),28
	.d2locreg	%offsetof(.Llo2142), %offsetof(.Llo2138),6
	.d2locreg	%offsetof(.Llo2139), %offsetof(.Llo2143),6
	.d2locend
.L4444:
	.d2locreg	%offsetof(.Llo2134), %offsetof(.Llo2136),7
	.d2locreg	%offsetof(.Llo2141), %offsetof(.Llo2137),27
	.d2locreg	%offsetof(.Llo2138), %offsetof(.Llo2139),27
	.d2locend
.L4445:
	.d2locreg	%offsetof(.Llo2134), %offsetof(.Llo2136),8
	.d2locreg	%offsetof(.Llo2141), %offsetof(.Llo2139),26
	.d2locend
.L4446:
	.d2locreg	%offsetof(.Llo2134), %offsetof(.Llo2136),9
	.d2locreg	%offsetof(.Llo2141), %offsetof(.Llo2137),25
	.d2locreg	%offsetof(.Llo2138), %offsetof(.Llo2139),25
	.d2locend
.L4448:
	.d2locreg	%offsetof(.Llo2144), %offsetof(.Llo2137),24
	.d2locreg	%offsetof(.Llo2138), %offsetof(.Llo2139),24
	.d2locend
.L4450:
	.d2locreg	%offsetof(.Llo2145), %offsetof(.Llo2146),3
	.d2locreg	%offsetof(.Llo2136), %offsetof(.Llo2147),23
	.d2locreg	%offsetof(.Llo2148), %offsetof(.Llo2149),23
	.d2locreg	%offsetof(.Llo2150), %offsetof(.Llo2151),23
	.d2locend
.L4452:
	.d2locreg	%offsetof(.Llo2140), %offsetof(.Llo2151),4
	.d2locend
.L4458:
	.d2locreg	%offsetof(.Llo2152), %offsetof(.Llo2153),3
	.d2locreg	%offsetof(.Llo2154), %offsetof(.Llo2155),31
	.d2locend
.L4460:
	.d2locreg	%offsetof(.Llo2156), %offsetof(.Llo2157),3
	.d2locreg	%offsetof(.Llo2155), %offsetof(.Llo2158),3
	.d2locend
.L4462:
	.d2locreg	%offsetof(.Llo2159), %offsetof(.Llo2160),0
	.d2locreg	%offsetof(.Llo2161), %offsetof(.Llo2162),0
	.d2locreg	%offsetof(.Llo2163), %offsetof(.Llo2164),0
	.d2locreg	%offsetof(.Llo2165), %offsetof(.Llo2157),0
	.d2locend
.L4469:
	.d2locreg	%offsetof(.Llo2166), %offsetof(.Llo2167),3
	.d2locreg	%offsetof(.Llo2168), %offsetof(.Llo2169),30
	.d2locend
.L4471:
	.d2locreg	%offsetof(.Llo2170), %offsetof(.Llo2171),31
	.d2locreg	%offsetof(.Llo2172), %offsetof(.Llo2169),31
	.d2locend
.L4473:
	.d2locreg	%offsetof(.Llo2173), %offsetof(.Llo2174),31
	.d2locend
.L4475:
	.d2locreg	%offsetof(.Llo2175), %offsetof(.Llo2176),0
	.d2locreg	%offsetof(.Llo2177), %offsetof(.Llo2178),0
	.d2locreg	%offsetof(.Llo2179), %offsetof(.Llo2180),0
	.d2locreg	%offsetof(.Llo2181), %offsetof(.Llo2182),0
	.d2locreg	%offsetof(.Llo2183), %offsetof(.Llo2184),0
	.d2locreg	%offsetof(.Llo2185), %offsetof(.Llo2186),0
	.d2locend
.L4482:
	.d2locreg	%offsetof(.Llo2187), %offsetof(.Llo2188),3
	.d2locreg	%offsetof(.Llo2189), %offsetof(.Llo2190),31
	.d2locend
.L4483:
	.d2locreg	%offsetof(.Llo2187), %offsetof(.Llo2189),4
	.d2locreg	%offsetof(.Llo2191), %offsetof(.Llo2190),30
	.d2locreg	%offsetof(.Llo2192), %offsetof(.Llo2193),4
	.d2locend
.L4485:
	.d2locreg	%offsetof(.Llo2194), %offsetof(.Llo2190),29
	.d2locend
.L4487:
	.d2locreg	%offsetof(.Llo2195), %offsetof(.Llo2190),28
	.d2locend
.L4489:
	.d2locreg	%offsetof(.Llo2187), %offsetof(.Llo2196),26
	.d2locreg	%offsetof(.Llo2197), %offsetof(.Llo2198),26
	.d2locreg	%offsetof(.Llo2199), %offsetof(.Llo2190),26
	.d2locend
.L4491:
	.d2locreg	%offsetof(.Llo2200), %offsetof(.Llo2201),28
	.d2locreg	%offsetof(.Llo2202), %offsetof(.Llo2197),28
	.d2locend
.L4493:
	.d2locreg	%offsetof(.Llo2203), %offsetof(.Llo2204),0
	.d2locreg	%offsetof(.Llo2205), %offsetof(.Llo2196),0
	.d2locreg	%offsetof(.Llo2206), %offsetof(.Llo2207),0
	.d2locreg	%offsetof(.Llo2208), %offsetof(.Llo2209),0
	.d2locend
.L4495:
	.d2locreg	%offsetof(.Llo2210), %offsetof(.Llo2211),27
	.d2locreg	%offsetof(.Llo2212), %offsetof(.Llo2213),3
	.d2locreg	%offsetof(.Llo2214), %offsetof(.Llo2215),3
	.d2locreg	%offsetof(.Llo2216), %offsetof(.Llo2217),3
	.d2locreg	%offsetof(.Llo2218), %offsetof(.Llo2219),27
	.d2locreg	%offsetof(.Llo2220), %offsetof(.Llo2190),27
	.d2locend
.L4497:
	.d2locreg	%offsetof(.Llo2221), %offsetof(.Llo2222),0
	.d2locreg	%offsetof(.Llo2223), %offsetof(.Llo2224),0
	.d2locreg	%offsetof(.Llo2225), %offsetof(.Llo2226),0
	.d2locreg	%offsetof(.Llo2227), %offsetof(.Llo2200),0
	.d2locreg	%offsetof(.Llo2228), %offsetof(.Llo2201),0
	.d2locreg	%offsetof(.Llo2229), %offsetof(.Llo2230),0
	.d2locreg	%offsetof(.Llo2231), %offsetof(.Llo2232),0
	.d2locreg	%offsetof(.Llo2233), %offsetof(.Llo2234),0
	.d2locreg	%offsetof(.Llo2235), %offsetof(.Llo2236),0
	.d2locreg	%offsetof(.Llo2237), %offsetof(.Llo2198),0
	.d2locreg	%offsetof(.Llo2238), %offsetof(.Llo2239),0
	.d2locreg	%offsetof(.Llo2240), %offsetof(.Llo2241),0
	.d2locreg	%offsetof(.Llo2242), %offsetof(.Llo2199),0
	.d2locend
.L4503:
	.d2locreg	%offsetof(.Llo2200), %offsetof(.Llo2201),7
	.d2locreg	%offsetof(.Llo2243), %offsetof(.Llo2214),3
	.d2locreg	%offsetof(.Llo2217), %offsetof(.Llo2244),7
	.d2locreg	%offsetof(.Llo2245), %offsetof(.Llo2246),7
	.d2locend
.L4509:
	.d2locreg	%offsetof(.Llo2247), %offsetof(.Llo2203),0
	.d2locend
.L4517:
	.d2locreg	%offsetof(.Llo2248), %offsetof(.Llo2249),3
	.d2locreg	%offsetof(.Llo2250), %offsetof(.Llo2251),31
	.d2locreg	%offsetof(.Llo2252), %offsetof(.Llo2253),31
	.d2locend
.L4518:
	.d2locreg	%offsetof(.Llo2248), %offsetof(.Llo2250),4
	.d2locreg	%offsetof(.Llo2254), %offsetof(.Llo2255),30
	.d2locreg	%offsetof(.Llo2252), %offsetof(.Llo2253),30
	.d2locreg	%offsetof(.Llo2256), %offsetof(.Llo2257),4
	.d2locend
.L4520:
	.d2locreg	%offsetof(.Llo2248), %offsetof(.Llo2258),29
	.d2locreg	%offsetof(.Llo2259), %offsetof(.Llo2256),29
	.d2locend
.L4522:
	.d2locreg	%offsetof(.Llo2260), %offsetof(.Llo2261),0
	.d2locreg	%offsetof(.Llo2262), %offsetof(.Llo2263),0
	.d2locreg	%offsetof(.Llo2264), %offsetof(.Llo2265),0
	.d2locreg	%offsetof(.Llo2266), %offsetof(.Llo2258),0
	.d2locreg	%offsetof(.Llo2267), %offsetof(.Llo2268),0
	.d2locreg	%offsetof(.Llo2269), %offsetof(.Llo2270),0
	.d2locreg	%offsetof(.Llo2271), %offsetof(.Llo2272),0
	.d2locend
.L4524:
	.d2locreg	%offsetof(.Llo2273), %offsetof(.Llo2274),0
	.d2locreg	%offsetof(.Llo2275), %offsetof(.Llo2276),0
	.d2locend
.L4530:
	.d2locreg	%offsetof(.Llo2272), %offsetof(.Llo2255),0
	.d2locend
.L4536:
	.d2locreg	%offsetof(.Llo2277), %offsetof(.Llo2278),3
	.d2locreg	%offsetof(.Llo2279), %offsetof(.Llo2280),31
	.d2locreg	%offsetof(.Llo2281), %offsetof(.Llo2282),31
	.d2locend
.L4537:
	.d2locreg	%offsetof(.Llo2277), %offsetof(.Llo2283),4
	.d2locreg	%offsetof(.Llo2284), %offsetof(.Llo2285),30
	.d2locreg	%offsetof(.Llo2286), %offsetof(.Llo2287),4
	.d2locreg	%offsetof(.Llo2288), %offsetof(.Llo2289),4
	.d2locreg	%offsetof(.Llo2290), %offsetof(.Llo2291),4
	.d2locreg	%offsetof(.Llo2292), %offsetof(.Llo2293),30
	.d2locreg	%offsetof(.Llo2281), %offsetof(.Llo2282),30
	.d2locend
.L4538:
	.d2locreg	%offsetof(.Llo2277), %offsetof(.Llo2279),5
	.d2locreg	%offsetof(.Llo2294), %offsetof(.Llo2295),29
	.d2locreg	%offsetof(.Llo2296), %offsetof(.Llo2293),29
	.d2locreg	%offsetof(.Llo2281), %offsetof(.Llo2282),29
	.d2locreg	%offsetof(.Llo2297), %offsetof(.Llo2298),5
	.d2locend
.L4539:
	.d2locreg	%offsetof(.Llo2277), %offsetof(.Llo2279),6
	.d2locreg	%offsetof(.Llo2294), %offsetof(.Llo2299),28
	.d2locreg	%offsetof(.Llo2300), %offsetof(.Llo2293),28
	.d2locreg	%offsetof(.Llo2281), %offsetof(.Llo2282),28
	.d2locreg	%offsetof(.Llo2297), %offsetof(.Llo2298),6
	.d2locend
.L4540:
	.d2locreg	%offsetof(.Llo2277), %offsetof(.Llo2279),7
	.d2locreg	%offsetof(.Llo2294), %offsetof(.Llo2297),27
	.d2locreg	%offsetof(.Llo2301), %offsetof(.Llo2298),7
	.d2locend
.L4542:
	.d2locreg	%offsetof(.Llo2302), %offsetof(.Llo2297),26
	.d2locend
.L4545:
	.d2locreg	%offsetof(.Llo2303), %offsetof(.Llo2304),3
	.d2locreg	%offsetof(.Llo2305), %offsetof(.Llo2306),31
	.d2locreg	%offsetof(.Llo2307), %offsetof(.Llo2308),31
	.d2locreg	%offsetof(.Llo2287), %offsetof(.Llo2309),31
	.d2locreg	%offsetof(.Llo2310), %offsetof(.Llo2311),31
	.d2locreg	%offsetof(.Llo2289), %offsetof(.Llo2312),31
	.d2locreg	%offsetof(.Llo2313), %offsetof(.Llo2314),31
	.d2locreg	%offsetof(.Llo2291), %offsetof(.Llo2315),31
	.d2locreg	%offsetof(.Llo2316), %offsetof(.Llo2293),31
	.d2locreg	%offsetof(.Llo2317), %offsetof(.Llo2318),3
	.d2locend
.L4548:
	.d2locreg	%offsetof(.Llo2319), %offsetof(.Llo2320),25
	.d2locreg	%offsetof(.Llo2296), %offsetof(.Llo2293),25
	.d2locreg	%offsetof(.Llo2281), %offsetof(.Llo2282),25
	.d2locend
.L4550:
	.d2locreg	%offsetof(.Llo2320), %offsetof(.Llo2321),3
	.d2locreg	%offsetof(.Llo2322), %offsetof(.Llo2299),31
	.d2locreg	%offsetof(.Llo2300), %offsetof(.Llo2296),31
	.d2locend
.L4552:
	.d2locreg	%offsetof(.Llo2323), %offsetof(.Llo2299),24
	.d2locreg	%offsetof(.Llo2300), %offsetof(.Llo2293),24
	.d2locreg	%offsetof(.Llo2281), %offsetof(.Llo2282),24
	.d2locend
.L4554:
	.d2locreg	%offsetof(.Llo2323), %offsetof(.Llo2299),24
	.d2locreg	%offsetof(.Llo2300), %offsetof(.Llo2293),24
	.d2locreg	%offsetof(.Llo2281), %offsetof(.Llo2282),24
	.d2locend
.L4558:
	.d2locreg	%offsetof(.Llo2319), %offsetof(.Llo2320),25
	.d2locreg	%offsetof(.Llo2324), %offsetof(.Llo2296),22
	.d2locreg	%offsetof(.Llo2325), %offsetof(.Llo2293),25
	.d2locreg	%offsetof(.Llo2281), %offsetof(.Llo2282),25
	.d2locend
.L4560:
	.d2locreg	%offsetof(.Llo2326), %offsetof(.Llo2327),3
	.d2locreg	%offsetof(.Llo2279), %offsetof(.Llo2315),21
	.d2locreg	%offsetof(.Llo2328), %offsetof(.Llo2329),4
	.d2locreg	%offsetof(.Llo2316), %offsetof(.Llo2293),21
	.d2locreg	%offsetof(.Llo2281), %offsetof(.Llo2282),21
	.d2locend
.L4562:
	.d2locreg	%offsetof(.Llo2330), %offsetof(.Llo2293),22
	.d2locreg	%offsetof(.Llo2281), %offsetof(.Llo2282),22
	.d2locend
.L4564:
	.d2locreg	%offsetof(.Llo2331), %offsetof(.Llo2291),3
	.d2locreg	%offsetof(.Llo2332), %offsetof(.Llo2333),3
	.d2locreg	%offsetof(.Llo2334), %offsetof(.Llo2315),3
	.d2locreg	%offsetof(.Llo2335), %offsetof(.Llo2295),3
	.d2locreg	%offsetof(.Llo2336), %offsetof(.Llo2337),3
	.d2locreg	%offsetof(.Llo2338), %offsetof(.Llo2339),3
	.d2locreg	%offsetof(.Llo2340), %offsetof(.Llo2341),3
	.d2locreg	%offsetof(.Llo2342), %offsetof(.Llo2343),3
	.d2locreg	%offsetof(.Llo2316), %offsetof(.Llo2292),3
	.d2locend
.L4566:
	.d2locreg	%offsetof(.Llo2344), %offsetof(.Llo2345),4
	.d2locreg	%offsetof(.Llo2346), %offsetof(.Llo2347),3
	.d2locend
.L4572:
	.d2locreg	%offsetof(.Llo2348), %offsetof(.Llo2349),3
	.d2locreg	%offsetof(.Llo2350), %offsetof(.Llo2351),31
	.d2locend
.L4573:
	.d2locreg	%offsetof(.Llo2348), %offsetof(.Llo2350),4
	.d2locreg	%offsetof(.Llo2352), %offsetof(.Llo2353),29
	.d2locreg	%offsetof(.Llo2354), %offsetof(.Llo2355),4
	.d2locend
.L4575:
	.d2locreg	%offsetof(.Llo2356), %offsetof(.Llo2357),30
	.d2locreg	%offsetof(.Llo2358), %offsetof(.Llo2353),30
	.d2locend
.L4577:
	.d2locreg	%offsetof(.Llo2359), %offsetof(.Llo2360),0
	.d2locreg	%offsetof(.Llo2361), %offsetof(.Llo2351),0
	.d2locend
.L4583:
	.d2locreg	%offsetof(.Llo2362), %offsetof(.Llo2363),0
	.d2locend
.L4585:
	.d2locreg	%offsetof(.Llo2364), %offsetof(.Llo2358),3
	.d2locend
.L4591:
	.d2locreg	%offsetof(.Llo2365), %offsetof(.Llo2366),5
	.d2locreg	%offsetof(.Llo2367), %offsetof(.Llo2368),5
	.d2locreg	%offsetof(.Llo2369), %offsetof(.Llo2370),5
	.d2locreg	%offsetof(.Llo2371), %offsetof(.Llo2372),5
	.d2locreg	%offsetof(.Llo2373), %offsetof(.Llo2374),5
	.d2locreg	%offsetof(.Llo2375), %offsetof(.Llo2376),5
	.d2locend
.L4597:
	.d2locreg	%offsetof(.Llo2377), %offsetof(.Llo2378),3
	.d2locreg	%offsetof(.Llo2379), %offsetof(.Llo2380),31
	.d2locreg	%offsetof(.Llo2381), %offsetof(.Llo2382),31
	.d2locend
.L4598:
	.d2locreg	%offsetof(.Llo2377), %offsetof(.Llo2383),4
	.d2locreg	%offsetof(.Llo2379), %offsetof(.Llo2380),30
	.d2locreg	%offsetof(.Llo2381), %offsetof(.Llo2382),30
	.d2locend
.L4600:
	.d2locreg	%offsetof(.Llo2377), %offsetof(.Llo2384),29
	.d2locreg	%offsetof(.Llo2385), %offsetof(.Llo2382),29
	.d2locend
.L4602:
	.d2locreg	%offsetof(.Llo2383), %offsetof(.Llo2386),4
	.d2locreg	%offsetof(.Llo2387), %offsetof(.Llo2388),4
	.d2locreg	%offsetof(.Llo2389), %offsetof(.Llo2390),4
	.d2locreg	%offsetof(.Llo2391), %offsetof(.Llo2392),4
	.d2locreg	%offsetof(.Llo2393), %offsetof(.Llo2394),4
	.d2locreg	%offsetof(.Llo2395), %offsetof(.Llo2396),4
	.d2locreg	%offsetof(.Llo2397), %offsetof(.Llo2398),4
	.d2locreg	%offsetof(.Llo2399), %offsetof(.Llo2400),4
	.d2locreg	%offsetof(.Llo2401), %offsetof(.Llo2384),4
	.d2locreg	%offsetof(.Llo2402), %offsetof(.Llo2403),4
	.d2locreg	%offsetof(.Llo2404), %offsetof(.Llo2405),4
	.d2locreg	%offsetof(.Llo2406), %offsetof(.Llo2407),4
	.d2locreg	%offsetof(.Llo2408), %offsetof(.Llo2409),4
	.d2locreg	%offsetof(.Llo2410), %offsetof(.Llo2411),4
	.d2locreg	%offsetof(.Llo2412), %offsetof(.Llo2413),4
	.d2locreg	%offsetof(.Llo2414), %offsetof(.Llo2415),4
	.d2locreg	%offsetof(.Llo2416), %offsetof(.Llo2417),4
	.d2locend
.L4608:
	.d2locreg	%offsetof(.Llo2418), %offsetof(.Llo2419),0
	.d2locend
.L4610:
	.d2locreg	%offsetof(.Llo2420), %offsetof(.Llo2421),3
	.d2locreg	%offsetof(.Llo2422), %offsetof(.Llo2380),3
	.d2locreg	%offsetof(.Llo2423), %offsetof(.Llo2381),3
	.d2locend
.L4616:
	.d2locreg	%offsetof(.Llo2424), %offsetof(.Llo2392),5
	.d2locreg	%offsetof(.Llo2425), %offsetof(.Llo2394),5
	.d2locreg	%offsetof(.Llo2426), %offsetof(.Llo2384),5
	.d2locreg	%offsetof(.Llo2427), %offsetof(.Llo2428),5
	.d2locreg	%offsetof(.Llo2429), %offsetof(.Llo2407),5
	.d2locreg	%offsetof(.Llo2430), %offsetof(.Llo2431),5
	.d2locreg	%offsetof(.Llo2432), %offsetof(.Llo2413),5
	.d2locreg	%offsetof(.Llo2433), %offsetof(.Llo2415),5
	.d2locreg	%offsetof(.Llo2434), %offsetof(.Llo2417),5
	.d2locend
.L4622:
	.d2locreg	%offsetof(.Llo2435), %offsetof(.Llo2384),6
	.d2locreg	%offsetof(.Llo2436), %offsetof(.Llo2437),6
	.d2locreg	%offsetof(.Llo2438), %offsetof(.Llo2439),6
	.d2locreg	%offsetof(.Llo2440), %offsetof(.Llo2407),6
	.d2locreg	%offsetof(.Llo2441), %offsetof(.Llo2442),6
	.d2locreg	%offsetof(.Llo2409), %offsetof(.Llo2413),6
	.d2locreg	%offsetof(.Llo2443), %offsetof(.Llo2444),6
	.d2locreg	%offsetof(.Llo2415), %offsetof(.Llo2417),6
	.d2locend
.L4628:
	.d2locreg	%offsetof(.Llo2428), %offsetof(.Llo2445),5
	.d2locreg	%offsetof(.Llo2446), %offsetof(.Llo2403),5
	.d2locend
.L4634:
	.d2locreg	%offsetof(.Llo2447), %offsetof(.Llo2448),3
	.d2locreg	%offsetof(.Llo2449), %offsetof(.Llo2450),31
	.d2locend
.L4635:
	.d2locreg	%offsetof(.Llo2447), %offsetof(.Llo2449),4
	.d2locreg	%offsetof(.Llo2451), %offsetof(.Llo2450),30
	.d2locreg	%offsetof(.Llo2452), %offsetof(.Llo2453),4
	.d2locend
.L4637:
	.d2locreg	%offsetof(.Llo2454), %offsetof(.Llo2455),29
	.d2locreg	%offsetof(.Llo2456), %offsetof(.Llo2457),29
	.d2locreg	%offsetof(.Llo2458), %offsetof(.Llo2450),29
	.d2locend
.L4639:
	.d2locreg	%offsetof(.Llo2459), %offsetof(.Llo2457),28
	.d2locend
.L4641:
	.d2locreg	%offsetof(.Llo2447), %offsetof(.Llo2455),27
	.d2locreg	%offsetof(.Llo2460), %offsetof(.Llo2450),27
	.d2locend
.L4643:
	.d2locreg	%offsetof(.Llo2461), %offsetof(.Llo2462),0
	.d2locreg	%offsetof(.Llo2463), %offsetof(.Llo2464),0
	.d2locreg	%offsetof(.Llo2465), %offsetof(.Llo2466),0
	.d2locreg	%offsetof(.Llo2467), %offsetof(.Llo2468),0
	.d2locreg	%offsetof(.Llo2469), %offsetof(.Llo2470),0
	.d2locreg	%offsetof(.Llo2471), %offsetof(.Llo2455),0
	.d2locreg	%offsetof(.Llo2472), %offsetof(.Llo2473),0
	.d2locreg	%offsetof(.Llo2474), %offsetof(.Llo2475),0
	.d2locreg	%offsetof(.Llo2476), %offsetof(.Llo2460),0
	.d2locreg	%offsetof(.Llo2477), %offsetof(.Llo2457),0
	.d2locreg	%offsetof(.Llo2478), %offsetof(.Llo2458),0
	.d2locend
.L4649:
	.d2locreg	%offsetof(.Llo2479), %offsetof(.Llo2480),3
	.d2locreg	%offsetof(.Llo2481), %offsetof(.Llo2482),31
	.d2locend
.L4650:
	.d2locreg	%offsetof(.Llo2479), %offsetof(.Llo2481),4
	.d2locreg	%offsetof(.Llo2483), %offsetof(.Llo2482),30
	.d2locreg	%offsetof(.Llo2484), %offsetof(.Llo2485),4
	.d2locend
.L4651:
	.d2locreg	%offsetof(.Llo2479), %offsetof(.Llo2481),5
	.d2locreg	%offsetof(.Llo2483), %offsetof(.Llo2482),29
	.d2locreg	%offsetof(.Llo2484), %offsetof(.Llo2485),5
	.d2locend
.L4652:
	.d2locreg	%offsetof(.Llo2479), %offsetof(.Llo2481),6
	.d2locreg	%offsetof(.Llo2483), %offsetof(.Llo2482),28
	.d2locreg	%offsetof(.Llo2484), %offsetof(.Llo2485),6
	.d2locend
.L4654:
	.d2locreg	%offsetof(.Llo2486), %offsetof(.Llo2482),27
	.d2locend
.L4656:
	.d2locreg	%offsetof(.Llo2487), %offsetof(.Llo2482),26
	.d2locend
.L4658:
	.d2locreg	%offsetof(.Llo2479), %offsetof(.Llo2488),25
	.d2locreg	%offsetof(.Llo2489), %offsetof(.Llo2490),25
	.d2locreg	%offsetof(.Llo2491), %offsetof(.Llo2482),25
	.d2locend
.L4660:
	.d2locreg	%offsetof(.Llo2492), %offsetof(.Llo2493),0
	.d2locreg	%offsetof(.Llo2494), %offsetof(.Llo2495),0
	.d2locreg	%offsetof(.Llo2496), %offsetof(.Llo2497),0
	.d2locreg	%offsetof(.Llo2498), %offsetof(.Llo2499),0
	.d2locreg	%offsetof(.Llo2500), %offsetof(.Llo2501),0
	.d2locreg	%offsetof(.Llo2502), %offsetof(.Llo2503),0
	.d2locreg	%offsetof(.Llo2504), %offsetof(.Llo2505),0
	.d2locreg	%offsetof(.Llo2506), %offsetof(.Llo2507),0
	.d2locreg	%offsetof(.Llo2508), %offsetof(.Llo2490),0
	.d2locend
.L4667:
	.d2locreg	%offsetof(.Llo2509), %offsetof(.Llo2510),3
	.d2locreg	%offsetof(.Llo2511), %offsetof(.Llo2512),31
	.d2locend
.L4668:
	.d2locreg	%offsetof(.Llo2509), %offsetof(.Llo2511),4
	.d2locreg	%offsetof(.Llo2513), %offsetof(.Llo2514),30
	.d2locreg	%offsetof(.Llo2515), %offsetof(.Llo2512),30
	.d2locreg	%offsetof(.Llo2516), %offsetof(.Llo2517),4
	.d2locend
.L4670:
	.d2locreg	%offsetof(.Llo2518), %offsetof(.Llo2519),3
	.d2locreg	%offsetof(.Llo2520), %offsetof(.Llo2514),3
	.d2locreg	%offsetof(.Llo2521), %offsetof(.Llo2515),3
	.d2locend
.L4672:
	.d2locreg	%offsetof(.Llo2509), %offsetof(.Llo2514),29
	.d2locreg	%offsetof(.Llo2522), %offsetof(.Llo2523),29
	.d2locreg	%offsetof(.Llo2515), %offsetof(.Llo2512),29
	.d2locend
.L4674:
	.d2locreg	%offsetof(.Llo2524), %offsetof(.Llo2525),0
	.d2locreg	%offsetof(.Llo2526), %offsetof(.Llo2527),0
	.d2locreg	%offsetof(.Llo2528), %offsetof(.Llo2529),0
	.d2locend
.L4681:
	.d2locreg	%offsetof(.Llo2530), %offsetof(.Llo2531),31
	.d2locend
.L4683:
	.d2locreg	%offsetof(.Llo2532), %offsetof(.Llo2533),0
	.d2locreg	%offsetof(.Llo2534), %offsetof(.Llo2535),0
	.d2locend
.L4690:
	.d2locreg	%offsetof(.Llo2536), %offsetof(.Llo2537),3
	.d2locend
.L4697:
	.d2locreg	%offsetof(.Llo2538), %offsetof(.Llo2539),3
	.d2locreg	%offsetof(.Llo2540), %offsetof(.Llo2541),26
	.d2locreg	%offsetof(.Llo2542), %offsetof(.Llo2543),26
	.d2locend
.L4698:
	.d2locreg	%offsetof(.Llo2538), %offsetof(.Llo2544),4
	.d2locreg	%offsetof(.Llo2545), %offsetof(.Llo2546),28
	.d2locreg	%offsetof(.Llo2547), %offsetof(.Llo2548),4
	.d2locreg	%offsetof(.Llo2542), %offsetof(.Llo2543),28
	.d2locend
.L4699:
	.d2locreg	%offsetof(.Llo2538), %offsetof(.Llo2540),5
	.d2locreg	%offsetof(.Llo2549), %offsetof(.Llo2550),31
	.d2locreg	%offsetof(.Llo2551), %offsetof(.Llo2552),31
	.d2locreg	%offsetof(.Llo2542), %offsetof(.Llo2543),31
	.d2locreg	%offsetof(.Llo2553), %offsetof(.Llo2554),5
	.d2locend
.L4700:
	.d2locreg	%offsetof(.Llo2538), %offsetof(.Llo2540),6
	.d2locreg	%offsetof(.Llo2549), %offsetof(.Llo2553),30
	.d2locreg	%offsetof(.Llo2555), %offsetof(.Llo2554),6
	.d2locend
.L4702:
	.d2locreg	%offsetof(.Llo2556), %offsetof(.Llo2553),29
	.d2locend
.L4705:
	.d2locreg	%offsetof(.Llo2557), %offsetof(.Llo2558),3
	.d2locreg	%offsetof(.Llo2559), %offsetof(.Llo2560),3
	.d2locreg	%offsetof(.Llo2561), %offsetof(.Llo2562),3
	.d2locreg	%offsetof(.Llo2563), %offsetof(.Llo2564),3
	.d2locreg	%offsetof(.Llo2565), %offsetof(.Llo2566),3
	.d2locreg	%offsetof(.Llo2567), %offsetof(.Llo2568),3
	.d2locreg	%offsetof(.Llo2569), %offsetof(.Llo2570),3
	.d2locreg	%offsetof(.Llo2571), %offsetof(.Llo2572),3
	.d2locreg	%offsetof(.Llo2573), %offsetof(.Llo2574),3
	.d2locreg	%offsetof(.Llo2575), %offsetof(.Llo2576),3
	.d2locreg	%offsetof(.Llo2577), %offsetof(.Llo2578),3
	.d2locreg	%offsetof(.Llo2579), %offsetof(.Llo2580),3
	.d2locreg	%offsetof(.Llo2581), %offsetof(.Llo2582),3
	.d2locreg	%offsetof(.Llo2583), %offsetof(.Llo2584),3
	.d2locreg	%offsetof(.Llo2585), %offsetof(.Llo2551),3
	.d2locend
.L4707:
	.d2locreg	%offsetof(.Llo2586), %offsetof(.Llo2587),3
	.d2locreg	%offsetof(.Llo2588), %offsetof(.Llo2541),3
	.d2locreg	%offsetof(.Llo2589), %offsetof(.Llo2582),25
	.d2locreg	%offsetof(.Llo2590), %offsetof(.Llo2591),25
	.d2locreg	%offsetof(.Llo2551), %offsetof(.Llo2552),25
	.d2locend
.L4709:
	.d2locreg	%offsetof(.Llo2560), %offsetof(.Llo2592),28
	.d2locend
.L4713:
	.d2locreg	%offsetof(.Llo2593), %offsetof(.Llo2592),27
	.d2locreg	%offsetof(.Llo2594), %offsetof(.Llo2595),28
	.d2locreg	%offsetof(.Llo2584), %offsetof(.Llo2596),3
	.d2locend
.L4715:
	.d2locreg	%offsetof(.Llo2597), %offsetof(.Llo2592),26
	.d2locreg	%offsetof(.Llo2578), %offsetof(.Llo2598),3
	.d2locreg	%offsetof(.Llo2599), %offsetof(.Llo2600),3
	.d2locreg	%offsetof(.Llo2601), %offsetof(.Llo2602),3
	.d2locreg	%offsetof(.Llo2603), %offsetof(.Llo2604),3
	.d2locreg	%offsetof(.Llo2605), %offsetof(.Llo2595),3
	.d2locend
.L4717:
	.d2locreg	%offsetof(.Llo2606), %offsetof(.Llo2607),3
	.d2locreg	%offsetof(.Llo2540), %offsetof(.Llo2558),27
	.d2locreg	%offsetof(.Llo2608), %offsetof(.Llo2609),4
	.d2locreg	%offsetof(.Llo2610), %offsetof(.Llo2560),4
	.d2locreg	%offsetof(.Llo2611), %offsetof(.Llo2612),4
	.d2locreg	%offsetof(.Llo2613), %offsetof(.Llo2564),4
	.d2locreg	%offsetof(.Llo2614), %offsetof(.Llo2615),4
	.d2locreg	%offsetof(.Llo2616), %offsetof(.Llo2617),4
	.d2locreg	%offsetof(.Llo2618), %offsetof(.Llo2592),4
	.d2locreg	%offsetof(.Llo2619), %offsetof(.Llo2598),4
	.d2locreg	%offsetof(.Llo2620), %offsetof(.Llo2621),4
	.d2locreg	%offsetof(.Llo2622), %offsetof(.Llo2623),4
	.d2locreg	%offsetof(.Llo2624), %offsetof(.Llo2625),4
	.d2locreg	%offsetof(.Llo2551), %offsetof(.Llo2626),27
	.d2locreg	%offsetof(.Llo2542), %offsetof(.Llo2543),27
	.d2locend
.L4719:
	.d2locreg	%offsetof(.Llo2627), %offsetof(.Llo2628),24
	.d2locreg	%offsetof(.Llo2551), %offsetof(.Llo2552),24
	.d2locend
.L4721:
	.d2locreg	%offsetof(.Llo2629), %offsetof(.Llo2630),4
	.d2locreg	%offsetof(.Llo2631), %offsetof(.Llo2632),3
	.d2locreg	%offsetof(.Llo2633), %offsetof(.Llo2634),3
	.d2locend
.L4728:
	.d2locreg	%offsetof(.Llo2635), %offsetof(.Llo2636),3
	.d2locreg	%offsetof(.Llo2637), %offsetof(.Llo2638),31
	.d2locreg	%offsetof(.Llo2639), %offsetof(.Llo2640),31
	.d2locend
.L4729:
	.d2locreg	%offsetof(.Llo2635), %offsetof(.Llo2641),4
	.d2locreg	%offsetof(.Llo2642), %offsetof(.Llo2643),30
	.d2locreg	%offsetof(.Llo2644), %offsetof(.Llo2640),30
	.d2locend
.L4730:
	.d2locreg	%offsetof(.Llo2635), %offsetof(.Llo2637),5
	.d2locreg	%offsetof(.Llo2645), %offsetof(.Llo2640),29
	.d2locreg	%offsetof(.Llo2646), %offsetof(.Llo2647),5
	.d2locend
.L4732:
	.d2locreg	%offsetof(.Llo2648), %offsetof(.Llo2649),28
	.d2locreg	%offsetof(.Llo2650), %offsetof(.Llo2651),28
	.d2locreg	%offsetof(.Llo2652), %offsetof(.Llo2653),28
	.d2locreg	%offsetof(.Llo2654), %offsetof(.Llo2644),28
	.d2locreg	%offsetof(.Llo2639), %offsetof(.Llo2640),28
	.d2locend
.L4735:
	.d2locreg	%offsetof(.Llo2655), %offsetof(.Llo2649),3
	.d2locreg	%offsetof(.Llo2656), %offsetof(.Llo2639),31
	.d2locend
.L4737:
	.d2locreg	%offsetof(.Llo2657), %offsetof(.Llo2658),3
	.d2locreg	%offsetof(.Llo2637), %offsetof(.Llo2659),27
	.d2locreg	%offsetof(.Llo2653), %offsetof(.Llo2640),27
	.d2locend
.L4739:
	.d2locreg	%offsetof(.Llo2635), %offsetof(.Llo2660),27
	.d2locreg	%offsetof(.Llo2658), %offsetof(.Llo2661),4
	.d2locend
.L4745:
	.d2locreg	%offsetof(.Llo2662), %offsetof(.Llo2663),3
	.d2locreg	%offsetof(.Llo2664), %offsetof(.Llo2665),31
	.d2locreg	%offsetof(.Llo2666), %offsetof(.Llo2667),31
	.d2locend
.L4746:
	.d2locreg	%offsetof(.Llo2662), %offsetof(.Llo2668),4
	.d2locreg	%offsetof(.Llo2669), %offsetof(.Llo2670),30
	.d2locreg	%offsetof(.Llo2671), %offsetof(.Llo2667),30
	.d2locend
.L4747:
	.d2locreg	%offsetof(.Llo2662), %offsetof(.Llo2664),5
	.d2locreg	%offsetof(.Llo2672), %offsetof(.Llo2673),29
	.d2locreg	%offsetof(.Llo2674), %offsetof(.Llo2667),29
	.d2locreg	%offsetof(.Llo2675), %offsetof(.Llo2676),5
	.d2locend
.L4748:
	.d2locreg	%offsetof(.Llo2662), %offsetof(.Llo2664),6
	.d2locreg	%offsetof(.Llo2672), %offsetof(.Llo2673),28
	.d2locreg	%offsetof(.Llo2674), %offsetof(.Llo2667),28
	.d2locreg	%offsetof(.Llo2675), %offsetof(.Llo2676),6
	.d2locend
.L4749:
	.d2locreg	%offsetof(.Llo2662), %offsetof(.Llo2664),7
	.d2locreg	%offsetof(.Llo2672), %offsetof(.Llo2677),27
	.d2locreg	%offsetof(.Llo2678), %offsetof(.Llo2676),7
	.d2locend
.L4751:
	.d2locreg	%offsetof(.Llo2679), %offsetof(.Llo2680),26
	.d2locreg	%offsetof(.Llo2681), %offsetof(.Llo2673),3
	.d2locreg	%offsetof(.Llo2682), %offsetof(.Llo2674),26
	.d2locreg	%offsetof(.Llo2683), %offsetof(.Llo2671),26
	.d2locreg	%offsetof(.Llo2666), %offsetof(.Llo2667),26
	.d2locreg	%offsetof(.Llo2675), %offsetof(.Llo2677),3
	.d2locend
.L4754:
	.d2locreg	%offsetof(.Llo2684), %offsetof(.Llo2685),3
	.d2locreg	%offsetof(.Llo2664), %offsetof(.Llo2673),25
	.d2locreg	%offsetof(.Llo2674), %offsetof(.Llo2667),25
	.d2locend
.L4756:
	.d2locreg	%offsetof(.Llo2662), %offsetof(.Llo2686),25
	.d2locreg	%offsetof(.Llo2685), %offsetof(.Llo2687),4
	.d2locreg	%offsetof(.Llo2688), %offsetof(.Llo2689),0
	.d2locreg	%offsetof(.Llo2690), %offsetof(.Llo2667),0
	.d2locreg	%offsetof(.Llo2691), %offsetof(.Llo2692),0
	.d2locreg	%offsetof(.Llo2693), %offsetof(.Llo2694),0
	.d2locend
.L4762:
	.d2locreg	%offsetof(.Llo2695), %offsetof(.Llo2696),3
	.d2locreg	%offsetof(.Llo2697), %offsetof(.Llo2673),31
	.d2locreg	%offsetof(.Llo2674), %offsetof(.Llo2666),31
	.d2locend
.L4768:
	.d2locreg	%offsetof(.Llo2698), %offsetof(.Llo2699),3
	.d2locreg	%offsetof(.Llo2700), %offsetof(.Llo2701),31
	.d2locend
.L4769:
	.d2locreg	%offsetof(.Llo2698), %offsetof(.Llo2702),4
	.d2locreg	%offsetof(.Llo2703), %offsetof(.Llo2704),30
	.d2locreg	%offsetof(.Llo2705), %offsetof(.Llo2706),30
	.d2locend
.L4770:
	.d2locreg	%offsetof(.Llo2698), %offsetof(.Llo2700),5
	.d2locreg	%offsetof(.Llo2707), %offsetof(.Llo2708),29
	.d2locreg	%offsetof(.Llo2709), %offsetof(.Llo2710),29
	.d2locreg	%offsetof(.Llo2711), %offsetof(.Llo2712),29
	.d2locreg	%offsetof(.Llo2713), %offsetof(.Llo2714),3
	.d2locreg	%offsetof(.Llo2715), %offsetof(.Llo2706),29
	.d2locreg	%offsetof(.Llo2716), %offsetof(.Llo2717),5
	.d2locend
.L4771:
	.d2locreg	%offsetof(.Llo2698), %offsetof(.Llo2700),6
	.d2locreg	%offsetof(.Llo2707), %offsetof(.Llo2716),28
	.d2locreg	%offsetof(.Llo2718), %offsetof(.Llo2717),6
	.d2locend
.L4773:
	.d2locreg	%offsetof(.Llo2719), %offsetof(.Llo2716),27
	.d2locend
.L4775:
	.d2locreg	%offsetof(.Llo2720), %offsetof(.Llo2704),3
	.d2locend
.L4778:
	.d2locreg	%offsetof(.Llo2721), %offsetof(.Llo2722),3
	.d2locreg	%offsetof(.Llo2723), %offsetof(.Llo2712),26
	.d2locreg	%offsetof(.Llo2714), %offsetof(.Llo2724),26
	.d2locreg	%offsetof(.Llo2725), %offsetof(.Llo2726),3
	.d2locend
.L4780:
	.d2locreg	%offsetof(.Llo2710), %offsetof(.Llo2711),31
	.d2locreg	%offsetof(.Llo2706), %offsetof(.Llo2724),31
	.d2locend
.L4782:
	.d2locreg	%offsetof(.Llo2727), %offsetof(.Llo2728),3
	.d2locreg	%offsetof(.Llo2700), %offsetof(.Llo2712),25
	.d2locreg	%offsetof(.Llo2714), %offsetof(.Llo2724),25
	.d2locend
.L4784:
	.d2locreg	%offsetof(.Llo2709), %offsetof(.Llo2710),0
	.d2locreg	%offsetof(.Llo2729), %offsetof(.Llo2730),0
	.d2locreg	%offsetof(.Llo2731), %offsetof(.Llo2732),0
	.d2locreg	%offsetof(.Llo2733), %offsetof(.Llo2734),0
	.d2locend
.L4787:
	.d2locreg	%offsetof(.Llo2698), %offsetof(.Llo2735),25
	.d2locreg	%offsetof(.Llo2728), %offsetof(.Llo2736),4
	.d2locreg	%offsetof(.Llo2737), %offsetof(.Llo2738),3
	.d2locreg	%offsetof(.Llo2723), %offsetof(.Llo2701),3
	.d2locreg	%offsetof(.Llo2739), %offsetof(.Llo2740),3
	.d2locend
.L4793:
	.d2locreg	%offsetof(.Llo2741), %offsetof(.Llo2742),3
	.d2locreg	%offsetof(.Llo2743), %offsetof(.Llo2744),31
	.d2locend
.L4794:
	.d2locreg	%offsetof(.Llo2741), %offsetof(.Llo2743),4
	.d2locreg	%offsetof(.Llo2745), %offsetof(.Llo2744),30
	.d2locend
.L4796:
	.d2locreg	%offsetof(.Llo2741), %offsetof(.Llo2744),29
	.d2locend
.L4798:
	.d2locreg	%offsetof(.Llo2746), %offsetof(.Llo2747),0
	.d2locreg	%offsetof(.Llo2748), %offsetof(.Llo2749),0
	.d2locend
.L4805:
	.d2locreg	%offsetof(.Llo2750), %offsetof(.Llo2751),31
	.d2locend
.L4807:
	.d2locreg	%offsetof(.Llo2752), %offsetof(.Llo2753),0
	.d2locreg	%offsetof(.Llo2754), %offsetof(.Llo2755),0
	.d2locreg	%offsetof(.Llo2756), %offsetof(.Llo2757),0
	.d2locend
.L4813:
	.d2locreg	%offsetof(.Llo2758), %offsetof(.Llo2759),3
	.d2locreg	%offsetof(.Llo2760), %offsetof(.Llo2761),31
	.d2locend
.L4814:
	.d2locreg	%offsetof(.Llo2758), %offsetof(.Llo2760),4
	.d2locreg	%offsetof(.Llo2762), %offsetof(.Llo2761),30
	.d2locreg	%offsetof(.Llo2763), %offsetof(.Llo2764),4
	.d2locend
.L4816:
	.d2locreg	%offsetof(.Llo2765), %offsetof(.Llo2761),29
	.d2locend
.L4818:
	.d2locreg	%offsetof(.Llo2766), %offsetof(.Llo2761),28
	.d2locend
.L4820:
	.d2locreg	%offsetof(.Llo2767), %offsetof(.Llo2768),3
	.d2locend
.L4822:
	.d2locreg	%offsetof(.Llo2769), %offsetof(.Llo2770),0
	.d2locreg	%offsetof(.Llo2771), %offsetof(.Llo2768),0
	.d2locend
.L4824:
	.d2locreg	%offsetof(.Llo2772), %offsetof(.Llo2773),4
	.d2locreg	%offsetof(.Llo2774), %offsetof(.Llo2775),4
	.d2locreg	%offsetof(.Llo2776), %offsetof(.Llo2777),4
	.d2locreg	%offsetof(.Llo2778), %offsetof(.Llo2779),4
	.d2locreg	%offsetof(.Llo2780), %offsetof(.Llo2781),4
	.d2locend
.L4826:
	.d2locreg	%offsetof(.Llo2782), %offsetof(.Llo2777),5
	.d2locreg	%offsetof(.Llo2783), %offsetof(.Llo2779),5
	.d2locreg	%offsetof(.Llo2784), %offsetof(.Llo2785),5
	.d2locreg	%offsetof(.Llo2786), %offsetof(.Llo2768),5
	.d2locend
.L4828:
	.d2locreg	%offsetof(.Llo2787), %offsetof(.Llo2788),27
	.d2locend
.L4830:
	.d2locreg	%offsetof(.Llo2758), %offsetof(.Llo2761),26
	.d2locend
.L4832:
	.d2locreg	%offsetof(.Llo2789), %offsetof(.Llo2790),0
	.d2locreg	%offsetof(.Llo2791), %offsetof(.Llo2792),0
	.d2locreg	%offsetof(.Llo2793), %offsetof(.Llo2773),0
	.d2locreg	%offsetof(.Llo2794), %offsetof(.Llo2775),0
	.d2locreg	%offsetof(.Llo2795), %offsetof(.Llo2796),0
	.d2locend
.L4839:
	.d2locreg	%offsetof(.Llo2797), %offsetof(.Llo2798),0
	.d2locreg	%offsetof(.Llo2799), %offsetof(.Llo2800),0
	.d2locend
.L4847:
	.d2locreg	%offsetof(.Llo2801), %offsetof(.Llo2802),3
	.d2locend
	.wrcm.doc
	.wrcm.elem
	.wrcm.nelem "code"
	.wrcm.nelem "functions"
	.wrcm.nelem "Dem_ResetEventStatus"
	.wrcm.nstrlist "calls", "Dem_ClrUdsBits","Dem_GetUdsStatusByIntDtc","Dem_SetDebouncingCounter","Dem_TriggerOnDTCStatus","Dem_TriggerOnEventStatus","Det_ReportError","SchM_Enter_Dem_EaNvStorageOngoing","SchM_Exit_Dem_EaNvStorageOngoing"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "Dem_SetEventStatus"
	.wrcm.nstrlist "calls", "Det_ReportError","EnableConditionsFulfilled","IsEvMemStorageEnabled","UpdateEventState"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_Shutdown"
	.wrcm.nstrlist "calls", "Det_ReportError"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "Dem_Init"
	.wrcm.nstrlist "calls", "Dem_ConsistencyCheck","Dem_MemSet","Dem_NvInit","Det_ReportError","ProcessBswEvents","UpdateEventStatusPerEntry","UpdateSiPerEntry"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_PreInit"
	.wrcm.nstrlist "calls", "Dem_ConsistencyCheck","Dem_MemSet","Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_ConsistencyCheck"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "Dem_GetVersionInfo"
	.wrcm.nstrlist "calls", "Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_BuildSiByte"
	.wrcm.nstrlist "calls", "Dem_GetSiFdcThresholdReached","Dem_GetSiFdcThresholdReachedTOC"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "UpdateSiPerEntry"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_EvMemEntryHasPendingUpdates","Dem_GetSiStatusByIntDtc","SchM_Enter_Dem_EaEventStateBuffer","SchM_Exit_Dem_EaEventStateBuffer"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "UpdateEventStatusPerEntry"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_EvMemEntryHasPendingUpdates","Dem_GetUdsStatusByIntDtc","SchM_Enter_Dem_EaEventStateBuffer","SchM_Exit_Dem_EaEventStateBuffer"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "HandleOpCycleChanges"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "OpCycleCircularQueueGet","SetAgingCycleState","SetOperationCycleStateEnd","SetOperationCycleStateStart"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "OpCycleCircularQueueGet"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_MemCpy","SchM_Enter_Dem_EaOpCycleQueue","SchM_Exit_Dem_EaOpCycleQueue"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "OpCycleCircularQueuePut"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_MemCpy","SchM_Enter_Dem_EaOpCycleQueue","SchM_Exit_Dem_EaOpCycleQueue"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "GetNumberOfFilteredDTCInEventMemory"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "DTCFilterMatch","GetInternalDTCOriginIndex"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "ProcessBswEvents"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "ClearEventStateInBuffer","Dem_SetDebouncingCounter","HandleQueuedEvents"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "HandleQueuedEvents"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "GetEventStateInBuffer","HandleEventState","UpdateEventStatus"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "UserClearDTC"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "SchM_Enter_Dem_EaClearDtc","SchM_Exit_Dem_EaClearDtc"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "SetDTCSuppression"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "GetExistingEventMemoryEntry"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "HandleClear"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "ClearAllEvents","ClearInternalDtc","ClearInternalDtcGroup","ClearOccurrenceInfo","ConvertToIntDtcGroupId","Dem_UpdateIndicators","GetIntDtcByUds","GetInternalDTCOriginIndex"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "ClearOccurrenceInfo"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "EnableConditionsFulfilled"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "IsFFRecordNumberValid"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "GetFFIndexByRecordNumber"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "SetAgingCycleState"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "HandleAging"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "SetOperationCycleStateEnd"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "OpCycleEndAllEvMemEntries","OpCycleEndAllEvents"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "OpCycleEndAllEvents"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "ClearHandledEventStates","Dem_ClrUdsBits","Dem_GetUdsStatusByIntDtc","Dem_TriggerOnDTCStatus","Dem_TriggerOnEventStatus"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "OpCycleEndAllEvMemEntries"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_HandleFailureCounter","Dem_HandleHealingCounter","HandleAging","IncrementOffBoardCounters"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "IncrementOffBoardCounters"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "SetOperationCycleStateStart"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "OpCycleStartAllEvents"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "OpCycleStartAllEvents"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_ClrSiFdcThresholdReachedTOC","Dem_ClrUdsBits","Dem_GetUdsStatusByIntDtc","Dem_SetDebouncingCounter","Dem_SetUdsBits","Dem_TriggerOnDTCStatus","Dem_TriggerOnEventStatus"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "HandleEventStateBuffer"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "GetEventStateInBuffer","HandleEventState"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "ClearHandledEventStates"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "SchM_Enter_Dem_EaEventStateBuffer","SchM_Exit_Dem_EaEventStateBuffer"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "UpdateBufferWithExtendedData"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_MemCpy"
	.wrcm.nint32 "frameSize", 80
	.wrcm.end
	.wrcm.nelem "FillBufferWithDidData"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_MemCpy"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "UpdateBufferWithFreezeFrameData"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_MemCpy"
	.wrcm.nint32 "frameSize", 64
	.wrcm.end
	.wrcm.nelem "Dem_MemCpy"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "GetPreviousFromChronologicalList"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "GetInternalDTCOriginIndex"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "DTCFilterMatch"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_GetFaultDetectionCounterByIntDtc","Dem_GetUdsStatusByIntDtc","Dem_IsDtcAvailable","GetDTCSuppression"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "GetDTCSuppression"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "GetIntDtcByObd"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "GetIntDtcByUds"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "ClearAllEvents"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "ClearInternalDtc","Dem_ClearEventAllowed","Dem_ClearEventData"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_ClearEventData"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nstrlist "calls", "ClearEventStateInBuffer","ClearEventStatus","ClearSi","Dem_GetUdsStatusByIntDtc","Dem_SetDebouncingCounter","Dem_SetMaxFdcSinceLastClear","Dem_TriggerOnDTCStatus","Dem_TriggerOnEventStatus"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "ClearEventStateInBuffer"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "SchM_Enter_Dem_EaEventStateBuffer","SchM_Exit_Dem_EaEventStateBuffer"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_ClearEventAllowed"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "ClearInternalDtcGroup"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "ClearInternalDtc"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "ClearInternalDtc"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "CheckOrigin","ClearEntry","Dem_ClearIntDtcEventData","GetExistingEventMemoryEntry","GetInternalDTCOriginIndex"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "CheckOrigin"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "GetInternalDTCOriginIndex"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "ClearSi"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_ClrSiFdcThresholdReached","Dem_ClrSiFdcThresholdReachedTOC"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "ClearEventStatus"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "SchM_Enter_Dem_EaEventStatus","SchM_Exit_Dem_EaEventStatus"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "HandleEventState"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_ClrUdsBits","Dem_GetUdsStatusByIntDtc","Dem_SetUdsBits","Dem_TriggerOnDTCStatus","Dem_TriggerOnEventStatus","DtcRecordUpdateEnabled","HandleEventStateFDCTR","HandleEventStateFailed","HandleEventStatePassed","SchM_Enter_Dem_EaEventStateBuffer","SchM_Exit_Dem_EaEventStateBuffer"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "UpdateEventState"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Debouncing","Dem_SetDebouncingCounter","GetEventStateInBuffer","SetEventStateInBuffer","UpdateEventStatus"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_SetDebouncingCounter"
	.wrcm.nstrlist "calls", "Dem_SetMaxFdcSinceLastClear","SchM_Enter_Dem_EaDebounceCounter","SchM_Exit_Dem_EaDebounceCounter"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "SetEventStateInBuffer"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "SchM_Enter_Dem_EaEventStateBuffer","SchM_Exit_Dem_EaEventStateBuffer"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Debouncing"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "DebouncingCounter"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "DebouncingCounter"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_UpdateMaxFdcSinceLastClear","GetEventStateInBuffer","SchM_Enter_Dem_EaDebounceCounter","SchM_Exit_Dem_EaDebounceCounter"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "GetEventStateInBuffer"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "UpdateEventStatus"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_ClrSiFdcThresholdReached","Dem_ClrUdsBits","Dem_GetUdsStatusByIntDtc","Dem_SetSiFdcThresholdReached","Dem_SetSiFdcThresholdReachedTOC","Dem_SetUdsBits","Dem_TriggerOnDTCStatus","Dem_TriggerOnEventStatus","SchM_Enter_Dem_EaNvStorageOngoing","SchM_Exit_Dem_EaNvStorageOngoing"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "Dem_TriggerOnDTCStatus"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nstrlist "calls", "Dem_GetUdsStatusByIntDtc"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_TriggerOnEventStatus"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "HandleAging"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_GetUdsStatusByIntDtc","PerformAgingDisplacement"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "HandleEventStateFDCTR"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "StoreEventInMemory"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "HandleEventStateFailed"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "StoreEventInMemory","StoreOccurrenceInformation"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "StoreEventInMemory"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "EventDataChangedCallouts","GetEventMemoryEntry","GetInternalDTCOriginIndex","HandleDevFreezeFrameStorage","HandleExtExtendedDataStorage","HandleFreezeFrameStorage","HandleIntExtendedDataStorage"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "GetInternalDTCOriginIndex"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "EventDataChangedCallouts"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "GetEventMemoryEntry"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "AllocateEventMemoryEntry","ClearInternalExtendedData","Dem_ClearPrestoredFF","GetExistingEventMemoryEntry"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "ClearInternalExtendedData"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_ClearAllFailureCounters","Dem_ClearAllHealingCounters"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "HandleDevFreezeFrameStorage"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "StoreDevAFreezeFrame","StoreDevBFreezeFrame"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "StoreDevBFreezeFrame"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Det_ReportError","FindFreeFreezeFrameEntry","StoreFreezeFrameData"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "StoreDevAFreezeFrame"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Det_ReportError","FindFreeFreezeFrameEntry","StoreFreezeFrameData"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "HandleFreezeFrameStorage"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "CheckFreezeFrameCaptureTrigger","IsAllFreezeFrameInstancesSaved","StoreStandardFreezeFrame","UpdateFreezeFrame"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "UpdateFreezeFrame"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Det_ReportError","StoreFreezeFrameData"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "StoreStandardFreezeFrame"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Det_ReportError","FindFreeFreezeFrameEntry","StoreFreezeFrameData"
	.wrcm.nint32 "frameSize", 64
	.wrcm.end
	.wrcm.nelem "StoreFreezeFrameData"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_MemSet"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "FindFreeFreezeFrameEntry"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "CheckFreezeFrameCaptureTrigger"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "IsAllFreezeFrameInstancesSaved"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "IsAllFreezeFrameInstancesSaved"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "HandleIntExtendedDataStorage"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_SetHealingCounter","HandleFaultConfirmation","HandleOccurrenceCounter","HandleOffBoardCycleCounters"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "HandleOffBoardCycleCounters"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "HandleOccurrenceCounter"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "HandleFaultConfirmation"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "ActivateIndicators","Dem_GetFailureCounter","Dem_SetFailureCounter","Dem_SetUdsBits","StoreConfirmedOccurrenceInformation"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_SetUdsBits"
	.wrcm.nstrlist "calls", "SchM_Enter_Dem_EaEventStatus","SchM_Exit_Dem_EaEventStatus"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "ActivateIndicators"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_GetFailureCounter","Dem_SetIndicatorOn"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "StoreConfirmedOccurrenceInformation"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "HandleExtExtendedDataStorage"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "CheckExtendedDataCaptureTrigger","FindFreeExtendedDataEntry","StoreExternalExtendedData"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "StoreExternalExtendedData"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_MemSet","Det_ReportError"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "Dem_MemSet"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "FindFreeExtendedDataEntry"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "CheckExtendedDataCaptureTrigger"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "StoreOccurrenceInformation"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "HandleEventStatePassed"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_ClearPrestoredFF","Dem_ClrUdsBits","GetExistingEventMemoryEntry","PerformAgingDisplacement"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_ClrUdsBits"
	.wrcm.nstrlist "calls", "SchM_Enter_Dem_EaEventStatus","SchM_Exit_Dem_EaEventStatus"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_ClearPrestoredFF"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "GetExistingEventMemoryEntry"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "PerformAgingDisplacement"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "ClearEntry","Dem_AgingDisplacementUdsStatus","Dem_UpdateIndicators"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_UpdateIndicators"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "ClearEntry"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "ClearDevFreezeFrameData","ClearExtendedData","ClearFreezeFrameData","Dem_RemoveFromChronologicalList"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_RemoveFromChronologicalList"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "ClearExtendedData"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "ClearDevFreezeFrameData"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "ClearFreezeFrameData"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "DtcRecordUpdateEnabled"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "IsEvMemStorageEnabled"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "ConvertToIntDtcGroupId","GetIntDtcGroupId"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "GetIntDtcGroupId"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "ConvertToIntDtcGroupId"
	.wrcm.nint32 "local", 1
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "AllocateEventMemoryEntry"
	.wrcm.nint32 "local", 1
	.wrcm.nstrlist "calls", "Dem_EnterInChronologicalList"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "Dem_EnterInChronologicalList"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_GetComponentFailed"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "Dem_DcmControlDTCStatusChangedNotification"
	.wrcm.nstrlist "calls", "Det_ReportError"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetNextFilteredEvMemDTC"
	.wrcm.nstrlist "calls", "Det_ReportError"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "Dem_DcmSetEvMemDTCFilter"
	.wrcm.nstrlist "calls", "Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_GetSIStatus"
	.wrcm.nstrlist "calls", "Dem_BuildSiByte","Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetSizeOfExtendedDataRecordByDTC"
	.wrcm.nstrlist "calls", "CheckOrigin","Det_ReportError","GetExistingEventMemoryEntry","GetIntDtcByUds","GetInternalDTCOriginIndex","UpdateBufferWithExtendedData"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetExtendedDataRecordByDTC"
	.wrcm.nstrlist "calls", "CheckOrigin","Det_ReportError","GetExistingEventMemoryEntry","GetIntDtcByUds","GetInternalDTCOriginIndex","UpdateBufferWithExtendedData"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "Dem_GetStatusIndicatorsOfDTC"
	.wrcm.nstrlist "calls", "CheckOrigin","Dem_GetSiStatusByIntDtc","Det_ReportError","GetExistingEventMemoryEntry","GetIntDtcByUds","GetInternalDTCOriginIndex"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetSizeOfFreezeFrameByDTC"
	.wrcm.nstrlist "calls", "CheckOrigin","Det_ReportError","GetExistingEventMemoryEntry","GetIntDtcByUds","GetInternalDTCOriginIndex","IsFFRecordNumberValid","UpdateBufferWithFreezeFrameData"
	.wrcm.nint32 "frameSize", 64
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetOBDFreezeFrameData"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "Dem_DcmEnableDTCRecordUpdate"
	.wrcm.nstrlist "calls", "Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_DcmDisableDTCRecordUpdate"
	.wrcm.nstrlist "calls", "CheckOrigin","Det_ReportError","GetIntDtcByUds"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetNextFilteredDTCAndSeverity"
	.wrcm.nstrlist "calls", "DTCFilterMatch","Dem_GetUdsStatusByIntDtc","Det_ReportError"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetNextFilteredDTCAndFDC"
	.wrcm.nstrlist "calls", "DTCFilterMatch","Det_ReportError"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetNextFilteredRecord"
	.wrcm.nstrlist "calls", "Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_DcmSetFreezeFrameRecordFilter"
	.wrcm.nstrlist "calls", "Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetFreezeFrameDataByDTC"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nstrlist "calls", "CheckOrigin","Det_ReportError","GetExistingEventMemoryEntry","GetFFIndexByRecordNumber","GetIntDtcByUds","GetInternalDTCOriginIndex","IsFFRecordNumberValid","UpdateBufferWithFreezeFrameData"
	.wrcm.nint32 "frameSize", 80
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetDTCByOccurrenceTime"
	.wrcm.nstrlist "calls", "Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetNextFilteredDTC"
	.wrcm.nstrlist "calls", "DTCFilterMatch","Dem_GetUdsStatusByIntDtc","Det_ReportError","GetInternalDTCOriginIndex","GetPreviousFromChronologicalList"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetNumberOfFilteredDTC"
	.wrcm.nstrlist "calls", "DTCFilterMatch","Det_ReportError","GetNumberOfFilteredDTCInEventMemory"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetDTCStatusAvailabilityMask"
	.wrcm.nstrlist "calls", "Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_DcmSetDTCFilter"
	.wrcm.nstrlist "calls", "Det_ReportError","GetInternalDTCOriginIndex"
	.wrcm.nint32 "frameSize", 64
	.wrcm.end
	.wrcm.nelem "Dem_GetFaultDetectionCounter"
	.wrcm.nstrlist "calls", "Dem_Internal_GetFaultDetectionCounter","Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_Internal_GetFaultDetectionCounter"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetTranslationType"
	.wrcm.nstrlist "calls", "Det_ReportError"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetFunctionalUnitOfDTC"
	.wrcm.nstrlist "calls", "Det_ReportError","GetIntDtcByUds"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetSeverityOfDTC"
	.wrcm.nstrlist "calls", "Det_ReportError","GetIntDtcByUds"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_DcmEnableDTCSetting"
	.wrcm.nstrlist "calls", "ConvertToIntDtcGroupId","Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_DcmDisableDTCSetting"
	.wrcm.nstrlist "calls", "ConvertToIntDtcGroupId","Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_SetDTCSuppression"
	.wrcm.nstrlist "calls", "Det_ReportError","GetIntDtcByObd","GetIntDtcByUds","SetDTCSuppression"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_GetEventMemoryOverflow"
	.wrcm.nstrlist "calls", "Det_ReportError","GetInternalDTCOriginIndex"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_GetEventFreezeFrameData"
	.wrcm.nint32 "indirectCalls", 1
	.wrcm.nstrlist "calls", "Det_ReportError","FillBufferWithDidData","GetExistingEventMemoryEntry","GetFFIndexByRecordNumber","GetInternalDTCOriginIndex","IsFFRecordNumberValid"
	.wrcm.nint32 "frameSize", 80
	.wrcm.end
	.wrcm.nelem "Dem_GetEventExtendedDataRecord"
	.wrcm.nstrlist "calls", "Det_ReportError","GetExistingEventMemoryEntry","GetInternalDTCOriginIndex","UpdateBufferWithExtendedData"
	.wrcm.nint32 "frameSize", 48
	.wrcm.end
	.wrcm.nelem "Dem_SetAgingCycleState"
	.wrcm.nstrlist "calls", "Det_ReportError","OpCycleCircularQueuePut"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_SetOperationCycleState"
	.wrcm.nstrlist "calls", "Det_ReportError","OpCycleCircularQueuePut"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_MainFunction"
	.wrcm.nstrlist "calls", "Dem_CalculateIndicatorStatus","Det_ReportError","HandleClear","HandleEventStateBuffer","HandleOpCycleChanges","UpdateEventStatusPerEntry","UpdateSiPerEntry"
	.wrcm.nint32 "frameSize", 16
	.wrcm.end
	.wrcm.nelem "Dem_ClearDTC"
	.wrcm.nstrlist "calls", "Det_ReportError","UserClearDTC"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_DcmClearDTC"
	.wrcm.nstrlist "calls", "Det_ReportError","UserClearDTC"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_DcmGetStatusOfDTC"
	.wrcm.nstrlist "calls", "CheckOrigin","Dem_GetUdsStatusByIntDtc","Det_ReportError","GetIntDtcByUds","GetInternalDTCOriginIndex"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_ReportErrorStatus"
	.wrcm.nstrlist "calls", "Det_ReportError","EnableConditionsFulfilled","IsEvMemStorageEnabled","UpdateEventState"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_GetDTCOfEvent"
	.wrcm.nstrlist "calls", "Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_GetEventTested"
	.wrcm.nstrlist "calls", "Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_GetEventFailed"
	.wrcm.nstrlist "calls", "Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.nelem "Dem_GetEventStatus"
	.wrcm.nstrlist "calls", "Det_ReportError"
	.wrcm.nint32 "frameSize", 32
	.wrcm.end
	.wrcm.end
	.wrcm.end
	.wrcm.nelem "tools"
	.wrcm.nelem "llopt"
	.wrcm.nelem "version"
	.wrcm.nstr "string", "5.9.6.4"
	.wrcm.nint32 "number", 5964
	.wrcm.nstr "path", "C:\WindRiver\compilers\diab-5.9.6.4\WIN32\bin\llopt.exe"
	.wrcm.nstr "label", "DIAB_5_9_6_4-FCS_20170817_111028"
	.wrcm.end
	.wrcm.end
	.wrcm.nelem "etoa"
	.wrcm.nelem "version"
	.wrcm.nstr "string", "5.9.6.4"
	.wrcm.nint32 "number", 5964
	.wrcm.nstr "path", "C:\WindRiver\compilers\diab-5.9.6.4\WIN32\lib\etoa.exe"
	.wrcm.nstr "label", "DIAB_5_9_6_4-FCS_20170817_111028"
	.wrcm.end
	.wrcm.nstr "options", "-ei4618 -Xmake-opt-key=objs\MPC5746R_ECU\WindRiver\Dem.o -Xsingle-fp -Xno-double -Xuser-specified-proc=PPCE200Z4204N3V -XPPCE200Z4 -Xname-code=.text_vle -Xname-const=.text_vle -Xname-uconst=.text_vle -Xname-string=.text_vle -Xstsw-slow -Xintrinsic-mask=0xc00041 -Xconventions-eabi -Xsoft-float -Xdouble-avoid -Xcoloring -Xapu-efpu-v2 -Xefpu-spfs -Xtarget-family=2 -Xlicense-proxy-use -Xlicense-proxy-path=C:\WINDRI~1\COMPIL~1\DIAB-5~1.4\WIN32 -Xdialect-c99 -Xforce-prototypes -Xforce-declarations -Xsmall-data=0 -Xsmall-const=0 -Xlocal-data-area=0 -Xnested-interrupts -Xdebug-inline-on -Xoptimized-debug-off -Xdebug-dwarf2 -Xpass-source -Xmake-dependency-canonicalize-path-off -Xmake-dependency=0x4 -Xc-mode -Xmake-dependency-target=objs\MPC5746R_ECU\WindRiver\Dem.o -Xmake-dependency-savefile=objs\MPC5746R_ECU\WindRiver\Dem.d -Xmake-opt-key=objs\MPC5746R_ECU\WindRiver\Dem.o -MC:\WINDRI~1\COMPIL~1\DIAB-5~1.4\PPC\PPCVLE.cd -ZC:\WINDRI~1\COMPIL~1\DIAB-5~1.4\WIN32\lib\cderror.cat -Xsingle-fp -Xno-double -Xuser-specified-proc=PPCE200Z4204N3V -XPPCE200Z4 -Xname-code=.text_vle -Xname-const=.text_vle -Xname-uconst=.text_vle -Xname-string=.text_vle -Xstsw-slow -Xintrinsic-mask=0xc00041 -Xconventions-eabi -Xsoft-float -Xdouble-avoid -Xcoloring -Xapu-efpu-v2 -Xefpu-spfs -Xtarget-family=2 -Xlicense-proxy-use -Xlicense-proxy-path=C:\WINDRI~1\COMPIL~1\DIAB-5~1.4\WIN32 -Xdialect-c99 -Xforce-prototypes -Xforce-declarations -Xsmall-data=0 -Xsmall-const=0 -Xlocal-data-area=0 -Xnested-interrupts -ei4618 -g2 -Xdebug-inline-on -Xoptimized-debug-off -Xdebug-dwarf2 -Xpass-source -Xmake-dependency-canonicalize-path-off -Xmake-dependency=0x4 -Xc-mode -Xmake-dependency-target=objs\MPC5746R_ECU\WindRiver\Dem.o -Xmake-dependency-savefile=objs\MPC5746R_ECU\WindRiver\Dem.d"
	.wrcm.end
	.wrcm.end
	.wrcm.nelem "file"
	.wrcm.nstr "input", "d:\VSB_Demo\VSTAR_MPC5746R_Diab_PR_4.2.2_g_3.0_10\VSTAR\BSWs\DIAG\Dem\ssc\make\..\src\Dem.c"
	.wrcm.end
	.wrcm.end
	.wrcm.end

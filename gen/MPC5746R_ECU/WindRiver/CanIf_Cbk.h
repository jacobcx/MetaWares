/******************************************************************************
 *
 *             Copyright 2016 Mentor Graphics Corporation
 *                        All rights reserved
 *
 * THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION WHICH IS THE
 * PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS AND IS SUBJECT TO
 * LICENSE TERMS.
 *
 ******************************************************************************
 *
 * This file is automatically generated by Configuration tool.
 * Do not edit manually.
 * Generated by VSC tool Version 2.5.4
 *
 *=============================================================================
 *
 * Module:       CanIf
 *
 * File Name:    CanIf_Cbk.h
 *
 * Description:  Callback functions of Can Interface is specified in this file
 * 
 *****************************************************************************/

#ifndef CANIF_CBK_H
#define CANIF_CBK_H

/*=============================== INCLUSIONS ================================*/

#include "CanIf_Private.h"

/*============================ MACRO DEFINITIONS ============================*/

/*============================== VERSION CHECK ==============================*/

/*===================== EXTERNAL FUNCTION DECLARATIONS ======================*/

#define CANIF_START_SEC_CODE /* PRQA S 3614 */
#include "CanIf_MemMap.h" /* PRQA S 5087 */ /* KW MISRA.INCL.INSIDE */

/**
 * \brief This callout function is called whenever a CAN message is
 *  received in CAN driver.
 */
extern FUNC(void, CANIF_CODE) CanIf_RxIndication
(
    VAR(Can_HwHandleType, AUTOMATIC)            Hrh,
    VAR(CanIfCanId_t, AUTOMATIC)                CanId,
    VAR(uint8, AUTOMATIC)                       CanDlc,
    P2CONST(uint8, AUTOMATIC, CANIF_APPL_CONST) CanSduPtr
);

/**
 * \brief This service is called by the CAN Driver after a previous
 *  request for cancellation of a pending L-PDU transmit request
 *  was successfully performed, which in turn calls the 
 *  CanIf_ProcessCancelTxConf() API to initiate the 
 *  processing of the cancelled TxPdu
 *
 */
/* If CanIf_CancelTxConfirmation() API is enabled */
#if( CANIF_TX_CANCELLATION_CBK == STD_ON )
extern FUNC(void, CANIF_CODE) CanIf_CancelTxConfirmation
(
#if ( CANIF_TX_CANCELLATION_CBK_FORCE_403_API == STD_ON )
    VAR(PduIdType,AUTOMATIC)                            CanTxPduId,
    P2CONST( PduInfoType, AUTOMATIC, CANIF_APPL_CONST)  PduInfoPtr
#else
    P2CONST(Can_PduType, AUTOMATIC, CANIF_APPL_CONST)   PduInfoPtr
#endif
);
#endif

/**
 * \brief This service is implemented in the CAN Interface and called
 *  by the CAN Driver,after the CAN L-PDU has been transmitted
 *  on the CAN network,which in turn calls the 
 *  CanIf_ProcessTxConfirmation() API to report the confirmation
 *  to the upper layers
 *
 */
extern FUNC(void, CANIF_CODE) CanIf_TxConfirmation
(
    VAR(PduIdType, AUTOMATIC) CanTxPduId
);

/**
 * \brief This service indicates a CAN controller BusOff event
 *  of the corresponding CAN controller.
 *
 */
extern FUNC(void, CANIF_CODE) CanIf_ControllerBusOff
(
    VAR(uint8, AUTOMATIC) Controller_u8
);

/**
 * \brief This service indicates a controller state transition referring
 *  to the corresponding CAN controller.
 *
 */
FUNC(void, CANIF_CODE) CanIf_ControllerModeIndication
(
    VAR(uint8, AUTOMATIC)                    Controller,
    VAR(CanIf_ControllerModeType, AUTOMATIC) ControllerMode
);

/**
 * \brief This callout function is called whenever a CAN message is
 *  received in CAN driver.
 */
extern FUNC(void, CANIF_CODE) CanIf_RxIndication_Can
(
    VAR(Can_HwHandleType, AUTOMATIC)            Hrh,
    VAR(CanIfCanId_t, AUTOMATIC)                CanId,
    VAR(uint8, AUTOMATIC)                       CanDlc,
    P2CONST(uint8, AUTOMATIC, CANIF_APPL_CONST) CanSduPtr
);


/**
 * \brief This service is called by the CAN Driver after a previous
 *  request for cancellation of a pending L-PDU transmit request
 *  was successfully performed, which in turn calls the
 *  CanIf_ProcessCancelTxConf() API to initiate the
 *  processing of the cancelled TxPdu
 *
 */
/* If CanIf_CancelTxConfirmation() API is enabled */
#if( CANIF_TX_CANCELLATION_CBK == STD_ON )
extern FUNC(void, CANIF_CODE) CanIf_CancelTxConfirmation_Can
(
    P2CONST(Can_PduType, AUTOMATIC, CANIF_APPL_CONST) PduInfoPtr
);
#endif


/**
 * \brief This service is implemented in the CAN Interface and called
 *  by the CAN Driver,after the CAN L-PDU has been transmitted
 *  on the CAN network,which in turn calls the
 *  CanIf_ProcessTxConfirmation() API to report the confirmation
 *  to the upper layers
 *
 */
extern FUNC(void, CANIF_CODE) CanIf_TxConfirmation_Can
(
    VAR(PduIdType, AUTOMATIC) CanTxPduId
);


/**
 * \brief This service indicates a CAN controller BusOff event
 *  of the corresponding CAN controller.
 *
 */
extern FUNC(void, CANIF_CODE) CanIf_ControllerBusOff_Can
(
    VAR(uint8, AUTOMATIC) Controller_u8
);


/**
 * \brief This service indicates a controller state transition referring
 * to the corresponding CAN controller.
 *
 */
FUNC(void, CANIF_CODE) CanIf_ControllerModeIndication_Can
(
    VAR(uint8, AUTOMATIC)                    Controller,
    VAR(CanIf_ControllerModeType, AUTOMATIC) ControllerMode
);


/**
 * \brief This service indicates a transceiver state transition referring
 * to the corresponding CAN transceiver.
 *
 */
FUNC(void, CANIF_CODE)CanIf_TrcvModeIndication_CanTrcv_31_UJA1132
(
    VAR(uint8, AUTOMATIC)                Transceiver,
    VAR(CanTrcv_TrcvModeType, AUTOMATIC) TransceiverMode
); /* PRQA S 0777 */

/**
 * \brief This service indicates a transceiver state transition referring
 * to the corresponding CAN transceiver.
 *
 */
FUNC(void, CANIF_CODE)CanIf_TrcvModeIndication_CanTrcv_31_TJA1145
(
    VAR(uint8, AUTOMATIC)                Transceiver,
    VAR(CanTrcv_TrcvModeType, AUTOMATIC) TransceiverMode
); /* PRQA S 0777 */



/**
 * \brief this service indicated that the transceiver is running in PN
 *  communication mode referring to the corresponding CAN transceiver. 
 *
 */
FUNC(void, CANIF_CODE) CanIf_ConfirmPnAvailability_CanTrcv_31_UJA1132
(
    VAR(uint8,AUTOMATIC) TransceiverId
); /* PRQA S 0777 */

/**
 * \brief this service indicated that the transceiver is running in PN
 *  communication mode referring to the corresponding CAN transceiver. 
 *
 */
FUNC(void, CANIF_CODE) CanIf_ConfirmPnAvailability_CanTrcv_31_TJA1145
(
    VAR(uint8,AUTOMATIC) TransceiverId
); /* PRQA S 0777 */



/**
 * \brief this service indicated that the transceiver has cleared the WufFlag referring
 * to the corresponding CAN transceiver. 
 *
 */
FUNC(void, CANIF_CODE) CanIf_ClearTrcvWufFlagIndication_CanTrcv_31_UJA1132
(
    VAR(uint8,AUTOMATIC) TransceiverId
); /* PRQA S 0777 */

/**
 * \brief this service indicated that the transceiver has cleared the WufFlag referring
 * to the corresponding CAN transceiver. 
 *
 */
FUNC(void, CANIF_CODE) CanIf_ClearTrcvWufFlagIndication_CanTrcv_31_TJA1145
(
    VAR(uint8,AUTOMATIC) TransceiverId
); /* PRQA S 0777 */



/**
 * \brief this service indicated that the transceiver has Wake flag set referring
 * to the corresponding CAN transceiver. 
 *
 */
FUNC(void, CANIF_CODE) CanIf_CheckTrcvWakeFlagIndication_CanTrcv_31_UJA1132
(
    VAR(uint8,AUTOMATIC) TransceiverId
);  /* PRQA S 0777 */

/**
 * \brief this service indicated that the transceiver has Wake flag set referring
 * to the corresponding CAN transceiver. 
 *
 */
FUNC(void, CANIF_CODE) CanIf_CheckTrcvWakeFlagIndication_CanTrcv_31_TJA1145
(
    VAR(uint8,AUTOMATIC) TransceiverId
);  /* PRQA S 0777 */


#define CANIF_STOP_SEC_CODE /* PRQA S 3614 */
#include "CanIf_MemMap.h" /* PRQA S 5087 */ /* KW MISRA.INCL.INSIDE */

#endif /* CANIF_CBK_H */


/*============================== END OF FILE CanIf_Cbk.h=========================*/
